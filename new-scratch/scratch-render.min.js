(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ScratchRender"] = factory();
	else
		root["ScratchRender"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@turbowarp/nanolog/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@turbowarp/nanolog/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// only use colors in non-browser environments
const addColors = typeof document === 'undefined';

const RESET = addColors ? '\u001b[0m' : '';
const GRAY = addColors ? '\u001b[90m' : '';
const BLUE = addColors ? '\u001b[34m' : '';
const CYAN = addColors ? '\u001b[36m' : '';
const YELLOW = addColors ? '\u001b[33m' : '';
const RED = addColors ? '\u001b[31m' : '';

const DEBUG = `${BLUE}debug${RESET}`;
const INFO = `${CYAN}info${RESET}`;
const WARN = `${YELLOW}warn${RESET}`;
const ERROR = `${RED}error${RESET}`;

let enabled = false;

const createLog = (namespace = '') => {
    const log = (childNamespace) => createLog(namespace ? `${namespace} ${childNamespace}` : childNamespace);

    const formattedNamespace = namespace ? [`${GRAY}${namespace}${RESET}`] : [];

    log.debug = log.log = (...args) => {
        if (enabled) console.debug(...formattedNamespace, DEBUG, ...args);
        return log;
    };
    log.info = (...args) => {
        if (enabled) console.info(...formattedNamespace, INFO, ...args);
        return log;
    };
    log.warn = (...args) => {
        if (enabled) console.warn(...formattedNamespace, WARN, ...args);
        return log;
    };
    log.error = (...args) => {
        if (enabled) console.error(...formattedNamespace, ERROR, ...args);
        return log;
    };

    return log;
};

createLog.enable = () => {
    enabled = true;
    return createLog;
};
createLog.disable = () => {
    enabled = false;
    return createLog;
};

module.exports = createLog;


/***/ }),

/***/ "./node_modules/base64-js/lib/b64.js":
/*!*******************************************!*\
  !*** ./node_modules/base64-js/lib/b64.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}( false ? (undefined) : exports))


/***/ }),

/***/ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/Archivo-Black.ttf":
/*!**********************************************************************************************!*\
  !*** ./node_modules/base64-loader!./node_modules/scratch-render-fonts/src/Archivo-Black.ttf ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/Archivo-Regular.ttf":
/*!************************************************************************************************!*\
  !*** ./node_modules/base64-loader!./node_modules/scratch-render-fonts/src/Archivo-Regular.ttf ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/BadComic-Regular.ttf":
/*!*************************************************************************************************!*\
  !*** ./node_modules/base64-loader!./node_modules/scratch-render-fonts/src/BadComic-Regular.ttf ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/Grand9K-Pixel.ttf":
/*!**********************************************************************************************!*\
  !*** ./node_modules/base64-loader!./node_modules/scratch-render-fonts/src/Grand9K-Pixel.ttf ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/Griffy-Regular.ttf":
/*!***********************************************************************************************!*\
  !*** ./node_modules/base64-loader!./node_modules/scratch-render-fonts/src/Griffy-Regular.ttf ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/Knewave.ttf":
/*!****************************************************************************************!*\
  !*** ./node_modules/base64-loader!./node_modules/scratch-render-fonts/src/Knewave.ttf ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "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"

/***/ }),

/***/ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/MonospaceBold.ttf":
/*!**********************************************************************************************!*\
  !*** ./node_modules/base64-loader!./node_modules/scratch-render-fonts/src/MonospaceBold.ttf ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/NotoSans-Medium.ttf":
/*!************************************************************************************************!*\
  !*** ./node_modules/base64-loader!./node_modules/scratch-render-fonts/src/NotoSans-Medium.ttf ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/PressStart2P.ttf":
/*!*********************************************************************************************!*\
  !*** ./node_modules/base64-loader!./node_modules/scratch-render-fonts/src/PressStart2P.ttf ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/QTKooper.otf":
/*!*****************************************************************************************!*\
  !*** ./node_modules/base64-loader!./node_modules/scratch-render-fonts/src/QTKooper.otf ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/SourceSerifPro-Regular.otf":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/base64-loader!./node_modules/scratch-render-fonts/src/SourceSerifPro-Regular.otf ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/Xtraflexidisc.otf":
/*!**********************************************************************************************!*\
  !*** ./node_modules/base64-loader!./node_modules/scratch-render-fonts/src/Xtraflexidisc.otf ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/freecam-v2.ttf":
/*!*******************************************************************************************!*\
  !*** ./node_modules/base64-loader!./node_modules/scratch-render-fonts/src/freecam-v2.ttf ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "AAEAAAANAIAAAwBQRFNJRwAAAAEAAB1oAAAACEdERUYAZQAGAAAdcAAAACBPUy8yT9xevAAAANwAAABgY21hcJKjZw0AAB8UAAACRGdhc3AAAAADAAAdYAAAAAhnbHlmxyYn8AAAAkgAABjkaGVhZAHgrEgAABx8AAAANmhoZWEELwJPAAACBAAAACRobXR4EdUO0AAAHLQAAACsbG9jYQAD8EgAABssAAABUG1heHAAZQBMAAACKAAAACBuYW1l/LrQJgAAHZAAAAGDcG9zdAheB7AAAAE8AAAAyAADAf8BkAAFAAgBTAFmAAAARwFMAWYAAAD1ABkAhAAAAgAFCQAAAAAAAAAAAAEAAAAAAAAAAAAAAABQZkVkAEAAIAB6AeD/4AAuAgAAAAAAAAEAAAAAAf4AAAAAACAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAFMAAAABAAIARABFAEYARwBIAEkASgBLAEwATQBOAE8AUABRAFIAUwBUAFUAVgBXAFgAWQBaAFsAXABdABMAFAAVABYAFwAYABkAGgAbABwAPwAMAB0ADwAFAAQAEgAKACMAEQALAB8AQgAeABAAIgAhAAMAJAAlACYAJwAoACkAKgArACwALQAuAC8AMAAxADIAMwA0ADUANgA3ADgAOQA6ADsAPAA9AAEAAAIAAAAALgIAAEsASwG1AAEAAAAAAAAAAAAAAAAAAAADAAEAAABTAEwAEQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgBLAAIBtQH+ABcAIwAAExUjFSMVIxUjETM1MxUzESM1IzUjNSM1BzMVMxUzFSM1MzUz3CUkJCRI2kgkJCQlSEglJNokJQH+JCUkJP6VkZEBayQkJSRtJCRtbSQAAAAAAwBLAAIBtQH+AA8AFwAfAAATESE1MzUzNSM1MzUjNSM1BzMVMxUjFSMVMxUzFSMVI0sBIiQkJCQkJNq2JCS2tiQktgH+/gQkJZFIkSUkSSRIJUglSCQAAAEASwACAbUB/gAkAAA3NSM1IxEzNTM1MxUzFTMVIzUjNSMVIxEzFTM1MzUzFSMVIxUjkyQkJCTaJCRIJJIkJJIkSCQk2hQSJQFqJSQkJUgkJCT+3iQkJEglJAAAAgBLAAIBtQH+ABMAIwAAExEzNTM1MzUzNTM1IzUjNSM1IzUHMxUzFTMVMxUjFSMVIxUjS9klJCQkJCQkJZFtJCUkJCUkbQH+/gQkJSQk2iQkJSRJJCQkkiQkJAABAEsAAgG1Af4ADAAAEzUhFSEVMxUjFSEVIUsBav7e2toBIv6WAQD+SZFIkUkAAAABAEsAAgG1Af4ACgAAEzUhFSEVMxUjFSNLAWr+3traSAEA/kmRSNoAAQBLAAIBtQH+ACAAADc1IzUjETM1MzUzFTMVMxUjNSM1IxUjETMVMzUjNTMVIZMkJCQk2iQkSCSSJCS2kdn+3hQSJQFqJSQkJWxIJCT+3iRsSf4AAQBLAAIBtQH+AAwAABM1MxUzNTMRIzUjFSNLSNpISNpIAQD+2tr+BNraAAABAJMAAgFtAf4ADAAANzUzESM1MxUjETMVI5NJSdpJSdomJQFqSUn+lkkAAAEASwACAbUB/gAYAAA3NSM1IzUzFTMVMzUzESM1MxUjESMVIxUjkyQkSCRJJEjZSCQ3fxQSJUgkJCQBRklJ/pYlJAAAAQBLAAIBtQH+ADQAABM1MxUzNTM1MzUzNTM1MzUzFSMVIxUjFSMVIxUzFTMVMxUzFTMVIzUjNSM1IzUjNSM1IxUjS0gkJSQkJSRIJCQkJSQkJSQkJEgkJSQkJSRIAQD+2iUkJCQlJEkkJCQlSCUkJCRJJCUkJCQl2gAAAAEASwACAbUB/gAGAAATNTMRIRUhS0gBIv6WAQD+/k1JAAAAAAEASwACAbUB/gAcAAATNTMVMxUzFTM1MzUzNTMRIxEjFSMVIzUjNSMRI0tIJCVIJSRISCQlSCUkSAEA/iQlJCQlJP4EAWskSUkk/pUAAAAAAQBLAAIBtQH+ACAAABM1MxUzFTMVMxUzFTMVMxEzESM1IzUjNSM1IzUjNSMRI0tIJCUkJCUkSEgkJSQkJSRIAQD+JCVISUhJAWv+BCQlSElISf6VAAAAAAIASwACAbUB/gATAB8AABMVIxUjETMVMxUzNTM1MxEjNSM1BzMVMxEjFSM1IxEzkyQkJCTaJCQkJLaSJCSSJCQB/iQl/pYlJCQlAWolJEkk/t4kJAEiAAACAFQAAgGsAf4ADQAVAAATETM1MzUzNTM1IzUjNQczFTMVIxUjVEjIJCQkJMi2JCS2Af7+BNokJJElJEkkSCUAAgBUAAIBrAH+ABcAKwAAExUjFSMRMxUzFTM1MxUzNSM1MxEjNSM1BzMVMxUjNSM1IxUzFTMVIzUjETOcJCQkJH9bNiQkJCSjfiUlJDYkJGwlJQH+JCX+liUkJCRJJAFGJSRJJP4kJUkkJCQBIgAAAAIAVAACAawB/gAjACsAABMRMzUzFTMVMxUzFTMVMxUzNSM1IzUjNSM1MzUzNTM1IzUjNQczFTMVIxUjVEgSJSQkJCVIJCQlJEkkJCQkyKMlJaMB/v4E2iUkJCQlJEkkJCQlJCSRJSRJJEglAAEASwACAbUB/gAsAAA3NSM1MxUzNTM1IzUjNSM1IzUzNTM1MxUzFSM1IxUjFTMVMxUzFTMVIxUjFSNvJEi2JCS2JCQkJP4kSLYkJLYkJCQk/hQSSSQkSCUkJJElJCRJJCRIJSQkkSUkAAAAAAEASwACAbUB/gAIAAA3NSM1IRUjESPckQFqkUjc2UlJ/k0AAAEASwACAbUB/gAUAAA3NSM1IxEzETMVMzUzETMRIxUjFSOTJCRIJJIkSCQk2hQSJQGz/nEkJAGP/k0lJAAAAAABAEsAAgG1Af4AIAAANzUjNSM1IzUjETMRMxUzFTM1MzUzETMRIxUjFSMVIxUj3CUkJCRIJCVIJSRIJCQkJUgUEiUkJAFr/rkkJCQkAUf+lSQkJSQAAAAAAQBLAAIBtQH+ABgAADc1IzUjETMRMzUzFTMRMxEjFSMVIzUjFSOTJCRISUhJSCQkSUhJFBIlAbP+cbW1AY/+TSUkJCQAAAAAAQBLAAIBtQH+ADQAADc1MzUzNTM1IzUjNSM1MxUzFTMVMzUzNTM1MxUjFSMVIxUzFTMVMxUjNSM1IzUjFSMVIxUjSyQkJCQkJEgkJUglJEgkJCQkJCRIJCVIJSRIS0gkJUglJJFtJCQkJG2RJCVIJSSRbSQkJCRtAAAAAAEASwACAbUB/gAgAAA3NSM1IzUjNSM1MxUzFTMVMzUzNTM1MxUjFSMVIxUjFSPcJSQkJEgkJUglJEgkJCQlSF1aJSQk2rUlJCQltdokJCW1AAAAAAEASwACAbUB/gAoAAA3NTM1MzUzNTM1MzUzNTM1MzUhNSEVIxUjFSMVIxUjFSMVIxUjFSEVIUskJCQlJCQlJP7eAWokJCQlJCQlJAEi/pZLSCQlJCQlJCQkSZEkJSQkJSQkJEkAAAAAAgBLAAIBtQH+ABMAHwAAExUjFSMRMxUzFTM1MzUzESM1IzUHMxUzESMVIzUjETOTJCQkJNokJCQktpIkJJIkJAH+JCX+liUkJCUBaiUkSST+3iQkASIAAAEAkwACAW0B/gAOAAA3NTMRIzUzNTM1MxEzFSOTSUkkJUhJ2iYlASJIJST+TUkAAAEASwACAbUB/gAyAAA3NTM1MzUzNTM1MzUzNTM1MzUjNSMVIxUjNTM1MzUzFTMVMxUjFSMVIxUjFSMVIxUzFSFLJCQkJSQkJSQkbSVsJCTaJCQkJCQlJCTZ/pYmJSQkJCUkJCVIJCQkSCUkJCWRJCQlJCQkSQAAAAEASwACAbUB/gAwAAA3NSM1IzUzFTMVMzUzNSM1IzUzNTM1IzUjFSMVIzUzNTM1MxUzFTMVIxUzFSMVIxUjkyQkSCSSJCRtbSQkkiRIJCTaJCQkJCQk2hQSJUgkJCRIJUglSCQkJEglJCQlkUiRJSQAAAAAAgBLAAIBtQH+ABUAHwAAARUjFSMVIxUjFSMVIxUzFTM1MzUjEQczFSM1MzUzNTMBJCQkJSQkJNlJSEhtJJEkJSQB/iQlJCQkJZGRkUkBIpGRJCQlAAAAAAEASwACAbUB/gAgAAA3NSM1IzUzFTMVMzUzNSM1IzUhFSEVMxUzFTMVIxUjFSOTJCRIJJIkJP4Bav7e2iQkJCTaFBIlSCQkJJEk2klIJCXZJSQAAAIASwACAbUB/gAhACsAABMVIxUjETMVMxUzNTM1MzUjNSM1IzUzNTMVMxUzNSM1IzUDMxUzFSMVIzUjkyQkJCTaJCQkJNokkiRIJCTatiQkkiQB/iQl/pYlJCQlkSQkbSQkJEglJP7eJUgkJAAAAAABAEsAAgG1Af4AFgAANzUzNTM1MzUzNSE1IRUjFSMVIxUjFSPcJCQlJP7eAWokJCQlSJORJSQkJEmRJCUk/gAAAwBLAAIBtQH+ABsAJwAzAAATFSMVIxUzFSMVMxUzFTM1MzUzNSM1MzUjNSM1BzMVMxUjFSM1IzUzFTMVMxUjFSM1IzUzkyQkJCQkJNokJCQkJCS2kiQkkiQkkiQkkiQkAf4kJZFIkSUkJCWRSJElJEkkSCUlSLUlSCQkSAAAAAACAEsAAgG1Af4AIQArAAATFSMVIxUzFTMVMxUjFSM1IzUjFTMVMxUzNTM1MxEjNSM1BzMVMxUjNSM1M5MkJCQk2iSSJEgkJNokJCQktpIktiQkAf4kJZEkJG0kJCRIJSQkJQFqJSRJJG0lSAABAEsASwG1AbUAJAAAJTUjNSM1IzUjNSM1IzUjNSM1IxUzFTMVMxUzFTMVMxUzFTMVMwG1JCQkJSQkJSRIJCQkJSQkJSRIbyQkJSQkJSQkJEgkJSQkJSQkJAAAAAEApQAUAVsB7AAcAAA3NTM1MzUzNSM1IzUjNSMVMxUzFTMVIxUjFSMVM9w2JCUlJDY3JSQkJCQlNyYTJCT+JCQlJSQk/iQkJQAAAAACANwASwEkAbUABAAJAAA3NTMVIxE1MxUj3EhISEhvJEgBRiRIAAAAAQC3AAABSQCRAAwAADc1MzUzNTMVIxUjFSO3JSRJJSRJEhIlSEglJAAAAAACAG8BJgGRAgAADAAZAAATNSM1MzUzFTMVIxUjNzUjNTM1MxUzFSMVI5MkJCQlJSS2JSUkJCQkAV02SSQkSW03NkkkJEltAAACANwAAgEkAf4ABAAJAAA3NTMVIxE1MxEj3EhISEgmJUkBR7X+lQAAAQBLAEsBtQG1ACQAADc1MzUzNTM1MzUzNTM1MzUzNTMVIxUjFSMVIxUjFSMVIxUjFSNLJCQkJSQkJSRIJCQkJSQkJSRIbyQkJSQkJSQkJEgkJSQkJSQkJAAAAAABAMoBJgE2AgAAEAAAEzUzNSM1IzUzNTMVMxUjFSPuJCQkJCQkJCQBORJIJCUkJJElAAAAEQBLACYBtQHaAAMABwALAA8AEwAXACMAJwArAC8AMwA3ADsAPwBDAEcASwAAExUzNRUVMzUVFTM1FRUzNQcjFTMjIxUzJzUjFSMVMxUjFTMVJyMVMyc1IxU3MzUjNSMVMyMjFTMjIxUzMRUzNRUVMzUVFTM1MTM1I7eSJCQkJCQkJCQkJCUkJCQkJElJSSQkSUkkJCQkJCQkJCQktiQkAdolJSUkJCQkJCSRkZElJCS2JCUkJCUlJSVtbW0kSCQk2iQkJCQkJCUlJAAAAQDcAAABJABJAAQAADc1MxUj3EhIJCVJAAAAAAEApQAUAVsB7AAcAAAlNSM1IzUjNTM1MzUzNTMVIxUjFSMVMxUzFTMVIwEkNiQlJSQ2NyUkJCQkJTcmEyQk/iQkJSUkJP4kJCUAAAABAG8AAgGRAf4AMAAAJTUjNSM1IzUjNSM1IzUzNTM1MzUzNTM1MzUzFSMVIxUjFSMVIxUzFTMVMxUzFTMVIwFJJSQk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"

/***/ }),

/***/ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/handlee-regular.ttf":
/*!************************************************************************************************!*\
  !*** ./node_modules/base64-loader!./node_modules/scratch-render-fonts/src/handlee-regular.ttf ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/buffer/node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/buffer/node_modules/base64-js/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/buffer/node_modules/base64-js/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/css-tree/data/index.js":
/*!*********************************************!*\
  !*** ./node_modules/css-tree/data/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const mdnAtrules = __webpack_require__(/*! mdn-data/css/at-rules.json */ "./node_modules/mdn-data/css/at-rules.json");
const mdnProperties = __webpack_require__(/*! mdn-data/css/properties.json */ "./node_modules/mdn-data/css/properties.json");
const mdnSyntaxes = __webpack_require__(/*! mdn-data/css/syntaxes.json */ "./node_modules/mdn-data/css/syntaxes.json");
const patch = __webpack_require__(/*! ./patch.json */ "./node_modules/css-tree/data/patch.json");
const extendSyntax = /^\s*\|\s*/;

function preprocessAtrules(dict) {
    const result = Object.create(null);

    for (const atruleName in dict) {
        const atrule = dict[atruleName];
        let descriptors = null;

        if (atrule.descriptors) {
            descriptors = Object.create(null);

            for (const descriptor in atrule.descriptors) {
                descriptors[descriptor] = atrule.descriptors[descriptor].syntax;
            }
        }

        result[atruleName.substr(1)] = {
            prelude: atrule.syntax.trim().match(/^@\S+\s+([^;\{]*)/)[1].trim() || null,
            descriptors
        };
    }

    return result;
}

function patchDictionary(dict, patchDict) {
    const result = {};

    // copy all syntaxes for an original dict
    for (const key in dict) {
        result[key] = dict[key].syntax || dict[key];
    }

    // apply a patch
    for (const key in patchDict) {
        if (key in dict) {
            if (patchDict[key].syntax) {
                result[key] = extendSyntax.test(patchDict[key].syntax)
                    ? result[key] + ' ' + patchDict[key].syntax.trim()
                    : patchDict[key].syntax;
            } else {
                delete result[key];
            }
        } else {
            if (patchDict[key].syntax) {
                result[key] = patchDict[key].syntax.replace(extendSyntax, '');
            }
        }
    }

    return result;
}

function unpackSyntaxes(dict) {
    const result = {};

    for (const key in dict) {
        result[key] = dict[key].syntax;
    }

    return result;
}

function patchAtrules(dict, patchDict) {
    const result = {};

    // copy all syntaxes for an original dict
    for (const key in dict) {
        const patchDescriptors = (patchDict[key] && patchDict[key].descriptors) || null;

        result[key] = {
            prelude: key in patchDict && 'prelude' in patchDict[key]
                ? patchDict[key].prelude
                : dict[key].prelude || null,
            descriptors: dict[key].descriptors
                ? patchDictionary(dict[key].descriptors, patchDescriptors || {})
                : patchDescriptors && unpackSyntaxes(patchDescriptors)
        };
    }

    // apply a patch
    for (const key in patchDict) {
        if (!hasOwnProperty.call(dict, key)) {
            result[key] = {
                prelude: patchDict[key].prelude || null,
                descriptors: patchDict[key].descriptors && unpackSyntaxes(patchDict[key].descriptors)
            };
        }
    }

    return result;
}

module.exports = {
    types: patchDictionary(mdnSyntaxes, patch.syntaxes),
    atrules: patchAtrules(preprocessAtrules(mdnAtrules), patch.atrules),
    properties: patchDictionary(mdnProperties, patch.properties)
};


/***/ }),

/***/ "./node_modules/css-tree/data/patch.json":
/*!***********************************************!*\
  !*** ./node_modules/css-tree/data/patch.json ***!
  \***********************************************/
/*! exports provided: atrules, properties, syntaxes, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"atrules\":{\"charset\":{\"prelude\":\"<string>\"},\"font-face\":{\"descriptors\":{\"unicode-range\":{\"comment\":\"replaces <unicode-range>, an old production name\",\"syntax\":\"<urange>#\"}}}},\"properties\":{\"-moz-background-clip\":{\"comment\":\"deprecated syntax in old Firefox, https://developer.mozilla.org/en/docs/Web/CSS/background-clip\",\"syntax\":\"padding | border\"},\"-moz-border-radius-bottomleft\":{\"comment\":\"https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius\",\"syntax\":\"<'border-bottom-left-radius'>\"},\"-moz-border-radius-bottomright\":{\"comment\":\"https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius\",\"syntax\":\"<'border-bottom-right-radius'>\"},\"-moz-border-radius-topleft\":{\"comment\":\"https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius\",\"syntax\":\"<'border-top-left-radius'>\"},\"-moz-border-radius-topright\":{\"comment\":\"https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius\",\"syntax\":\"<'border-bottom-right-radius'>\"},\"-moz-control-character-visibility\":{\"comment\":\"firefox specific keywords, https://bugzilla.mozilla.org/show_bug.cgi?id=947588\",\"syntax\":\"visible | hidden\"},\"-moz-osx-font-smoothing\":{\"comment\":\"misssed old syntax https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth\",\"syntax\":\"auto | grayscale\"},\"-moz-user-select\":{\"comment\":\"https://developer.mozilla.org/en-US/docs/Web/CSS/user-select\",\"syntax\":\"none | text | all | -moz-none\"},\"-ms-flex-align\":{\"comment\":\"misssed old syntax implemented in IE, https://www.w3.org/TR/2012/WD-css3-flexbox-20120322/#flex-align\",\"syntax\":\"start | end | center | baseline | stretch\"},\"-ms-flex-item-align\":{\"comment\":\"misssed old syntax implemented in IE, https://www.w3.org/TR/2012/WD-css3-flexbox-20120322/#flex-align\",\"syntax\":\"auto | start | end | center | baseline | stretch\"},\"-ms-flex-line-pack\":{\"comment\":\"misssed old syntax implemented in IE, https://www.w3.org/TR/2012/WD-css3-flexbox-20120322/#flex-line-pack\",\"syntax\":\"start | end | center | justify | distribute | stretch\"},\"-ms-flex-negative\":{\"comment\":\"misssed old syntax implemented in IE; TODO: find references for comfirmation\",\"syntax\":\"<'flex-shrink'>\"},\"-ms-flex-pack\":{\"comment\":\"misssed old syntax implemented in IE, https://www.w3.org/TR/2012/WD-css3-flexbox-20120322/#flex-pack\",\"syntax\":\"start | end | center | justify | distribute\"},\"-ms-flex-order\":{\"comment\":\"misssed old syntax implemented in IE; https://msdn.microsoft.com/en-us/library/jj127303(v=vs.85).aspx\",\"syntax\":\"<integer>\"},\"-ms-flex-positive\":{\"comment\":\"misssed old syntax implemented in IE; TODO: find references for comfirmation\",\"syntax\":\"<'flex-grow'>\"},\"-ms-flex-preferred-size\":{\"comment\":\"misssed old syntax implemented in IE; TODO: find references for comfirmation\",\"syntax\":\"<'flex-basis'>\"},\"-ms-interpolation-mode\":{\"comment\":\"https://msdn.microsoft.com/en-us/library/ff521095(v=vs.85).aspx\",\"syntax\":\"nearest-neighbor | bicubic\"},\"-ms-grid-column-align\":{\"comment\":\"add this property first since it uses as fallback for flexbox, https://msdn.microsoft.com/en-us/library/windows/apps/hh466338.aspx\",\"syntax\":\"start | end | center | stretch\"},\"-ms-grid-row-align\":{\"comment\":\"add this property first since it uses as fallback for flexbox, https://msdn.microsoft.com/en-us/library/windows/apps/hh466348.aspx\",\"syntax\":\"start | end | center | stretch\"},\"-ms-hyphenate-limit-last\":{\"comment\":\"misssed old syntax implemented in IE; https://www.w3.org/TR/css-text-4/#hyphenate-line-limits\",\"syntax\":\"none | always | column | page | spread\"},\"-webkit-appearance\":{\"comment\":\"webkit specific keywords\",\"references\":[\"http://css-infos.net/property/-webkit-appearance\"],\"syntax\":\"none | button | button-bevel | caps-lock-indicator | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbargripper-horizontal | scrollbargripper-vertical | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button\"},\"-webkit-background-clip\":{\"comment\":\"https://developer.mozilla.org/en/docs/Web/CSS/background-clip\",\"syntax\":\"[ <box> | border | padding | content | text ]#\"},\"-webkit-column-break-after\":{\"comment\":\"added, http://help.dottoro.com/lcrthhhv.php\",\"syntax\":\"always | auto | avoid\"},\"-webkit-column-break-before\":{\"comment\":\"added, http://help.dottoro.com/lcxquvkf.php\",\"syntax\":\"always | auto | avoid\"},\"-webkit-column-break-inside\":{\"comment\":\"added, http://help.dottoro.com/lclhnthl.php\",\"syntax\":\"always | auto | avoid\"},\"-webkit-font-smoothing\":{\"comment\":\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth\",\"syntax\":\"auto | none | antialiased | subpixel-antialiased\"},\"-webkit-mask-box-image\":{\"comment\":\"missed; https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-mask-box-image\",\"syntax\":\"[ <url> | <gradient> | none ] [ <length-percentage>{4} <-webkit-mask-box-repeat>{2} ]?\"},\"-webkit-print-color-adjust\":{\"comment\":\"missed\",\"references\":[\"https://developer.mozilla.org/en/docs/Web/CSS/-webkit-print-color-adjust\"],\"syntax\":\"economy | exact\"},\"-webkit-text-security\":{\"comment\":\"missed; http://help.dottoro.com/lcbkewgt.php\",\"syntax\":\"none | circle | disc | square\"},\"-webkit-user-drag\":{\"comment\":\"missed; http://help.dottoro.com/lcbixvwm.php\",\"syntax\":\"none | element | auto\"},\"-webkit-user-select\":{\"comment\":\"auto is supported by old webkit, https://developer.mozilla.org/en-US/docs/Web/CSS/user-select\",\"syntax\":\"auto | none | text | all\"},\"alignment-baseline\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/text.html#AlignmentBaselineProperty\"],\"syntax\":\"auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical\"},\"baseline-shift\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/text.html#BaselineShiftProperty\"],\"syntax\":\"baseline | sub | super | <svg-length>\"},\"behavior\":{\"comment\":\"added old IE property https://msdn.microsoft.com/en-us/library/ms530723(v=vs.85).aspx\",\"syntax\":\"<url>+\"},\"clip-rule\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/masking.html#ClipRuleProperty\"],\"syntax\":\"nonzero | evenodd\"},\"cue\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"<'cue-before'> <'cue-after'>?\"},\"cue-after\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"<url> <decibel>? | none\"},\"cue-before\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"<url> <decibel>? | none\"},\"cursor\":{\"comment\":\"added legacy keywords: hand, -webkit-grab. -webkit-grabbing, -webkit-zoom-in, -webkit-zoom-out, -moz-grab, -moz-grabbing, -moz-zoom-in, -moz-zoom-out\",\"references\":[\"https://www.sitepoint.com/css3-cursor-styles/\"],\"syntax\":\"[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing | hand | -webkit-grab | -webkit-grabbing | -webkit-zoom-in | -webkit-zoom-out | -moz-grab | -moz-grabbing | -moz-zoom-in | -moz-zoom-out ] ]\"},\"display\":{\"comment\":\"extended with -ms-flexbox\",\"syntax\":\"| <-non-standard-display>\"},\"position\":{\"comment\":\"extended with -webkit-sticky\",\"syntax\":\"| -webkit-sticky\"},\"dominant-baseline\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/text.html#DominantBaselineProperty\"],\"syntax\":\"auto | use-script | no-change | reset-size | ideographic | alphabetic | hanging | mathematical | central | middle | text-after-edge | text-before-edge\"},\"image-rendering\":{\"comment\":\"extended with <-non-standard-image-rendering>, added SVG keywords optimizeSpeed and optimizeQuality\",\"references\":[\"https://developer.mozilla.org/en/docs/Web/CSS/image-rendering\",\"https://www.w3.org/TR/SVG/painting.html#ImageRenderingProperty\"],\"syntax\":\"| optimizeSpeed | optimizeQuality | <-non-standard-image-rendering>\"},\"fill\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#FillProperty\"],\"syntax\":\"<paint>\"},\"fill-opacity\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#FillProperty\"],\"syntax\":\"<number-zero-one>\"},\"fill-rule\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#FillProperty\"],\"syntax\":\"nonzero | evenodd\"},\"filter\":{\"comment\":\"extend with IE legacy syntaxes\",\"syntax\":\"| <-ms-filter-function-list>\"},\"glyph-orientation-horizontal\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/text.html#GlyphOrientationHorizontalProperty\"],\"syntax\":\"<angle>\"},\"glyph-orientation-vertical\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/text.html#GlyphOrientationVerticalProperty\"],\"syntax\":\"<angle>\"},\"kerning\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/text.html#KerningProperty\"],\"syntax\":\"auto | <svg-length>\"},\"letter-spacing\":{\"comment\":\"fix syntax <length> -> <length-percentage>\",\"references\":[\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/letter-spacing\"],\"syntax\":\"normal | <length-percentage>\"},\"marker\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#MarkerProperties\"],\"syntax\":\"none | <url>\"},\"marker-end\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#MarkerProperties\"],\"syntax\":\"none | <url>\"},\"marker-mid\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#MarkerProperties\"],\"syntax\":\"none | <url>\"},\"marker-start\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#MarkerProperties\"],\"syntax\":\"none | <url>\"},\"max-width\":{\"comment\":\"fix auto -> none (https://github.com/mdn/data/pull/431); extend by non-standard width keywords https://developer.mozilla.org/en-US/docs/Web/CSS/max-width\",\"syntax\":\"none | <length-percentage> | min-content | max-content | fit-content(<length-percentage>) | <-non-standard-width>\"},\"width\":{\"comment\":\"per spec fit-content should be a function, however browsers are supporting it as a keyword (https://github.com/csstree/stylelint-validator/issues/29)\",\"syntax\":\"| fit-content | -moz-fit-content | -webkit-fit-content\"},\"min-width\":{\"comment\":\"extend by non-standard width keywords https://developer.mozilla.org/en-US/docs/Web/CSS/width\",\"syntax\":\"auto | <length-percentage> | min-content | max-content | fit-content(<length-percentage>) | <-non-standard-width>\"},\"overflow\":{\"comment\":\"extend by vendor keywords https://developer.mozilla.org/en-US/docs/Web/CSS/overflow\",\"syntax\":\"| <-non-standard-overflow>\"},\"pause\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"<'pause-before'> <'pause-after'>?\"},\"pause-after\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"<time> | none | x-weak | weak | medium | strong | x-strong\"},\"pause-before\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"<time> | none | x-weak | weak | medium | strong | x-strong\"},\"rest\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"<'rest-before'> <'rest-after'>?\"},\"rest-after\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"<time> | none | x-weak | weak | medium | strong | x-strong\"},\"rest-before\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"<time> | none | x-weak | weak | medium | strong | x-strong\"},\"shape-rendering\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#ShapeRenderingPropert\"],\"syntax\":\"auto | optimizeSpeed | crispEdges | geometricPrecision\"},\"src\":{\"comment\":\"added @font-face's src property https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src\",\"syntax\":\"[ <url> [ format( <string># ) ]? | local( <family-name> ) ]#\"},\"speak\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"auto | none | normal\"},\"speak-as\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"normal | spell-out || digits || [ literal-punctuation | no-punctuation ]\"},\"stroke\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#StrokeProperties\"],\"syntax\":\"<paint>\"},\"stroke-dasharray\":{\"comment\":\"added SVG property; a list of comma and/or white space separated <length>s and <percentage>s\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#StrokeProperties\"],\"syntax\":\"none | [ <svg-length>+ ]#\"},\"stroke-dashoffset\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#StrokeProperties\"],\"syntax\":\"<svg-length>\"},\"stroke-linecap\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#StrokeProperties\"],\"syntax\":\"butt | round | square\"},\"stroke-linejoin\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#StrokeProperties\"],\"syntax\":\"miter | round | bevel\"},\"stroke-miterlimit\":{\"comment\":\"added SVG property (<miterlimit> = <number-one-or-greater>) \",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#StrokeProperties\"],\"syntax\":\"<number-one-or-greater>\"},\"stroke-opacity\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#StrokeProperties\"],\"syntax\":\"<number-zero-one>\"},\"stroke-width\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/painting.html#StrokeProperties\"],\"syntax\":\"<svg-length>\"},\"text-anchor\":{\"comment\":\"added SVG property\",\"references\":[\"https://www.w3.org/TR/SVG/text.html#TextAlignmentProperties\"],\"syntax\":\"start | middle | end\"},\"unicode-bidi\":{\"comment\":\"added prefixed keywords https://developer.mozilla.org/en-US/docs/Web/CSS/unicode-bidi\",\"syntax\":\"| -moz-isolate | -moz-isolate-override | -moz-plaintext | -webkit-isolate | -webkit-isolate-override | -webkit-plaintext\"},\"unicode-range\":{\"comment\":\"added missed property https://developer.mozilla.org/en-US/docs/Web/CSS/%40font-face/unicode-range\",\"syntax\":\"<urange>#\"},\"voice-balance\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"<number> | left | center | right | leftwards | rightwards\"},\"voice-duration\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"auto | <time>\"},\"voice-family\":{\"comment\":\"<name> -> <family-name>, https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"[ [ <family-name> | <generic-voice> ] , ]* [ <family-name> | <generic-voice> ] | preserve\"},\"voice-pitch\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"<frequency> && absolute | [ [ x-low | low | medium | high | x-high ] || [ <frequency> | <semitones> | <percentage> ] ]\"},\"voice-range\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"<frequency> && absolute | [ [ x-low | low | medium | high | x-high ] || [ <frequency> | <semitones> | <percentage> ] ]\"},\"voice-rate\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"[ normal | x-slow | slow | medium | fast | x-fast ] || <percentage>\"},\"voice-stress\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"normal | strong | moderate | none | reduced\"},\"voice-volume\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#property-index\",\"syntax\":\"silent | [ [ x-soft | soft | medium | loud | x-loud ] || <decibel> ]\"},\"writing-mode\":{\"comment\":\"extend with SVG keywords\",\"syntax\":\"| <svg-writing-mode>\"}},\"syntaxes\":{\"-legacy-gradient\":{\"comment\":\"added collection of legacy gradient syntaxes\",\"syntax\":\"<-webkit-gradient()> | <-legacy-linear-gradient> | <-legacy-repeating-linear-gradient> | <-legacy-radial-gradient> | <-legacy-repeating-radial-gradient>\"},\"-legacy-linear-gradient\":{\"comment\":\"like standard syntax but w/o `to` keyword https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient\",\"syntax\":\"-moz-linear-gradient( <-legacy-linear-gradient-arguments> ) | -webkit-linear-gradient( <-legacy-linear-gradient-arguments> ) | -o-linear-gradient( <-legacy-linear-gradient-arguments> )\"},\"-legacy-repeating-linear-gradient\":{\"comment\":\"like standard syntax but w/o `to` keyword https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient\",\"syntax\":\"-moz-repeating-linear-gradient( <-legacy-linear-gradient-arguments> ) | -webkit-repeating-linear-gradient( <-legacy-linear-gradient-arguments> ) | -o-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )\"},\"-legacy-linear-gradient-arguments\":{\"comment\":\"like standard syntax but w/o `to` keyword https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient\",\"syntax\":\"[ <angle> | <side-or-corner> ]? , <color-stop-list>\"},\"-legacy-radial-gradient\":{\"comment\":\"deprecated syntax that implemented by some browsers https://www.w3.org/TR/2011/WD-css3-images-20110908/#radial-gradients\",\"syntax\":\"-moz-radial-gradient( <-legacy-radial-gradient-arguments> ) | -webkit-radial-gradient( <-legacy-radial-gradient-arguments> ) | -o-radial-gradient( <-legacy-radial-gradient-arguments> )\"},\"-legacy-repeating-radial-gradient\":{\"comment\":\"deprecated syntax that implemented by some browsers https://www.w3.org/TR/2011/WD-css3-images-20110908/#radial-gradients\",\"syntax\":\"-moz-repeating-radial-gradient( <-legacy-radial-gradient-arguments> ) | -webkit-repeating-radial-gradient( <-legacy-radial-gradient-arguments> ) | -o-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )\"},\"-legacy-radial-gradient-arguments\":{\"comment\":\"deprecated syntax that implemented by some browsers https://www.w3.org/TR/2011/WD-css3-images-20110908/#radial-gradients\",\"syntax\":\"[ <position> , ]? [ [ [ <-legacy-radial-gradient-shape> || <-legacy-radial-gradient-size> ] | [ <length> | <percentage> ]{2} ] , ]? <color-stop-list>\"},\"-legacy-radial-gradient-size\":{\"comment\":\"before a standard it contains 2 extra keywords (`contain` and `cover`) https://www.w3.org/TR/2011/WD-css3-images-20110908/#ltsize\",\"syntax\":\"closest-side | closest-corner | farthest-side | farthest-corner | contain | cover\"},\"-legacy-radial-gradient-shape\":{\"comment\":\"define to double sure it doesn't extends in future https://www.w3.org/TR/2011/WD-css3-images-20110908/#ltshape\",\"syntax\":\"circle | ellipse\"},\"-non-standard-font\":{\"comment\":\"non standard fonts\",\"references\":[\"https://webkit.org/blog/3709/using-the-system-font-in-web-content/\"],\"syntax\":\"-apple-system-body | -apple-system-headline | -apple-system-subheadline | -apple-system-caption1 | -apple-system-caption2 | -apple-system-footnote | -apple-system-short-body | -apple-system-short-headline | -apple-system-short-subheadline | -apple-system-short-caption1 | -apple-system-short-footnote | -apple-system-tall-body\"},\"-non-standard-color\":{\"comment\":\"non standard colors\",\"references\":[\"http://cssdot.ru/%D0%A1%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D1%87%D0%BD%D0%B8%D0%BA_CSS/color-i305.html\",\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Mozilla_Color_Preference_Extensions\"],\"syntax\":\"-moz-ButtonDefault | -moz-ButtonHoverFace | -moz-ButtonHoverText | -moz-CellHighlight | -moz-CellHighlightText | -moz-Combobox | -moz-ComboboxText | -moz-Dialog | -moz-DialogText | -moz-dragtargetzone | -moz-EvenTreeRow | -moz-Field | -moz-FieldText | -moz-html-CellHighlight | -moz-html-CellHighlightText | -moz-mac-accentdarkestshadow | -moz-mac-accentdarkshadow | -moz-mac-accentface | -moz-mac-accentlightesthighlight | -moz-mac-accentlightshadow | -moz-mac-accentregularhighlight | -moz-mac-accentregularshadow | -moz-mac-chrome-active | -moz-mac-chrome-inactive | -moz-mac-focusring | -moz-mac-menuselect | -moz-mac-menushadow | -moz-mac-menutextselect | -moz-MenuHover | -moz-MenuHoverText | -moz-MenuBarText | -moz-MenuBarHoverText | -moz-nativehyperlinktext | -moz-OddTreeRow | -moz-win-communicationstext | -moz-win-mediatext | -moz-activehyperlinktext | -moz-default-background-color | -moz-default-color | -moz-hyperlinktext | -moz-visitedhyperlinktext | -webkit-activelink | -webkit-focus-ring-color | -webkit-link | -webkit-text\"},\"-non-standard-image-rendering\":{\"comment\":\"non-standard keywords http://phrogz.net/tmp/canvas_image_zoom.html\",\"syntax\":\"optimize-contrast | -moz-crisp-edges | -o-crisp-edges | -webkit-optimize-contrast\"},\"-non-standard-overflow\":{\"comment\":\"non-standard keywords https://developer.mozilla.org/en-US/docs/Web/CSS/overflow\",\"syntax\":\"-moz-scrollbars-none | -moz-scrollbars-horizontal | -moz-scrollbars-vertical | -moz-hidden-unscrollable\"},\"-non-standard-width\":{\"comment\":\"non-standard keywords https://developer.mozilla.org/en-US/docs/Web/CSS/width\",\"syntax\":\"fill-available | min-intrinsic | intrinsic | -moz-available | -moz-fit-content | -moz-min-content | -moz-max-content | -webkit-min-content | -webkit-max-content\"},\"-webkit-gradient()\":{\"comment\":\"first Apple proposal gradient syntax https://webkit.org/blog/175/introducing-css-gradients/ - TODO: simplify when after match algorithm improvement ( [, point, radius | , point] -> [, radius]? , point )\",\"syntax\":\"-webkit-gradient( <-webkit-gradient-type>, <-webkit-gradient-point> [, <-webkit-gradient-point> | , <-webkit-gradient-radius>, <-webkit-gradient-point> ] [, <-webkit-gradient-radius>]? [, <-webkit-gradient-color-stop>]* )\"},\"-webkit-gradient-color-stop\":{\"comment\":\"first Apple proposal gradient syntax https://webkit.org/blog/175/introducing-css-gradients/\",\"syntax\":\"from( <color> ) | color-stop( [ <number-zero-one> | <percentage> ] , <color> ) | to( <color> )\"},\"-webkit-gradient-point\":{\"comment\":\"first Apple proposal gradient syntax https://webkit.org/blog/175/introducing-css-gradients/\",\"syntax\":\"[ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ]\"},\"-webkit-gradient-radius\":{\"comment\":\"first Apple proposal gradient syntax https://webkit.org/blog/175/introducing-css-gradients/\",\"syntax\":\"<length> | <percentage>\"},\"-webkit-gradient-type\":{\"comment\":\"first Apple proposal gradient syntax https://webkit.org/blog/175/introducing-css-gradients/\",\"syntax\":\"linear | radial\"},\"-webkit-mask-box-repeat\":{\"comment\":\"missed; https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-mask-box-image\",\"syntax\":\"repeat | stretch | round\"},\"-webkit-mask-clip-style\":{\"comment\":\"missed; there is no enough information about `-webkit-mask-clip` property, but looks like all those keywords are working\",\"syntax\":\"border | border-box | padding | padding-box | content | content-box | text\"},\"-ms-filter-function-list\":{\"comment\":\"https://developer.mozilla.org/en-US/docs/Web/CSS/-ms-filter\",\"syntax\":\"<-ms-filter-function>+\"},\"-ms-filter-function\":{\"comment\":\"https://developer.mozilla.org/en-US/docs/Web/CSS/-ms-filter\",\"syntax\":\"<-ms-filter-function-progid> | <-ms-filter-function-legacy>\"},\"-ms-filter-function-progid\":{\"comment\":\"https://developer.mozilla.org/en-US/docs/Web/CSS/-ms-filter\",\"syntax\":\"'progid:' [ <ident-token> '.' ]* [ <ident-token> | <function-token> <any-value>? ) ]\"},\"-ms-filter-function-legacy\":{\"comment\":\"https://developer.mozilla.org/en-US/docs/Web/CSS/-ms-filter\",\"syntax\":\"<ident-token> | <function-token> <any-value>? )\"},\"-ms-filter\":{\"syntax\":\"<string>\"},\"age\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#voice-family\",\"syntax\":\"child | young | old\"},\"attr-name\":{\"syntax\":\"<wq-name>\"},\"attr-fallback\":{\"syntax\":\"<any-value>\"},\"border-radius\":{\"comment\":\"missed, https://drafts.csswg.org/css-backgrounds-3/#the-border-radius\",\"syntax\":\"<length-percentage>{1,2}\"},\"bottom\":{\"comment\":\"missed; not sure we should add it, but no others except `shape` is using it so it's ok for now; https://drafts.fxtf.org/css-masking-1/#funcdef-clip-rect\",\"syntax\":\"<length> | auto\"},\"content-list\":{\"comment\":\"missed -> https://drafts.csswg.org/css-content/#typedef-content-list (document-url, <target> and leader() is omitted util stabilization)\",\"syntax\":\"[ <string> | contents | <image> | <quote> | <target> | <leader()> | <attr()> | counter( <ident>, <'list-style-type'>? ) ]+\"},\"element()\":{\"comment\":\"https://drafts.csswg.org/css-gcpm/#element-syntax & https://drafts.csswg.org/css-images-4/#element-notation\",\"syntax\":\"element( <custom-ident> , [ first | start | last | first-except ]? ) | element( <id-selector> )\"},\"generic-voice\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#voice-family\",\"syntax\":\"[ <age>? <gender> <integer>? ]\"},\"gender\":{\"comment\":\"https://www.w3.org/TR/css3-speech/#voice-family\",\"syntax\":\"male | female | neutral\"},\"generic-family\":{\"comment\":\"added -apple-system\",\"references\":[\"https://webkit.org/blog/3709/using-the-system-font-in-web-content/\"],\"syntax\":\"| -apple-system\"},\"gradient\":{\"comment\":\"added legacy syntaxes support\",\"syntax\":\"| <-legacy-gradient>\"},\"left\":{\"comment\":\"missed; not sure we should add it, but no others except `shape` is using it so it's ok for now; https://drafts.fxtf.org/css-masking-1/#funcdef-clip-rect\",\"syntax\":\"<length> | auto\"},\"mask-image\":{\"comment\":\"missed; https://drafts.fxtf.org/css-masking-1/#the-mask-image\",\"syntax\":\"<mask-reference>#\"},\"name-repeat\":{\"comment\":\"missed, and looks like obsolete, keep it as is since other property syntaxes should be changed too; https://www.w3.org/TR/2015/WD-css-grid-1-20150917/#typedef-name-repeat\",\"syntax\":\"repeat( [ <positive-integer> | auto-fill ], <line-names>+)\"},\"named-color\":{\"comment\":\"added non standard color names\",\"syntax\":\"| <-non-standard-color>\"},\"paint\":{\"comment\":\"used by SVG https://www.w3.org/TR/SVG/painting.html#SpecifyingPaint\",\"syntax\":\"none | <color> | <url> [ none | <color> ]? | context-fill | context-stroke\"},\"page-size\":{\"comment\":\"https://www.w3.org/TR/css-page-3/#typedef-page-size-page-size\",\"syntax\":\"A5 | A4 | A3 | B5 | B4 | JIS-B5 | JIS-B4 | letter | legal | ledger\"},\"ratio\":{\"comment\":\"missed, https://drafts.csswg.org/mediaqueries-4/#typedef-ratio\",\"syntax\":\"<integer> / <integer>\"},\"right\":{\"comment\":\"missed; not sure we should add it, but no others except `shape` is using it so it's ok for now; https://drafts.fxtf.org/css-masking-1/#funcdef-clip-rect\",\"syntax\":\"<length> | auto\"},\"shape\":{\"comment\":\"missed spaces in function body and add backwards compatible syntax\",\"syntax\":\"rect( <top>, <right>, <bottom>, <left> ) | rect( <top> <right> <bottom> <left> )\"},\"svg-length\":{\"comment\":\"All coordinates and lengths in SVG can be specified with or without a unit identifier\",\"references\":[\"https://www.w3.org/TR/SVG11/coords.html#Units\"],\"syntax\":\"<percentage> | <length> | <number>\"},\"svg-writing-mode\":{\"comment\":\"SVG specific keywords (deprecated for CSS)\",\"references\":[\"https://developer.mozilla.org/en/docs/Web/CSS/writing-mode\",\"https://www.w3.org/TR/SVG/text.html#WritingModeProperty\"],\"syntax\":\"lr-tb | rl-tb | tb-rl | lr | rl | tb\"},\"top\":{\"comment\":\"missed; not sure we should add it, but no others except `shape` is using it so it's ok for now; https://drafts.fxtf.org/css-masking-1/#funcdef-clip-rect\",\"syntax\":\"<length> | auto\"},\"track-group\":{\"comment\":\"used by old grid-columns and grid-rows syntax v0\",\"syntax\":\"'(' [ <string>* <track-minmax> <string>* ]+ ')' [ '[' <positive-integer> ']' ]? | <track-minmax>\"},\"track-list-v0\":{\"comment\":\"used by old grid-columns and grid-rows syntax v0\",\"syntax\":\"[ <string>* <track-group> <string>* ]+ | none\"},\"track-minmax\":{\"comment\":\"used by old grid-columns and grid-rows syntax v0\",\"syntax\":\"minmax( <track-breadth> , <track-breadth> ) | auto | <track-breadth> | fit-content\"},\"x\":{\"comment\":\"missed; not sure we should add it, but no others except `cursor` is using it so it's ok for now; https://drafts.csswg.org/css-ui-3/#cursor\",\"syntax\":\"<number>\"},\"y\":{\"comment\":\"missed; not sure we should add it, but no others except `cursor` is using so it's ok for now; https://drafts.csswg.org/css-ui-3/#cursor\",\"syntax\":\"<number>\"},\"declaration\":{\"comment\":\"missed, restored by https://drafts.csswg.org/css-syntax\",\"syntax\":\"<ident-token> : <declaration-value>? [ '!' important ]?\"},\"declaration-list\":{\"comment\":\"missed, restored by https://drafts.csswg.org/css-syntax\",\"syntax\":\"[ <declaration>? ';' ]* <declaration>?\"},\"url\":{\"comment\":\"https://drafts.csswg.org/css-values-4/#urls\",\"syntax\":\"url( <string> <url-modifier>* ) | <url-token>\"},\"url-modifier\":{\"comment\":\"https://drafts.csswg.org/css-values-4/#typedef-url-modifier\",\"syntax\":\"<ident> | <function-token> <any-value> )\"},\"number-zero-one\":{\"syntax\":\"<number [0,1]>\"},\"number-one-or-greater\":{\"syntax\":\"<number [1,∞]>\"},\"positive-integer\":{\"syntax\":\"<integer [0,∞]>\"},\"-non-standard-display\":{\"syntax\":\"-ms-inline-flexbox | -ms-grid | -ms-inline-grid | -webkit-flex | -webkit-inline-flex | -webkit-box | -webkit-inline-box | -moz-inline-stack | -moz-box | -moz-inline-box\"}}}");

/***/ }),

/***/ "./node_modules/css-tree/lib/common/List.js":
/*!**************************************************!*\
  !*** ./node_modules/css-tree/lib/common/List.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

//
//                              list
//                            ┌──────┐
//             ┌──────────────┼─head │
//             │              │ tail─┼──────────────┐
//             │              └──────┘              │
//             ▼                                    ▼
//            item        item        item        item
//          ┌──────┐    ┌──────┐    ┌──────┐    ┌──────┐
//  null ◀──┼─prev │◀───┼─prev │◀───┼─prev │◀───┼─prev │
//          │ next─┼───▶│ next─┼───▶│ next─┼───▶│ next─┼──▶ null
//          ├──────┤    ├──────┤    ├──────┤    ├──────┤
//          │ data │    │ data │    │ data │    │ data │
//          └──────┘    └──────┘    └──────┘    └──────┘
//

function createItem(data) {
    return {
        prev: null,
        next: null,
        data: data
    };
}

function allocateCursor(node, prev, next) {
    var cursor;

    if (cursors !== null) {
        cursor = cursors;
        cursors = cursors.cursor;
        cursor.prev = prev;
        cursor.next = next;
        cursor.cursor = node.cursor;
    } else {
        cursor = {
            prev: prev,
            next: next,
            cursor: node.cursor
        };
    }

    node.cursor = cursor;

    return cursor;
}

function releaseCursor(node) {
    var cursor = node.cursor;

    node.cursor = cursor.cursor;
    cursor.prev = null;
    cursor.next = null;
    cursor.cursor = cursors;
    cursors = cursor;
}

var cursors = null;
var List = function() {
    this.cursor = null;
    this.head = null;
    this.tail = null;
};

List.createItem = createItem;
List.prototype.createItem = createItem;

List.prototype.updateCursors = function(prevOld, prevNew, nextOld, nextNew) {
    var cursor = this.cursor;

    while (cursor !== null) {
        if (cursor.prev === prevOld) {
            cursor.prev = prevNew;
        }

        if (cursor.next === nextOld) {
            cursor.next = nextNew;
        }

        cursor = cursor.cursor;
    }
};

List.prototype.getSize = function() {
    var size = 0;
    var cursor = this.head;

    while (cursor) {
        size++;
        cursor = cursor.next;
    }

    return size;
};

List.prototype.fromArray = function(array) {
    var cursor = null;

    this.head = null;

    for (var i = 0; i < array.length; i++) {
        var item = createItem(array[i]);

        if (cursor !== null) {
            cursor.next = item;
        } else {
            this.head = item;
        }

        item.prev = cursor;
        cursor = item;
    }

    this.tail = cursor;

    return this;
};

List.prototype.toArray = function() {
    var cursor = this.head;
    var result = [];

    while (cursor) {
        result.push(cursor.data);
        cursor = cursor.next;
    }

    return result;
};

List.prototype.toJSON = List.prototype.toArray;

List.prototype.isEmpty = function() {
    return this.head === null;
};

List.prototype.first = function() {
    return this.head && this.head.data;
};

List.prototype.last = function() {
    return this.tail && this.tail.data;
};

List.prototype.each = function(fn, context) {
    var item;

    if (context === undefined) {
        context = this;
    }

    // push cursor
    var cursor = allocateCursor(this, null, this.head);

    while (cursor.next !== null) {
        item = cursor.next;
        cursor.next = item.next;

        fn.call(context, item.data, item, this);
    }

    // pop cursor
    releaseCursor(this);
};

List.prototype.forEach = List.prototype.each;

List.prototype.eachRight = function(fn, context) {
    var item;

    if (context === undefined) {
        context = this;
    }

    // push cursor
    var cursor = allocateCursor(this, this.tail, null);

    while (cursor.prev !== null) {
        item = cursor.prev;
        cursor.prev = item.prev;

        fn.call(context, item.data, item, this);
    }

    // pop cursor
    releaseCursor(this);
};

List.prototype.forEachRight = List.prototype.eachRight;

List.prototype.reduce = function(fn, initialValue, context) {
    var item;

    if (context === undefined) {
        context = this;
    }

    // push cursor
    var cursor = allocateCursor(this, null, this.head);
    var acc = initialValue;

    while (cursor.next !== null) {
        item = cursor.next;
        cursor.next = item.next;

        acc = fn.call(context, acc, item.data, item, this);
    }

    // pop cursor
    releaseCursor(this);

    return acc;
};

List.prototype.reduceRight = function(fn, initialValue, context) {
    var item;

    if (context === undefined) {
        context = this;
    }

    // push cursor
    var cursor = allocateCursor(this, this.tail, null);
    var acc = initialValue;

    while (cursor.prev !== null) {
        item = cursor.prev;
        cursor.prev = item.prev;

        acc = fn.call(context, acc, item.data, item, this);
    }

    // pop cursor
    releaseCursor(this);

    return acc;
};

List.prototype.nextUntil = function(start, fn, context) {
    if (start === null) {
        return;
    }

    var item;

    if (context === undefined) {
        context = this;
    }

    // push cursor
    var cursor = allocateCursor(this, null, start);

    while (cursor.next !== null) {
        item = cursor.next;
        cursor.next = item.next;

        if (fn.call(context, item.data, item, this)) {
            break;
        }
    }

    // pop cursor
    releaseCursor(this);
};

List.prototype.prevUntil = function(start, fn, context) {
    if (start === null) {
        return;
    }

    var item;

    if (context === undefined) {
        context = this;
    }

    // push cursor
    var cursor = allocateCursor(this, start, null);

    while (cursor.prev !== null) {
        item = cursor.prev;
        cursor.prev = item.prev;

        if (fn.call(context, item.data, item, this)) {
            break;
        }
    }

    // pop cursor
    releaseCursor(this);
};

List.prototype.some = function(fn, context) {
    var cursor = this.head;

    if (context === undefined) {
        context = this;
    }

    while (cursor !== null) {
        if (fn.call(context, cursor.data, cursor, this)) {
            return true;
        }

        cursor = cursor.next;
    }

    return false;
};

List.prototype.map = function(fn, context) {
    var result = new List();
    var cursor = this.head;

    if (context === undefined) {
        context = this;
    }

    while (cursor !== null) {
        result.appendData(fn.call(context, cursor.data, cursor, this));
        cursor = cursor.next;
    }

    return result;
};

List.prototype.filter = function(fn, context) {
    var result = new List();
    var cursor = this.head;

    if (context === undefined) {
        context = this;
    }

    while (cursor !== null) {
        if (fn.call(context, cursor.data, cursor, this)) {
            result.appendData(cursor.data);
        }
        cursor = cursor.next;
    }

    return result;
};

List.prototype.clear = function() {
    this.head = null;
    this.tail = null;
};

List.prototype.copy = function() {
    var result = new List();
    var cursor = this.head;

    while (cursor !== null) {
        result.insert(createItem(cursor.data));
        cursor = cursor.next;
    }

    return result;
};

List.prototype.prepend = function(item) {
    //      head
    //    ^
    // item
    this.updateCursors(null, item, this.head, item);

    // insert to the beginning of the list
    if (this.head !== null) {
        // new item <- first item
        this.head.prev = item;

        // new item -> first item
        item.next = this.head;
    } else {
        // if list has no head, then it also has no tail
        // in this case tail points to the new item
        this.tail = item;
    }

    // head always points to new item
    this.head = item;

    return this;
};

List.prototype.prependData = function(data) {
    return this.prepend(createItem(data));
};

List.prototype.append = function(item) {
    return this.insert(item);
};

List.prototype.appendData = function(data) {
    return this.insert(createItem(data));
};

List.prototype.insert = function(item, before) {
    if (before !== undefined && before !== null) {
        // prev   before
        //      ^
        //     item
        this.updateCursors(before.prev, item, before, item);

        if (before.prev === null) {
            // insert to the beginning of list
            if (this.head !== before) {
                throw new Error('before doesn\'t belong to list');
            }

            // since head points to before therefore list doesn't empty
            // no need to check tail
            this.head = item;
            before.prev = item;
            item.next = before;

            this.updateCursors(null, item);
        } else {

            // insert between two items
            before.prev.next = item;
            item.prev = before.prev;

            before.prev = item;
            item.next = before;
        }
    } else {
        // tail
        //      ^
        //      item
        this.updateCursors(this.tail, item, null, item);

        // insert to the ending of the list
        if (this.tail !== null) {
            // last item -> new item
            this.tail.next = item;

            // last item <- new item
            item.prev = this.tail;
        } else {
            // if list has no tail, then it also has no head
            // in this case head points to new item
            this.head = item;
        }

        // tail always points to new item
        this.tail = item;
    }

    return this;
};

List.prototype.insertData = function(data, before) {
    return this.insert(createItem(data), before);
};

List.prototype.remove = function(item) {
    //      item
    //       ^
    // prev     next
    this.updateCursors(item, item.prev, item, item.next);

    if (item.prev !== null) {
        item.prev.next = item.next;
    } else {
        if (this.head !== item) {
            throw new Error('item doesn\'t belong to list');
        }

        this.head = item.next;
    }

    if (item.next !== null) {
        item.next.prev = item.prev;
    } else {
        if (this.tail !== item) {
            throw new Error('item doesn\'t belong to list');
        }

        this.tail = item.prev;
    }

    item.prev = null;
    item.next = null;

    return item;
};

List.prototype.push = function(data) {
    this.insert(createItem(data));
};

List.prototype.pop = function() {
    if (this.tail !== null) {
        return this.remove(this.tail);
    }
};

List.prototype.unshift = function(data) {
    this.prepend(createItem(data));
};

List.prototype.shift = function() {
    if (this.head !== null) {
        return this.remove(this.head);
    }
};

List.prototype.prependList = function(list) {
    return this.insertList(list, this.head);
};

List.prototype.appendList = function(list) {
    return this.insertList(list);
};

List.prototype.insertList = function(list, before) {
    // ignore empty lists
    if (list.head === null) {
        return this;
    }

    if (before !== undefined && before !== null) {
        this.updateCursors(before.prev, list.tail, before, list.head);

        // insert in the middle of dist list
        if (before.prev !== null) {
            // before.prev <-> list.head
            before.prev.next = list.head;
            list.head.prev = before.prev;
        } else {
            this.head = list.head;
        }

        before.prev = list.tail;
        list.tail.next = before;
    } else {
        this.updateCursors(this.tail, list.tail, null, list.head);

        // insert to end of the list
        if (this.tail !== null) {
            // if destination list has a tail, then it also has a head,
            // but head doesn't change

            // dest tail -> source head
            this.tail.next = list.head;

            // dest tail <- source head
            list.head.prev = this.tail;
        } else {
            // if list has no a tail, then it also has no a head
            // in this case points head to new item
            this.head = list.head;
        }

        // tail always start point to new item
        this.tail = list.tail;
    }

    list.head = null;
    list.tail = null;

    return this;
};

List.prototype.replace = function(oldItem, newItemOrList) {
    if ('head' in newItemOrList) {
        this.insertList(newItemOrList, oldItem);
    } else {
        this.insert(newItemOrList, oldItem);
    }

    this.remove(oldItem);
};

module.exports = List;


/***/ }),

/***/ "./node_modules/css-tree/lib/common/OffsetToLocation.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-tree/lib/common/OffsetToLocation.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var adoptBuffer = __webpack_require__(/*! ./adopt-buffer */ "./node_modules/css-tree/lib/common/adopt-buffer.js");
var isBOM = __webpack_require__(/*! ../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").isBOM;

var N = 10;
var F = 12;
var R = 13;

function computeLinesAndColumns(host, source) {
    var sourceLength = source.length;
    var lines = adoptBuffer(host.lines, sourceLength); // +1
    var line = host.startLine;
    var columns = adoptBuffer(host.columns, sourceLength);
    var column = host.startColumn;
    var startOffset = source.length > 0 ? isBOM(source.charCodeAt(0)) : 0;

    for (var i = startOffset; i < sourceLength; i++) { // -1
        var code = source.charCodeAt(i);

        lines[i] = line;
        columns[i] = column++;

        if (code === N || code === R || code === F) {
            if (code === R && i + 1 < sourceLength && source.charCodeAt(i + 1) === N) {
                i++;
                lines[i] = line;
                columns[i] = column;
            }

            line++;
            column = 1;
        }
    }

    lines[i] = line;
    columns[i] = column;

    host.lines = lines;
    host.columns = columns;
}

var OffsetToLocation = function() {
    this.lines = null;
    this.columns = null;
    this.linesAndColumnsComputed = false;
};

OffsetToLocation.prototype = {
    setSource: function(source, startOffset, startLine, startColumn) {
        this.source = source;
        this.startOffset = typeof startOffset === 'undefined' ? 0 : startOffset;
        this.startLine = typeof startLine === 'undefined' ? 1 : startLine;
        this.startColumn = typeof startColumn === 'undefined' ? 1 : startColumn;
        this.linesAndColumnsComputed = false;
    },

    ensureLinesAndColumnsComputed: function() {
        if (!this.linesAndColumnsComputed) {
            computeLinesAndColumns(this, this.source);
            this.linesAndColumnsComputed = true;
        }
    },
    getLocation: function(offset, filename) {
        this.ensureLinesAndColumnsComputed();

        return {
            source: filename,
            offset: this.startOffset + offset,
            line: this.lines[offset],
            column: this.columns[offset]
        };
    },
    getLocationRange: function(start, end, filename) {
        this.ensureLinesAndColumnsComputed();

        return {
            source: filename,
            start: {
                offset: this.startOffset + start,
                line: this.lines[start],
                column: this.columns[start]
            },
            end: {
                offset: this.startOffset + end,
                line: this.lines[end],
                column: this.columns[end]
            }
        };
    }
};

module.exports = OffsetToLocation;


/***/ }),

/***/ "./node_modules/css-tree/lib/common/SyntaxError.js":
/*!*********************************************************!*\
  !*** ./node_modules/css-tree/lib/common/SyntaxError.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var createCustomError = __webpack_require__(/*! ../utils/createCustomError */ "./node_modules/css-tree/lib/utils/createCustomError.js");
var MAX_LINE_LENGTH = 100;
var OFFSET_CORRECTION = 60;
var TAB_REPLACEMENT = '    ';

function sourceFragment(error, extraLines) {
    function processLines(start, end) {
        return lines.slice(start, end).map(function(line, idx) {
            var num = String(start + idx + 1);

            while (num.length < maxNumLength) {
                num = ' ' + num;
            }

            return num + ' |' + line;
        }).join('\n');
    }

    var lines = error.source.split(/\r\n?|\n|\f/);
    var line = error.line;
    var column = error.column;
    var startLine = Math.max(1, line - extraLines) - 1;
    var endLine = Math.min(line + extraLines, lines.length + 1);
    var maxNumLength = Math.max(4, String(endLine).length) + 1;
    var cutLeft = 0;

    // column correction according to replaced tab before column
    column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\t/g) || []).length;

    if (column > MAX_LINE_LENGTH) {
        cutLeft = column - OFFSET_CORRECTION + 3;
        column = OFFSET_CORRECTION - 2;
    }

    for (var i = startLine; i <= endLine; i++) {
        if (i >= 0 && i < lines.length) {
            lines[i] = lines[i].replace(/\t/g, TAB_REPLACEMENT);
            lines[i] =
                (cutLeft > 0 && lines[i].length > cutLeft ? '\u2026' : '') +
                lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) +
                (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? '\u2026' : '');
        }
    }

    return [
        processLines(startLine, line),
        new Array(column + maxNumLength + 2).join('-') + '^',
        processLines(line, endLine)
    ].filter(Boolean).join('\n');
}

var SyntaxError = function(message, source, offset, line, column) {
    var error = createCustomError('SyntaxError', message);

    error.source = source;
    error.offset = offset;
    error.line = line;
    error.column = column;

    error.sourceFragment = function(extraLines) {
        return sourceFragment(error, isNaN(extraLines) ? 0 : extraLines);
    };
    Object.defineProperty(error, 'formattedMessage', {
        get: function() {
            return (
                'Parse error: ' + error.message + '\n' +
                sourceFragment(error, 2)
            );
        }
    });

    // for backward capability
    error.parseError = {
        offset: offset,
        line: line,
        column: column
    };

    return error;
};

module.exports = SyntaxError;


/***/ }),

/***/ "./node_modules/css-tree/lib/common/TokenStream.js":
/*!*********************************************************!*\
  !*** ./node_modules/css-tree/lib/common/TokenStream.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__(/*! ../tokenizer/const */ "./node_modules/css-tree/lib/tokenizer/const.js");
var TYPE = constants.TYPE;
var NAME = constants.NAME;

var utils = __webpack_require__(/*! ../tokenizer/utils */ "./node_modules/css-tree/lib/tokenizer/utils.js");
var cmpStr = utils.cmpStr;

var EOF = TYPE.EOF;
var WHITESPACE = TYPE.WhiteSpace;
var COMMENT = TYPE.Comment;

var OFFSET_MASK = 0x00FFFFFF;
var TYPE_SHIFT = 24;

var TokenStream = function() {
    this.offsetAndType = null;
    this.balance = null;

    this.reset();
};

TokenStream.prototype = {
    reset: function() {
        this.eof = false;
        this.tokenIndex = -1;
        this.tokenType = 0;
        this.tokenStart = this.firstCharOffset;
        this.tokenEnd = this.firstCharOffset;
    },

    lookupType: function(offset) {
        offset += this.tokenIndex;

        if (offset < this.tokenCount) {
            return this.offsetAndType[offset] >> TYPE_SHIFT;
        }

        return EOF;
    },
    lookupOffset: function(offset) {
        offset += this.tokenIndex;

        if (offset < this.tokenCount) {
            return this.offsetAndType[offset - 1] & OFFSET_MASK;
        }

        return this.source.length;
    },
    lookupValue: function(offset, referenceStr) {
        offset += this.tokenIndex;

        if (offset < this.tokenCount) {
            return cmpStr(
                this.source,
                this.offsetAndType[offset - 1] & OFFSET_MASK,
                this.offsetAndType[offset] & OFFSET_MASK,
                referenceStr
            );
        }

        return false;
    },
    getTokenStart: function(tokenIndex) {
        if (tokenIndex === this.tokenIndex) {
            return this.tokenStart;
        }

        if (tokenIndex > 0) {
            return tokenIndex < this.tokenCount
                ? this.offsetAndType[tokenIndex - 1] & OFFSET_MASK
                : this.offsetAndType[this.tokenCount] & OFFSET_MASK;
        }

        return this.firstCharOffset;
    },

    // TODO: -> skipUntilBalanced
    getRawLength: function(startToken, mode) {
        var cursor = startToken;
        var balanceEnd;
        var offset = this.offsetAndType[Math.max(cursor - 1, 0)] & OFFSET_MASK;
        var type;

        loop:
        for (; cursor < this.tokenCount; cursor++) {
            balanceEnd = this.balance[cursor];

            // stop scanning on balance edge that points to offset before start token
            if (balanceEnd < startToken) {
                break loop;
            }

            type = this.offsetAndType[cursor] >> TYPE_SHIFT;

            // check token is stop type
            switch (mode(type, this.source, offset)) {
                case 1:
                    break loop;

                case 2:
                    cursor++;
                    break loop;

                default:
                    // fast forward to the end of balanced block
                    if (this.balance[balanceEnd] === cursor) {
                        cursor = balanceEnd;
                    }

                    offset = this.offsetAndType[cursor] & OFFSET_MASK;
            }
        }

        return cursor - this.tokenIndex;
    },
    isBalanceEdge: function(pos) {
        return this.balance[this.tokenIndex] < pos;
    },
    isDelim: function(code, offset) {
        if (offset) {
            return (
                this.lookupType(offset) === TYPE.Delim &&
                this.source.charCodeAt(this.lookupOffset(offset)) === code
            );
        }

        return (
            this.tokenType === TYPE.Delim &&
            this.source.charCodeAt(this.tokenStart) === code
        );
    },

    getTokenValue: function() {
        return this.source.substring(this.tokenStart, this.tokenEnd);
    },
    getTokenLength: function() {
        return this.tokenEnd - this.tokenStart;
    },
    substrToCursor: function(start) {
        return this.source.substring(start, this.tokenStart);
    },

    skipWS: function() {
        for (var i = this.tokenIndex, skipTokenCount = 0; i < this.tokenCount; i++, skipTokenCount++) {
            if ((this.offsetAndType[i] >> TYPE_SHIFT) !== WHITESPACE) {
                break;
            }
        }

        if (skipTokenCount > 0) {
            this.skip(skipTokenCount);
        }
    },
    skipSC: function() {
        while (this.tokenType === WHITESPACE || this.tokenType === COMMENT) {
            this.next();
        }
    },
    skip: function(tokenCount) {
        var next = this.tokenIndex + tokenCount;

        if (next < this.tokenCount) {
            this.tokenIndex = next;
            this.tokenStart = this.offsetAndType[next - 1] & OFFSET_MASK;
            next = this.offsetAndType[next];
            this.tokenType = next >> TYPE_SHIFT;
            this.tokenEnd = next & OFFSET_MASK;
        } else {
            this.tokenIndex = this.tokenCount;
            this.next();
        }
    },
    next: function() {
        var next = this.tokenIndex + 1;

        if (next < this.tokenCount) {
            this.tokenIndex = next;
            this.tokenStart = this.tokenEnd;
            next = this.offsetAndType[next];
            this.tokenType = next >> TYPE_SHIFT;
            this.tokenEnd = next & OFFSET_MASK;
        } else {
            this.tokenIndex = this.tokenCount;
            this.eof = true;
            this.tokenType = EOF;
            this.tokenStart = this.tokenEnd = this.source.length;
        }
    },

    forEachToken(fn) {
        for (var i = 0, offset = this.firstCharOffset; i < this.tokenCount; i++) {
            var start = offset;
            var item = this.offsetAndType[i];
            var end = item & OFFSET_MASK;
            var type = item >> TYPE_SHIFT;

            offset = end;

            fn(type, start, end, i);
        }
    },

    dump() {
        var tokens = new Array(this.tokenCount);

        this.forEachToken((type, start, end, index) => {
            tokens[index] = {
                idx: index,
                type: NAME[type],
                chunk: this.source.substring(start, end),
                balance: this.balance[index]
            };
        });

        return tokens;
    }
};

module.exports = TokenStream;


/***/ }),

/***/ "./node_modules/css-tree/lib/common/adopt-buffer.js":
/*!**********************************************************!*\
  !*** ./node_modules/css-tree/lib/common/adopt-buffer.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var MIN_SIZE = 16 * 1024;
var SafeUint32Array = typeof Uint32Array !== 'undefined' ? Uint32Array : Array; // fallback on Array when TypedArray is not supported

module.exports = function adoptBuffer(buffer, size) {
    if (buffer === null || buffer.length < size) {
        return new SafeUint32Array(Math.max(size + 1024, MIN_SIZE));
    }

    return buffer;
};


/***/ }),

/***/ "./node_modules/css-tree/lib/convertor/create.js":
/*!*******************************************************!*\
  !*** ./node_modules/css-tree/lib/convertor/create.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var List = __webpack_require__(/*! ../common/List */ "./node_modules/css-tree/lib/common/List.js");

module.exports = function createConvertors(walk) {
    return {
        fromPlainObject: function(ast) {
            walk(ast, {
                enter: function(node) {
                    if (node.children && node.children instanceof List === false) {
                        node.children = new List().fromArray(node.children);
                    }
                }
            });

            return ast;
        },
        toPlainObject: function(ast) {
            walk(ast, {
                leave: function(node) {
                    if (node.children && node.children instanceof List) {
                        node.children = node.children.toArray();
                    }
                }
            });

            return ast;
        }
    };
};


/***/ }),

/***/ "./node_modules/css-tree/lib/definition-syntax/SyntaxError.js":
/*!********************************************************************!*\
  !*** ./node_modules/css-tree/lib/definition-syntax/SyntaxError.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var createCustomError = __webpack_require__(/*! ../utils/createCustomError */ "./node_modules/css-tree/lib/utils/createCustomError.js");

module.exports = function SyntaxError(message, input, offset) {
    var error = createCustomError('SyntaxError', message);

    error.input = input;
    error.offset = offset;
    error.rawMessage = message;
    error.message = error.rawMessage + '\n' +
        '  ' + error.input + '\n' +
        '--' + new Array((error.offset || error.input.length) + 1).join('-') + '^';

    return error;
};


/***/ }),

/***/ "./node_modules/css-tree/lib/definition-syntax/generate.js":
/*!*****************************************************************!*\
  !*** ./node_modules/css-tree/lib/definition-syntax/generate.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function noop(value) {
    return value;
}

function generateMultiplier(multiplier) {
    if (multiplier.min === 0 && multiplier.max === 0) {
        return '*';
    }

    if (multiplier.min === 0 && multiplier.max === 1) {
        return '?';
    }

    if (multiplier.min === 1 && multiplier.max === 0) {
        return multiplier.comma ? '#' : '+';
    }

    if (multiplier.min === 1 && multiplier.max === 1) {
        return '';
    }

    return (
        (multiplier.comma ? '#' : '') +
        (multiplier.min === multiplier.max
            ? '{' + multiplier.min + '}'
            : '{' + multiplier.min + ',' + (multiplier.max !== 0 ? multiplier.max : '') + '}'
        )
    );
}

function generateTypeOpts(node) {
    switch (node.type) {
        case 'Range':
            return (
                ' [' +
                (node.min === null ? '-∞' : node.min) +
                ',' +
                (node.max === null ? '∞' : node.max) +
                ']'
            );

        default:
            throw new Error('Unknown node type `' + node.type + '`');
    }
}

function generateSequence(node, decorate, forceBraces, compact) {
    var combinator = node.combinator === ' ' || compact ? node.combinator : ' ' + node.combinator + ' ';
    var result = node.terms.map(function(term) {
        return generate(term, decorate, forceBraces, compact);
    }).join(combinator);

    if (node.explicit || forceBraces) {
        result = (compact || result[0] === ',' ? '[' : '[ ') + result + (compact ? ']' : ' ]');
    }

    return result;
}

function generate(node, decorate, forceBraces, compact) {
    var result;

    switch (node.type) {
        case 'Group':
            result =
                generateSequence(node, decorate, forceBraces, compact) +
                (node.disallowEmpty ? '!' : '');
            break;

        case 'Multiplier':
            // return since node is a composition
            return (
                generate(node.term, decorate, forceBraces, compact) +
                decorate(generateMultiplier(node), node)
            );

        case 'Type':
            result = '<' + node.name + (node.opts ? decorate(generateTypeOpts(node.opts), node.opts) : '') + '>';
            break;

        case 'Property':
            result = '<\'' + node.name + '\'>';
            break;

        case 'Keyword':
            result = node.name;
            break;

        case 'AtKeyword':
            result = '@' + node.name;
            break;

        case 'Function':
            result = node.name + '(';
            break;

        case 'String':
        case 'Token':
            result = node.value;
            break;

        case 'Comma':
            result = ',';
            break;

        default:
            throw new Error('Unknown node type `' + node.type + '`');
    }

    return decorate(result, node);
}

module.exports = function(node, options) {
    var decorate = noop;
    var forceBraces = false;
    var compact = false;

    if (typeof options === 'function') {
        decorate = options;
    } else if (options) {
        forceBraces = Boolean(options.forceBraces);
        compact = Boolean(options.compact);
        if (typeof options.decorate === 'function') {
            decorate = options.decorate;
        }
    }

    return generate(node, decorate, forceBraces, compact);
};


/***/ }),

/***/ "./node_modules/css-tree/lib/definition-syntax/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-tree/lib/definition-syntax/index.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
    SyntaxError: __webpack_require__(/*! ./SyntaxError */ "./node_modules/css-tree/lib/definition-syntax/SyntaxError.js"),
    parse: __webpack_require__(/*! ./parse */ "./node_modules/css-tree/lib/definition-syntax/parse.js"),
    generate: __webpack_require__(/*! ./generate */ "./node_modules/css-tree/lib/definition-syntax/generate.js"),
    walk: __webpack_require__(/*! ./walk */ "./node_modules/css-tree/lib/definition-syntax/walk.js")
};


/***/ }),

/***/ "./node_modules/css-tree/lib/definition-syntax/parse.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-tree/lib/definition-syntax/parse.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Tokenizer = __webpack_require__(/*! ./tokenizer */ "./node_modules/css-tree/lib/definition-syntax/tokenizer.js");
var TAB = 9;
var N = 10;
var F = 12;
var R = 13;
var SPACE = 32;
var EXCLAMATIONMARK = 33;    // !
var NUMBERSIGN = 35;         // #
var AMPERSAND = 38;          // &
var APOSTROPHE = 39;         // '
var LEFTPARENTHESIS = 40;    // (
var RIGHTPARENTHESIS = 41;   // )
var ASTERISK = 42;           // *
var PLUSSIGN = 43;           // +
var COMMA = 44;              // ,
var HYPERMINUS = 45;         // -
var LESSTHANSIGN = 60;       // <
var GREATERTHANSIGN = 62;    // >
var QUESTIONMARK = 63;       // ?
var COMMERCIALAT = 64;       // @
var LEFTSQUAREBRACKET = 91;  // [
var RIGHTSQUAREBRACKET = 93; // ]
var LEFTCURLYBRACKET = 123;  // {
var VERTICALLINE = 124;      // |
var RIGHTCURLYBRACKET = 125; // }
var INFINITY = 8734;         // ∞
var NAME_CHAR = createCharMap(function(ch) {
    return /[a-zA-Z0-9\-]/.test(ch);
});
var COMBINATOR_PRECEDENCE = {
    ' ': 1,
    '&&': 2,
    '||': 3,
    '|': 4
};

function createCharMap(fn) {
    var array = typeof Uint32Array === 'function' ? new Uint32Array(128) : new Array(128);
    for (var i = 0; i < 128; i++) {
        array[i] = fn(String.fromCharCode(i)) ? 1 : 0;
    }
    return array;
}

function scanSpaces(tokenizer) {
    return tokenizer.substringToPos(
        tokenizer.findWsEnd(tokenizer.pos)
    );
}

function scanWord(tokenizer) {
    var end = tokenizer.pos;

    for (; end < tokenizer.str.length; end++) {
        var code = tokenizer.str.charCodeAt(end);
        if (code >= 128 || NAME_CHAR[code] === 0) {
            break;
        }
    }

    if (tokenizer.pos === end) {
        tokenizer.error('Expect a keyword');
    }

    return tokenizer.substringToPos(end);
}

function scanNumber(tokenizer) {
    var end = tokenizer.pos;

    for (; end < tokenizer.str.length; end++) {
        var code = tokenizer.str.charCodeAt(end);
        if (code < 48 || code > 57) {
            break;
        }
    }

    if (tokenizer.pos === end) {
        tokenizer.error('Expect a number');
    }

    return tokenizer.substringToPos(end);
}

function scanString(tokenizer) {
    var end = tokenizer.str.indexOf('\'', tokenizer.pos + 1);

    if (end === -1) {
        tokenizer.pos = tokenizer.str.length;
        tokenizer.error('Expect an apostrophe');
    }

    return tokenizer.substringToPos(end + 1);
}

function readMultiplierRange(tokenizer) {
    var min = null;
    var max = null;

    tokenizer.eat(LEFTCURLYBRACKET);

    min = scanNumber(tokenizer);

    if (tokenizer.charCode() === COMMA) {
        tokenizer.pos++;
        if (tokenizer.charCode() !== RIGHTCURLYBRACKET) {
            max = scanNumber(tokenizer);
        }
    } else {
        max = min;
    }

    tokenizer.eat(RIGHTCURLYBRACKET);

    return {
        min: Number(min),
        max: max ? Number(max) : 0
    };
}

function readMultiplier(tokenizer) {
    var range = null;
    var comma = false;

    switch (tokenizer.charCode()) {
        case ASTERISK:
            tokenizer.pos++;

            range = {
                min: 0,
                max: 0
            };

            break;

        case PLUSSIGN:
            tokenizer.pos++;

            range = {
                min: 1,
                max: 0
            };

            break;

        case QUESTIONMARK:
            tokenizer.pos++;

            range = {
                min: 0,
                max: 1
            };

            break;

        case NUMBERSIGN:
            tokenizer.pos++;

            comma = true;

            if (tokenizer.charCode() === LEFTCURLYBRACKET) {
                range = readMultiplierRange(tokenizer);
            } else {
                range = {
                    min: 1,
                    max: 0
                };
            }

            break;

        case LEFTCURLYBRACKET:
            range = readMultiplierRange(tokenizer);
            break;

        default:
            return null;
    }

    return {
        type: 'Multiplier',
        comma: comma,
        min: range.min,
        max: range.max,
        term: null
    };
}

function maybeMultiplied(tokenizer, node) {
    var multiplier = readMultiplier(tokenizer);

    if (multiplier !== null) {
        multiplier.term = node;
        return multiplier;
    }

    return node;
}

function maybeToken(tokenizer) {
    var ch = tokenizer.peek();

    if (ch === '') {
        return null;
    }

    return {
        type: 'Token',
        value: ch
    };
}

function readProperty(tokenizer) {
    var name;

    tokenizer.eat(LESSTHANSIGN);
    tokenizer.eat(APOSTROPHE);

    name = scanWord(tokenizer);

    tokenizer.eat(APOSTROPHE);
    tokenizer.eat(GREATERTHANSIGN);

    return maybeMultiplied(tokenizer, {
        type: 'Property',
        name: name
    });
}

// https://drafts.csswg.org/css-values-3/#numeric-ranges
// 4.1. Range Restrictions and Range Definition Notation
//
// Range restrictions can be annotated in the numeric type notation using CSS bracketed
// range notation—[min,max]—within the angle brackets, after the identifying keyword,
// indicating a closed range between (and including) min and max.
// For example, <integer [0, 10]> indicates an integer between 0 and 10, inclusive.
function readTypeRange(tokenizer) {
    // use null for Infinity to make AST format JSON serializable/deserializable
    var min = null; // -Infinity
    var max = null; // Infinity
    var sign = 1;

    tokenizer.eat(LEFTSQUAREBRACKET);

    if (tokenizer.charCode() === HYPERMINUS) {
        tokenizer.peek();
        sign = -1;
    }

    if (sign == -1 && tokenizer.charCode() === INFINITY) {
        tokenizer.peek();
    } else {
        min = sign * Number(scanNumber(tokenizer));
    }

    scanSpaces(tokenizer);
    tokenizer.eat(COMMA);
    scanSpaces(tokenizer);

    if (tokenizer.charCode() === INFINITY) {
        tokenizer.peek();
    } else {
        sign = 1;

        if (tokenizer.charCode() === HYPERMINUS) {
            tokenizer.peek();
            sign = -1;
        }

        max = sign * Number(scanNumber(tokenizer));
    }

    tokenizer.eat(RIGHTSQUAREBRACKET);

    // If no range is indicated, either by using the bracketed range notation
    // or in the property description, then [−∞,∞] is assumed.
    if (min === null && max === null) {
        return null;
    }

    return {
        type: 'Range',
        min: min,
        max: max
    };
}

function readType(tokenizer) {
    var name;
    var opts = null;

    tokenizer.eat(LESSTHANSIGN);
    name = scanWord(tokenizer);

    if (tokenizer.charCode() === LEFTPARENTHESIS &&
        tokenizer.nextCharCode() === RIGHTPARENTHESIS) {
        tokenizer.pos += 2;
        name += '()';
    }

    if (tokenizer.charCodeAt(tokenizer.findWsEnd(tokenizer.pos)) === LEFTSQUAREBRACKET) {
        scanSpaces(tokenizer);
        opts = readTypeRange(tokenizer);
    }

    tokenizer.eat(GREATERTHANSIGN);

    return maybeMultiplied(tokenizer, {
        type: 'Type',
        name: name,
        opts: opts
    });
}

function readKeywordOrFunction(tokenizer) {
    var name;

    name = scanWord(tokenizer);

    if (tokenizer.charCode() === LEFTPARENTHESIS) {
        tokenizer.pos++;

        return {
            type: 'Function',
            name: name
        };
    }

    return maybeMultiplied(tokenizer, {
        type: 'Keyword',
        name: name
    });
}

function regroupTerms(terms, combinators) {
    function createGroup(terms, combinator) {
        return {
            type: 'Group',
            terms: terms,
            combinator: combinator,
            disallowEmpty: false,
            explicit: false
        };
    }

    combinators = Object.keys(combinators).sort(function(a, b) {
        return COMBINATOR_PRECEDENCE[a] - COMBINATOR_PRECEDENCE[b];
    });

    while (combinators.length > 0) {
        var combinator = combinators.shift();
        for (var i = 0, subgroupStart = 0; i < terms.length; i++) {
            var term = terms[i];
            if (term.type === 'Combinator') {
                if (term.value === combinator) {
                    if (subgroupStart === -1) {
                        subgroupStart = i - 1;
                    }
                    terms.splice(i, 1);
                    i--;
                } else {
                    if (subgroupStart !== -1 && i - subgroupStart > 1) {
                        terms.splice(
                            subgroupStart,
                            i - subgroupStart,
                            createGroup(terms.slice(subgroupStart, i), combinator)
                        );
                        i = subgroupStart + 1;
                    }
                    subgroupStart = -1;
                }
            }
        }

        if (subgroupStart !== -1 && combinators.length) {
            terms.splice(
                subgroupStart,
                i - subgroupStart,
                createGroup(terms.slice(subgroupStart, i), combinator)
            );
        }
    }

    return combinator;
}

function readImplicitGroup(tokenizer) {
    var terms = [];
    var combinators = {};
    var token;
    var prevToken = null;
    var prevTokenPos = tokenizer.pos;

    while (token = peek(tokenizer)) {
        if (token.type !== 'Spaces') {
            if (token.type === 'Combinator') {
                // check for combinator in group beginning and double combinator sequence
                if (prevToken === null || prevToken.type === 'Combinator') {
                    tokenizer.pos = prevTokenPos;
                    tokenizer.error('Unexpected combinator');
                }

                combinators[token.value] = true;
            } else if (prevToken !== null && prevToken.type !== 'Combinator') {
                combinators[' '] = true;  // a b
                terms.push({
                    type: 'Combinator',
                    value: ' '
                });
            }

            terms.push(token);
            prevToken = token;
            prevTokenPos = tokenizer.pos;
        }
    }

    // check for combinator in group ending
    if (prevToken !== null && prevToken.type === 'Combinator') {
        tokenizer.pos -= prevTokenPos;
        tokenizer.error('Unexpected combinator');
    }

    return {
        type: 'Group',
        terms: terms,
        combinator: regroupTerms(terms, combinators) || ' ',
        disallowEmpty: false,
        explicit: false
    };
}

function readGroup(tokenizer) {
    var result;

    tokenizer.eat(LEFTSQUAREBRACKET);
    result = readImplicitGroup(tokenizer);
    tokenizer.eat(RIGHTSQUAREBRACKET);

    result.explicit = true;

    if (tokenizer.charCode() === EXCLAMATIONMARK) {
        tokenizer.pos++;
        result.disallowEmpty = true;
    }

    return result;
}

function peek(tokenizer) {
    var code = tokenizer.charCode();

    if (code < 128 && NAME_CHAR[code] === 1) {
        return readKeywordOrFunction(tokenizer);
    }

    switch (code) {
        case RIGHTSQUAREBRACKET:
            // don't eat, stop scan a group
            break;

        case LEFTSQUAREBRACKET:
            return maybeMultiplied(tokenizer, readGroup(tokenizer));

        case LESSTHANSIGN:
            return tokenizer.nextCharCode() === APOSTROPHE
                ? readProperty(tokenizer)
                : readType(tokenizer);

        case VERTICALLINE:
            return {
                type: 'Combinator',
                value: tokenizer.substringToPos(
                    tokenizer.nextCharCode() === VERTICALLINE
                        ? tokenizer.pos + 2
                        : tokenizer.pos + 1
                )
            };

        case AMPERSAND:
            tokenizer.pos++;
            tokenizer.eat(AMPERSAND);

            return {
                type: 'Combinator',
                value: '&&'
            };

        case COMMA:
            tokenizer.pos++;
            return {
                type: 'Comma'
            };

        case APOSTROPHE:
            return maybeMultiplied(tokenizer, {
                type: 'String',
                value: scanString(tokenizer)
            });

        case SPACE:
        case TAB:
        case N:
        case R:
        case F:
            return {
                type: 'Spaces',
                value: scanSpaces(tokenizer)
            };

        case COMMERCIALAT:
            code = tokenizer.nextCharCode();

            if (code < 128 && NAME_CHAR[code] === 1) {
                tokenizer.pos++;
                return {
                    type: 'AtKeyword',
                    name: scanWord(tokenizer)
                };
            }

            return maybeToken(tokenizer);

        case ASTERISK:
        case PLUSSIGN:
        case QUESTIONMARK:
        case NUMBERSIGN:
        case EXCLAMATIONMARK:
            // prohibited tokens (used as a multiplier start)
            break;

        case LEFTCURLYBRACKET:
            // LEFTCURLYBRACKET is allowed since mdn/data uses it w/o quoting
            // check next char isn't a number, because it's likely a disjoined multiplier
            code = tokenizer.nextCharCode();

            if (code < 48 || code > 57) {
                return maybeToken(tokenizer);
            }

            break;

        default:
            return maybeToken(tokenizer);
    }
}

function parse(source) {
    var tokenizer = new Tokenizer(source);
    var result = readImplicitGroup(tokenizer);

    if (tokenizer.pos !== source.length) {
        tokenizer.error('Unexpected input');
    }

    // reduce redundant groups with single group term
    if (result.terms.length === 1 && result.terms[0].type === 'Group') {
        result = result.terms[0];
    }

    return result;
}

// warm up parse to elimitate code branches that never execute
// fix soft deoptimizations (insufficient type feedback)
parse('[a&&<b>#|<\'c\'>*||e() f{2} /,(% g#{1,2} h{2,})]!');

module.exports = parse;


/***/ }),

/***/ "./node_modules/css-tree/lib/definition-syntax/tokenizer.js":
/*!******************************************************************!*\
  !*** ./node_modules/css-tree/lib/definition-syntax/tokenizer.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var SyntaxError = __webpack_require__(/*! ./SyntaxError */ "./node_modules/css-tree/lib/definition-syntax/SyntaxError.js");

var TAB = 9;
var N = 10;
var F = 12;
var R = 13;
var SPACE = 32;

var Tokenizer = function(str) {
    this.str = str;
    this.pos = 0;
};

Tokenizer.prototype = {
    charCodeAt: function(pos) {
        return pos < this.str.length ? this.str.charCodeAt(pos) : 0;
    },
    charCode: function() {
        return this.charCodeAt(this.pos);
    },
    nextCharCode: function() {
        return this.charCodeAt(this.pos + 1);
    },
    nextNonWsCode: function(pos) {
        return this.charCodeAt(this.findWsEnd(pos));
    },
    findWsEnd: function(pos) {
        for (; pos < this.str.length; pos++) {
            var code = this.str.charCodeAt(pos);
            if (code !== R && code !== N && code !== F && code !== SPACE && code !== TAB) {
                break;
            }
        }

        return pos;
    },
    substringToPos: function(end) {
        return this.str.substring(this.pos, this.pos = end);
    },
    eat: function(code) {
        if (this.charCode() !== code) {
            this.error('Expect `' + String.fromCharCode(code) + '`');
        }

        this.pos++;
    },
    peek: function() {
        return this.pos < this.str.length ? this.str.charAt(this.pos++) : '';
    },
    error: function(message) {
        throw new SyntaxError(message, this.str, this.pos);
    }
};

module.exports = Tokenizer;


/***/ }),

/***/ "./node_modules/css-tree/lib/definition-syntax/walk.js":
/*!*************************************************************!*\
  !*** ./node_modules/css-tree/lib/definition-syntax/walk.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var noop = function() {};

function ensureFunction(value) {
    return typeof value === 'function' ? value : noop;
}

module.exports = function(node, options, context) {
    function walk(node) {
        enter.call(context, node);

        switch (node.type) {
            case 'Group':
                node.terms.forEach(walk);
                break;

            case 'Multiplier':
                walk(node.term);
                break;

            case 'Type':
            case 'Property':
            case 'Keyword':
            case 'AtKeyword':
            case 'Function':
            case 'String':
            case 'Token':
            case 'Comma':
                break;

            default:
                throw new Error('Unknown type: ' + node.type);
        }

        leave.call(context, node);
    }

    var enter = noop;
    var leave = noop;

    if (typeof options === 'function') {
        enter = options;
    } else if (options) {
        enter = ensureFunction(options.enter);
        leave = ensureFunction(options.leave);
    }

    if (enter === noop && leave === noop) {
        throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\'t a function');
    }

    walk(node, context);
};


/***/ }),

/***/ "./node_modules/css-tree/lib/generator/create.js":
/*!*******************************************************!*\
  !*** ./node_modules/css-tree/lib/generator/create.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var sourceMap = __webpack_require__(/*! ./sourceMap */ "./node_modules/css-tree/lib/generator/sourceMap.js");
var hasOwnProperty = Object.prototype.hasOwnProperty;

function processChildren(node, delimeter) {
    var list = node.children;
    var prev = null;

    if (typeof delimeter !== 'function') {
        list.forEach(this.node, this);
    } else {
        list.forEach(function(node) {
            if (prev !== null) {
                delimeter.call(this, prev);
            }

            this.node(node);
            prev = node;
        }, this);
    }
}

module.exports = function createGenerator(config) {
    function processNode(node) {
        if (hasOwnProperty.call(types, node.type)) {
            types[node.type].call(this, node);
        } else {
            throw new Error('Unknown node type: ' + node.type);
        }
    }

    var types = {};

    if (config.node) {
        for (var name in config.node) {
            types[name] = config.node[name].generate;
        }
    }

    return function(node, options) {
        var buffer = '';
        var handlers = {
            children: processChildren,
            node: processNode,
            chunk: function(chunk) {
                buffer += chunk;
            },
            result: function() {
                return buffer;
            }
        };

        if (options) {
            if (typeof options.decorator === 'function') {
                handlers = options.decorator(handlers);
            }

            if (options.sourceMap) {
                handlers = sourceMap(handlers);
            }
        }

        handlers.node(node);

        return handlers.result();
    };
};


/***/ }),

/***/ "./node_modules/css-tree/lib/generator/sourceMap.js":
/*!**********************************************************!*\
  !*** ./node_modules/css-tree/lib/generator/sourceMap.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var SourceMapGenerator = __webpack_require__(/*! source-map/lib/source-map-generator */ "./node_modules/source-map/lib/source-map-generator.js").SourceMapGenerator;
var trackNodes = {
    Atrule: true,
    Selector: true,
    Declaration: true
};

module.exports = function generateSourceMap(handlers) {
    var map = new SourceMapGenerator();
    var line = 1;
    var column = 0;
    var generated = {
        line: 1,
        column: 0
    };
    var original = {
        line: 0, // should be zero to add first mapping
        column: 0
    };
    var sourceMappingActive = false;
    var activatedGenerated = {
        line: 1,
        column: 0
    };
    var activatedMapping = {
        generated: activatedGenerated
    };

    var handlersNode = handlers.node;
    handlers.node = function(node) {
        if (node.loc && node.loc.start && trackNodes.hasOwnProperty(node.type)) {
            var nodeLine = node.loc.start.line;
            var nodeColumn = node.loc.start.column - 1;

            if (original.line !== nodeLine ||
                original.column !== nodeColumn) {
                original.line = nodeLine;
                original.column = nodeColumn;

                generated.line = line;
                generated.column = column;

                if (sourceMappingActive) {
                    sourceMappingActive = false;
                    if (generated.line !== activatedGenerated.line ||
                        generated.column !== activatedGenerated.column) {
                        map.addMapping(activatedMapping);
                    }
                }

                sourceMappingActive = true;
                map.addMapping({
                    source: node.loc.source,
                    original: original,
                    generated: generated
                });
            }
        }

        handlersNode.call(this, node);

        if (sourceMappingActive && trackNodes.hasOwnProperty(node.type)) {
            activatedGenerated.line = line;
            activatedGenerated.column = column;
        }
    };

    var handlersChunk = handlers.chunk;
    handlers.chunk = function(chunk) {
        for (var i = 0; i < chunk.length; i++) {
            if (chunk.charCodeAt(i) === 10) { // \n
                line++;
                column = 0;
            } else {
                column++;
            }
        }

        handlersChunk(chunk);
    };

    var handlersResult = handlers.result;
    handlers.result = function() {
        if (sourceMappingActive) {
            map.addMapping(activatedMapping);
        }

        return {
            css: handlersResult(),
            map: map
        };
    };

    return handlers;
};


/***/ }),

/***/ "./node_modules/css-tree/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/css-tree/lib/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./syntax */ "./node_modules/css-tree/lib/syntax/index.js");


/***/ }),

/***/ "./node_modules/css-tree/lib/lexer/Lexer.js":
/*!**************************************************!*\
  !*** ./node_modules/css-tree/lib/lexer/Lexer.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var SyntaxReferenceError = __webpack_require__(/*! ./error */ "./node_modules/css-tree/lib/lexer/error.js").SyntaxReferenceError;
var SyntaxMatchError = __webpack_require__(/*! ./error */ "./node_modules/css-tree/lib/lexer/error.js").SyntaxMatchError;
var names = __webpack_require__(/*! ../utils/names */ "./node_modules/css-tree/lib/utils/names.js");
var generic = __webpack_require__(/*! ./generic */ "./node_modules/css-tree/lib/lexer/generic.js");
var parse = __webpack_require__(/*! ../definition-syntax/parse */ "./node_modules/css-tree/lib/definition-syntax/parse.js");
var generate = __webpack_require__(/*! ../definition-syntax/generate */ "./node_modules/css-tree/lib/definition-syntax/generate.js");
var walk = __webpack_require__(/*! ../definition-syntax/walk */ "./node_modules/css-tree/lib/definition-syntax/walk.js");
var prepareTokens = __webpack_require__(/*! ./prepare-tokens */ "./node_modules/css-tree/lib/lexer/prepare-tokens.js");
var buildMatchGraph = __webpack_require__(/*! ./match-graph */ "./node_modules/css-tree/lib/lexer/match-graph.js").buildMatchGraph;
var matchAsTree = __webpack_require__(/*! ./match */ "./node_modules/css-tree/lib/lexer/match.js").matchAsTree;
var trace = __webpack_require__(/*! ./trace */ "./node_modules/css-tree/lib/lexer/trace.js");
var search = __webpack_require__(/*! ./search */ "./node_modules/css-tree/lib/lexer/search.js");
var getStructureFromConfig = __webpack_require__(/*! ./structure */ "./node_modules/css-tree/lib/lexer/structure.js").getStructureFromConfig;
var cssWideKeywords = buildMatchGraph('inherit | initial | unset');
var cssWideKeywordsWithExpression = buildMatchGraph('inherit | initial | unset | <-ms-legacy-expression>');

function dumpMapSyntax(map, compact, syntaxAsAst) {
    var result = {};

    for (var name in map) {
        if (map[name].syntax) {
            result[name] = syntaxAsAst
                ? map[name].syntax
                : generate(map[name].syntax, { compact: compact });
        }
    }

    return result;
}

function dumpAtruleMapSyntax(map, compact, syntaxAsAst) {
    const result = {};

    for (const [name, atrule] of Object.entries(map)) {
        result[name] = {
            prelude: atrule.prelude && (
                syntaxAsAst
                    ? atrule.prelude.syntax
                    : generate(atrule.prelude.syntax, { compact })
            ),
            descriptors: atrule.descriptors && dumpMapSyntax(atrule.descriptors, compact, syntaxAsAst)
        };
    }

    return result;
}

function valueHasVar(tokens) {
    for (var i = 0; i < tokens.length; i++) {
        if (tokens[i].value.toLowerCase() === 'var(') {
            return true;
        }
    }

    return false;
}

function buildMatchResult(match, error, iterations) {
    return {
        matched: match,
        iterations: iterations,
        error: error,
        getTrace: trace.getTrace,
        isType: trace.isType,
        isProperty: trace.isProperty,
        isKeyword: trace.isKeyword
    };
}

function matchSyntax(lexer, syntax, value, useCommon) {
    var tokens = prepareTokens(value, lexer.syntax);
    var result;

    if (valueHasVar(tokens)) {
        return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));
    }

    if (useCommon) {
        result = matchAsTree(tokens, lexer.valueCommonSyntax, lexer);
    }

    if (!useCommon || !result.match) {
        result = matchAsTree(tokens, syntax.match, lexer);
        if (!result.match) {
            return buildMatchResult(
                null,
                new SyntaxMatchError(result.reason, syntax.syntax, value, result),
                result.iterations
            );
        }
    }

    return buildMatchResult(result.match, null, result.iterations);
}

var Lexer = function(config, syntax, structure) {
    this.valueCommonSyntax = cssWideKeywords;
    this.syntax = syntax;
    this.generic = false;
    this.atrules = {};
    this.properties = {};
    this.types = {};
    this.structure = structure || getStructureFromConfig(config);

    if (config) {
        if (config.types) {
            for (var name in config.types) {
                this.addType_(name, config.types[name]);
            }
        }

        if (config.generic) {
            this.generic = true;
            for (var name in generic) {
                this.addType_(name, generic[name]);
            }
        }

        if (config.atrules) {
            for (var name in config.atrules) {
                this.addAtrule_(name, config.atrules[name]);
            }
        }

        if (config.properties) {
            for (var name in config.properties) {
                this.addProperty_(name, config.properties[name]);
            }
        }
    }
};

Lexer.prototype = {
    structure: {},
    checkStructure: function(ast) {
        function collectWarning(node, message) {
            warns.push({
                node: node,
                message: message
            });
        }

        var structure = this.structure;
        var warns = [];

        this.syntax.walk(ast, function(node) {
            if (structure.hasOwnProperty(node.type)) {
                structure[node.type].check(node, collectWarning);
            } else {
                collectWarning(node, 'Unknown node type `' + node.type + '`');
            }
        });

        return warns.length ? warns : false;
    },

    createDescriptor: function(syntax, type, name, parent = null) {
        var ref = {
            type: type,
            name: name
        };
        var descriptor = {
            type: type,
            name: name,
            parent: parent,
            syntax: null,
            match: null
        };

        if (typeof syntax === 'function') {
            descriptor.match = buildMatchGraph(syntax, ref);
        } else {
            if (typeof syntax === 'string') {
                // lazy parsing on first access
                Object.defineProperty(descriptor, 'syntax', {
                    get: function() {
                        Object.defineProperty(descriptor, 'syntax', {
                            value: parse(syntax)
                        });

                        return descriptor.syntax;
                    }
                });
            } else {
                descriptor.syntax = syntax;
            }

            // lazy graph build on first access
            Object.defineProperty(descriptor, 'match', {
                get: function() {
                    Object.defineProperty(descriptor, 'match', {
                        value: buildMatchGraph(descriptor.syntax, ref)
                    });

                    return descriptor.match;
                }
            });
        }

        return descriptor;
    },
    addAtrule_: function(name, syntax) {
        if (!syntax) {
            return;
        }

        this.atrules[name] = {
            type: 'Atrule',
            name: name,
            prelude: syntax.prelude ? this.createDescriptor(syntax.prelude, 'AtrulePrelude', name) : null,
            descriptors: syntax.descriptors
                ? Object.keys(syntax.descriptors).reduce((res, descName) => {
                    res[descName] = this.createDescriptor(syntax.descriptors[descName], 'AtruleDescriptor', descName, name);
                    return res;
                }, {})
                : null
        };
    },
    addProperty_: function(name, syntax) {
        if (!syntax) {
            return;
        }

        this.properties[name] = this.createDescriptor(syntax, 'Property', name);
    },
    addType_: function(name, syntax) {
        if (!syntax) {
            return;
        }

        this.types[name] = this.createDescriptor(syntax, 'Type', name);

        if (syntax === generic['-ms-legacy-expression']) {
            this.valueCommonSyntax = cssWideKeywordsWithExpression;
        }
    },

    checkAtruleName: function(atruleName) {
        if (!this.getAtrule(atruleName)) {
            return new SyntaxReferenceError('Unknown at-rule', '@' + atruleName);
        }
    },
    checkAtrulePrelude: function(atruleName, prelude) {
        let error = this.checkAtruleName(atruleName);

        if (error) {
            return error;
        }

        var atrule = this.getAtrule(atruleName);

        if (!atrule.prelude && prelude) {
            return new SyntaxError('At-rule `@' + atruleName + '` should not contain a prelude');
        }

        if (atrule.prelude && !prelude) {
            return new SyntaxError('At-rule `@' + atruleName + '` should contain a prelude');
        }
    },
    checkAtruleDescriptorName: function(atruleName, descriptorName) {
        let error = this.checkAtruleName(atruleName);

        if (error) {
            return error;
        }

        var atrule = this.getAtrule(atruleName);
        var descriptor = names.keyword(descriptorName);

        if (!atrule.descriptors) {
            return new SyntaxError('At-rule `@' + atruleName + '` has no known descriptors');
        }

        if (!atrule.descriptors[descriptor.name] &&
            !atrule.descriptors[descriptor.basename]) {
            return new SyntaxReferenceError('Unknown at-rule descriptor', descriptorName);
        }
    },
    checkPropertyName: function(propertyName) {
        var property = names.property(propertyName);

        // don't match syntax for a custom property
        if (property.custom) {
            return new Error('Lexer matching doesn\'t applicable for custom properties');
        }

        if (!this.getProperty(propertyName)) {
            return new SyntaxReferenceError('Unknown property', propertyName);
        }
    },

    matchAtrulePrelude: function(atruleName, prelude) {
        var error = this.checkAtrulePrelude(atruleName, prelude);

        if (error) {
            return buildMatchResult(null, error);
        }

        if (!prelude) {
            return buildMatchResult(null, null);
        }

        return matchSyntax(this, this.getAtrule(atruleName).prelude, prelude, false);
    },
    matchAtruleDescriptor: function(atruleName, descriptorName, value) {
        var error = this.checkAtruleDescriptorName(atruleName, descriptorName);

        if (error) {
            return buildMatchResult(null, error);
        }

        var atrule = this.getAtrule(atruleName);
        var descriptor = names.keyword(descriptorName);

        return matchSyntax(this, atrule.descriptors[descriptor.name] || atrule.descriptors[descriptor.basename], value, false);
    },
    matchDeclaration: function(node) {
        if (node.type !== 'Declaration') {
            return buildMatchResult(null, new Error('Not a Declaration node'));
        }

        return this.matchProperty(node.property, node.value);
    },
    matchProperty: function(propertyName, value) {
        var error = this.checkPropertyName(propertyName);

        if (error) {
            return buildMatchResult(null, error);
        }

        return matchSyntax(this, this.getProperty(propertyName), value, true);
    },
    matchType: function(typeName, value) {
        var typeSyntax = this.getType(typeName);

        if (!typeSyntax) {
            return buildMatchResult(null, new SyntaxReferenceError('Unknown type', typeName));
        }

        return matchSyntax(this, typeSyntax, value, false);
    },
    match: function(syntax, value) {
        if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {
            return buildMatchResult(null, new SyntaxReferenceError('Bad syntax'));
        }

        if (typeof syntax === 'string' || !syntax.match) {
            syntax = this.createDescriptor(syntax, 'Type', 'anonymous');
        }

        return matchSyntax(this, syntax, value, false);
    },

    findValueFragments: function(propertyName, value, type, name) {
        return search.matchFragments(this, value, this.matchProperty(propertyName, value), type, name);
    },
    findDeclarationValueFragments: function(declaration, type, name) {
        return search.matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);
    },
    findAllFragments: function(ast, type, name) {
        var result = [];

        this.syntax.walk(ast, {
            visit: 'Declaration',
            enter: function(declaration) {
                result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));
            }.bind(this)
        });

        return result;
    },

    getAtrule: function(atruleName, fallbackBasename = true) {
        var atrule = names.keyword(atruleName);
        var atruleEntry = atrule.vendor && fallbackBasename
            ? this.atrules[atrule.name] || this.atrules[atrule.basename]
            : this.atrules[atrule.name];

        return atruleEntry || null;
    },
    getAtrulePrelude: function(atruleName, fallbackBasename = true) {
        const atrule = this.getAtrule(atruleName, fallbackBasename);

        return atrule && atrule.prelude || null;
    },
    getAtruleDescriptor: function(atruleName, name) {
        return this.atrules.hasOwnProperty(atruleName) && this.atrules.declarators
            ? this.atrules[atruleName].declarators[name] || null
            : null;
    },
    getProperty: function(propertyName, fallbackBasename = true) {
        var property = names.property(propertyName);
        var propertyEntry = property.vendor && fallbackBasename
            ? this.properties[property.name] || this.properties[property.basename]
            : this.properties[property.name];

        return propertyEntry || null;
    },
    getType: function(name) {
        return this.types.hasOwnProperty(name) ? this.types[name] : null;
    },

    validate: function() {
        function validate(syntax, name, broken, descriptor) {
            if (broken.hasOwnProperty(name)) {
                return broken[name];
            }

            broken[name] = false;
            if (descriptor.syntax !== null) {
                walk(descriptor.syntax, function(node) {
                    if (node.type !== 'Type' && node.type !== 'Property') {
                        return;
                    }

                    var map = node.type === 'Type' ? syntax.types : syntax.properties;
                    var brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;

                    if (!map.hasOwnProperty(node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {
                        broken[name] = true;
                    }
                }, this);
            }
        }

        var brokenTypes = {};
        var brokenProperties = {};

        for (var key in this.types) {
            validate(this, key, brokenTypes, this.types[key]);
        }

        for (var key in this.properties) {
            validate(this, key, brokenProperties, this.properties[key]);
        }

        brokenTypes = Object.keys(brokenTypes).filter(function(name) {
            return brokenTypes[name];
        });
        brokenProperties = Object.keys(brokenProperties).filter(function(name) {
            return brokenProperties[name];
        });

        if (brokenTypes.length || brokenProperties.length) {
            return {
                types: brokenTypes,
                properties: brokenProperties
            };
        }

        return null;
    },
    dump: function(syntaxAsAst, pretty) {
        return {
            generic: this.generic,
            types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),
            properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst),
            atrules: dumpAtruleMapSyntax(this.atrules, !pretty, syntaxAsAst)
        };
    },
    toString: function() {
        return JSON.stringify(this.dump());
    }
};

module.exports = Lexer;


/***/ }),

/***/ "./node_modules/css-tree/lib/lexer/error.js":
/*!**************************************************!*\
  !*** ./node_modules/css-tree/lib/lexer/error.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const createCustomError = __webpack_require__(/*! ../utils/createCustomError */ "./node_modules/css-tree/lib/utils/createCustomError.js");
const generate = __webpack_require__(/*! ../definition-syntax/generate */ "./node_modules/css-tree/lib/definition-syntax/generate.js");
const defaultLoc = { offset: 0, line: 1, column: 1 };

function locateMismatch(matchResult, node) {
    const tokens = matchResult.tokens;
    const longestMatch = matchResult.longestMatch;
    const mismatchNode = longestMatch < tokens.length ? tokens[longestMatch].node || null : null;
    const badNode = mismatchNode !== node ? mismatchNode : null;
    let mismatchOffset = 0;
    let mismatchLength = 0;
    let entries = 0;
    let css = '';
    let start;
    let end;

    for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i].value;

        if (i === longestMatch) {
            mismatchLength = token.length;
            mismatchOffset = css.length;
        }

        if (badNode !== null && tokens[i].node === badNode) {
            if (i <= longestMatch) {
                entries++;
            } else {
                entries = 0;
            }
        }

        css += token;
    }

    if (longestMatch === tokens.length || entries > 1) { // last
        start = fromLoc(badNode || node, 'end') || buildLoc(defaultLoc, css);
        end = buildLoc(start);
    } else {
        start = fromLoc(badNode, 'start') ||
            buildLoc(fromLoc(node, 'start') || defaultLoc, css.slice(0, mismatchOffset));
        end = fromLoc(badNode, 'end') ||
            buildLoc(start, css.substr(mismatchOffset, mismatchLength));
    }

    return {
        css,
        mismatchOffset,
        mismatchLength,
        start,
        end
    };
}

function fromLoc(node, point) {
    const value = node && node.loc && node.loc[point];

    if (value) {
        return 'line' in value ? buildLoc(value) : value;
    }

    return null;
}

function buildLoc({ offset, line, column }, extra) {
    const loc = {
        offset,
        line,
        column
    };

    if (extra) {
        const lines = extra.split(/\n|\r\n?|\f/);

        loc.offset += extra.length;
        loc.line += lines.length - 1;
        loc.column = lines.length === 1 ? loc.column + extra.length : lines.pop().length + 1;
    }

    return loc;
}

const SyntaxReferenceError = function(type, referenceName) {
    const error = createCustomError(
        'SyntaxReferenceError',
        type + (referenceName ? ' `' + referenceName + '`' : '')
    );

    error.reference = referenceName;

    return error;
};

const SyntaxMatchError = function(message, syntax, node, matchResult) {
    const error = createCustomError('SyntaxMatchError', message);
    const {
        css,
        mismatchOffset,
        mismatchLength,
        start,
        end
    } = locateMismatch(matchResult, node);

    error.rawMessage = message;
    error.syntax = syntax ? generate(syntax) : '<generic>';
    error.css = css;
    error.mismatchOffset = mismatchOffset;
    error.mismatchLength = mismatchLength;
    error.message = message + '\n' +
        '  syntax: ' + error.syntax + '\n' +
        '   value: ' + (css || '<empty string>') + '\n' +
        '  --------' + new Array(error.mismatchOffset + 1).join('-') + '^';

    Object.assign(error, start);
    error.loc = {
        source: (node && node.loc && node.loc.source) || '<unknown>',
        start,
        end
    };

    return error;
};

module.exports = {
    SyntaxReferenceError,
    SyntaxMatchError
};


/***/ }),

/***/ "./node_modules/css-tree/lib/lexer/generic-an-plus-b.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-tree/lib/lexer/generic-an-plus-b.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isDigit = __webpack_require__(/*! ../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").isDigit;
var cmpChar = __webpack_require__(/*! ../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").cmpChar;
var TYPE = __webpack_require__(/*! ../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var DELIM = TYPE.Delim;
var WHITESPACE = TYPE.WhiteSpace;
var COMMENT = TYPE.Comment;
var IDENT = TYPE.Ident;
var NUMBER = TYPE.Number;
var DIMENSION = TYPE.Dimension;
var PLUSSIGN = 0x002B;    // U+002B PLUS SIGN (+)
var HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)
var N = 0x006E;           // U+006E LATIN SMALL LETTER N (n)
var DISALLOW_SIGN = true;
var ALLOW_SIGN = false;

function isDelim(token, code) {
    return token !== null && token.type === DELIM && token.value.charCodeAt(0) === code;
}

function skipSC(token, offset, getNextToken) {
    while (token !== null && (token.type === WHITESPACE || token.type === COMMENT)) {
        token = getNextToken(++offset);
    }

    return offset;
}

function checkInteger(token, valueOffset, disallowSign, offset) {
    if (!token) {
        return 0;
    }

    var code = token.value.charCodeAt(valueOffset);

    if (code === PLUSSIGN || code === HYPHENMINUS) {
        if (disallowSign) {
            // Number sign is not allowed
            return 0;
        }
        valueOffset++;
    }

    for (; valueOffset < token.value.length; valueOffset++) {
        if (!isDigit(token.value.charCodeAt(valueOffset))) {
            // Integer is expected
            return 0;
        }
    }

    return offset + 1;
}

// ... <signed-integer>
// ... ['+' | '-'] <signless-integer>
function consumeB(token, offset_, getNextToken) {
    var sign = false;
    var offset = skipSC(token, offset_, getNextToken);

    token = getNextToken(offset);

    if (token === null) {
        return offset_;
    }

    if (token.type !== NUMBER) {
        if (isDelim(token, PLUSSIGN) || isDelim(token, HYPHENMINUS)) {
            sign = true;
            offset = skipSC(getNextToken(++offset), offset, getNextToken);
            token = getNextToken(offset);

            if (token === null && token.type !== NUMBER) {
                return 0;
            }
        } else {
            return offset_;
        }
    }

    if (!sign) {
        var code = token.value.charCodeAt(0);
        if (code !== PLUSSIGN && code !== HYPHENMINUS) {
            // Number sign is expected
            return 0;
        }
    }

    return checkInteger(token, sign ? 0 : 1, sign, offset);
}

// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb
module.exports = function anPlusB(token, getNextToken) {
    /* eslint-disable brace-style*/
    var offset = 0;

    if (!token) {
        return 0;
    }

    // <integer>
    if (token.type === NUMBER) {
        return checkInteger(token, 0, ALLOW_SIGN, offset); // b
    }

    // -n
    // -n <signed-integer>
    // -n ['+' | '-'] <signless-integer>
    // -n- <signless-integer>
    // <dashndashdigit-ident>
    else if (token.type === IDENT && token.value.charCodeAt(0) === HYPHENMINUS) {
        // expect 1st char is N
        if (!cmpChar(token.value, 1, N)) {
            return 0;
        }

        switch (token.value.length) {
            // -n
            // -n <signed-integer>
            // -n ['+' | '-'] <signless-integer>
            case 2:
                return consumeB(getNextToken(++offset), offset, getNextToken);

            // -n- <signless-integer>
            case 3:
                if (token.value.charCodeAt(2) !== HYPHENMINUS) {
                    return 0;
                }

                offset = skipSC(getNextToken(++offset), offset, getNextToken);
                token = getNextToken(offset);

                return checkInteger(token, 0, DISALLOW_SIGN, offset);

            // <dashndashdigit-ident>
            default:
                if (token.value.charCodeAt(2) !== HYPHENMINUS) {
                    return 0;
                }

                return checkInteger(token, 3, DISALLOW_SIGN, offset);
        }
    }

    // '+'? n
    // '+'? n <signed-integer>
    // '+'? n ['+' | '-'] <signless-integer>
    // '+'? n- <signless-integer>
    // '+'? <ndashdigit-ident>
    else if (token.type === IDENT || (isDelim(token, PLUSSIGN) && getNextToken(offset + 1).type === IDENT)) {
        // just ignore a plus
        if (token.type !== IDENT) {
            token = getNextToken(++offset);
        }

        if (token === null || !cmpChar(token.value, 0, N)) {
            return 0;
        }

        switch (token.value.length) {
            // '+'? n
            // '+'? n <signed-integer>
            // '+'? n ['+' | '-'] <signless-integer>
            case 1:
                return consumeB(getNextToken(++offset), offset, getNextToken);

            // '+'? n- <signless-integer>
            case 2:
                if (token.value.charCodeAt(1) !== HYPHENMINUS) {
                    return 0;
                }

                offset = skipSC(getNextToken(++offset), offset, getNextToken);
                token = getNextToken(offset);

                return checkInteger(token, 0, DISALLOW_SIGN, offset);

            // '+'? <ndashdigit-ident>
            default:
                if (token.value.charCodeAt(1) !== HYPHENMINUS) {
                    return 0;
                }

                return checkInteger(token, 2, DISALLOW_SIGN, offset);
        }
    }

    // <ndashdigit-dimension>
    // <ndash-dimension> <signless-integer>
    // <n-dimension>
    // <n-dimension> <signed-integer>
    // <n-dimension> ['+' | '-'] <signless-integer>
    else if (token.type === DIMENSION) {
        var code = token.value.charCodeAt(0);
        var sign = code === PLUSSIGN || code === HYPHENMINUS ? 1 : 0;

        for (var i = sign; i < token.value.length; i++) {
            if (!isDigit(token.value.charCodeAt(i))) {
                break;
            }
        }

        if (i === sign) {
            // Integer is expected
            return 0;
        }

        if (!cmpChar(token.value, i, N)) {
            return 0;
        }

        // <n-dimension>
        // <n-dimension> <signed-integer>
        // <n-dimension> ['+' | '-'] <signless-integer>
        if (i + 1 === token.value.length) {
            return consumeB(getNextToken(++offset), offset, getNextToken);
        } else {
            if (token.value.charCodeAt(i + 1) !== HYPHENMINUS) {
                return 0;
            }

            // <ndash-dimension> <signless-integer>
            if (i + 2 === token.value.length) {
                offset = skipSC(getNextToken(++offset), offset, getNextToken);
                token = getNextToken(offset);

                return checkInteger(token, 0, DISALLOW_SIGN, offset);
            }
            // <ndashdigit-dimension>
            else {
                return checkInteger(token, i + 2, DISALLOW_SIGN, offset);
            }
        }
    }

    return 0;
};


/***/ }),

/***/ "./node_modules/css-tree/lib/lexer/generic-urange.js":
/*!***********************************************************!*\
  !*** ./node_modules/css-tree/lib/lexer/generic-urange.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isHexDigit = __webpack_require__(/*! ../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").isHexDigit;
var cmpChar = __webpack_require__(/*! ../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").cmpChar;
var TYPE = __webpack_require__(/*! ../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var IDENT = TYPE.Ident;
var DELIM = TYPE.Delim;
var NUMBER = TYPE.Number;
var DIMENSION = TYPE.Dimension;
var PLUSSIGN = 0x002B;     // U+002B PLUS SIGN (+)
var HYPHENMINUS = 0x002D;  // U+002D HYPHEN-MINUS (-)
var QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)
var U = 0x0075;            // U+0075 LATIN SMALL LETTER U (u)

function isDelim(token, code) {
    return token !== null && token.type === DELIM && token.value.charCodeAt(0) === code;
}

function startsWith(token, code) {
    return token.value.charCodeAt(0) === code;
}

function hexSequence(token, offset, allowDash) {
    for (var pos = offset, hexlen = 0; pos < token.value.length; pos++) {
        var code = token.value.charCodeAt(pos);

        if (code === HYPHENMINUS && allowDash && hexlen !== 0) {
            if (hexSequence(token, offset + hexlen + 1, false) > 0) {
                return 6; // dissallow following question marks
            }

            return 0; // dash at the ending of a hex sequence is not allowed
        }

        if (!isHexDigit(code)) {
            return 0; // not a hex digit
        }

        if (++hexlen > 6) {
            return 0; // too many hex digits
        };
    }

    return hexlen;
}

function withQuestionMarkSequence(consumed, length, getNextToken) {
    if (!consumed) {
        return 0; // nothing consumed
    }

    while (isDelim(getNextToken(length), QUESTIONMARK)) {
        if (++consumed > 6) {
            return 0; // too many question marks
        }

        length++;
    }

    return length;
}

// https://drafts.csswg.org/css-syntax/#urange
// Informally, the <urange> production has three forms:
// U+0001
//      Defines a range consisting of a single code point, in this case the code point "1".
// U+0001-00ff
//      Defines a range of codepoints between the first and the second value, in this case
//      the range between "1" and "ff" (255 in decimal) inclusive.
// U+00??
//      Defines a range of codepoints where the "?" characters range over all hex digits,
//      in this case defining the same as the value U+0000-00ff.
// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat "?" as a hexadecimal digit).
//
// <urange> =
//   u '+' <ident-token> '?'* |
//   u <dimension-token> '?'* |
//   u <number-token> '?'* |
//   u <number-token> <dimension-token> |
//   u <number-token> <number-token> |
//   u '+' '?'+
module.exports = function urange(token, getNextToken) {
    var length = 0;

    // should start with `u` or `U`
    if (token === null || token.type !== IDENT || !cmpChar(token.value, 0, U)) {
        return 0;
    }

    token = getNextToken(++length);
    if (token === null) {
        return 0;
    }

    // u '+' <ident-token> '?'*
    // u '+' '?'+
    if (isDelim(token, PLUSSIGN)) {
        token = getNextToken(++length);
        if (token === null) {
            return 0;
        }

        if (token.type === IDENT) {
            // u '+' <ident-token> '?'*
            return withQuestionMarkSequence(hexSequence(token, 0, true), ++length, getNextToken);
        }

        if (isDelim(token, QUESTIONMARK)) {
            // u '+' '?'+
            return withQuestionMarkSequence(1, ++length, getNextToken);
        }

        // Hex digit or question mark is expected
        return 0;
    }

    // u <number-token> '?'*
    // u <number-token> <dimension-token>
    // u <number-token> <number-token>
    if (token.type === NUMBER) {
        if (!startsWith(token, PLUSSIGN)) {
            return 0;
        }

        var consumedHexLength = hexSequence(token, 1, true);
        if (consumedHexLength === 0) {
            return 0;
        }

        token = getNextToken(++length);
        if (token === null) {
            // u <number-token> <eof>
            return length;
        }

        if (token.type === DIMENSION || token.type === NUMBER) {
            // u <number-token> <dimension-token>
            // u <number-token> <number-token>
            if (!startsWith(token, HYPHENMINUS) || !hexSequence(token, 1, false)) {
                return 0;
            }

            return length + 1;
        }

        // u <number-token> '?'*
        return withQuestionMarkSequence(consumedHexLength, length, getNextToken);
    }

    // u <dimension-token> '?'*
    if (token.type === DIMENSION) {
        if (!startsWith(token, PLUSSIGN)) {
            return 0;
        }

        return withQuestionMarkSequence(hexSequence(token, 1, true), ++length, getNextToken);
    }

    return 0;
};


/***/ }),

/***/ "./node_modules/css-tree/lib/lexer/generic.js":
/*!****************************************************!*\
  !*** ./node_modules/css-tree/lib/lexer/generic.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var tokenizer = __webpack_require__(/*! ../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js");
var isIdentifierStart = tokenizer.isIdentifierStart;
var isHexDigit = tokenizer.isHexDigit;
var isDigit = tokenizer.isDigit;
var cmpStr = tokenizer.cmpStr;
var consumeNumber = tokenizer.consumeNumber;
var TYPE = tokenizer.TYPE;
var anPlusB = __webpack_require__(/*! ./generic-an-plus-b */ "./node_modules/css-tree/lib/lexer/generic-an-plus-b.js");
var urange = __webpack_require__(/*! ./generic-urange */ "./node_modules/css-tree/lib/lexer/generic-urange.js");

var cssWideKeywords = ['unset', 'initial', 'inherit'];
var calcFunctionNames = ['calc(', '-moz-calc(', '-webkit-calc('];

// https://www.w3.org/TR/css-values-3/#lengths
var LENGTH = {
    // absolute length units
    'px': true,
    'mm': true,
    'cm': true,
    'in': true,
    'pt': true,
    'pc': true,
    'q': true,

    // relative length units
    'em': true,
    'ex': true,
    'ch': true,
    'rem': true,

    // viewport-percentage lengths
    'vh': true,
    'vw': true,
    'vmin': true,
    'vmax': true,
    'vm': true
};

var ANGLE = {
    'deg': true,
    'grad': true,
    'rad': true,
    'turn': true
};

var TIME = {
    's': true,
    'ms': true
};

var FREQUENCY = {
    'hz': true,
    'khz': true
};

// https://www.w3.org/TR/css-values-3/#resolution (https://drafts.csswg.org/css-values/#resolution)
var RESOLUTION = {
    'dpi': true,
    'dpcm': true,
    'dppx': true,
    'x': true      // https://github.com/w3c/csswg-drafts/issues/461
};

// https://drafts.csswg.org/css-grid/#fr-unit
var FLEX = {
    'fr': true
};

// https://www.w3.org/TR/css3-speech/#mixing-props-voice-volume
var DECIBEL = {
    'db': true
};

// https://www.w3.org/TR/css3-speech/#voice-props-voice-pitch
var SEMITONES = {
    'st': true
};

// safe char code getter
function charCode(str, index) {
    return index < str.length ? str.charCodeAt(index) : 0;
}

function eqStr(actual, expected) {
    return cmpStr(actual, 0, actual.length, expected);
}

function eqStrAny(actual, expected) {
    for (var i = 0; i < expected.length; i++) {
        if (eqStr(actual, expected[i])) {
            return true;
        }
    }

    return false;
}

// IE postfix hack, i.e. 123\0 or 123px\9
function isPostfixIeHack(str, offset) {
    if (offset !== str.length - 2) {
        return false;
    }

    return (
        str.charCodeAt(offset) === 0x005C &&  // U+005C REVERSE SOLIDUS (\)
        isDigit(str.charCodeAt(offset + 1))
    );
}

function outOfRange(opts, value, numEnd) {
    if (opts && opts.type === 'Range') {
        var num = Number(
            numEnd !== undefined && numEnd !== value.length
                ? value.substr(0, numEnd)
                : value
        );

        if (isNaN(num)) {
            return true;
        }

        if (opts.min !== null && num < opts.min) {
            return true;
        }

        if (opts.max !== null && num > opts.max) {
            return true;
        }
    }

    return false;
}

function consumeFunction(token, getNextToken) {
    var startIdx = token.index;
    var length = 0;

    // balanced token consuming
    do {
        length++;

        if (token.balance <= startIdx) {
            break;
        }
    } while (token = getNextToken(length));

    return length;
}

// TODO: implement
// can be used wherever <length>, <frequency>, <angle>, <time>, <percentage>, <number>, or <integer> values are allowed
// https://drafts.csswg.org/css-values/#calc-notation
function calc(next) {
    return function(token, getNextToken, opts) {
        if (token === null) {
            return 0;
        }

        if (token.type === TYPE.Function && eqStrAny(token.value, calcFunctionNames)) {
            return consumeFunction(token, getNextToken);
        }

        return next(token, getNextToken, opts);
    };
}

function tokenType(expectedTokenType) {
    return function(token) {
        if (token === null || token.type !== expectedTokenType) {
            return 0;
        }

        return 1;
    };
}

function func(name) {
    name = name + '(';

    return function(token, getNextToken) {
        if (token !== null && eqStr(token.value, name)) {
            return consumeFunction(token, getNextToken);
        }

        return 0;
    };
}

// =========================
// Complex types
//

// https://drafts.csswg.org/css-values-4/#custom-idents
// 4.2. Author-defined Identifiers: the <custom-ident> type
// Some properties accept arbitrary author-defined identifiers as a component value.
// This generic data type is denoted by <custom-ident>, and represents any valid CSS identifier
// that would not be misinterpreted as a pre-defined keyword in that property’s value definition.
//
// See also: https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident
function customIdent(token) {
    if (token === null || token.type !== TYPE.Ident) {
        return 0;
    }

    var name = token.value.toLowerCase();

    // The CSS-wide keywords are not valid <custom-ident>s
    if (eqStrAny(name, cssWideKeywords)) {
        return 0;
    }

    // The default keyword is reserved and is also not a valid <custom-ident>
    if (eqStr(name, 'default')) {
        return 0;
    }

    // TODO: ignore property specific keywords (as described https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident)
    // Specifications using <custom-ident> must specify clearly what other keywords
    // are excluded from <custom-ident>, if any—for example by saying that any pre-defined keywords
    // in that property’s value definition are excluded. Excluded keywords are excluded
    // in all ASCII case permutations.

    return 1;
}

// https://drafts.csswg.org/css-variables/#typedef-custom-property-name
// A custom property is any property whose name starts with two dashes (U+002D HYPHEN-MINUS), like --foo.
// The <custom-property-name> production corresponds to this: it’s defined as any valid identifier
// that starts with two dashes, except -- itself, which is reserved for future use by CSS.
// NOTE: Current implementation treat `--` as a valid name since most (all?) major browsers treat it as valid.
function customPropertyName(token) {
    // ... defined as any valid identifier
    if (token === null || token.type !== TYPE.Ident) {
        return 0;
    }

    // ... that starts with two dashes (U+002D HYPHEN-MINUS)
    if (charCode(token.value, 0) !== 0x002D || charCode(token.value, 1) !== 0x002D) {
        return 0;
    }

    return 1;
}

// https://drafts.csswg.org/css-color-4/#hex-notation
// The syntax of a <hex-color> is a <hash-token> token whose value consists of 3, 4, 6, or 8 hexadecimal digits.
// In other words, a hex color is written as a hash character, "#", followed by some number of digits 0-9 or
// letters a-f (the case of the letters doesn’t matter - #00ff00 is identical to #00FF00).
function hexColor(token) {
    if (token === null || token.type !== TYPE.Hash) {
        return 0;
    }

    var length = token.value.length;

    // valid values (length): #rgb (4), #rgba (5), #rrggbb (7), #rrggbbaa (9)
    if (length !== 4 && length !== 5 && length !== 7 && length !== 9) {
        return 0;
    }

    for (var i = 1; i < length; i++) {
        if (!isHexDigit(token.value.charCodeAt(i))) {
            return 0;
        }
    }

    return 1;
}

function idSelector(token) {
    if (token === null || token.type !== TYPE.Hash) {
        return 0;
    }

    if (!isIdentifierStart(charCode(token.value, 1), charCode(token.value, 2), charCode(token.value, 3))) {
        return 0;
    }

    return 1;
}

// https://drafts.csswg.org/css-syntax/#any-value
// It represents the entirety of what a valid declaration can have as its value.
function declarationValue(token, getNextToken) {
    if (!token) {
        return 0;
    }

    var length = 0;
    var level = 0;
    var startIdx = token.index;

    // The <declaration-value> production matches any sequence of one or more tokens,
    // so long as the sequence ...
    scan:
    do {
        switch (token.type) {
            // ... does not contain <bad-string-token>, <bad-url-token>,
            case TYPE.BadString:
            case TYPE.BadUrl:
                break scan;

            // ... unmatched <)-token>, <]-token>, or <}-token>,
            case TYPE.RightCurlyBracket:
            case TYPE.RightParenthesis:
            case TYPE.RightSquareBracket:
                if (token.balance > token.index || token.balance < startIdx) {
                    break scan;
                }

                level--;
                break;

            // ... or top-level <semicolon-token> tokens
            case TYPE.Semicolon:
                if (level === 0) {
                    break scan;
                }

                break;

            // ... or <delim-token> tokens with a value of "!"
            case TYPE.Delim:
                if (token.value === '!' && level === 0) {
                    break scan;
                }

                break;

            case TYPE.Function:
            case TYPE.LeftParenthesis:
            case TYPE.LeftSquareBracket:
            case TYPE.LeftCurlyBracket:
                level++;
                break;
        }

        length++;

        // until balance closing
        if (token.balance <= startIdx) {
            break;
        }
    } while (token = getNextToken(length));

    return length;
}

// https://drafts.csswg.org/css-syntax/#any-value
// The <any-value> production is identical to <declaration-value>, but also
// allows top-level <semicolon-token> tokens and <delim-token> tokens
// with a value of "!". It represents the entirety of what valid CSS can be in any context.
function anyValue(token, getNextToken) {
    if (!token) {
        return 0;
    }

    var startIdx = token.index;
    var length = 0;

    // The <any-value> production matches any sequence of one or more tokens,
    // so long as the sequence ...
    scan:
    do {
        switch (token.type) {
            // ... does not contain <bad-string-token>, <bad-url-token>,
            case TYPE.BadString:
            case TYPE.BadUrl:
                break scan;

            // ... unmatched <)-token>, <]-token>, or <}-token>,
            case TYPE.RightCurlyBracket:
            case TYPE.RightParenthesis:
            case TYPE.RightSquareBracket:
                if (token.balance > token.index || token.balance < startIdx) {
                    break scan;
                }

                break;
        }

        length++;

        // until balance closing
        if (token.balance <= startIdx) {
            break;
        }
    } while (token = getNextToken(length));

    return length;
}

// =========================
// Dimensions
//

function dimension(type) {
    return function(token, getNextToken, opts) {
        if (token === null || token.type !== TYPE.Dimension) {
            return 0;
        }

        var numberEnd = consumeNumber(token.value, 0);

        // check unit
        if (type !== null) {
            // check for IE postfix hack, i.e. 123px\0 or 123px\9
            var reverseSolidusOffset = token.value.indexOf('\\', numberEnd);
            var unit = reverseSolidusOffset === -1 || !isPostfixIeHack(token.value, reverseSolidusOffset)
                ? token.value.substr(numberEnd)
                : token.value.substring(numberEnd, reverseSolidusOffset);

            if (type.hasOwnProperty(unit.toLowerCase()) === false) {
                return 0;
            }
        }

        // check range if specified
        if (outOfRange(opts, token.value, numberEnd)) {
            return 0;
        }

        return 1;
    };
}

// =========================
// Percentage
//

// §5.5. Percentages: the <percentage> type
// https://drafts.csswg.org/css-values-4/#percentages
function percentage(token, getNextToken, opts) {
    // ... corresponds to the <percentage-token> production
    if (token === null || token.type !== TYPE.Percentage) {
        return 0;
    }

    // check range if specified
    if (outOfRange(opts, token.value, token.value.length - 1)) {
        return 0;
    }

    return 1;
}

// =========================
// Numeric
//

// https://drafts.csswg.org/css-values-4/#numbers
// The value <zero> represents a literal number with the value 0. Expressions that merely
// evaluate to a <number> with the value 0 (for example, calc(0)) do not match <zero>;
// only literal <number-token>s do.
function zero(next) {
    if (typeof next !== 'function') {
        next = function() {
            return 0;
        };
    }

    return function(token, getNextToken, opts) {
        if (token !== null && token.type === TYPE.Number) {
            if (Number(token.value) === 0) {
                return 1;
            }
        }

        return next(token, getNextToken, opts);
    };
}

// § 5.3. Real Numbers: the <number> type
// https://drafts.csswg.org/css-values-4/#numbers
// Number values are denoted by <number>, and represent real numbers, possibly with a fractional component.
// ... It corresponds to the <number-token> production
function number(token, getNextToken, opts) {
    if (token === null) {
        return 0;
    }

    var numberEnd = consumeNumber(token.value, 0);
    var isNumber = numberEnd === token.value.length;
    if (!isNumber && !isPostfixIeHack(token.value, numberEnd)) {
        return 0;
    }

    // check range if specified
    if (outOfRange(opts, token.value, numberEnd)) {
        return 0;
    }

    return 1;
}

// §5.2. Integers: the <integer> type
// https://drafts.csswg.org/css-values-4/#integers
function integer(token, getNextToken, opts) {
    // ... corresponds to a subset of the <number-token> production
    if (token === null || token.type !== TYPE.Number) {
        return 0;
    }

    // The first digit of an integer may be immediately preceded by `-` or `+` to indicate the integer’s sign.
    var i = token.value.charCodeAt(0) === 0x002B ||       // U+002B PLUS SIGN (+)
            token.value.charCodeAt(0) === 0x002D ? 1 : 0; // U+002D HYPHEN-MINUS (-)

    // When written literally, an integer is one or more decimal digits 0 through 9 ...
    for (; i < token.value.length; i++) {
        if (!isDigit(token.value.charCodeAt(i))) {
            return 0;
        }
    }

    // check range if specified
    if (outOfRange(opts, token.value, i)) {
        return 0;
    }

    return 1;
}

module.exports = {
    // token types
    'ident-token': tokenType(TYPE.Ident),
    'function-token': tokenType(TYPE.Function),
    'at-keyword-token': tokenType(TYPE.AtKeyword),
    'hash-token': tokenType(TYPE.Hash),
    'string-token': tokenType(TYPE.String),
    'bad-string-token': tokenType(TYPE.BadString),
    'url-token': tokenType(TYPE.Url),
    'bad-url-token': tokenType(TYPE.BadUrl),
    'delim-token': tokenType(TYPE.Delim),
    'number-token': tokenType(TYPE.Number),
    'percentage-token': tokenType(TYPE.Percentage),
    'dimension-token': tokenType(TYPE.Dimension),
    'whitespace-token': tokenType(TYPE.WhiteSpace),
    'CDO-token': tokenType(TYPE.CDO),
    'CDC-token': tokenType(TYPE.CDC),
    'colon-token': tokenType(TYPE.Colon),
    'semicolon-token': tokenType(TYPE.Semicolon),
    'comma-token': tokenType(TYPE.Comma),
    '[-token': tokenType(TYPE.LeftSquareBracket),
    ']-token': tokenType(TYPE.RightSquareBracket),
    '(-token': tokenType(TYPE.LeftParenthesis),
    ')-token': tokenType(TYPE.RightParenthesis),
    '{-token': tokenType(TYPE.LeftCurlyBracket),
    '}-token': tokenType(TYPE.RightCurlyBracket),

    // token type aliases
    'string': tokenType(TYPE.String),
    'ident': tokenType(TYPE.Ident),

    // complex types
    'custom-ident': customIdent,
    'custom-property-name': customPropertyName,
    'hex-color': hexColor,
    'id-selector': idSelector, // element( <id-selector> )
    'an-plus-b': anPlusB,
    'urange': urange,
    'declaration-value': declarationValue,
    'any-value': anyValue,

    // dimensions
    'dimension': calc(dimension(null)),
    'angle': calc(dimension(ANGLE)),
    'decibel': calc(dimension(DECIBEL)),
    'frequency': calc(dimension(FREQUENCY)),
    'flex': calc(dimension(FLEX)),
    'length': calc(zero(dimension(LENGTH))),
    'resolution': calc(dimension(RESOLUTION)),
    'semitones': calc(dimension(SEMITONES)),
    'time': calc(dimension(TIME)),

    // percentage
    'percentage': calc(percentage),

    // numeric
    'zero': zero(),
    'number': calc(number),
    'integer': calc(integer),

    // old IE stuff
    '-ms-legacy-expression': func('expression')
};


/***/ }),

/***/ "./node_modules/css-tree/lib/lexer/match-graph.js":
/*!********************************************************!*\
  !*** ./node_modules/css-tree/lib/lexer/match-graph.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../definition-syntax/parse */ "./node_modules/css-tree/lib/definition-syntax/parse.js");

var MATCH = { type: 'Match' };
var MISMATCH = { type: 'Mismatch' };
var DISALLOW_EMPTY = { type: 'DisallowEmpty' };
var LEFTPARENTHESIS = 40;  // (
var RIGHTPARENTHESIS = 41; // )

function createCondition(match, thenBranch, elseBranch) {
    // reduce node count
    if (thenBranch === MATCH && elseBranch === MISMATCH) {
        return match;
    }

    if (match === MATCH && thenBranch === MATCH && elseBranch === MATCH) {
        return match;
    }

    if (match.type === 'If' && match.else === MISMATCH && thenBranch === MATCH) {
        thenBranch = match.then;
        match = match.match;
    }

    return {
        type: 'If',
        match: match,
        then: thenBranch,
        else: elseBranch
    };
}

function isFunctionType(name) {
    return (
        name.length > 2 &&
        name.charCodeAt(name.length - 2) === LEFTPARENTHESIS &&
        name.charCodeAt(name.length - 1) === RIGHTPARENTHESIS
    );
}

function isEnumCapatible(term) {
    return (
        term.type === 'Keyword' ||
        term.type === 'AtKeyword' ||
        term.type === 'Function' ||
        term.type === 'Type' && isFunctionType(term.name)
    );
}

function buildGroupMatchGraph(combinator, terms, atLeastOneTermMatched) {
    switch (combinator) {
        case ' ':
            // Juxtaposing components means that all of them must occur, in the given order.
            //
            // a b c
            // =
            // match a
            //   then match b
            //     then match c
            //       then MATCH
            //       else MISMATCH
            //     else MISMATCH
            //   else MISMATCH
            var result = MATCH;

            for (var i = terms.length - 1; i >= 0; i--) {
                var term = terms[i];

                result = createCondition(
                    term,
                    result,
                    MISMATCH
                );
            };

            return result;

        case '|':
            // A bar (|) separates two or more alternatives: exactly one of them must occur.
            //
            // a | b | c
            // =
            // match a
            //   then MATCH
            //   else match b
            //     then MATCH
            //     else match c
            //       then MATCH
            //       else MISMATCH

            var result = MISMATCH;
            var map = null;

            for (var i = terms.length - 1; i >= 0; i--) {
                var term = terms[i];

                // reduce sequence of keywords into a Enum
                if (isEnumCapatible(term)) {
                    if (map === null && i > 0 && isEnumCapatible(terms[i - 1])) {
                        map = Object.create(null);
                        result = createCondition(
                            {
                                type: 'Enum',
                                map: map
                            },
                            MATCH,
                            result
                        );
                    }

                    if (map !== null) {
                        var key = (isFunctionType(term.name) ? term.name.slice(0, -1) : term.name).toLowerCase();
                        if (key in map === false) {
                            map[key] = term;
                            continue;
                        }
                    }
                }

                map = null;

                // create a new conditonal node
                result = createCondition(
                    term,
                    MATCH,
                    result
                );
            };

            return result;

        case '&&':
            // A double ampersand (&&) separates two or more components,
            // all of which must occur, in any order.

            // Use MatchOnce for groups with a large number of terms,
            // since &&-groups produces at least N!-node trees
            if (terms.length > 5) {
                return {
                    type: 'MatchOnce',
                    terms: terms,
                    all: true
                };
            }

            // Use a combination tree for groups with small number of terms
            //
            // a && b && c
            // =
            // match a
            //   then [b && c]
            //   else match b
            //     then [a && c]
            //     else match c
            //       then [a && b]
            //       else MISMATCH
            //
            // a && b
            // =
            // match a
            //   then match b
            //     then MATCH
            //     else MISMATCH
            //   else match b
            //     then match a
            //       then MATCH
            //       else MISMATCH
            //     else MISMATCH
            var result = MISMATCH;

            for (var i = terms.length - 1; i >= 0; i--) {
                var term = terms[i];
                var thenClause;

                if (terms.length > 1) {
                    thenClause = buildGroupMatchGraph(
                        combinator,
                        terms.filter(function(newGroupTerm) {
                            return newGroupTerm !== term;
                        }),
                        false
                    );
                } else {
                    thenClause = MATCH;
                }

                result = createCondition(
                    term,
                    thenClause,
                    result
                );
            };

            return result;

        case '||':
            // A double bar (||) separates two or more options:
            // one or more of them must occur, in any order.

            // Use MatchOnce for groups with a large number of terms,
            // since ||-groups produces at least N!-node trees
            if (terms.length > 5) {
                return {
                    type: 'MatchOnce',
                    terms: terms,
                    all: false
                };
            }

            // Use a combination tree for groups with small number of terms
            //
            // a || b || c
            // =
            // match a
            //   then [b || c]
            //   else match b
            //     then [a || c]
            //     else match c
            //       then [a || b]
            //       else MISMATCH
            //
            // a || b
            // =
            // match a
            //   then match b
            //     then MATCH
            //     else MATCH
            //   else match b
            //     then match a
            //       then MATCH
            //       else MATCH
            //     else MISMATCH
            var result = atLeastOneTermMatched ? MATCH : MISMATCH;

            for (var i = terms.length - 1; i >= 0; i--) {
                var term = terms[i];
                var thenClause;

                if (terms.length > 1) {
                    thenClause = buildGroupMatchGraph(
                        combinator,
                        terms.filter(function(newGroupTerm) {
                            return newGroupTerm !== term;
                        }),
                        true
                    );
                } else {
                    thenClause = MATCH;
                }

                result = createCondition(
                    term,
                    thenClause,
                    result
                );
            };

            return result;
    }
}

function buildMultiplierMatchGraph(node) {
    var result = MATCH;
    var matchTerm = buildMatchGraph(node.term);

    if (node.max === 0) {
        // disable repeating of empty match to prevent infinite loop
        matchTerm = createCondition(
            matchTerm,
            DISALLOW_EMPTY,
            MISMATCH
        );

        // an occurrence count is not limited, make a cycle;
        // to collect more terms on each following matching mismatch
        result = createCondition(
            matchTerm,
            null, // will be a loop
            MISMATCH
        );

        result.then = createCondition(
            MATCH,
            MATCH,
            result // make a loop
        );

        if (node.comma) {
            result.then.else = createCondition(
                { type: 'Comma', syntax: node },
                result,
                MISMATCH
            );
        }
    } else {
        // create a match node chain for [min .. max] interval with optional matches
        for (var i = node.min || 1; i <= node.max; i++) {
            if (node.comma && result !== MATCH) {
                result = createCondition(
                    { type: 'Comma', syntax: node },
                    result,
                    MISMATCH
                );
            }

            result = createCondition(
                matchTerm,
                createCondition(
                    MATCH,
                    MATCH,
                    result
                ),
                MISMATCH
            );
        }
    }

    if (node.min === 0) {
        // allow zero match
        result = createCondition(
            MATCH,
            MATCH,
            result
        );
    } else {
        // create a match node chain to collect [0 ... min - 1] required matches
        for (var i = 0; i < node.min - 1; i++) {
            if (node.comma && result !== MATCH) {
                result = createCondition(
                    { type: 'Comma', syntax: node },
                    result,
                    MISMATCH
                );
            }

            result = createCondition(
                matchTerm,
                result,
                MISMATCH
            );
        }
    }

    return result;
}

function buildMatchGraph(node) {
    if (typeof node === 'function') {
        return {
            type: 'Generic',
            fn: node
        };
    }

    switch (node.type) {
        case 'Group':
            var result = buildGroupMatchGraph(
                node.combinator,
                node.terms.map(buildMatchGraph),
                false
            );

            if (node.disallowEmpty) {
                result = createCondition(
                    result,
                    DISALLOW_EMPTY,
                    MISMATCH
                );
            }

            return result;

        case 'Multiplier':
            return buildMultiplierMatchGraph(node);

        case 'Type':
        case 'Property':
            return {
                type: node.type,
                name: node.name,
                syntax: node
            };

        case 'Keyword':
            return {
                type: node.type,
                name: node.name.toLowerCase(),
                syntax: node
            };

        case 'AtKeyword':
            return {
                type: node.type,
                name: '@' + node.name.toLowerCase(),
                syntax: node
            };

        case 'Function':
            return {
                type: node.type,
                name: node.name.toLowerCase() + '(',
                syntax: node
            };

        case 'String':
            // convert a one char length String to a Token
            if (node.value.length === 3) {
                return {
                    type: 'Token',
                    value: node.value.charAt(1),
                    syntax: node
                };
            }

            // otherwise use it as is
            return {
                type: node.type,
                value: node.value.substr(1, node.value.length - 2).replace(/\\'/g, '\''),
                syntax: node
            };

        case 'Token':
            return {
                type: node.type,
                value: node.value,
                syntax: node
            };

        case 'Comma':
            return {
                type: node.type,
                syntax: node
            };

        default:
            throw new Error('Unknown node type:', node.type);
    }
}

module.exports = {
    MATCH: MATCH,
    MISMATCH: MISMATCH,
    DISALLOW_EMPTY: DISALLOW_EMPTY,
    buildMatchGraph: function(syntaxTree, ref) {
        if (typeof syntaxTree === 'string') {
            syntaxTree = parse(syntaxTree);
        }

        return {
            type: 'MatchGraph',
            match: buildMatchGraph(syntaxTree),
            syntax: ref || null,
            source: syntaxTree
        };
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/lexer/match.js":
/*!**************************************************!*\
  !*** ./node_modules/css-tree/lib/lexer/match.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var hasOwnProperty = Object.prototype.hasOwnProperty;
var matchGraph = __webpack_require__(/*! ./match-graph */ "./node_modules/css-tree/lib/lexer/match-graph.js");
var MATCH = matchGraph.MATCH;
var MISMATCH = matchGraph.MISMATCH;
var DISALLOW_EMPTY = matchGraph.DISALLOW_EMPTY;
var TYPE = __webpack_require__(/*! ../tokenizer/const */ "./node_modules/css-tree/lib/tokenizer/const.js").TYPE;

var STUB = 0;
var TOKEN = 1;
var OPEN_SYNTAX = 2;
var CLOSE_SYNTAX = 3;

var EXIT_REASON_MATCH = 'Match';
var EXIT_REASON_MISMATCH = 'Mismatch';
var EXIT_REASON_ITERATION_LIMIT = 'Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)';

var ITERATION_LIMIT = 15000;
var totalIterationCount = 0;

function reverseList(list) {
    var prev = null;
    var next = null;
    var item = list;

    while (item !== null) {
        next = item.prev;
        item.prev = prev;
        prev = item;
        item = next;
    }

    return prev;
}

function areStringsEqualCaseInsensitive(testStr, referenceStr) {
    if (testStr.length !== referenceStr.length) {
        return false;
    }

    for (var i = 0; i < testStr.length; i++) {
        var testCode = testStr.charCodeAt(i);
        var referenceCode = referenceStr.charCodeAt(i);

        // testCode.toLowerCase() for U+0041 LATIN CAPITAL LETTER A (A) .. U+005A LATIN CAPITAL LETTER Z (Z).
        if (testCode >= 0x0041 && testCode <= 0x005A) {
            testCode = testCode | 32;
        }

        if (testCode !== referenceCode) {
            return false;
        }
    }

    return true;
}

function isContextEdgeDelim(token) {
    if (token.type !== TYPE.Delim) {
        return false;
    }

    // Fix matching for unicode-range: U+30??, U+FF00-FF9F
    // Probably we need to check out previous match instead
    return token.value !== '?';
}

function isCommaContextStart(token) {
    if (token === null) {
        return true;
    }

    return (
        token.type === TYPE.Comma ||
        token.type === TYPE.Function ||
        token.type === TYPE.LeftParenthesis ||
        token.type === TYPE.LeftSquareBracket ||
        token.type === TYPE.LeftCurlyBracket ||
        isContextEdgeDelim(token)
    );
}

function isCommaContextEnd(token) {
    if (token === null) {
        return true;
    }

    return (
        token.type === TYPE.RightParenthesis ||
        token.type === TYPE.RightSquareBracket ||
        token.type === TYPE.RightCurlyBracket ||
        token.type === TYPE.Delim
    );
}

function internalMatch(tokens, state, syntaxes) {
    function moveToNextToken() {
        do {
            tokenIndex++;
            token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;
        } while (token !== null && (token.type === TYPE.WhiteSpace || token.type === TYPE.Comment));
    }

    function getNextToken(offset) {
        var nextIndex = tokenIndex + offset;

        return nextIndex < tokens.length ? tokens[nextIndex] : null;
    }

    function stateSnapshotFromSyntax(nextState, prev) {
        return {
            nextState: nextState,
            matchStack: matchStack,
            syntaxStack: syntaxStack,
            thenStack: thenStack,
            tokenIndex: tokenIndex,
            prev: prev
        };
    }

    function pushThenStack(nextState) {
        thenStack = {
            nextState: nextState,
            matchStack: matchStack,
            syntaxStack: syntaxStack,
            prev: thenStack
        };
    }

    function pushElseStack(nextState) {
        elseStack = stateSnapshotFromSyntax(nextState, elseStack);
    }

    function addTokenToMatch() {
        matchStack = {
            type: TOKEN,
            syntax: state.syntax,
            token: token,
            prev: matchStack
        };

        moveToNextToken();
        syntaxStash = null;

        if (tokenIndex > longestMatch) {
            longestMatch = tokenIndex;
        }
    }

    function openSyntax() {
        syntaxStack = {
            syntax: state.syntax,
            opts: state.syntax.opts || (syntaxStack !== null && syntaxStack.opts) || null,
            prev: syntaxStack
        };

        matchStack = {
            type: OPEN_SYNTAX,
            syntax: state.syntax,
            token: matchStack.token,
            prev: matchStack
        };
    }

    function closeSyntax() {
        if (matchStack.type === OPEN_SYNTAX) {
            matchStack = matchStack.prev;
        } else {
            matchStack = {
                type: CLOSE_SYNTAX,
                syntax: syntaxStack.syntax,
                token: matchStack.token,
                prev: matchStack
            };
        }

        syntaxStack = syntaxStack.prev;
    }

    var syntaxStack = null;
    var thenStack = null;
    var elseStack = null;

    // null – stashing allowed, nothing stashed
    // false – stashing disabled, nothing stashed
    // anithing else – fail stashable syntaxes, some syntax stashed
    var syntaxStash = null;

    var iterationCount = 0; // count iterations and prevent infinite loop
    var exitReason = null;

    var token = null;
    var tokenIndex = -1;
    var longestMatch = 0;
    var matchStack = {
        type: STUB,
        syntax: null,
        token: null,
        prev: null
    };

    moveToNextToken();

    while (exitReason === null && ++iterationCount < ITERATION_LIMIT) {
        // function mapList(list, fn) {
        //     var result = [];
        //     while (list) {
        //         result.unshift(fn(list));
        //         list = list.prev;
        //     }
        //     return result;
        // }
        // console.log('--\n',
        //     '#' + iterationCount,
        //     require('util').inspect({
        //         match: mapList(matchStack, x => x.type === TOKEN ? x.token && x.token.value : x.syntax ? ({ [OPEN_SYNTAX]: '<', [CLOSE_SYNTAX]: '</' }[x.type] || x.type) + '!' + x.syntax.name : null),
        //         token: token && token.value,
        //         tokenIndex,
        //         syntax: syntax.type + (syntax.id ? ' #' + syntax.id : '')
        //     }, { depth: null })
        // );
        switch (state.type) {
            case 'Match':
                if (thenStack === null) {
                    // turn to MISMATCH when some tokens left unmatched
                    if (token !== null) {
                        // doesn't mismatch if just one token left and it's an IE hack
                        if (tokenIndex !== tokens.length - 1 || (token.value !== '\\0' && token.value !== '\\9')) {
                            state = MISMATCH;
                            break;
                        }
                    }

                    // break the main loop, return a result - MATCH
                    exitReason = EXIT_REASON_MATCH;
                    break;
                }

                // go to next syntax (`then` branch)
                state = thenStack.nextState;

                // check match is not empty
                if (state === DISALLOW_EMPTY) {
                    if (thenStack.matchStack === matchStack) {
                        state = MISMATCH;
                        break;
                    } else {
                        state = MATCH;
                    }
                }

                // close syntax if needed
                while (thenStack.syntaxStack !== syntaxStack) {
                    closeSyntax();
                }

                // pop stack
                thenStack = thenStack.prev;
                break;

            case 'Mismatch':
                // when some syntax is stashed
                if (syntaxStash !== null && syntaxStash !== false) {
                    // there is no else branches or a branch reduce match stack
                    if (elseStack === null || tokenIndex > elseStack.tokenIndex) {
                        // restore state from the stash
                        elseStack = syntaxStash;
                        syntaxStash = false; // disable stashing
                    }
                } else if (elseStack === null) {
                    // no else branches -> break the main loop
                    // return a result - MISMATCH
                    exitReason = EXIT_REASON_MISMATCH;
                    break;
                }

                // go to next syntax (`else` branch)
                state = elseStack.nextState;

                // restore all the rest stack states
                thenStack = elseStack.thenStack;
                syntaxStack = elseStack.syntaxStack;
                matchStack = elseStack.matchStack;
                tokenIndex = elseStack.tokenIndex;
                token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;

                // pop stack
                elseStack = elseStack.prev;
                break;

            case 'MatchGraph':
                state = state.match;
                break;

            case 'If':
                // IMPORTANT: else stack push must go first,
                // since it stores the state of thenStack before changes
                if (state.else !== MISMATCH) {
                    pushElseStack(state.else);
                }

                if (state.then !== MATCH) {
                    pushThenStack(state.then);
                }

                state = state.match;
                break;

            case 'MatchOnce':
                state = {
                    type: 'MatchOnceBuffer',
                    syntax: state,
                    index: 0,
                    mask: 0
                };
                break;

            case 'MatchOnceBuffer':
                var terms = state.syntax.terms;

                if (state.index === terms.length) {
                    // no matches at all or it's required all terms to be matched
                    if (state.mask === 0 || state.syntax.all) {
                        state = MISMATCH;
                        break;
                    }

                    // a partial match is ok
                    state = MATCH;
                    break;
                }

                // all terms are matched
                if (state.mask === (1 << terms.length) - 1) {
                    state = MATCH;
                    break;
                }

                for (; state.index < terms.length; state.index++) {
                    var matchFlag = 1 << state.index;

                    if ((state.mask & matchFlag) === 0) {
                        // IMPORTANT: else stack push must go first,
                        // since it stores the state of thenStack before changes
                        pushElseStack(state);
                        pushThenStack({
                            type: 'AddMatchOnce',
                            syntax: state.syntax,
                            mask: state.mask | matchFlag
                        });

                        // match
                        state = terms[state.index++];
                        break;
                    }
                }
                break;

            case 'AddMatchOnce':
                state = {
                    type: 'MatchOnceBuffer',
                    syntax: state.syntax,
                    index: 0,
                    mask: state.mask
                };
                break;

            case 'Enum':
                if (token !== null) {
                    var name = token.value.toLowerCase();

                    // drop \0 and \9 hack from keyword name
                    if (name.indexOf('\\') !== -1) {
                        name = name.replace(/\\[09].*$/, '');
                    }

                    if (hasOwnProperty.call(state.map, name)) {
                        state = state.map[name];
                        break;
                    }
                }

                state = MISMATCH;
                break;

            case 'Generic':
                var opts = syntaxStack !== null ? syntaxStack.opts : null;
                var lastTokenIndex = tokenIndex + Math.floor(state.fn(token, getNextToken, opts));

                if (!isNaN(lastTokenIndex) && lastTokenIndex > tokenIndex) {
                    while (tokenIndex < lastTokenIndex) {
                        addTokenToMatch();
                    }

                    state = MATCH;
                } else {
                    state = MISMATCH;
                }

                break;

            case 'Type':
            case 'Property':
                var syntaxDict = state.type === 'Type' ? 'types' : 'properties';
                var dictSyntax = hasOwnProperty.call(syntaxes, syntaxDict) ? syntaxes[syntaxDict][state.name] : null;

                if (!dictSyntax || !dictSyntax.match) {
                    throw new Error(
                        'Bad syntax reference: ' +
                        (state.type === 'Type'
                            ? '<' + state.name + '>'
                            : '<\'' + state.name + '\'>')
                    );
                }

                // stash a syntax for types with low priority
                if (syntaxStash !== false && token !== null && state.type === 'Type') {
                    var lowPriorityMatching =
                        // https://drafts.csswg.org/css-values-4/#custom-idents
                        // When parsing positionally-ambiguous keywords in a property value, a <custom-ident> production
                        // can only claim the keyword if no other unfulfilled production can claim it.
                        (state.name === 'custom-ident' && token.type === TYPE.Ident) ||

                        // https://drafts.csswg.org/css-values-4/#lengths
                        // ... if a `0` could be parsed as either a <number> or a <length> in a property (such as line-height),
                        // it must parse as a <number>
                        (state.name === 'length' && token.value === '0');

                    if (lowPriorityMatching) {
                        if (syntaxStash === null) {
                            syntaxStash = stateSnapshotFromSyntax(state, elseStack);
                        }

                        state = MISMATCH;
                        break;
                    }
                }

                openSyntax();
                state = dictSyntax.match;
                break;

            case 'Keyword':
                var name = state.name;

                if (token !== null) {
                    var keywordName = token.value;

                    // drop \0 and \9 hack from keyword name
                    if (keywordName.indexOf('\\') !== -1) {
                        keywordName = keywordName.replace(/\\[09].*$/, '');
                    }

                    if (areStringsEqualCaseInsensitive(keywordName, name)) {
                        addTokenToMatch();
                        state = MATCH;
                        break;
                    }
                }

                state = MISMATCH;
                break;

            case 'AtKeyword':
            case 'Function':
                if (token !== null && areStringsEqualCaseInsensitive(token.value, state.name)) {
                    addTokenToMatch();
                    state = MATCH;
                    break;
                }

                state = MISMATCH;
                break;

            case 'Token':
                if (token !== null && token.value === state.value) {
                    addTokenToMatch();
                    state = MATCH;
                    break;
                }

                state = MISMATCH;
                break;

            case 'Comma':
                if (token !== null && token.type === TYPE.Comma) {
                    if (isCommaContextStart(matchStack.token)) {
                        state = MISMATCH;
                    } else {
                        addTokenToMatch();
                        state = isCommaContextEnd(token) ? MISMATCH : MATCH;
                    }
                } else {
                    state = isCommaContextStart(matchStack.token) || isCommaContextEnd(token) ? MATCH : MISMATCH;
                }

                break;

            case 'String':
                var string = '';

                for (var lastTokenIndex = tokenIndex; lastTokenIndex < tokens.length && string.length < state.value.length; lastTokenIndex++) {
                    string += tokens[lastTokenIndex].value;
                }

                if (areStringsEqualCaseInsensitive(string, state.value)) {
                    while (tokenIndex < lastTokenIndex) {
                        addTokenToMatch();
                    }

                    state = MATCH;
                } else {
                    state = MISMATCH;
                }

                break;

            default:
                throw new Error('Unknown node type: ' + state.type);
        }
    }

    totalIterationCount += iterationCount;

    switch (exitReason) {
        case null:
            console.warn('[csstree-match] BREAK after ' + ITERATION_LIMIT + ' iterations');
            exitReason = EXIT_REASON_ITERATION_LIMIT;
            matchStack = null;
            break;

        case EXIT_REASON_MATCH:
            while (syntaxStack !== null) {
                closeSyntax();
            }
            break;

        default:
            matchStack = null;
    }

    return {
        tokens: tokens,
        reason: exitReason,
        iterations: iterationCount,
        match: matchStack,
        longestMatch: longestMatch
    };
}

function matchAsList(tokens, matchGraph, syntaxes) {
    var matchResult = internalMatch(tokens, matchGraph, syntaxes || {});

    if (matchResult.match !== null) {
        var item = reverseList(matchResult.match).prev;

        matchResult.match = [];

        while (item !== null) {
            switch (item.type) {
                case STUB:
                    break;

                case OPEN_SYNTAX:
                case CLOSE_SYNTAX:
                    matchResult.match.push({
                        type: item.type,
                        syntax: item.syntax
                    });
                    break;

                default:
                    matchResult.match.push({
                        token: item.token.value,
                        node: item.token.node
                    });
                    break;
            }

            item = item.prev;
        }
    }

    return matchResult;
}

function matchAsTree(tokens, matchGraph, syntaxes) {
    var matchResult = internalMatch(tokens, matchGraph, syntaxes || {});

    if (matchResult.match === null) {
        return matchResult;
    }

    var item = matchResult.match;
    var host = matchResult.match = {
        syntax: matchGraph.syntax || null,
        match: []
    };
    var hostStack = [host];

    // revert a list and start with 2nd item since 1st is a stub item
    item = reverseList(item).prev;

    // build a tree
    while (item !== null) {
        switch (item.type) {
            case OPEN_SYNTAX:
                host.match.push(host = {
                    syntax: item.syntax,
                    match: []
                });
                hostStack.push(host);
                break;

            case CLOSE_SYNTAX:
                hostStack.pop();
                host = hostStack[hostStack.length - 1];
                break;

            default:
                host.match.push({
                    syntax: item.syntax || null,
                    token: item.token.value,
                    node: item.token.node
                });
        }

        item = item.prev;
    }

    return matchResult;
}

module.exports = {
    matchAsList: matchAsList,
    matchAsTree: matchAsTree,
    getTotalIterationCount: function() {
        return totalIterationCount;
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/lexer/prepare-tokens.js":
/*!***********************************************************!*\
  !*** ./node_modules/css-tree/lib/lexer/prepare-tokens.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var tokenize = __webpack_require__(/*! ../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js");
var TokenStream = __webpack_require__(/*! ../common/TokenStream */ "./node_modules/css-tree/lib/common/TokenStream.js");
var tokenStream = new TokenStream();
var astToTokens = {
    decorator: function(handlers) {
        var curNode = null;
        var prev = { len: 0, node: null };
        var nodes = [prev];
        var buffer = '';

        return {
            children: handlers.children,
            node: function(node) {
                var tmp = curNode;
                curNode = node;
                handlers.node.call(this, node);
                curNode = tmp;
            },
            chunk: function(chunk) {
                buffer += chunk;
                if (prev.node !== curNode) {
                    nodes.push({
                        len: chunk.length,
                        node: curNode
                    });
                } else {
                    prev.len += chunk.length;
                }
            },
            result: function() {
                return prepareTokens(buffer, nodes);
            }
        };
    }
};

function prepareTokens(str, nodes) {
    var tokens = [];
    var nodesOffset = 0;
    var nodesIndex = 0;
    var currentNode = nodes ? nodes[nodesIndex].node : null;

    tokenize(str, tokenStream);

    while (!tokenStream.eof) {
        if (nodes) {
            while (nodesIndex < nodes.length && nodesOffset + nodes[nodesIndex].len <= tokenStream.tokenStart) {
                nodesOffset += nodes[nodesIndex++].len;
                currentNode = nodes[nodesIndex].node;
            }
        }

        tokens.push({
            type: tokenStream.tokenType,
            value: tokenStream.getTokenValue(),
            index: tokenStream.tokenIndex, // TODO: remove it, temporary solution
            balance: tokenStream.balance[tokenStream.tokenIndex], // TODO: remove it, temporary solution
            node: currentNode
        });
        tokenStream.next();
        // console.log({ ...tokens[tokens.length - 1], node: undefined });
    }

    return tokens;
}

module.exports = function(value, syntax) {
    if (typeof value === 'string') {
        return prepareTokens(value, null);
    }

    return syntax.generate(value, astToTokens);
};


/***/ }),

/***/ "./node_modules/css-tree/lib/lexer/search.js":
/*!***************************************************!*\
  !*** ./node_modules/css-tree/lib/lexer/search.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var List = __webpack_require__(/*! ../common/List */ "./node_modules/css-tree/lib/common/List.js");

function getFirstMatchNode(matchNode) {
    if ('node' in matchNode) {
        return matchNode.node;
    }

    return getFirstMatchNode(matchNode.match[0]);
}

function getLastMatchNode(matchNode) {
    if ('node' in matchNode) {
        return matchNode.node;
    }

    return getLastMatchNode(matchNode.match[matchNode.match.length - 1]);
}

function matchFragments(lexer, ast, match, type, name) {
    function findFragments(matchNode) {
        if (matchNode.syntax !== null &&
            matchNode.syntax.type === type &&
            matchNode.syntax.name === name) {
            var start = getFirstMatchNode(matchNode);
            var end = getLastMatchNode(matchNode);

            lexer.syntax.walk(ast, function(node, item, list) {
                if (node === start) {
                    var nodes = new List();

                    do {
                        nodes.appendData(item.data);

                        if (item.data === end) {
                            break;
                        }

                        item = item.next;
                    } while (item !== null);

                    fragments.push({
                        parent: list,
                        nodes: nodes
                    });
                }
            });
        }

        if (Array.isArray(matchNode.match)) {
            matchNode.match.forEach(findFragments);
        }
    }

    var fragments = [];

    if (match.matched !== null) {
        findFragments(match.matched);
    }

    return fragments;
}

module.exports = {
    matchFragments: matchFragments
};


/***/ }),

/***/ "./node_modules/css-tree/lib/lexer/structure.js":
/*!******************************************************!*\
  !*** ./node_modules/css-tree/lib/lexer/structure.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var List = __webpack_require__(/*! ../common/List */ "./node_modules/css-tree/lib/common/List.js");
var hasOwnProperty = Object.prototype.hasOwnProperty;

function isValidNumber(value) {
    // Number.isInteger(value) && value >= 0
    return (
        typeof value === 'number' &&
        isFinite(value) &&
        Math.floor(value) === value &&
        value >= 0
    );
}

function isValidLocation(loc) {
    return (
        Boolean(loc) &&
        isValidNumber(loc.offset) &&
        isValidNumber(loc.line) &&
        isValidNumber(loc.column)
    );
}

function createNodeStructureChecker(type, fields) {
    return function checkNode(node, warn) {
        if (!node || node.constructor !== Object) {
            return warn(node, 'Type of node should be an Object');
        }

        for (var key in node) {
            var valid = true;

            if (hasOwnProperty.call(node, key) === false) {
                continue;
            }

            if (key === 'type') {
                if (node.type !== type) {
                    warn(node, 'Wrong node type `' + node.type + '`, expected `' + type + '`');
                }
            } else if (key === 'loc') {
                if (node.loc === null) {
                    continue;
                } else if (node.loc && node.loc.constructor === Object) {
                    if (typeof node.loc.source !== 'string') {
                        key += '.source';
                    } else if (!isValidLocation(node.loc.start)) {
                        key += '.start';
                    } else if (!isValidLocation(node.loc.end)) {
                        key += '.end';
                    } else {
                        continue;
                    }
                }

                valid = false;
            } else if (fields.hasOwnProperty(key)) {
                for (var i = 0, valid = false; !valid && i < fields[key].length; i++) {
                    var fieldType = fields[key][i];

                    switch (fieldType) {
                        case String:
                            valid = typeof node[key] === 'string';
                            break;

                        case Boolean:
                            valid = typeof node[key] === 'boolean';
                            break;

                        case null:
                            valid = node[key] === null;
                            break;

                        default:
                            if (typeof fieldType === 'string') {
                                valid = node[key] && node[key].type === fieldType;
                            } else if (Array.isArray(fieldType)) {
                                valid = node[key] instanceof List;
                            }
                    }
                }
            } else {
                warn(node, 'Unknown field `' + key + '` for ' + type + ' node type');
            }

            if (!valid) {
                warn(node, 'Bad value for `' + type + '.' + key + '`');
            }
        }

        for (var key in fields) {
            if (hasOwnProperty.call(fields, key) &&
                hasOwnProperty.call(node, key) === false) {
                warn(node, 'Field `' + type + '.' + key + '` is missed');
            }
        }
    };
}

function processStructure(name, nodeType) {
    var structure = nodeType.structure;
    var fields = {
        type: String,
        loc: true
    };
    var docs = {
        type: '"' + name + '"'
    };

    for (var key in structure) {
        if (hasOwnProperty.call(structure, key) === false) {
            continue;
        }

        var docsTypes = [];
        var fieldTypes = fields[key] = Array.isArray(structure[key])
            ? structure[key].slice()
            : [structure[key]];

        for (var i = 0; i < fieldTypes.length; i++) {
            var fieldType = fieldTypes[i];
            if (fieldType === String || fieldType === Boolean) {
                docsTypes.push(fieldType.name);
            } else if (fieldType === null) {
                docsTypes.push('null');
            } else if (typeof fieldType === 'string') {
                docsTypes.push('<' + fieldType + '>');
            } else if (Array.isArray(fieldType)) {
                docsTypes.push('List'); // TODO: use type enum
            } else {
                throw new Error('Wrong value `' + fieldType + '` in `' + name + '.' + key + '` structure definition');
            }
        }

        docs[key] = docsTypes.join(' | ');
    }

    return {
        docs: docs,
        check: createNodeStructureChecker(name, fields)
    };
}

module.exports = {
    getStructureFromConfig: function(config) {
        var structure = {};

        if (config.node) {
            for (var name in config.node) {
                if (hasOwnProperty.call(config.node, name)) {
                    var nodeType = config.node[name];

                    if (nodeType.structure) {
                        structure[name] = processStructure(name, nodeType);
                    } else {
                        throw new Error('Missed `structure` field in `' + name + '` node type definition');
                    }
                }
            }
        }

        return structure;
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/lexer/trace.js":
/*!**************************************************!*\
  !*** ./node_modules/css-tree/lib/lexer/trace.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function getTrace(node) {
    function shouldPutToTrace(syntax) {
        if (syntax === null) {
            return false;
        }

        return (
            syntax.type === 'Type' ||
            syntax.type === 'Property' ||
            syntax.type === 'Keyword'
        );
    }

    function hasMatch(matchNode) {
        if (Array.isArray(matchNode.match)) {
            // use for-loop for better perfomance
            for (var i = 0; i < matchNode.match.length; i++) {
                if (hasMatch(matchNode.match[i])) {
                    if (shouldPutToTrace(matchNode.syntax)) {
                        result.unshift(matchNode.syntax);
                    }

                    return true;
                }
            }
        } else if (matchNode.node === node) {
            result = shouldPutToTrace(matchNode.syntax)
                ? [matchNode.syntax]
                : [];

            return true;
        }

        return false;
    }

    var result = null;

    if (this.matched !== null) {
        hasMatch(this.matched);
    }

    return result;
}

function testNode(match, node, fn) {
    var trace = getTrace.call(match, node);

    if (trace === null) {
        return false;
    }

    return trace.some(fn);
}

function isType(node, type) {
    return testNode(this, node, function(matchNode) {
        return matchNode.type === 'Type' && matchNode.name === type;
    });
}

function isProperty(node, property) {
    return testNode(this, node, function(matchNode) {
        return matchNode.type === 'Property' && matchNode.name === property;
    });
}

function isKeyword(node) {
    return testNode(this, node, function(matchNode) {
        return matchNode.type === 'Keyword';
    });
}

module.exports = {
    getTrace: getTrace,
    isType: isType,
    isProperty: isProperty,
    isKeyword: isKeyword
};


/***/ }),

/***/ "./node_modules/css-tree/lib/parser/create.js":
/*!****************************************************!*\
  !*** ./node_modules/css-tree/lib/parser/create.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var OffsetToLocation = __webpack_require__(/*! ../common/OffsetToLocation */ "./node_modules/css-tree/lib/common/OffsetToLocation.js");
var SyntaxError = __webpack_require__(/*! ../common/SyntaxError */ "./node_modules/css-tree/lib/common/SyntaxError.js");
var TokenStream = __webpack_require__(/*! ../common/TokenStream */ "./node_modules/css-tree/lib/common/TokenStream.js");
var List = __webpack_require__(/*! ../common/List */ "./node_modules/css-tree/lib/common/List.js");
var tokenize = __webpack_require__(/*! ../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js");
var constants = __webpack_require__(/*! ../tokenizer/const */ "./node_modules/css-tree/lib/tokenizer/const.js");
var { findWhiteSpaceStart, cmpStr } = __webpack_require__(/*! ../tokenizer/utils */ "./node_modules/css-tree/lib/tokenizer/utils.js");
var sequence = __webpack_require__(/*! ./sequence */ "./node_modules/css-tree/lib/parser/sequence.js");
var noop = function() {};

var TYPE = constants.TYPE;
var NAME = constants.NAME;
var WHITESPACE = TYPE.WhiteSpace;
var COMMENT = TYPE.Comment;
var IDENT = TYPE.Ident;
var FUNCTION = TYPE.Function;
var URL = TYPE.Url;
var HASH = TYPE.Hash;
var PERCENTAGE = TYPE.Percentage;
var NUMBER = TYPE.Number;
var NUMBERSIGN = 0x0023; // U+0023 NUMBER SIGN (#)
var NULL = 0;

function createParseContext(name) {
    return function() {
        return this[name]();
    };
}

function processConfig(config) {
    var parserConfig = {
        context: {},
        scope: {},
        atrule: {},
        pseudo: {}
    };

    if (config.parseContext) {
        for (var name in config.parseContext) {
            switch (typeof config.parseContext[name]) {
                case 'function':
                    parserConfig.context[name] = config.parseContext[name];
                    break;

                case 'string':
                    parserConfig.context[name] = createParseContext(config.parseContext[name]);
                    break;
            }
        }
    }

    if (config.scope) {
        for (var name in config.scope) {
            parserConfig.scope[name] = config.scope[name];
        }
    }

    if (config.atrule) {
        for (var name in config.atrule) {
            var atrule = config.atrule[name];

            if (atrule.parse) {
                parserConfig.atrule[name] = atrule.parse;
            }
        }
    }

    if (config.pseudo) {
        for (var name in config.pseudo) {
            var pseudo = config.pseudo[name];

            if (pseudo.parse) {
                parserConfig.pseudo[name] = pseudo.parse;
            }
        }
    }

    if (config.node) {
        for (var name in config.node) {
            parserConfig[name] = config.node[name].parse;
        }
    }

    return parserConfig;
}

module.exports = function createParser(config) {
    var parser = {
        scanner: new TokenStream(),
        locationMap: new OffsetToLocation(),

        filename: '<unknown>',
        needPositions: false,
        onParseError: noop,
        onParseErrorThrow: false,
        parseAtrulePrelude: true,
        parseRulePrelude: true,
        parseValue: true,
        parseCustomProperty: false,

        readSequence: sequence,

        createList: function() {
            return new List();
        },
        createSingleNodeList: function(node) {
            return new List().appendData(node);
        },
        getFirstListNode: function(list) {
            return list && list.first();
        },
        getLastListNode: function(list) {
            return list.last();
        },

        parseWithFallback: function(consumer, fallback) {
            var startToken = this.scanner.tokenIndex;

            try {
                return consumer.call(this);
            } catch (e) {
                if (this.onParseErrorThrow) {
                    throw e;
                }

                var fallbackNode = fallback.call(this, startToken);

                this.onParseErrorThrow = true;
                this.onParseError(e, fallbackNode);
                this.onParseErrorThrow = false;

                return fallbackNode;
            }
        },

        lookupNonWSType: function(offset) {
            do {
                var type = this.scanner.lookupType(offset++);
                if (type !== WHITESPACE) {
                    return type;
                }
            } while (type !== NULL);

            return NULL;
        },

        eat: function(tokenType) {
            if (this.scanner.tokenType !== tokenType) {
                var offset = this.scanner.tokenStart;
                var message = NAME[tokenType] + ' is expected';

                // tweak message and offset
                switch (tokenType) {
                    case IDENT:
                        // when identifier is expected but there is a function or url
                        if (this.scanner.tokenType === FUNCTION || this.scanner.tokenType === URL) {
                            offset = this.scanner.tokenEnd - 1;
                            message = 'Identifier is expected but function found';
                        } else {
                            message = 'Identifier is expected';
                        }
                        break;

                    case HASH:
                        if (this.scanner.isDelim(NUMBERSIGN)) {
                            this.scanner.next();
                            offset++;
                            message = 'Name is expected';
                        }
                        break;

                    case PERCENTAGE:
                        if (this.scanner.tokenType === NUMBER) {
                            offset = this.scanner.tokenEnd;
                            message = 'Percent sign is expected';
                        }
                        break;

                    default:
                        // when test type is part of another token show error for current position + 1
                        // e.g. eat(HYPHENMINUS) will fail on "-foo", but pointing on "-" is odd
                        if (this.scanner.source.charCodeAt(this.scanner.tokenStart) === tokenType) {
                            offset = offset + 1;
                        }
                }

                this.error(message, offset);
            }

            this.scanner.next();
        },

        consume: function(tokenType) {
            var value = this.scanner.getTokenValue();

            this.eat(tokenType);

            return value;
        },
        consumeFunctionName: function() {
            var name = this.scanner.source.substring(this.scanner.tokenStart, this.scanner.tokenEnd - 1);

            this.eat(FUNCTION);

            return name;
        },

        getLocation: function(start, end) {
            if (this.needPositions) {
                return this.locationMap.getLocationRange(
                    start,
                    end,
                    this.filename
                );
            }

            return null;
        },
        getLocationFromList: function(list) {
            if (this.needPositions) {
                var head = this.getFirstListNode(list);
                var tail = this.getLastListNode(list);
                return this.locationMap.getLocationRange(
                    head !== null ? head.loc.start.offset - this.locationMap.startOffset : this.scanner.tokenStart,
                    tail !== null ? tail.loc.end.offset - this.locationMap.startOffset : this.scanner.tokenStart,
                    this.filename
                );
            }

            return null;
        },

        error: function(message, offset) {
            var location = typeof offset !== 'undefined' && offset < this.scanner.source.length
                ? this.locationMap.getLocation(offset)
                : this.scanner.eof
                    ? this.locationMap.getLocation(findWhiteSpaceStart(this.scanner.source, this.scanner.source.length - 1))
                    : this.locationMap.getLocation(this.scanner.tokenStart);

            throw new SyntaxError(
                message || 'Unexpected input',
                this.scanner.source,
                location.offset,
                location.line,
                location.column
            );
        }
    };

    config = processConfig(config || {});
    for (var key in config) {
        parser[key] = config[key];
    }

    return function(source, options) {
        options = options || {};

        var context = options.context || 'default';
        var onComment = options.onComment;
        var ast;

        tokenize(source, parser.scanner);
        parser.locationMap.setSource(
            source,
            options.offset,
            options.line,
            options.column
        );

        parser.filename = options.filename || '<unknown>';
        parser.needPositions = Boolean(options.positions);
        parser.onParseError = typeof options.onParseError === 'function' ? options.onParseError : noop;
        parser.onParseErrorThrow = false;
        parser.parseAtrulePrelude = 'parseAtrulePrelude' in options ? Boolean(options.parseAtrulePrelude) : true;
        parser.parseRulePrelude = 'parseRulePrelude' in options ? Boolean(options.parseRulePrelude) : true;
        parser.parseValue = 'parseValue' in options ? Boolean(options.parseValue) : true;
        parser.parseCustomProperty = 'parseCustomProperty' in options ? Boolean(options.parseCustomProperty) : false;

        if (!parser.context.hasOwnProperty(context)) {
            throw new Error('Unknown context `' + context + '`');
        }

        if (typeof onComment === 'function') {
            parser.scanner.forEachToken((type, start, end) => {
                if (type === COMMENT) {
                    const loc = parser.getLocation(start, end);
                    const value = cmpStr(source, end - 2, end, '*/')
                        ? source.slice(start + 2, end - 2)
                        : source.slice(start + 2, end);

                    onComment(value, loc);
                }
            });
        }

        ast = parser.context[context].call(parser, options);

        if (!parser.scanner.eof) {
            parser.error();
        }

        return ast;
    };
};


/***/ }),

/***/ "./node_modules/css-tree/lib/parser/sequence.js":
/*!******************************************************!*\
  !*** ./node_modules/css-tree/lib/parser/sequence.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;
var WHITESPACE = TYPE.WhiteSpace;
var COMMENT = TYPE.Comment;

module.exports = function readSequence(recognizer) {
    var children = this.createList();
    var child = null;
    var context = {
        recognizer: recognizer,
        space: null,
        ignoreWS: false,
        ignoreWSAfter: false
    };

    this.scanner.skipSC();

    while (!this.scanner.eof) {
        switch (this.scanner.tokenType) {
            case COMMENT:
                this.scanner.next();
                continue;

            case WHITESPACE:
                if (context.ignoreWS) {
                    this.scanner.next();
                } else {
                    context.space = this.WhiteSpace();
                }
                continue;
        }

        child = recognizer.getNode.call(this, context);

        if (child === undefined) {
            break;
        }

        if (context.space !== null) {
            children.push(context.space);
            context.space = null;
        }

        children.push(child);

        if (context.ignoreWSAfter) {
            context.ignoreWSAfter = false;
            context.ignoreWS = true;
        } else {
            context.ignoreWS = false;
        }
    }

    return children;
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/atrule/font-face.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/atrule/font-face.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
    parse: {
        prelude: null,
        block: function() {
            return this.Block(true);
        }
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/atrule/import.js":
/*!***********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/atrule/import.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var STRING = TYPE.String;
var IDENT = TYPE.Ident;
var URL = TYPE.Url;
var FUNCTION = TYPE.Function;
var LEFTPARENTHESIS = TYPE.LeftParenthesis;

module.exports = {
    parse: {
        prelude: function() {
            var children = this.createList();

            this.scanner.skipSC();

            switch (this.scanner.tokenType) {
                case STRING:
                    children.push(this.String());
                    break;

                case URL:
                case FUNCTION:
                    children.push(this.Url());
                    break;

                default:
                    this.error('String or url() is expected');
            }

            if (this.lookupNonWSType(0) === IDENT ||
                this.lookupNonWSType(0) === LEFTPARENTHESIS) {
                children.push(this.WhiteSpace());
                children.push(this.MediaQueryList());
            }

            return children;
        },
        block: null
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/atrule/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/atrule/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
    'font-face': __webpack_require__(/*! ./font-face */ "./node_modules/css-tree/lib/syntax/atrule/font-face.js"),
    'import': __webpack_require__(/*! ./import */ "./node_modules/css-tree/lib/syntax/atrule/import.js"),
    'media': __webpack_require__(/*! ./media */ "./node_modules/css-tree/lib/syntax/atrule/media.js"),
    'page': __webpack_require__(/*! ./page */ "./node_modules/css-tree/lib/syntax/atrule/page.js"),
    'supports': __webpack_require__(/*! ./supports */ "./node_modules/css-tree/lib/syntax/atrule/supports.js")
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/atrule/media.js":
/*!**********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/atrule/media.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
    parse: {
        prelude: function() {
            return this.createSingleNodeList(
                this.MediaQueryList()
            );
        },
        block: function() {
            return this.Block(false);
        }
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/atrule/page.js":
/*!*********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/atrule/page.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
    parse: {
        prelude: function() {
            return this.createSingleNodeList(
                this.SelectorList()
            );
        },
        block: function() {
            return this.Block(true);
        }
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/atrule/supports.js":
/*!*************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/atrule/supports.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var WHITESPACE = TYPE.WhiteSpace;
var COMMENT = TYPE.Comment;
var IDENT = TYPE.Ident;
var FUNCTION = TYPE.Function;
var COLON = TYPE.Colon;
var LEFTPARENTHESIS = TYPE.LeftParenthesis;

function consumeRaw() {
    return this.createSingleNodeList(
        this.Raw(this.scanner.tokenIndex, null, false)
    );
}

function parentheses() {
    this.scanner.skipSC();

    if (this.scanner.tokenType === IDENT &&
        this.lookupNonWSType(1) === COLON) {
        return this.createSingleNodeList(
            this.Declaration()
        );
    }

    return readSequence.call(this);
}

function readSequence() {
    var children = this.createList();
    var space = null;
    var child;

    this.scanner.skipSC();

    scan:
    while (!this.scanner.eof) {
        switch (this.scanner.tokenType) {
            case WHITESPACE:
                space = this.WhiteSpace();
                continue;

            case COMMENT:
                this.scanner.next();
                continue;

            case FUNCTION:
                child = this.Function(consumeRaw, this.scope.AtrulePrelude);
                break;

            case IDENT:
                child = this.Identifier();
                break;

            case LEFTPARENTHESIS:
                child = this.Parentheses(parentheses, this.scope.AtrulePrelude);
                break;

            default:
                break scan;
        }

        if (space !== null) {
            children.push(space);
            space = null;
        }

        children.push(child);
    }

    return children;
}

module.exports = {
    parse: {
        prelude: function() {
            var children = readSequence.call(this);

            if (this.getFirstListNode(children) === null) {
                this.error('Condition is expected');
            }

            return children;
        },
        block: function() {
            return this.Block(false);
        }
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/config/lexer.js":
/*!**********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/config/lexer.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var data = __webpack_require__(/*! ../../../data */ "./node_modules/css-tree/data/index.js");

module.exports = {
    generic: true,
    types: data.types,
    atrules: data.atrules,
    properties: data.properties,
    node: __webpack_require__(/*! ../node */ "./node_modules/css-tree/lib/syntax/node/index.js")
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/config/mix.js":
/*!********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/config/mix.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

const hasOwnProperty = Object.prototype.hasOwnProperty;
const shape = {
    generic: true,
    types: appendOrAssign,
    atrules: {
        prelude: appendOrAssignOrNull,
        descriptors: appendOrAssignOrNull
    },
    properties: appendOrAssign,
    parseContext: assign,
    scope: deepAssign,
    atrule: ['parse'],
    pseudo: ['parse'],
    node: ['name', 'structure', 'parse', 'generate', 'walkContext']
};

function isObject(value) {
    return value && value.constructor === Object;
}

function copy(value) {
    return isObject(value)
        ? Object.assign({}, value)
        : value;
}

function assign(dest, src) {
    return Object.assign(dest, src);
}

function deepAssign(dest, src) {
    for (const key in src) {
        if (hasOwnProperty.call(src, key)) {
            if (isObject(dest[key])) {
                deepAssign(dest[key], copy(src[key]));
            } else {
                dest[key] = copy(src[key]);
            }
        }
    }

    return dest;
}

function append(a, b) {
    if (typeof b === 'string' && /^\s*\|/.test(b)) {
        return typeof a === 'string'
            ? a + b
            : b.replace(/^\s*\|\s*/, '');
    }

    return b || null;
}

function appendOrAssign(a, b) {
    if (typeof b === 'string') {
        return append(a, b);
    }

    const result = Object.assign({}, a);
    for (let key in b) {
        if (hasOwnProperty.call(b, key)) {
            result[key] = append(hasOwnProperty.call(a, key) ? a[key] : undefined, b[key]);
        }
    }

    return result;
}

function appendOrAssignOrNull(a, b) {
    const result = appendOrAssign(a, b);

    return !isObject(result) || Object.keys(result).length
        ? result
        : null;
}

function mix(dest, src, shape) {
    for (const key in shape) {
        if (hasOwnProperty.call(shape, key) === false) {
            continue;
        }

        if (shape[key] === true) {
            if (key in src) {
                if (hasOwnProperty.call(src, key)) {
                    dest[key] = copy(src[key]);
                }
            }
        } else if (shape[key]) {
            if (typeof shape[key] === 'function') {
                const fn = shape[key];
                dest[key] = fn({}, dest[key]);
                dest[key] = fn(dest[key] || {}, src[key]);
            } else if (isObject(shape[key])) {
                const result = {};

                for (let name in dest[key]) {
                    result[name] = mix({}, dest[key][name], shape[key]);
                }

                for (let name in src[key]) {
                    result[name] = mix(result[name] || {}, src[key][name], shape[key]);
                }

                dest[key] = result;
            } else if (Array.isArray(shape[key])) {
                const res = {};
                const innerShape = shape[key].reduce(function(s, k) {
                    s[k] = true;
                    return s;
                }, {});

                for (const [name, value] of Object.entries(dest[key] || {})) {
                    res[name] = {};
                    if (value) {
                        mix(res[name], value, innerShape);
                    }
                }

                for (const name in src[key]) {
                    if (hasOwnProperty.call(src[key], name)) {
                        if (!res[name]) {
                            res[name] = {};
                        }

                        if (src[key] && src[key][name]) {
                            mix(res[name], src[key][name], innerShape);
                        }
                    }
                }

                dest[key] = res;
            }
        }
    }
    return dest;
}

module.exports = (dest, src) => mix(dest, src, shape);


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/config/parser.js":
/*!***********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/config/parser.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
    parseContext: {
        default: 'StyleSheet',
        stylesheet: 'StyleSheet',
        atrule: 'Atrule',
        atrulePrelude: function(options) {
            return this.AtrulePrelude(options.atrule ? String(options.atrule) : null);
        },
        mediaQueryList: 'MediaQueryList',
        mediaQuery: 'MediaQuery',
        rule: 'Rule',
        selectorList: 'SelectorList',
        selector: 'Selector',
        block: function() {
            return this.Block(true);
        },
        declarationList: 'DeclarationList',
        declaration: 'Declaration',
        value: 'Value'
    },
    scope: __webpack_require__(/*! ../scope */ "./node_modules/css-tree/lib/syntax/scope/index.js"),
    atrule: __webpack_require__(/*! ../atrule */ "./node_modules/css-tree/lib/syntax/atrule/index.js"),
    pseudo: __webpack_require__(/*! ../pseudo */ "./node_modules/css-tree/lib/syntax/pseudo/index.js"),
    node: __webpack_require__(/*! ../node */ "./node_modules/css-tree/lib/syntax/node/index.js")
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/config/walker.js":
/*!***********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/config/walker.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
    node: __webpack_require__(/*! ../node */ "./node_modules/css-tree/lib/syntax/node/index.js")
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/create.js":
/*!****************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/create.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var List = __webpack_require__(/*! ../common/List */ "./node_modules/css-tree/lib/common/List.js");
var SyntaxError = __webpack_require__(/*! ../common/SyntaxError */ "./node_modules/css-tree/lib/common/SyntaxError.js");
var TokenStream = __webpack_require__(/*! ../common/TokenStream */ "./node_modules/css-tree/lib/common/TokenStream.js");
var Lexer = __webpack_require__(/*! ../lexer/Lexer */ "./node_modules/css-tree/lib/lexer/Lexer.js");
var definitionSyntax = __webpack_require__(/*! ../definition-syntax */ "./node_modules/css-tree/lib/definition-syntax/index.js");
var tokenize = __webpack_require__(/*! ../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js");
var createParser = __webpack_require__(/*! ../parser/create */ "./node_modules/css-tree/lib/parser/create.js");
var createGenerator = __webpack_require__(/*! ../generator/create */ "./node_modules/css-tree/lib/generator/create.js");
var createConvertor = __webpack_require__(/*! ../convertor/create */ "./node_modules/css-tree/lib/convertor/create.js");
var createWalker = __webpack_require__(/*! ../walker/create */ "./node_modules/css-tree/lib/walker/create.js");
var clone = __webpack_require__(/*! ../utils/clone */ "./node_modules/css-tree/lib/utils/clone.js");
var names = __webpack_require__(/*! ../utils/names */ "./node_modules/css-tree/lib/utils/names.js");
var mix = __webpack_require__(/*! ./config/mix */ "./node_modules/css-tree/lib/syntax/config/mix.js");

function createSyntax(config) {
    var parse = createParser(config);
    var walk = createWalker(config);
    var generate = createGenerator(config);
    var convert = createConvertor(walk);

    var syntax = {
        List: List,
        SyntaxError: SyntaxError,
        TokenStream: TokenStream,
        Lexer: Lexer,

        vendorPrefix: names.vendorPrefix,
        keyword: names.keyword,
        property: names.property,
        isCustomProperty: names.isCustomProperty,

        definitionSyntax: definitionSyntax,
        lexer: null,
        createLexer: function(config) {
            return new Lexer(config, syntax, syntax.lexer.structure);
        },

        tokenize: tokenize,
        parse: parse,
        walk: walk,
        generate: generate,

        find: walk.find,
        findLast: walk.findLast,
        findAll: walk.findAll,

        clone: clone,
        fromPlainObject: convert.fromPlainObject,
        toPlainObject: convert.toPlainObject,

        createSyntax: function(config) {
            return createSyntax(mix({}, config));
        },
        fork: function(extension) {
            var base = mix({}, config); // copy of config
            return createSyntax(
                typeof extension === 'function'
                    ? extension(base, Object.assign)
                    : mix(base, extension)
            );
        }
    };

    syntax.lexer = new Lexer({
        generic: true,
        types: config.types,
        atrules: config.atrules,
        properties: config.properties,
        node: config.node
    }, syntax);

    return syntax;
};

exports.create = function(config) {
    return createSyntax(mix({}, config));
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/function/expression.js":
/*!*****************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/function/expression.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// legacy IE function
// expression( <any-value> )
module.exports = function() {
    return this.createSingleNodeList(
        this.Raw(this.scanner.tokenIndex, null, false)
    );
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/function/var.js":
/*!**********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/function/var.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;
var rawMode = __webpack_require__(/*! ../node/Raw */ "./node_modules/css-tree/lib/syntax/node/Raw.js").mode;

var COMMA = TYPE.Comma;
var WHITESPACE = TYPE.WhiteSpace;

// var( <ident> , <value>? )
module.exports = function() {
    var children = this.createList();

    this.scanner.skipSC();

    // NOTE: Don't check more than a first argument is an ident, rest checks are for lexer
    children.push(this.Identifier());

    this.scanner.skipSC();

    if (this.scanner.tokenType === COMMA) {
        children.push(this.Operator());

        const startIndex = this.scanner.tokenIndex;
        const value = this.parseCustomProperty
            ? this.Value(null)
            : this.Raw(this.scanner.tokenIndex, rawMode.exclamationMarkOrSemicolon, false);

        if (value.type === 'Value' && value.children.isEmpty()) {
            for (let offset = startIndex - this.scanner.tokenIndex; offset <= 0; offset++) {
                if (this.scanner.lookupType(offset) === WHITESPACE) {
                    value.children.appendData({
                        type: 'WhiteSpace',
                        loc: null,
                        value: ' '
                    });
                    break;
                }
            }
        }

        children.push(value);
    }

    return children;
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/index.js":
/*!***************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function merge() {
    var dest = {};

    for (var i = 0; i < arguments.length; i++) {
        var src = arguments[i];
        for (var key in src) {
            dest[key] = src[key];
        }
    }

    return dest;
}

module.exports = __webpack_require__(/*! ./create */ "./node_modules/css-tree/lib/syntax/create.js").create(
    merge(
        __webpack_require__(/*! ./config/lexer */ "./node_modules/css-tree/lib/syntax/config/lexer.js"),
        __webpack_require__(/*! ./config/parser */ "./node_modules/css-tree/lib/syntax/config/parser.js"),
        __webpack_require__(/*! ./config/walker */ "./node_modules/css-tree/lib/syntax/config/walker.js")
    )
);
module.exports.version = __webpack_require__(/*! ../../package.json */ "./node_modules/css-tree/package.json").version;


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/AnPlusB.js":
/*!**********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/AnPlusB.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var cmpChar = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").cmpChar;
var isDigit = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").isDigit;
var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var WHITESPACE = TYPE.WhiteSpace;
var COMMENT = TYPE.Comment;
var IDENT = TYPE.Ident;
var NUMBER = TYPE.Number;
var DIMENSION = TYPE.Dimension;
var PLUSSIGN = 0x002B;    // U+002B PLUS SIGN (+)
var HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)
var N = 0x006E;           // U+006E LATIN SMALL LETTER N (n)
var DISALLOW_SIGN = true;
var ALLOW_SIGN = false;

function checkInteger(offset, disallowSign) {
    var pos = this.scanner.tokenStart + offset;
    var code = this.scanner.source.charCodeAt(pos);

    if (code === PLUSSIGN || code === HYPHENMINUS) {
        if (disallowSign) {
            this.error('Number sign is not allowed');
        }
        pos++;
    }

    for (; pos < this.scanner.tokenEnd; pos++) {
        if (!isDigit(this.scanner.source.charCodeAt(pos))) {
            this.error('Integer is expected', pos);
        }
    }
}

function checkTokenIsInteger(disallowSign) {
    return checkInteger.call(this, 0, disallowSign);
}

function expectCharCode(offset, code) {
    if (!cmpChar(this.scanner.source, this.scanner.tokenStart + offset, code)) {
        var msg = '';

        switch (code) {
            case N:
                msg = 'N is expected';
                break;
            case HYPHENMINUS:
                msg = 'HyphenMinus is expected';
                break;
        }

        this.error(msg, this.scanner.tokenStart + offset);
    }
}

// ... <signed-integer>
// ... ['+' | '-'] <signless-integer>
function consumeB() {
    var offset = 0;
    var sign = 0;
    var type = this.scanner.tokenType;

    while (type === WHITESPACE || type === COMMENT) {
        type = this.scanner.lookupType(++offset);
    }

    if (type !== NUMBER) {
        if (this.scanner.isDelim(PLUSSIGN, offset) ||
            this.scanner.isDelim(HYPHENMINUS, offset)) {
            sign = this.scanner.isDelim(PLUSSIGN, offset) ? PLUSSIGN : HYPHENMINUS;

            do {
                type = this.scanner.lookupType(++offset);
            } while (type === WHITESPACE || type === COMMENT);

            if (type !== NUMBER) {
                this.scanner.skip(offset);
                checkTokenIsInteger.call(this, DISALLOW_SIGN);
            }
        } else {
            return null;
        }
    }

    if (offset > 0) {
        this.scanner.skip(offset);
    }

    if (sign === 0) {
        type = this.scanner.source.charCodeAt(this.scanner.tokenStart);
        if (type !== PLUSSIGN && type !== HYPHENMINUS) {
            this.error('Number sign is expected');
        }
    }

    checkTokenIsInteger.call(this, sign !== 0);
    return sign === HYPHENMINUS ? '-' + this.consume(NUMBER) : this.consume(NUMBER);
}

// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb
module.exports = {
    name: 'AnPlusB',
    structure: {
        a: [String, null],
        b: [String, null]
    },
    parse: function() {
        /* eslint-disable brace-style*/
        var start = this.scanner.tokenStart;
        var a = null;
        var b = null;

        // <integer>
        if (this.scanner.tokenType === NUMBER) {
            checkTokenIsInteger.call(this, ALLOW_SIGN);
            b = this.consume(NUMBER);
        }

        // -n
        // -n <signed-integer>
        // -n ['+' | '-'] <signless-integer>
        // -n- <signless-integer>
        // <dashndashdigit-ident>
        else if (this.scanner.tokenType === IDENT && cmpChar(this.scanner.source, this.scanner.tokenStart, HYPHENMINUS)) {
            a = '-1';

            expectCharCode.call(this, 1, N);

            switch (this.scanner.getTokenLength()) {
                // -n
                // -n <signed-integer>
                // -n ['+' | '-'] <signless-integer>
                case 2:
                    this.scanner.next();
                    b = consumeB.call(this);
                    break;

                // -n- <signless-integer>
                case 3:
                    expectCharCode.call(this, 2, HYPHENMINUS);

                    this.scanner.next();
                    this.scanner.skipSC();

                    checkTokenIsInteger.call(this, DISALLOW_SIGN);

                    b = '-' + this.consume(NUMBER);
                    break;

                // <dashndashdigit-ident>
                default:
                    expectCharCode.call(this, 2, HYPHENMINUS);
                    checkInteger.call(this, 3, DISALLOW_SIGN);
                    this.scanner.next();

                    b = this.scanner.substrToCursor(start + 2);
            }
        }

        // '+'? n
        // '+'? n <signed-integer>
        // '+'? n ['+' | '-'] <signless-integer>
        // '+'? n- <signless-integer>
        // '+'? <ndashdigit-ident>
        else if (this.scanner.tokenType === IDENT || (this.scanner.isDelim(PLUSSIGN) && this.scanner.lookupType(1) === IDENT)) {
            var sign = 0;
            a = '1';

            // just ignore a plus
            if (this.scanner.isDelim(PLUSSIGN)) {
                sign = 1;
                this.scanner.next();
            }

            expectCharCode.call(this, 0, N);

            switch (this.scanner.getTokenLength()) {
                // '+'? n
                // '+'? n <signed-integer>
                // '+'? n ['+' | '-'] <signless-integer>
                case 1:
                    this.scanner.next();
                    b = consumeB.call(this);
                    break;

                // '+'? n- <signless-integer>
                case 2:
                    expectCharCode.call(this, 1, HYPHENMINUS);

                    this.scanner.next();
                    this.scanner.skipSC();

                    checkTokenIsInteger.call(this, DISALLOW_SIGN);

                    b = '-' + this.consume(NUMBER);
                    break;

                // '+'? <ndashdigit-ident>
                default:
                    expectCharCode.call(this, 1, HYPHENMINUS);
                    checkInteger.call(this, 2, DISALLOW_SIGN);
                    this.scanner.next();

                    b = this.scanner.substrToCursor(start + sign + 1);
            }
        }

        // <ndashdigit-dimension>
        // <ndash-dimension> <signless-integer>
        // <n-dimension>
        // <n-dimension> <signed-integer>
        // <n-dimension> ['+' | '-'] <signless-integer>
        else if (this.scanner.tokenType === DIMENSION) {
            var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);
            var sign = code === PLUSSIGN || code === HYPHENMINUS;

            for (var i = this.scanner.tokenStart + sign; i < this.scanner.tokenEnd; i++) {
                if (!isDigit(this.scanner.source.charCodeAt(i))) {
                    break;
                }
            }

            if (i === this.scanner.tokenStart + sign) {
                this.error('Integer is expected', this.scanner.tokenStart + sign);
            }

            expectCharCode.call(this, i - this.scanner.tokenStart, N);
            a = this.scanner.source.substring(start, i);

            // <n-dimension>
            // <n-dimension> <signed-integer>
            // <n-dimension> ['+' | '-'] <signless-integer>
            if (i + 1 === this.scanner.tokenEnd) {
                this.scanner.next();
                b = consumeB.call(this);
            } else {
                expectCharCode.call(this, i - this.scanner.tokenStart + 1, HYPHENMINUS);

                // <ndash-dimension> <signless-integer>
                if (i + 2 === this.scanner.tokenEnd) {
                    this.scanner.next();
                    this.scanner.skipSC();
                    checkTokenIsInteger.call(this, DISALLOW_SIGN);
                    b = '-' + this.consume(NUMBER);
                }
                // <ndashdigit-dimension>
                else {
                    checkInteger.call(this, i - this.scanner.tokenStart + 2, DISALLOW_SIGN);
                    this.scanner.next();
                    b = this.scanner.substrToCursor(i + 1);
                }
            }
        } else {
            this.error();
        }

        if (a !== null && a.charCodeAt(0) === PLUSSIGN) {
            a = a.substr(1);
        }

        if (b !== null && b.charCodeAt(0) === PLUSSIGN) {
            b = b.substr(1);
        }

        return {
            type: 'AnPlusB',
            loc: this.getLocation(start, this.scanner.tokenStart),
            a: a,
            b: b
        };
    },
    generate: function(node) {
        var a = node.a !== null && node.a !== undefined;
        var b = node.b !== null && node.b !== undefined;

        if (a) {
            this.chunk(
                node.a === '+1' ? '+n' : // eslint-disable-line operator-linebreak, indent
                node.a ===  '1' ?  'n' : // eslint-disable-line operator-linebreak, indent
                node.a === '-1' ? '-n' : // eslint-disable-line operator-linebreak, indent
                node.a + 'n'             // eslint-disable-line operator-linebreak, indent
            );

            if (b) {
                b = String(node.b);
                if (b.charAt(0) === '-' || b.charAt(0) === '+') {
                    this.chunk(b.charAt(0));
                    this.chunk(b.substr(1));
                } else {
                    this.chunk('+');
                    this.chunk(b);
                }
            }
        } else {
            this.chunk(String(node.b));
        }
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Atrule.js":
/*!*********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Atrule.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;
var rawMode = __webpack_require__(/*! ./Raw */ "./node_modules/css-tree/lib/syntax/node/Raw.js").mode;

var ATKEYWORD = TYPE.AtKeyword;
var SEMICOLON = TYPE.Semicolon;
var LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;
var RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;

function consumeRaw(startToken) {
    return this.Raw(startToken, rawMode.leftCurlyBracketOrSemicolon, true);
}

function isDeclarationBlockAtrule() {
    for (var offset = 1, type; type = this.scanner.lookupType(offset); offset++) {
        if (type === RIGHTCURLYBRACKET) {
            return true;
        }

        if (type === LEFTCURLYBRACKET ||
            type === ATKEYWORD) {
            return false;
        }
    }

    return false;
}

module.exports = {
    name: 'Atrule',
    structure: {
        name: String,
        prelude: ['AtrulePrelude', 'Raw', null],
        block: ['Block', null]
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var name;
        var nameLowerCase;
        var prelude = null;
        var block = null;

        this.eat(ATKEYWORD);

        name = this.scanner.substrToCursor(start + 1);
        nameLowerCase = name.toLowerCase();
        this.scanner.skipSC();

        // parse prelude
        if (this.scanner.eof === false &&
            this.scanner.tokenType !== LEFTCURLYBRACKET &&
            this.scanner.tokenType !== SEMICOLON) {
            if (this.parseAtrulePrelude) {
                prelude = this.parseWithFallback(this.AtrulePrelude.bind(this, name), consumeRaw);

                // turn empty AtrulePrelude into null
                if (prelude.type === 'AtrulePrelude' && prelude.children.head === null) {
                    prelude = null;
                }
            } else {
                prelude = consumeRaw.call(this, this.scanner.tokenIndex);
            }

            this.scanner.skipSC();
        }

        switch (this.scanner.tokenType) {
            case SEMICOLON:
                this.scanner.next();
                break;

            case LEFTCURLYBRACKET:
                if (this.atrule.hasOwnProperty(nameLowerCase) &&
                    typeof this.atrule[nameLowerCase].block === 'function') {
                    block = this.atrule[nameLowerCase].block.call(this);
                } else {
                    // TODO: should consume block content as Raw?
                    block = this.Block(isDeclarationBlockAtrule.call(this));
                }

                break;
        }

        return {
            type: 'Atrule',
            loc: this.getLocation(start, this.scanner.tokenStart),
            name: name,
            prelude: prelude,
            block: block
        };
    },
    generate: function(node) {
        this.chunk('@');
        this.chunk(node.name);

        if (node.prelude !== null) {
            this.chunk(' ');
            this.node(node.prelude);
        }

        if (node.block) {
            this.node(node.block);
        } else {
            this.chunk(';');
        }
    },
    walkContext: 'atrule'
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/AtrulePrelude.js":
/*!****************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/AtrulePrelude.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var SEMICOLON = TYPE.Semicolon;
var LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;

module.exports = {
    name: 'AtrulePrelude',
    structure: {
        children: [[]]
    },
    parse: function(name) {
        var children = null;

        if (name !== null) {
            name = name.toLowerCase();
        }

        this.scanner.skipSC();

        if (this.atrule.hasOwnProperty(name) &&
            typeof this.atrule[name].prelude === 'function') {
            // custom consumer
            children = this.atrule[name].prelude.call(this);
        } else {
            // default consumer
            children = this.readSequence(this.scope.AtrulePrelude);
        }

        this.scanner.skipSC();

        if (this.scanner.eof !== true &&
            this.scanner.tokenType !== LEFTCURLYBRACKET &&
            this.scanner.tokenType !== SEMICOLON) {
            this.error('Semicolon or block is expected');
        }

        if (children === null) {
            children = this.createList();
        }

        return {
            type: 'AtrulePrelude',
            loc: this.getLocationFromList(children),
            children: children
        };
    },
    generate: function(node) {
        this.children(node);
    },
    walkContext: 'atrulePrelude'
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/AttributeSelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/AttributeSelector.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var IDENT = TYPE.Ident;
var STRING = TYPE.String;
var COLON = TYPE.Colon;
var LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;
var RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;
var DOLLARSIGN = 0x0024;       // U+0024 DOLLAR SIGN ($)
var ASTERISK = 0x002A;         // U+002A ASTERISK (*)
var EQUALSSIGN = 0x003D;       // U+003D EQUALS SIGN (=)
var CIRCUMFLEXACCENT = 0x005E; // U+005E (^)
var VERTICALLINE = 0x007C;     // U+007C VERTICAL LINE (|)
var TILDE = 0x007E;            // U+007E TILDE (~)

function getAttributeName() {
    if (this.scanner.eof) {
        this.error('Unexpected end of input');
    }

    var start = this.scanner.tokenStart;
    var expectIdent = false;
    var checkColon = true;

    if (this.scanner.isDelim(ASTERISK)) {
        expectIdent = true;
        checkColon = false;
        this.scanner.next();
    } else if (!this.scanner.isDelim(VERTICALLINE)) {
        this.eat(IDENT);
    }

    if (this.scanner.isDelim(VERTICALLINE)) {
        if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 1) !== EQUALSSIGN) {
            this.scanner.next();
            this.eat(IDENT);
        } else if (expectIdent) {
            this.error('Identifier is expected', this.scanner.tokenEnd);
        }
    } else if (expectIdent) {
        this.error('Vertical line is expected');
    }

    if (checkColon && this.scanner.tokenType === COLON) {
        this.scanner.next();
        this.eat(IDENT);
    }

    return {
        type: 'Identifier',
        loc: this.getLocation(start, this.scanner.tokenStart),
        name: this.scanner.substrToCursor(start)
    };
}

function getOperator() {
    var start = this.scanner.tokenStart;
    var code = this.scanner.source.charCodeAt(start);

    if (code !== EQUALSSIGN &&        // =
        code !== TILDE &&             // ~=
        code !== CIRCUMFLEXACCENT &&  // ^=
        code !== DOLLARSIGN &&        // $=
        code !== ASTERISK &&          // *=
        code !== VERTICALLINE         // |=
    ) {
        this.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');
    }

    this.scanner.next();

    if (code !== EQUALSSIGN) {
        if (!this.scanner.isDelim(EQUALSSIGN)) {
            this.error('Equal sign is expected');
        }

        this.scanner.next();
    }

    return this.scanner.substrToCursor(start);
}

// '[' <wq-name> ']'
// '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'
module.exports = {
    name: 'AttributeSelector',
    structure: {
        name: 'Identifier',
        matcher: [String, null],
        value: ['String', 'Identifier', null],
        flags: [String, null]
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var name;
        var matcher = null;
        var value = null;
        var flags = null;

        this.eat(LEFTSQUAREBRACKET);
        this.scanner.skipSC();

        name = getAttributeName.call(this);
        this.scanner.skipSC();

        if (this.scanner.tokenType !== RIGHTSQUAREBRACKET) {
            // avoid case `[name i]`
            if (this.scanner.tokenType !== IDENT) {
                matcher = getOperator.call(this);

                this.scanner.skipSC();

                value = this.scanner.tokenType === STRING
                    ? this.String()
                    : this.Identifier();

                this.scanner.skipSC();
            }

            // attribute flags
            if (this.scanner.tokenType === IDENT) {
                flags = this.scanner.getTokenValue();
                this.scanner.next();

                this.scanner.skipSC();
            }
        }

        this.eat(RIGHTSQUAREBRACKET);

        return {
            type: 'AttributeSelector',
            loc: this.getLocation(start, this.scanner.tokenStart),
            name: name,
            matcher: matcher,
            value: value,
            flags: flags
        };
    },
    generate: function(node) {
        var flagsPrefix = ' ';

        this.chunk('[');
        this.node(node.name);

        if (node.matcher !== null) {
            this.chunk(node.matcher);

            if (node.value !== null) {
                this.node(node.value);

                // space between string and flags is not required
                if (node.value.type === 'String') {
                    flagsPrefix = '';
                }
            }
        }

        if (node.flags !== null) {
            this.chunk(flagsPrefix);
            this.chunk(node.flags);
        }

        this.chunk(']');
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Block.js":
/*!********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Block.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;
var rawMode = __webpack_require__(/*! ./Raw */ "./node_modules/css-tree/lib/syntax/node/Raw.js").mode;

var WHITESPACE = TYPE.WhiteSpace;
var COMMENT = TYPE.Comment;
var SEMICOLON = TYPE.Semicolon;
var ATKEYWORD = TYPE.AtKeyword;
var LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;
var RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;

function consumeRaw(startToken) {
    return this.Raw(startToken, null, true);
}
function consumeRule() {
    return this.parseWithFallback(this.Rule, consumeRaw);
}
function consumeRawDeclaration(startToken) {
    return this.Raw(startToken, rawMode.semicolonIncluded, true);
}
function consumeDeclaration() {
    if (this.scanner.tokenType === SEMICOLON) {
        return consumeRawDeclaration.call(this, this.scanner.tokenIndex);
    }

    var node = this.parseWithFallback(this.Declaration, consumeRawDeclaration);

    if (this.scanner.tokenType === SEMICOLON) {
        this.scanner.next();
    }

    return node;
}

module.exports = {
    name: 'Block',
    structure: {
        children: [[
            'Atrule',
            'Rule',
            'Declaration'
        ]]
    },
    parse: function(isDeclaration) {
        var consumer = isDeclaration ? consumeDeclaration : consumeRule;

        var start = this.scanner.tokenStart;
        var children = this.createList();

        this.eat(LEFTCURLYBRACKET);

        scan:
        while (!this.scanner.eof) {
            switch (this.scanner.tokenType) {
                case RIGHTCURLYBRACKET:
                    break scan;

                case WHITESPACE:
                case COMMENT:
                    this.scanner.next();
                    break;

                case ATKEYWORD:
                    children.push(this.parseWithFallback(this.Atrule, consumeRaw));
                    break;

                default:
                    children.push(consumer.call(this));
            }
        }

        if (!this.scanner.eof) {
            this.eat(RIGHTCURLYBRACKET);
        }

        return {
            type: 'Block',
            loc: this.getLocation(start, this.scanner.tokenStart),
            children: children
        };
    },
    generate: function(node) {
        this.chunk('{');
        this.children(node, function(prev) {
            if (prev.type === 'Declaration') {
                this.chunk(';');
            }
        });
        this.chunk('}');
    },
    walkContext: 'block'
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Brackets.js":
/*!***********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Brackets.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;
var RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;

module.exports = {
    name: 'Brackets',
    structure: {
        children: [[]]
    },
    parse: function(readSequence, recognizer) {
        var start = this.scanner.tokenStart;
        var children = null;

        this.eat(LEFTSQUAREBRACKET);

        children = readSequence.call(this, recognizer);

        if (!this.scanner.eof) {
            this.eat(RIGHTSQUAREBRACKET);
        }

        return {
            type: 'Brackets',
            loc: this.getLocation(start, this.scanner.tokenStart),
            children: children
        };
    },
    generate: function(node) {
        this.chunk('[');
        this.children(node);
        this.chunk(']');
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/CDC.js":
/*!******************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/CDC.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var CDC = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE.CDC;

module.exports = {
    name: 'CDC',
    structure: [],
    parse: function() {
        var start = this.scanner.tokenStart;

        this.eat(CDC); // -->

        return {
            type: 'CDC',
            loc: this.getLocation(start, this.scanner.tokenStart)
        };
    },
    generate: function() {
        this.chunk('-->');
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/CDO.js":
/*!******************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/CDO.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var CDO = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE.CDO;

module.exports = {
    name: 'CDO',
    structure: [],
    parse: function() {
        var start = this.scanner.tokenStart;

        this.eat(CDO); // <!--

        return {
            type: 'CDO',
            loc: this.getLocation(start, this.scanner.tokenStart)
        };
    },
    generate: function() {
        this.chunk('<!--');
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/ClassSelector.js":
/*!****************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/ClassSelector.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var IDENT = TYPE.Ident;
var FULLSTOP = 0x002E; // U+002E FULL STOP (.)

// '.' ident
module.exports = {
    name: 'ClassSelector',
    structure: {
        name: String
    },
    parse: function() {
        if (!this.scanner.isDelim(FULLSTOP)) {
            this.error('Full stop is expected');
        }

        this.scanner.next();

        return {
            type: 'ClassSelector',
            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),
            name: this.consume(IDENT)
        };
    },
    generate: function(node) {
        this.chunk('.');
        this.chunk(node.name);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Combinator.js":
/*!*************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Combinator.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var IDENT = TYPE.Ident;
var PLUSSIGN = 0x002B;        // U+002B PLUS SIGN (+)
var SOLIDUS = 0x002F;         // U+002F SOLIDUS (/)
var GREATERTHANSIGN = 0x003E; // U+003E GREATER-THAN SIGN (>)
var TILDE = 0x007E;           // U+007E TILDE (~)

// + | > | ~ | /deep/
module.exports = {
    name: 'Combinator',
    structure: {
        name: String
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);

        switch (code) {
            case GREATERTHANSIGN:
            case PLUSSIGN:
            case TILDE:
                this.scanner.next();
                break;

            case SOLIDUS:
                this.scanner.next();

                if (this.scanner.tokenType !== IDENT || this.scanner.lookupValue(0, 'deep') === false) {
                    this.error('Identifier `deep` is expected');
                }

                this.scanner.next();

                if (!this.scanner.isDelim(SOLIDUS)) {
                    this.error('Solidus is expected');
                }

                this.scanner.next();
                break;

            default:
                this.error('Combinator is expected');
        }

        return {
            type: 'Combinator',
            loc: this.getLocation(start, this.scanner.tokenStart),
            name: this.scanner.substrToCursor(start)
        };
    },
    generate: function(node) {
        this.chunk(node.name);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Comment.js":
/*!**********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Comment.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var COMMENT = TYPE.Comment;
var ASTERISK = 0x002A;        // U+002A ASTERISK (*)
var SOLIDUS = 0x002F;         // U+002F SOLIDUS (/)

// '/*' .* '*/'
module.exports = {
    name: 'Comment',
    structure: {
        value: String
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var end = this.scanner.tokenEnd;

        this.eat(COMMENT);

        if ((end - start + 2) >= 2 &&
            this.scanner.source.charCodeAt(end - 2) === ASTERISK &&
            this.scanner.source.charCodeAt(end - 1) === SOLIDUS) {
            end -= 2;
        }

        return {
            type: 'Comment',
            loc: this.getLocation(start, this.scanner.tokenStart),
            value: this.scanner.source.substring(start + 2, end)
        };
    },
    generate: function(node) {
        this.chunk('/*');
        this.chunk(node.value);
        this.chunk('*/');
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Declaration.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Declaration.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isCustomProperty = __webpack_require__(/*! ../../utils/names */ "./node_modules/css-tree/lib/utils/names.js").isCustomProperty;
var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;
var rawMode = __webpack_require__(/*! ./Raw */ "./node_modules/css-tree/lib/syntax/node/Raw.js").mode;

var IDENT = TYPE.Ident;
var HASH = TYPE.Hash;
var COLON = TYPE.Colon;
var SEMICOLON = TYPE.Semicolon;
var DELIM = TYPE.Delim;
var WHITESPACE = TYPE.WhiteSpace;
var EXCLAMATIONMARK = 0x0021; // U+0021 EXCLAMATION MARK (!)
var NUMBERSIGN = 0x0023;      // U+0023 NUMBER SIGN (#)
var DOLLARSIGN = 0x0024;      // U+0024 DOLLAR SIGN ($)
var AMPERSAND = 0x0026;       // U+0026 ANPERSAND (&)
var ASTERISK = 0x002A;        // U+002A ASTERISK (*)
var PLUSSIGN = 0x002B;        // U+002B PLUS SIGN (+)
var SOLIDUS = 0x002F;         // U+002F SOLIDUS (/)

function consumeValueRaw(startToken) {
    return this.Raw(startToken, rawMode.exclamationMarkOrSemicolon, true);
}

function consumeCustomPropertyRaw(startToken) {
    return this.Raw(startToken, rawMode.exclamationMarkOrSemicolon, false);
}

function consumeValue() {
    var startValueToken = this.scanner.tokenIndex;
    var value = this.Value();

    if (value.type !== 'Raw' &&
        this.scanner.eof === false &&
        this.scanner.tokenType !== SEMICOLON &&
        this.scanner.isDelim(EXCLAMATIONMARK) === false &&
        this.scanner.isBalanceEdge(startValueToken) === false) {
        this.error();
    }

    return value;
}

module.exports = {
    name: 'Declaration',
    structure: {
        important: [Boolean, String],
        property: String,
        value: ['Value', 'Raw']
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var startToken = this.scanner.tokenIndex;
        var property = readProperty.call(this);
        var customProperty = isCustomProperty(property);
        var parseValue = customProperty ? this.parseCustomProperty : this.parseValue;
        var consumeRaw = customProperty ? consumeCustomPropertyRaw : consumeValueRaw;
        var important = false;
        var value;

        this.scanner.skipSC();
        this.eat(COLON);

        const valueStart = this.scanner.tokenIndex;

        if (!customProperty) {
            this.scanner.skipSC();
        }

        if (parseValue) {
            value = this.parseWithFallback(consumeValue, consumeRaw);
        } else {
            value = consumeRaw.call(this, this.scanner.tokenIndex);
        }

        if (customProperty && value.type === 'Value' && value.children.isEmpty()) {
            for (let offset = valueStart - this.scanner.tokenIndex; offset <= 0; offset++) {
                if (this.scanner.lookupType(offset) === WHITESPACE) {
                    value.children.appendData({
                        type: 'WhiteSpace',
                        loc: null,
                        value: ' '
                    });
                    break;
                }
            }
        }

        if (this.scanner.isDelim(EXCLAMATIONMARK)) {
            important = getImportant.call(this);
            this.scanner.skipSC();
        }

        // Do not include semicolon to range per spec
        // https://drafts.csswg.org/css-syntax/#declaration-diagram

        if (this.scanner.eof === false &&
            this.scanner.tokenType !== SEMICOLON &&
            this.scanner.isBalanceEdge(startToken) === false) {
            this.error();
        }

        return {
            type: 'Declaration',
            loc: this.getLocation(start, this.scanner.tokenStart),
            important: important,
            property: property,
            value: value
        };
    },
    generate: function(node) {
        this.chunk(node.property);
        this.chunk(':');
        this.node(node.value);

        if (node.important) {
            this.chunk(node.important === true ? '!important' : '!' + node.important);
        }
    },
    walkContext: 'declaration'
};

function readProperty() {
    var start = this.scanner.tokenStart;
    var prefix = 0;

    // hacks
    if (this.scanner.tokenType === DELIM) {
        switch (this.scanner.source.charCodeAt(this.scanner.tokenStart)) {
            case ASTERISK:
            case DOLLARSIGN:
            case PLUSSIGN:
            case NUMBERSIGN:
            case AMPERSAND:
                this.scanner.next();
                break;

            // TODO: not sure we should support this hack
            case SOLIDUS:
                this.scanner.next();
                if (this.scanner.isDelim(SOLIDUS)) {
                    this.scanner.next();
                }
                break;
        }
    }

    if (prefix) {
        this.scanner.skip(prefix);
    }

    if (this.scanner.tokenType === HASH) {
        this.eat(HASH);
    } else {
        this.eat(IDENT);
    }

    return this.scanner.substrToCursor(start);
}

// ! ws* important
function getImportant() {
    this.eat(DELIM);
    this.scanner.skipSC();

    var important = this.consume(IDENT);

    // store original value in case it differ from `important`
    // for better original source restoring and hacks like `!ie` support
    return important === 'important' ? true : important;
}


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/DeclarationList.js":
/*!******************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/DeclarationList.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;
var rawMode = __webpack_require__(/*! ./Raw */ "./node_modules/css-tree/lib/syntax/node/Raw.js").mode;

var WHITESPACE = TYPE.WhiteSpace;
var COMMENT = TYPE.Comment;
var SEMICOLON = TYPE.Semicolon;

function consumeRaw(startToken) {
    return this.Raw(startToken, rawMode.semicolonIncluded, true);
}

module.exports = {
    name: 'DeclarationList',
    structure: {
        children: [[
            'Declaration'
        ]]
    },
    parse: function() {
        var children = this.createList();

        scan:
        while (!this.scanner.eof) {
            switch (this.scanner.tokenType) {
                case WHITESPACE:
                case COMMENT:
                case SEMICOLON:
                    this.scanner.next();
                    break;

                default:
                    children.push(this.parseWithFallback(this.Declaration, consumeRaw));
            }
        }

        return {
            type: 'DeclarationList',
            loc: this.getLocationFromList(children),
            children: children
        };
    },
    generate: function(node) {
        this.children(node, function(prev) {
            if (prev.type === 'Declaration') {
                this.chunk(';');
            }
        });
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Dimension.js":
/*!************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Dimension.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var consumeNumber = __webpack_require__(/*! ../../tokenizer/utils */ "./node_modules/css-tree/lib/tokenizer/utils.js").consumeNumber;
var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var DIMENSION = TYPE.Dimension;

module.exports = {
    name: 'Dimension',
    structure: {
        value: String,
        unit: String
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var numberEnd = consumeNumber(this.scanner.source, start);

        this.eat(DIMENSION);

        return {
            type: 'Dimension',
            loc: this.getLocation(start, this.scanner.tokenStart),
            value: this.scanner.source.substring(start, numberEnd),
            unit: this.scanner.source.substring(numberEnd, this.scanner.tokenStart)
        };
    },
    generate: function(node) {
        this.chunk(node.value);
        this.chunk(node.unit);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Function.js":
/*!***********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Function.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var RIGHTPARENTHESIS = TYPE.RightParenthesis;

// <function-token> <sequence> )
module.exports = {
    name: 'Function',
    structure: {
        name: String,
        children: [[]]
    },
    parse: function(readSequence, recognizer) {
        var start = this.scanner.tokenStart;
        var name = this.consumeFunctionName();
        var nameLowerCase = name.toLowerCase();
        var children;

        children = recognizer.hasOwnProperty(nameLowerCase)
            ? recognizer[nameLowerCase].call(this, recognizer)
            : readSequence.call(this, recognizer);

        if (!this.scanner.eof) {
            this.eat(RIGHTPARENTHESIS);
        }

        return {
            type: 'Function',
            loc: this.getLocation(start, this.scanner.tokenStart),
            name: name,
            children: children
        };
    },
    generate: function(node) {
        this.chunk(node.name);
        this.chunk('(');
        this.children(node);
        this.chunk(')');
    },
    walkContext: 'function'
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Hash.js":
/*!*******************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Hash.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var HASH = TYPE.Hash;

// '#' ident
module.exports = {
    name: 'Hash',
    structure: {
        value: String
    },
    parse: function() {
        var start = this.scanner.tokenStart;

        this.eat(HASH);

        return {
            type: 'Hash',
            loc: this.getLocation(start, this.scanner.tokenStart),
            value: this.scanner.substrToCursor(start + 1)
        };
    },
    generate: function(node) {
        this.chunk('#');
        this.chunk(node.value);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/IdSelector.js":
/*!*************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/IdSelector.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var HASH = TYPE.Hash;

// <hash-token>
module.exports = {
    name: 'IdSelector',
    structure: {
        name: String
    },
    parse: function() {
        var start = this.scanner.tokenStart;

        // TODO: check value is an ident
        this.eat(HASH);

        return {
            type: 'IdSelector',
            loc: this.getLocation(start, this.scanner.tokenStart),
            name: this.scanner.substrToCursor(start + 1)
        };
    },
    generate: function(node) {
        this.chunk('#');
        this.chunk(node.name);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Identifier.js":
/*!*************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Identifier.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var IDENT = TYPE.Ident;

module.exports = {
    name: 'Identifier',
    structure: {
        name: String
    },
    parse: function() {
        return {
            type: 'Identifier',
            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
            name: this.consume(IDENT)
        };
    },
    generate: function(node) {
        this.chunk(node.name);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/MediaFeature.js":
/*!***************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/MediaFeature.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var IDENT = TYPE.Ident;
var NUMBER = TYPE.Number;
var DIMENSION = TYPE.Dimension;
var LEFTPARENTHESIS = TYPE.LeftParenthesis;
var RIGHTPARENTHESIS = TYPE.RightParenthesis;
var COLON = TYPE.Colon;
var DELIM = TYPE.Delim;

module.exports = {
    name: 'MediaFeature',
    structure: {
        name: String,
        value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var name;
        var value = null;

        this.eat(LEFTPARENTHESIS);
        this.scanner.skipSC();

        name = this.consume(IDENT);
        this.scanner.skipSC();

        if (this.scanner.tokenType !== RIGHTPARENTHESIS) {
            this.eat(COLON);
            this.scanner.skipSC();

            switch (this.scanner.tokenType) {
                case NUMBER:
                    if (this.lookupNonWSType(1) === DELIM) {
                        value = this.Ratio();
                    } else {
                        value = this.Number();
                    }

                    break;

                case DIMENSION:
                    value = this.Dimension();
                    break;

                case IDENT:
                    value = this.Identifier();

                    break;

                default:
                    this.error('Number, dimension, ratio or identifier is expected');
            }

            this.scanner.skipSC();
        }

        this.eat(RIGHTPARENTHESIS);

        return {
            type: 'MediaFeature',
            loc: this.getLocation(start, this.scanner.tokenStart),
            name: name,
            value: value
        };
    },
    generate: function(node) {
        this.chunk('(');
        this.chunk(node.name);
        if (node.value !== null) {
            this.chunk(':');
            this.node(node.value);
        }
        this.chunk(')');
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/MediaQuery.js":
/*!*************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/MediaQuery.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var WHITESPACE = TYPE.WhiteSpace;
var COMMENT = TYPE.Comment;
var IDENT = TYPE.Ident;
var LEFTPARENTHESIS = TYPE.LeftParenthesis;

module.exports = {
    name: 'MediaQuery',
    structure: {
        children: [[
            'Identifier',
            'MediaFeature',
            'WhiteSpace'
        ]]
    },
    parse: function() {
        this.scanner.skipSC();

        var children = this.createList();
        var child = null;
        var space = null;

        scan:
        while (!this.scanner.eof) {
            switch (this.scanner.tokenType) {
                case COMMENT:
                    this.scanner.next();
                    continue;

                case WHITESPACE:
                    space = this.WhiteSpace();
                    continue;

                case IDENT:
                    child = this.Identifier();
                    break;

                case LEFTPARENTHESIS:
                    child = this.MediaFeature();
                    break;

                default:
                    break scan;
            }

            if (space !== null) {
                children.push(space);
                space = null;
            }

            children.push(child);
        }

        if (child === null) {
            this.error('Identifier or parenthesis is expected');
        }

        return {
            type: 'MediaQuery',
            loc: this.getLocationFromList(children),
            children: children
        };
    },
    generate: function(node) {
        this.children(node);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/MediaQueryList.js":
/*!*****************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/MediaQueryList.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var COMMA = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE.Comma;

module.exports = {
    name: 'MediaQueryList',
    structure: {
        children: [[
            'MediaQuery'
        ]]
    },
    parse: function(relative) {
        var children = this.createList();

        this.scanner.skipSC();

        while (!this.scanner.eof) {
            children.push(this.MediaQuery(relative));

            if (this.scanner.tokenType !== COMMA) {
                break;
            }

            this.scanner.next();
        }

        return {
            type: 'MediaQueryList',
            loc: this.getLocationFromList(children),
            children: children
        };
    },
    generate: function(node) {
        this.children(node, function() {
            this.chunk(',');
        });
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Nth.js":
/*!******************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Nth.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
    name: 'Nth',
    structure: {
        nth: ['AnPlusB', 'Identifier'],
        selector: ['SelectorList', null]
    },
    parse: function(allowOfClause) {
        this.scanner.skipSC();

        var start = this.scanner.tokenStart;
        var end = start;
        var selector = null;
        var query;

        if (this.scanner.lookupValue(0, 'odd') || this.scanner.lookupValue(0, 'even')) {
            query = this.Identifier();
        } else {
            query = this.AnPlusB();
        }

        this.scanner.skipSC();

        if (allowOfClause && this.scanner.lookupValue(0, 'of')) {
            this.scanner.next();

            selector = this.SelectorList();

            if (this.needPositions) {
                end = this.getLastListNode(selector.children).loc.end.offset;
            }
        } else {
            if (this.needPositions) {
                end = query.loc.end.offset;
            }
        }

        return {
            type: 'Nth',
            loc: this.getLocation(start, end),
            nth: query,
            selector: selector
        };
    },
    generate: function(node) {
        this.node(node.nth);
        if (node.selector !== null) {
            this.chunk(' of ');
            this.node(node.selector);
        }
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Number.js":
/*!*********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Number.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var NUMBER = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE.Number;

module.exports = {
    name: 'Number',
    structure: {
        value: String
    },
    parse: function() {
        return {
            type: 'Number',
            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
            value: this.consume(NUMBER)
        };
    },
    generate: function(node) {
        this.chunk(node.value);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Operator.js":
/*!***********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Operator.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// '/' | '*' | ',' | ':' | '+' | '-'
module.exports = {
    name: 'Operator',
    structure: {
        value: String
    },
    parse: function() {
        var start = this.scanner.tokenStart;

        this.scanner.next();

        return {
            type: 'Operator',
            loc: this.getLocation(start, this.scanner.tokenStart),
            value: this.scanner.substrToCursor(start)
        };
    },
    generate: function(node) {
        this.chunk(node.value);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Parentheses.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Parentheses.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var LEFTPARENTHESIS = TYPE.LeftParenthesis;
var RIGHTPARENTHESIS = TYPE.RightParenthesis;

module.exports = {
    name: 'Parentheses',
    structure: {
        children: [[]]
    },
    parse: function(readSequence, recognizer) {
        var start = this.scanner.tokenStart;
        var children = null;

        this.eat(LEFTPARENTHESIS);

        children = readSequence.call(this, recognizer);

        if (!this.scanner.eof) {
            this.eat(RIGHTPARENTHESIS);
        }

        return {
            type: 'Parentheses',
            loc: this.getLocation(start, this.scanner.tokenStart),
            children: children
        };
    },
    generate: function(node) {
        this.chunk('(');
        this.children(node);
        this.chunk(')');
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Percentage.js":
/*!*************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Percentage.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var consumeNumber = __webpack_require__(/*! ../../tokenizer/utils */ "./node_modules/css-tree/lib/tokenizer/utils.js").consumeNumber;
var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var PERCENTAGE = TYPE.Percentage;

module.exports = {
    name: 'Percentage',
    structure: {
        value: String
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var numberEnd = consumeNumber(this.scanner.source, start);

        this.eat(PERCENTAGE);

        return {
            type: 'Percentage',
            loc: this.getLocation(start, this.scanner.tokenStart),
            value: this.scanner.source.substring(start, numberEnd)
        };
    },
    generate: function(node) {
        this.chunk(node.value);
        this.chunk('%');
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/PseudoClassSelector.js":
/*!**********************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/PseudoClassSelector.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var IDENT = TYPE.Ident;
var FUNCTION = TYPE.Function;
var COLON = TYPE.Colon;
var RIGHTPARENTHESIS = TYPE.RightParenthesis;

// : [ <ident> | <function-token> <any-value>? ) ]
module.exports = {
    name: 'PseudoClassSelector',
    structure: {
        name: String,
        children: [['Raw'], null]
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var children = null;
        var name;
        var nameLowerCase;

        this.eat(COLON);

        if (this.scanner.tokenType === FUNCTION) {
            name = this.consumeFunctionName();
            nameLowerCase = name.toLowerCase();

            if (this.pseudo.hasOwnProperty(nameLowerCase)) {
                this.scanner.skipSC();
                children = this.pseudo[nameLowerCase].call(this);
                this.scanner.skipSC();
            } else {
                children = this.createList();
                children.push(
                    this.Raw(this.scanner.tokenIndex, null, false)
                );
            }

            this.eat(RIGHTPARENTHESIS);
        } else {
            name = this.consume(IDENT);
        }

        return {
            type: 'PseudoClassSelector',
            loc: this.getLocation(start, this.scanner.tokenStart),
            name: name,
            children: children
        };
    },
    generate: function(node) {
        this.chunk(':');
        this.chunk(node.name);

        if (node.children !== null) {
            this.chunk('(');
            this.children(node);
            this.chunk(')');
        }
    },
    walkContext: 'function'
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/PseudoElementSelector.js":
/*!************************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/PseudoElementSelector.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var IDENT = TYPE.Ident;
var FUNCTION = TYPE.Function;
var COLON = TYPE.Colon;
var RIGHTPARENTHESIS = TYPE.RightParenthesis;

// :: [ <ident> | <function-token> <any-value>? ) ]
module.exports = {
    name: 'PseudoElementSelector',
    structure: {
        name: String,
        children: [['Raw'], null]
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var children = null;
        var name;
        var nameLowerCase;

        this.eat(COLON);
        this.eat(COLON);

        if (this.scanner.tokenType === FUNCTION) {
            name = this.consumeFunctionName();
            nameLowerCase = name.toLowerCase();

            if (this.pseudo.hasOwnProperty(nameLowerCase)) {
                this.scanner.skipSC();
                children = this.pseudo[nameLowerCase].call(this);
                this.scanner.skipSC();
            } else {
                children = this.createList();
                children.push(
                    this.Raw(this.scanner.tokenIndex, null, false)
                );
            }

            this.eat(RIGHTPARENTHESIS);
        } else {
            name = this.consume(IDENT);
        }

        return {
            type: 'PseudoElementSelector',
            loc: this.getLocation(start, this.scanner.tokenStart),
            name: name,
            children: children
        };
    },
    generate: function(node) {
        this.chunk('::');
        this.chunk(node.name);

        if (node.children !== null) {
            this.chunk('(');
            this.children(node);
            this.chunk(')');
        }
    },
    walkContext: 'function'
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Ratio.js":
/*!********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Ratio.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isDigit = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").isDigit;
var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var NUMBER = TYPE.Number;
var DELIM = TYPE.Delim;
var SOLIDUS = 0x002F;  // U+002F SOLIDUS (/)
var FULLSTOP = 0x002E; // U+002E FULL STOP (.)

// Terms of <ratio> should be a positive numbers (not zero or negative)
// (see https://drafts.csswg.org/mediaqueries-3/#values)
// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term
// and this is using by various sites. Therefore we relax checking on parse
// to test a term is unsigned number without an exponent part.
// Additional checking may be applied on lexer validation.
function consumeNumber() {
    this.scanner.skipWS();

    var value = this.consume(NUMBER);

    for (var i = 0; i < value.length; i++) {
        var code = value.charCodeAt(i);
        if (!isDigit(code) && code !== FULLSTOP) {
            this.error('Unsigned number is expected', this.scanner.tokenStart - value.length + i);
        }
    }

    if (Number(value) === 0) {
        this.error('Zero number is not allowed', this.scanner.tokenStart - value.length);
    }

    return value;
}

// <positive-integer> S* '/' S* <positive-integer>
module.exports = {
    name: 'Ratio',
    structure: {
        left: String,
        right: String
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var left = consumeNumber.call(this);
        var right;

        this.scanner.skipWS();

        if (!this.scanner.isDelim(SOLIDUS)) {
            this.error('Solidus is expected');
        }
        this.eat(DELIM);
        right = consumeNumber.call(this);

        return {
            type: 'Ratio',
            loc: this.getLocation(start, this.scanner.tokenStart),
            left: left,
            right: right
        };
    },
    generate: function(node) {
        this.chunk(node.left);
        this.chunk('/');
        this.chunk(node.right);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Raw.js":
/*!******************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Raw.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var tokenizer = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js");
var TYPE = tokenizer.TYPE;

var WhiteSpace = TYPE.WhiteSpace;
var Semicolon = TYPE.Semicolon;
var LeftCurlyBracket = TYPE.LeftCurlyBracket;
var Delim = TYPE.Delim;
var EXCLAMATIONMARK = 0x0021; // U+0021 EXCLAMATION MARK (!)

function getOffsetExcludeWS() {
    if (this.scanner.tokenIndex > 0) {
        if (this.scanner.lookupType(-1) === WhiteSpace) {
            return this.scanner.tokenIndex > 1
                ? this.scanner.getTokenStart(this.scanner.tokenIndex - 1)
                : this.scanner.firstCharOffset;
        }
    }

    return this.scanner.tokenStart;
}

// 0, 0, false
function balanceEnd() {
    return 0;
}

// LEFTCURLYBRACKET, 0, false
function leftCurlyBracket(tokenType) {
    return tokenType === LeftCurlyBracket ? 1 : 0;
}

// LEFTCURLYBRACKET, SEMICOLON, false
function leftCurlyBracketOrSemicolon(tokenType) {
    return tokenType === LeftCurlyBracket || tokenType === Semicolon ? 1 : 0;
}

// EXCLAMATIONMARK, SEMICOLON, false
function exclamationMarkOrSemicolon(tokenType, source, offset) {
    if (tokenType === Delim && source.charCodeAt(offset) === EXCLAMATIONMARK) {
        return 1;
    }

    return tokenType === Semicolon ? 1 : 0;
}

// 0, SEMICOLON, true
function semicolonIncluded(tokenType) {
    return tokenType === Semicolon ? 2 : 0;
}

module.exports = {
    name: 'Raw',
    structure: {
        value: String
    },
    parse: function(startToken, mode, excludeWhiteSpace) {
        var startOffset = this.scanner.getTokenStart(startToken);
        var endOffset;

        this.scanner.skip(
            this.scanner.getRawLength(startToken, mode || balanceEnd)
        );

        if (excludeWhiteSpace && this.scanner.tokenStart > startOffset) {
            endOffset = getOffsetExcludeWS.call(this);
        } else {
            endOffset = this.scanner.tokenStart;
        }

        return {
            type: 'Raw',
            loc: this.getLocation(startOffset, endOffset),
            value: this.scanner.source.substring(startOffset, endOffset)
        };
    },
    generate: function(node) {
        this.chunk(node.value);
    },

    mode: {
        default: balanceEnd,
        leftCurlyBracket: leftCurlyBracket,
        leftCurlyBracketOrSemicolon: leftCurlyBracketOrSemicolon,
        exclamationMarkOrSemicolon: exclamationMarkOrSemicolon,
        semicolonIncluded: semicolonIncluded
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Rule.js":
/*!*******************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Rule.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;
var rawMode = __webpack_require__(/*! ./Raw */ "./node_modules/css-tree/lib/syntax/node/Raw.js").mode;

var LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;

function consumeRaw(startToken) {
    return this.Raw(startToken, rawMode.leftCurlyBracket, true);
}

function consumePrelude() {
    var prelude = this.SelectorList();

    if (prelude.type !== 'Raw' &&
        this.scanner.eof === false &&
        this.scanner.tokenType !== LEFTCURLYBRACKET) {
        this.error();
    }

    return prelude;
}

module.exports = {
    name: 'Rule',
    structure: {
        prelude: ['SelectorList', 'Raw'],
        block: ['Block']
    },
    parse: function() {
        var startToken = this.scanner.tokenIndex;
        var startOffset = this.scanner.tokenStart;
        var prelude;
        var block;

        if (this.parseRulePrelude) {
            prelude = this.parseWithFallback(consumePrelude, consumeRaw);
        } else {
            prelude = consumeRaw.call(this, startToken);
        }

        block = this.Block(true);

        return {
            type: 'Rule',
            loc: this.getLocation(startOffset, this.scanner.tokenStart),
            prelude: prelude,
            block: block
        };
    },
    generate: function(node) {
        this.node(node.prelude);
        this.node(node.block);
    },
    walkContext: 'rule'
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Selector.js":
/*!***********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Selector.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
    name: 'Selector',
    structure: {
        children: [[
            'TypeSelector',
            'IdSelector',
            'ClassSelector',
            'AttributeSelector',
            'PseudoClassSelector',
            'PseudoElementSelector',
            'Combinator',
            'WhiteSpace'
        ]]
    },
    parse: function() {
        var children = this.readSequence(this.scope.Selector);

        // nothing were consumed
        if (this.getFirstListNode(children) === null) {
            this.error('Selector is expected');
        }

        return {
            type: 'Selector',
            loc: this.getLocationFromList(children),
            children: children
        };
    },
    generate: function(node) {
        this.children(node);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/SelectorList.js":
/*!***************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/SelectorList.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var COMMA = TYPE.Comma;

module.exports = {
    name: 'SelectorList',
    structure: {
        children: [[
            'Selector',
            'Raw'
        ]]
    },
    parse: function() {
        var children = this.createList();

        while (!this.scanner.eof) {
            children.push(this.Selector());

            if (this.scanner.tokenType === COMMA) {
                this.scanner.next();
                continue;
            }

            break;
        }

        return {
            type: 'SelectorList',
            loc: this.getLocationFromList(children),
            children: children
        };
    },
    generate: function(node) {
        this.children(node, function() {
            this.chunk(',');
        });
    },
    walkContext: 'selector'
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/String.js":
/*!*********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/String.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var STRING = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE.String;

module.exports = {
    name: 'String',
    structure: {
        value: String
    },
    parse: function() {
        return {
            type: 'String',
            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
            value: this.consume(STRING)
        };
    },
    generate: function(node) {
        this.chunk(node.value);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/StyleSheet.js":
/*!*************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/StyleSheet.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var WHITESPACE = TYPE.WhiteSpace;
var COMMENT = TYPE.Comment;
var ATKEYWORD = TYPE.AtKeyword;
var CDO = TYPE.CDO;
var CDC = TYPE.CDC;
var EXCLAMATIONMARK = 0x0021; // U+0021 EXCLAMATION MARK (!)

function consumeRaw(startToken) {
    return this.Raw(startToken, null, false);
}

module.exports = {
    name: 'StyleSheet',
    structure: {
        children: [[
            'Comment',
            'CDO',
            'CDC',
            'Atrule',
            'Rule',
            'Raw'
        ]]
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var children = this.createList();
        var child;

        scan:
        while (!this.scanner.eof) {
            switch (this.scanner.tokenType) {
                case WHITESPACE:
                    this.scanner.next();
                    continue;

                case COMMENT:
                    // ignore comments except exclamation comments (i.e. /*! .. */) on top level
                    if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 2) !== EXCLAMATIONMARK) {
                        this.scanner.next();
                        continue;
                    }

                    child = this.Comment();
                    break;

                case CDO: // <!--
                    child = this.CDO();
                    break;

                case CDC: // -->
                    child = this.CDC();
                    break;

                // CSS Syntax Module Level 3
                // §2.2 Error handling
                // At the "top level" of a stylesheet, an <at-keyword-token> starts an at-rule.
                case ATKEYWORD:
                    child = this.parseWithFallback(this.Atrule, consumeRaw);
                    break;

                // Anything else starts a qualified rule ...
                default:
                    child = this.parseWithFallback(this.Rule, consumeRaw);
            }

            children.push(child);
        }

        return {
            type: 'StyleSheet',
            loc: this.getLocation(start, this.scanner.tokenStart),
            children: children
        };
    },
    generate: function(node) {
        this.children(node);
    },
    walkContext: 'stylesheet'
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/TypeSelector.js":
/*!***************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/TypeSelector.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var IDENT = TYPE.Ident;
var ASTERISK = 0x002A;     // U+002A ASTERISK (*)
var VERTICALLINE = 0x007C; // U+007C VERTICAL LINE (|)

function eatIdentifierOrAsterisk() {
    if (this.scanner.tokenType !== IDENT &&
        this.scanner.isDelim(ASTERISK) === false) {
        this.error('Identifier or asterisk is expected');
    }

    this.scanner.next();
}

// ident
// ident|ident
// ident|*
// *
// *|ident
// *|*
// |ident
// |*
module.exports = {
    name: 'TypeSelector',
    structure: {
        name: String
    },
    parse: function() {
        var start = this.scanner.tokenStart;

        if (this.scanner.isDelim(VERTICALLINE)) {
            this.scanner.next();
            eatIdentifierOrAsterisk.call(this);
        } else {
            eatIdentifierOrAsterisk.call(this);

            if (this.scanner.isDelim(VERTICALLINE)) {
                this.scanner.next();
                eatIdentifierOrAsterisk.call(this);
            }
        }

        return {
            type: 'TypeSelector',
            loc: this.getLocation(start, this.scanner.tokenStart),
            name: this.scanner.substrToCursor(start)
        };
    },
    generate: function(node) {
        this.chunk(node.name);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/UnicodeRange.js":
/*!***************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/UnicodeRange.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isHexDigit = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").isHexDigit;
var cmpChar = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").cmpChar;
var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;
var NAME = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").NAME;

var IDENT = TYPE.Ident;
var NUMBER = TYPE.Number;
var DIMENSION = TYPE.Dimension;
var PLUSSIGN = 0x002B;     // U+002B PLUS SIGN (+)
var HYPHENMINUS = 0x002D;  // U+002D HYPHEN-MINUS (-)
var QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)
var U = 0x0075;            // U+0075 LATIN SMALL LETTER U (u)

function eatHexSequence(offset, allowDash) {
    for (var pos = this.scanner.tokenStart + offset, len = 0; pos < this.scanner.tokenEnd; pos++) {
        var code = this.scanner.source.charCodeAt(pos);

        if (code === HYPHENMINUS && allowDash && len !== 0) {
            if (eatHexSequence.call(this, offset + len + 1, false) === 0) {
                this.error();
            }

            return -1;
        }

        if (!isHexDigit(code)) {
            this.error(
                allowDash && len !== 0
                    ? 'HyphenMinus' + (len < 6 ? ' or hex digit' : '') + ' is expected'
                    : (len < 6 ? 'Hex digit is expected' : 'Unexpected input'),
                pos
            );
        }

        if (++len > 6) {
            this.error('Too many hex digits', pos);
        };
    }

    this.scanner.next();
    return len;
}

function eatQuestionMarkSequence(max) {
    var count = 0;

    while (this.scanner.isDelim(QUESTIONMARK)) {
        if (++count > max) {
            this.error('Too many question marks');
        }

        this.scanner.next();
    }
}

function startsWith(code) {
    if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== code) {
        this.error(NAME[code] + ' is expected');
    }
}

// https://drafts.csswg.org/css-syntax/#urange
// Informally, the <urange> production has three forms:
// U+0001
//      Defines a range consisting of a single code point, in this case the code point "1".
// U+0001-00ff
//      Defines a range of codepoints between the first and the second value, in this case
//      the range between "1" and "ff" (255 in decimal) inclusive.
// U+00??
//      Defines a range of codepoints where the "?" characters range over all hex digits,
//      in this case defining the same as the value U+0000-00ff.
// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat "?" as a hexadecimal digit).
//
// <urange> =
//   u '+' <ident-token> '?'* |
//   u <dimension-token> '?'* |
//   u <number-token> '?'* |
//   u <number-token> <dimension-token> |
//   u <number-token> <number-token> |
//   u '+' '?'+
function scanUnicodeRange() {
    var hexLength = 0;

    // u '+' <ident-token> '?'*
    // u '+' '?'+
    if (this.scanner.isDelim(PLUSSIGN)) {
        this.scanner.next();

        if (this.scanner.tokenType === IDENT) {
            hexLength = eatHexSequence.call(this, 0, true);
            if (hexLength > 0) {
                eatQuestionMarkSequence.call(this, 6 - hexLength);
            }
            return;
        }

        if (this.scanner.isDelim(QUESTIONMARK)) {
            this.scanner.next();
            eatQuestionMarkSequence.call(this, 5);
            return;
        }

        this.error('Hex digit or question mark is expected');
        return;
    }

    // u <number-token> '?'*
    // u <number-token> <dimension-token>
    // u <number-token> <number-token>
    if (this.scanner.tokenType === NUMBER) {
        startsWith.call(this, PLUSSIGN);
        hexLength = eatHexSequence.call(this, 1, true);

        if (this.scanner.isDelim(QUESTIONMARK)) {
            eatQuestionMarkSequence.call(this, 6 - hexLength);
            return;
        }

        if (this.scanner.tokenType === DIMENSION ||
            this.scanner.tokenType === NUMBER) {
            startsWith.call(this, HYPHENMINUS);
            eatHexSequence.call(this, 1, false);
            return;
        }

        return;
    }

    // u <dimension-token> '?'*
    if (this.scanner.tokenType === DIMENSION) {
        startsWith.call(this, PLUSSIGN);
        hexLength = eatHexSequence.call(this, 1, true);

        if (hexLength > 0) {
            eatQuestionMarkSequence.call(this, 6 - hexLength);
        }

        return;
    }

    this.error();
}

module.exports = {
    name: 'UnicodeRange',
    structure: {
        value: String
    },
    parse: function() {
        var start = this.scanner.tokenStart;

        // U or u
        if (!cmpChar(this.scanner.source, start, U)) {
            this.error('U is expected');
        }

        if (!cmpChar(this.scanner.source, start + 1, PLUSSIGN)) {
            this.error('Plus sign is expected');
        }

        this.scanner.next();
        scanUnicodeRange.call(this);

        return {
            type: 'UnicodeRange',
            loc: this.getLocation(start, this.scanner.tokenStart),
            value: this.scanner.substrToCursor(start)
        };
    },
    generate: function(node) {
        this.chunk(node.value);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Url.js":
/*!******************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Url.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isWhiteSpace = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").isWhiteSpace;
var cmpStr = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").cmpStr;
var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var FUNCTION = TYPE.Function;
var URL = TYPE.Url;
var RIGHTPARENTHESIS = TYPE.RightParenthesis;

// <url-token> | <function-token> <string> )
module.exports = {
    name: 'Url',
    structure: {
        value: ['String', 'Raw']
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var value;

        switch (this.scanner.tokenType) {
            case URL:
                var rawStart = start + 4;
                var rawEnd = this.scanner.tokenEnd - 1;

                while (rawStart < rawEnd && isWhiteSpace(this.scanner.source.charCodeAt(rawStart))) {
                    rawStart++;
                }

                while (rawStart < rawEnd && isWhiteSpace(this.scanner.source.charCodeAt(rawEnd - 1))) {
                    rawEnd--;
                }

                value = {
                    type: 'Raw',
                    loc: this.getLocation(rawStart, rawEnd),
                    value: this.scanner.source.substring(rawStart, rawEnd)
                };

                this.eat(URL);
                break;

            case FUNCTION:
                if (!cmpStr(this.scanner.source, this.scanner.tokenStart, this.scanner.tokenEnd, 'url(')) {
                    this.error('Function name must be `url`');
                }

                this.eat(FUNCTION);
                this.scanner.skipSC();
                value = this.String();
                this.scanner.skipSC();
                this.eat(RIGHTPARENTHESIS);
                break;

            default:
                this.error('Url or Function is expected');
        }

        return {
            type: 'Url',
            loc: this.getLocation(start, this.scanner.tokenStart),
            value: value
        };
    },
    generate: function(node) {
        this.chunk('url');
        this.chunk('(');
        this.node(node.value);
        this.chunk(')');
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/Value.js":
/*!********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/Value.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
    name: 'Value',
    structure: {
        children: [[]]
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var children = this.readSequence(this.scope.Value);

        return {
            type: 'Value',
            loc: this.getLocation(start, this.scanner.tokenStart),
            children: children
        };
    },
    generate: function(node) {
        this.children(node);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/WhiteSpace.js":
/*!*************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/WhiteSpace.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var WHITESPACE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE.WhiteSpace;
var SPACE = Object.freeze({
    type: 'WhiteSpace',
    loc: null,
    value: ' '
});

module.exports = {
    name: 'WhiteSpace',
    structure: {
        value: String
    },
    parse: function() {
        this.eat(WHITESPACE);
        return SPACE;

        // return {
        //     type: 'WhiteSpace',
        //     loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
        //     value: this.consume(WHITESPACE)
        // };
    },
    generate: function(node) {
        this.chunk(node.value);
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/node/index.js":
/*!********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/node/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
    AnPlusB: __webpack_require__(/*! ./AnPlusB */ "./node_modules/css-tree/lib/syntax/node/AnPlusB.js"),
    Atrule: __webpack_require__(/*! ./Atrule */ "./node_modules/css-tree/lib/syntax/node/Atrule.js"),
    AtrulePrelude: __webpack_require__(/*! ./AtrulePrelude */ "./node_modules/css-tree/lib/syntax/node/AtrulePrelude.js"),
    AttributeSelector: __webpack_require__(/*! ./AttributeSelector */ "./node_modules/css-tree/lib/syntax/node/AttributeSelector.js"),
    Block: __webpack_require__(/*! ./Block */ "./node_modules/css-tree/lib/syntax/node/Block.js"),
    Brackets: __webpack_require__(/*! ./Brackets */ "./node_modules/css-tree/lib/syntax/node/Brackets.js"),
    CDC: __webpack_require__(/*! ./CDC */ "./node_modules/css-tree/lib/syntax/node/CDC.js"),
    CDO: __webpack_require__(/*! ./CDO */ "./node_modules/css-tree/lib/syntax/node/CDO.js"),
    ClassSelector: __webpack_require__(/*! ./ClassSelector */ "./node_modules/css-tree/lib/syntax/node/ClassSelector.js"),
    Combinator: __webpack_require__(/*! ./Combinator */ "./node_modules/css-tree/lib/syntax/node/Combinator.js"),
    Comment: __webpack_require__(/*! ./Comment */ "./node_modules/css-tree/lib/syntax/node/Comment.js"),
    Declaration: __webpack_require__(/*! ./Declaration */ "./node_modules/css-tree/lib/syntax/node/Declaration.js"),
    DeclarationList: __webpack_require__(/*! ./DeclarationList */ "./node_modules/css-tree/lib/syntax/node/DeclarationList.js"),
    Dimension: __webpack_require__(/*! ./Dimension */ "./node_modules/css-tree/lib/syntax/node/Dimension.js"),
    Function: __webpack_require__(/*! ./Function */ "./node_modules/css-tree/lib/syntax/node/Function.js"),
    Hash: __webpack_require__(/*! ./Hash */ "./node_modules/css-tree/lib/syntax/node/Hash.js"),
    Identifier: __webpack_require__(/*! ./Identifier */ "./node_modules/css-tree/lib/syntax/node/Identifier.js"),
    IdSelector: __webpack_require__(/*! ./IdSelector */ "./node_modules/css-tree/lib/syntax/node/IdSelector.js"),
    MediaFeature: __webpack_require__(/*! ./MediaFeature */ "./node_modules/css-tree/lib/syntax/node/MediaFeature.js"),
    MediaQuery: __webpack_require__(/*! ./MediaQuery */ "./node_modules/css-tree/lib/syntax/node/MediaQuery.js"),
    MediaQueryList: __webpack_require__(/*! ./MediaQueryList */ "./node_modules/css-tree/lib/syntax/node/MediaQueryList.js"),
    Nth: __webpack_require__(/*! ./Nth */ "./node_modules/css-tree/lib/syntax/node/Nth.js"),
    Number: __webpack_require__(/*! ./Number */ "./node_modules/css-tree/lib/syntax/node/Number.js"),
    Operator: __webpack_require__(/*! ./Operator */ "./node_modules/css-tree/lib/syntax/node/Operator.js"),
    Parentheses: __webpack_require__(/*! ./Parentheses */ "./node_modules/css-tree/lib/syntax/node/Parentheses.js"),
    Percentage: __webpack_require__(/*! ./Percentage */ "./node_modules/css-tree/lib/syntax/node/Percentage.js"),
    PseudoClassSelector: __webpack_require__(/*! ./PseudoClassSelector */ "./node_modules/css-tree/lib/syntax/node/PseudoClassSelector.js"),
    PseudoElementSelector: __webpack_require__(/*! ./PseudoElementSelector */ "./node_modules/css-tree/lib/syntax/node/PseudoElementSelector.js"),
    Ratio: __webpack_require__(/*! ./Ratio */ "./node_modules/css-tree/lib/syntax/node/Ratio.js"),
    Raw: __webpack_require__(/*! ./Raw */ "./node_modules/css-tree/lib/syntax/node/Raw.js"),
    Rule: __webpack_require__(/*! ./Rule */ "./node_modules/css-tree/lib/syntax/node/Rule.js"),
    Selector: __webpack_require__(/*! ./Selector */ "./node_modules/css-tree/lib/syntax/node/Selector.js"),
    SelectorList: __webpack_require__(/*! ./SelectorList */ "./node_modules/css-tree/lib/syntax/node/SelectorList.js"),
    String: __webpack_require__(/*! ./String */ "./node_modules/css-tree/lib/syntax/node/String.js"),
    StyleSheet: __webpack_require__(/*! ./StyleSheet */ "./node_modules/css-tree/lib/syntax/node/StyleSheet.js"),
    TypeSelector: __webpack_require__(/*! ./TypeSelector */ "./node_modules/css-tree/lib/syntax/node/TypeSelector.js"),
    UnicodeRange: __webpack_require__(/*! ./UnicodeRange */ "./node_modules/css-tree/lib/syntax/node/UnicodeRange.js"),
    Url: __webpack_require__(/*! ./Url */ "./node_modules/css-tree/lib/syntax/node/Url.js"),
    Value: __webpack_require__(/*! ./Value */ "./node_modules/css-tree/lib/syntax/node/Value.js"),
    WhiteSpace: __webpack_require__(/*! ./WhiteSpace */ "./node_modules/css-tree/lib/syntax/node/WhiteSpace.js")
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/pseudo/common/nth.js":
/*!***************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/pseudo/common/nth.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var DISALLOW_OF_CLAUSE = false;

module.exports = {
    parse: function nth() {
        return this.createSingleNodeList(
            this.Nth(DISALLOW_OF_CLAUSE)
        );
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/pseudo/common/nthWithOfClause.js":
/*!***************************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/pseudo/common/nthWithOfClause.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var ALLOW_OF_CLAUSE = true;

module.exports = {
    parse: function nthWithOfClause() {
        return this.createSingleNodeList(
            this.Nth(ALLOW_OF_CLAUSE)
        );
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/pseudo/common/selectorList.js":
/*!************************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/pseudo/common/selectorList.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
    parse: function selectorList() {
        return this.createSingleNodeList(
            this.SelectorList()
        );
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/pseudo/dir.js":
/*!********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/pseudo/dir.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
    parse: function() {
        return this.createSingleNodeList(
            this.Identifier()
        );
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/pseudo/has.js":
/*!********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/pseudo/has.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
    parse: function() {
        return this.createSingleNodeList(
            this.SelectorList()
        );
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/pseudo/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/pseudo/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
    'dir': __webpack_require__(/*! ./dir */ "./node_modules/css-tree/lib/syntax/pseudo/dir.js"),
    'has': __webpack_require__(/*! ./has */ "./node_modules/css-tree/lib/syntax/pseudo/has.js"),
    'lang': __webpack_require__(/*! ./lang */ "./node_modules/css-tree/lib/syntax/pseudo/lang.js"),
    'matches': __webpack_require__(/*! ./matches */ "./node_modules/css-tree/lib/syntax/pseudo/matches.js"),
    'not': __webpack_require__(/*! ./not */ "./node_modules/css-tree/lib/syntax/pseudo/not.js"),
    'nth-child': __webpack_require__(/*! ./nth-child */ "./node_modules/css-tree/lib/syntax/pseudo/nth-child.js"),
    'nth-last-child': __webpack_require__(/*! ./nth-last-child */ "./node_modules/css-tree/lib/syntax/pseudo/nth-last-child.js"),
    'nth-last-of-type': __webpack_require__(/*! ./nth-last-of-type */ "./node_modules/css-tree/lib/syntax/pseudo/nth-last-of-type.js"),
    'nth-of-type': __webpack_require__(/*! ./nth-of-type */ "./node_modules/css-tree/lib/syntax/pseudo/nth-of-type.js"),
    'slotted': __webpack_require__(/*! ./slotted */ "./node_modules/css-tree/lib/syntax/pseudo/slotted.js")
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/pseudo/lang.js":
/*!*********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/pseudo/lang.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
    parse: function() {
        return this.createSingleNodeList(
            this.Identifier()
        );
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/pseudo/matches.js":
/*!************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/pseudo/matches.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./common/selectorList */ "./node_modules/css-tree/lib/syntax/pseudo/common/selectorList.js");


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/pseudo/not.js":
/*!********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/pseudo/not.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./common/selectorList */ "./node_modules/css-tree/lib/syntax/pseudo/common/selectorList.js");


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/pseudo/nth-child.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/pseudo/nth-child.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./common/nthWithOfClause */ "./node_modules/css-tree/lib/syntax/pseudo/common/nthWithOfClause.js");


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/pseudo/nth-last-child.js":
/*!*******************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/pseudo/nth-last-child.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./common/nthWithOfClause */ "./node_modules/css-tree/lib/syntax/pseudo/common/nthWithOfClause.js");


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/pseudo/nth-last-of-type.js":
/*!*********************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/pseudo/nth-last-of-type.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./common/nth */ "./node_modules/css-tree/lib/syntax/pseudo/common/nth.js");


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/pseudo/nth-of-type.js":
/*!****************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/pseudo/nth-of-type.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./common/nth */ "./node_modules/css-tree/lib/syntax/pseudo/common/nth.js");


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/pseudo/slotted.js":
/*!************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/pseudo/slotted.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
    parse: function compoundSelector() {
        return this.createSingleNodeList(
            this.Selector()
        );
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/scope/atrulePrelude.js":
/*!*****************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/scope/atrulePrelude.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
    getNode: __webpack_require__(/*! ./default */ "./node_modules/css-tree/lib/syntax/scope/default.js")
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/scope/default.js":
/*!***********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/scope/default.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var cmpChar = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").cmpChar;
var cmpStr = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").cmpStr;
var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var IDENT = TYPE.Ident;
var STRING = TYPE.String;
var NUMBER = TYPE.Number;
var FUNCTION = TYPE.Function;
var URL = TYPE.Url;
var HASH = TYPE.Hash;
var DIMENSION = TYPE.Dimension;
var PERCENTAGE = TYPE.Percentage;
var LEFTPARENTHESIS = TYPE.LeftParenthesis;
var LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;
var COMMA = TYPE.Comma;
var DELIM = TYPE.Delim;
var NUMBERSIGN = 0x0023;  // U+0023 NUMBER SIGN (#)
var ASTERISK = 0x002A;    // U+002A ASTERISK (*)
var PLUSSIGN = 0x002B;    // U+002B PLUS SIGN (+)
var HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)
var SOLIDUS = 0x002F;     // U+002F SOLIDUS (/)
var U = 0x0075;           // U+0075 LATIN SMALL LETTER U (u)

module.exports = function defaultRecognizer(context) {
    switch (this.scanner.tokenType) {
        case HASH:
            return this.Hash();

        case COMMA:
            context.space = null;
            context.ignoreWSAfter = true;
            return this.Operator();

        case LEFTPARENTHESIS:
            return this.Parentheses(this.readSequence, context.recognizer);

        case LEFTSQUAREBRACKET:
            return this.Brackets(this.readSequence, context.recognizer);

        case STRING:
            return this.String();

        case DIMENSION:
            return this.Dimension();

        case PERCENTAGE:
            return this.Percentage();

        case NUMBER:
            return this.Number();

        case FUNCTION:
            return cmpStr(this.scanner.source, this.scanner.tokenStart, this.scanner.tokenEnd, 'url(')
                ? this.Url()
                : this.Function(this.readSequence, context.recognizer);

        case URL:
            return this.Url();

        case IDENT:
            // check for unicode range, it should start with u+ or U+
            if (cmpChar(this.scanner.source, this.scanner.tokenStart, U) &&
                cmpChar(this.scanner.source, this.scanner.tokenStart + 1, PLUSSIGN)) {
                return this.UnicodeRange();
            } else {
                return this.Identifier();
            }

        case DELIM:
            var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);

            if (code === SOLIDUS ||
                code === ASTERISK ||
                code === PLUSSIGN ||
                code === HYPHENMINUS) {
                return this.Operator(); // TODO: replace with Delim
            }

            // TODO: produce a node with Delim node type

            if (code === NUMBERSIGN) {
                this.error('Hex or identifier is expected', this.scanner.tokenStart + 1);
            }

            break;
    }
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/scope/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/scope/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
    AtrulePrelude: __webpack_require__(/*! ./atrulePrelude */ "./node_modules/css-tree/lib/syntax/scope/atrulePrelude.js"),
    Selector: __webpack_require__(/*! ./selector */ "./node_modules/css-tree/lib/syntax/scope/selector.js"),
    Value: __webpack_require__(/*! ./value */ "./node_modules/css-tree/lib/syntax/scope/value.js")
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/scope/selector.js":
/*!************************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/scope/selector.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TYPE = __webpack_require__(/*! ../../tokenizer */ "./node_modules/css-tree/lib/tokenizer/index.js").TYPE;

var DELIM = TYPE.Delim;
var IDENT = TYPE.Ident;
var DIMENSION = TYPE.Dimension;
var PERCENTAGE = TYPE.Percentage;
var NUMBER = TYPE.Number;
var HASH = TYPE.Hash;
var COLON = TYPE.Colon;
var LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;
var NUMBERSIGN = 0x0023;      // U+0023 NUMBER SIGN (#)
var ASTERISK = 0x002A;        // U+002A ASTERISK (*)
var PLUSSIGN = 0x002B;        // U+002B PLUS SIGN (+)
var SOLIDUS = 0x002F;         // U+002F SOLIDUS (/)
var FULLSTOP = 0x002E;        // U+002E FULL STOP (.)
var GREATERTHANSIGN = 0x003E; // U+003E GREATER-THAN SIGN (>)
var VERTICALLINE = 0x007C;    // U+007C VERTICAL LINE (|)
var TILDE = 0x007E;           // U+007E TILDE (~)

function getNode(context) {
    switch (this.scanner.tokenType) {
        case LEFTSQUAREBRACKET:
            return this.AttributeSelector();

        case HASH:
            return this.IdSelector();

        case COLON:
            if (this.scanner.lookupType(1) === COLON) {
                return this.PseudoElementSelector();
            } else {
                return this.PseudoClassSelector();
            }

        case IDENT:
            return this.TypeSelector();

        case NUMBER:
        case PERCENTAGE:
            return this.Percentage();

        case DIMENSION:
            // throws when .123ident
            if (this.scanner.source.charCodeAt(this.scanner.tokenStart) === FULLSTOP) {
                this.error('Identifier is expected', this.scanner.tokenStart + 1);
            }
            break;

        case DELIM:
            var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);

            switch (code) {
                case PLUSSIGN:
                case GREATERTHANSIGN:
                case TILDE:
                    context.space = null;
                    context.ignoreWSAfter = true;
                    return this.Combinator();

                case SOLIDUS:  // /deep/
                    return this.Combinator();

                case FULLSTOP:
                    return this.ClassSelector();

                case ASTERISK:
                case VERTICALLINE:
                    return this.TypeSelector();

                case NUMBERSIGN:
                    return this.IdSelector();
            }

            break;
    }
};

module.exports = {
    getNode: getNode
};


/***/ }),

/***/ "./node_modules/css-tree/lib/syntax/scope/value.js":
/*!*********************************************************!*\
  !*** ./node_modules/css-tree/lib/syntax/scope/value.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
    getNode: __webpack_require__(/*! ./default */ "./node_modules/css-tree/lib/syntax/scope/default.js"),
    'expression': __webpack_require__(/*! ../function/expression */ "./node_modules/css-tree/lib/syntax/function/expression.js"),
    'var': __webpack_require__(/*! ../function/var */ "./node_modules/css-tree/lib/syntax/function/var.js")
};


/***/ }),

/***/ "./node_modules/css-tree/lib/tokenizer/char-code-definitions.js":
/*!**********************************************************************!*\
  !*** ./node_modules/css-tree/lib/tokenizer/char-code-definitions.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var EOF = 0;

// https://drafts.csswg.org/css-syntax-3/
// § 4.2. Definitions

// digit
// A code point between U+0030 DIGIT ZERO (0) and U+0039 DIGIT NINE (9).
function isDigit(code) {
    return code >= 0x0030 && code <= 0x0039;
}

// hex digit
// A digit, or a code point between U+0041 LATIN CAPITAL LETTER A (A) and U+0046 LATIN CAPITAL LETTER F (F),
// or a code point between U+0061 LATIN SMALL LETTER A (a) and U+0066 LATIN SMALL LETTER F (f).
function isHexDigit(code) {
    return (
        isDigit(code) || // 0 .. 9
        (code >= 0x0041 && code <= 0x0046) || // A .. F
        (code >= 0x0061 && code <= 0x0066)    // a .. f
    );
}

// uppercase letter
// A code point between U+0041 LATIN CAPITAL LETTER A (A) and U+005A LATIN CAPITAL LETTER Z (Z).
function isUppercaseLetter(code) {
    return code >= 0x0041 && code <= 0x005A;
}

// lowercase letter
// A code point between U+0061 LATIN SMALL LETTER A (a) and U+007A LATIN SMALL LETTER Z (z).
function isLowercaseLetter(code) {
    return code >= 0x0061 && code <= 0x007A;
}

// letter
// An uppercase letter or a lowercase letter.
function isLetter(code) {
    return isUppercaseLetter(code) || isLowercaseLetter(code);
}

// non-ASCII code point
// A code point with a value equal to or greater than U+0080 <control>.
function isNonAscii(code) {
    return code >= 0x0080;
}

// name-start code point
// A letter, a non-ASCII code point, or U+005F LOW LINE (_).
function isNameStart(code) {
    return isLetter(code) || isNonAscii(code) || code === 0x005F;
}

// name code point
// A name-start code point, a digit, or U+002D HYPHEN-MINUS (-).
function isName(code) {
    return isNameStart(code) || isDigit(code) || code === 0x002D;
}

// non-printable code point
// A code point between U+0000 NULL and U+0008 BACKSPACE, or U+000B LINE TABULATION,
// or a code point between U+000E SHIFT OUT and U+001F INFORMATION SEPARATOR ONE, or U+007F DELETE.
function isNonPrintable(code) {
    return (
        (code >= 0x0000 && code <= 0x0008) ||
        (code === 0x000B) ||
        (code >= 0x000E && code <= 0x001F) ||
        (code === 0x007F)
    );
}

// newline
// U+000A LINE FEED. Note that U+000D CARRIAGE RETURN and U+000C FORM FEED are not included in this definition,
// as they are converted to U+000A LINE FEED during preprocessing.
// TODO: we doesn't do a preprocessing, so check a code point for U+000D CARRIAGE RETURN and U+000C FORM FEED
function isNewline(code) {
    return code === 0x000A || code === 0x000D || code === 0x000C;
}

// whitespace
// A newline, U+0009 CHARACTER TABULATION, or U+0020 SPACE.
function isWhiteSpace(code) {
    return isNewline(code) || code === 0x0020 || code === 0x0009;
}

// § 4.3.8. Check if two code points are a valid escape
function isValidEscape(first, second) {
    // If the first code point is not U+005C REVERSE SOLIDUS (\), return false.
    if (first !== 0x005C) {
        return false;
    }

    // Otherwise, if the second code point is a newline or EOF, return false.
    if (isNewline(second) || second === EOF) {
        return false;
    }

    // Otherwise, return true.
    return true;
}

// § 4.3.9. Check if three code points would start an identifier
function isIdentifierStart(first, second, third) {
    // Look at the first code point:

    // U+002D HYPHEN-MINUS
    if (first === 0x002D) {
        // If the second code point is a name-start code point or a U+002D HYPHEN-MINUS,
        // or the second and third code points are a valid escape, return true. Otherwise, return false.
        return (
            isNameStart(second) ||
            second === 0x002D ||
            isValidEscape(second, third)
        );
    }

    // name-start code point
    if (isNameStart(first)) {
        // Return true.
        return true;
    }

    // U+005C REVERSE SOLIDUS (\)
    if (first === 0x005C) {
        // If the first and second code points are a valid escape, return true. Otherwise, return false.
        return isValidEscape(first, second);
    }

    // anything else
    // Return false.
    return false;
}

// § 4.3.10. Check if three code points would start a number
function isNumberStart(first, second, third) {
    // Look at the first code point:

    // U+002B PLUS SIGN (+)
    // U+002D HYPHEN-MINUS (-)
    if (first === 0x002B || first === 0x002D) {
        // If the second code point is a digit, return true.
        if (isDigit(second)) {
            return 2;
        }

        // Otherwise, if the second code point is a U+002E FULL STOP (.)
        // and the third code point is a digit, return true.
        // Otherwise, return false.
        return second === 0x002E && isDigit(third) ? 3 : 0;
    }

    // U+002E FULL STOP (.)
    if (first === 0x002E) {
        // If the second code point is a digit, return true. Otherwise, return false.
        return isDigit(second) ? 2 : 0;
    }

    // digit
    if (isDigit(first)) {
        // Return true.
        return 1;
    }

    // anything else
    // Return false.
    return 0;
}

//
// Misc
//

// detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)
function isBOM(code) {
    // UTF-16BE
    if (code === 0xFEFF) {
        return 1;
    }

    // UTF-16LE
    if (code === 0xFFFE) {
        return 1;
    }

    return 0;
}

// Fast code category
//
// https://drafts.csswg.org/css-syntax/#tokenizer-definitions
// > non-ASCII code point
// >   A code point with a value equal to or greater than U+0080 <control>
// > name-start code point
// >   A letter, a non-ASCII code point, or U+005F LOW LINE (_).
// > name code point
// >   A name-start code point, a digit, or U+002D HYPHEN-MINUS (-)
// That means only ASCII code points has a special meaning and we define a maps for 0..127 codes only
var CATEGORY = new Array(0x80);
charCodeCategory.Eof = 0x80;
charCodeCategory.WhiteSpace = 0x82;
charCodeCategory.Digit = 0x83;
charCodeCategory.NameStart = 0x84;
charCodeCategory.NonPrintable = 0x85;

for (var i = 0; i < CATEGORY.length; i++) {
    switch (true) {
        case isWhiteSpace(i):
            CATEGORY[i] = charCodeCategory.WhiteSpace;
            break;

        case isDigit(i):
            CATEGORY[i] = charCodeCategory.Digit;
            break;

        case isNameStart(i):
            CATEGORY[i] = charCodeCategory.NameStart;
            break;

        case isNonPrintable(i):
            CATEGORY[i] = charCodeCategory.NonPrintable;
            break;

        default:
            CATEGORY[i] = i || charCodeCategory.Eof;
    }
}

function charCodeCategory(code) {
    return code < 0x80 ? CATEGORY[code] : charCodeCategory.NameStart;
};

module.exports = {
    isDigit: isDigit,
    isHexDigit: isHexDigit,
    isUppercaseLetter: isUppercaseLetter,
    isLowercaseLetter: isLowercaseLetter,
    isLetter: isLetter,
    isNonAscii: isNonAscii,
    isNameStart: isNameStart,
    isName: isName,
    isNonPrintable: isNonPrintable,
    isNewline: isNewline,
    isWhiteSpace: isWhiteSpace,
    isValidEscape: isValidEscape,
    isIdentifierStart: isIdentifierStart,
    isNumberStart: isNumberStart,

    isBOM: isBOM,
    charCodeCategory: charCodeCategory
};


/***/ }),

/***/ "./node_modules/css-tree/lib/tokenizer/const.js":
/*!******************************************************!*\
  !*** ./node_modules/css-tree/lib/tokenizer/const.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// CSS Syntax Module Level 3
// https://www.w3.org/TR/css-syntax-3/
var TYPE = {
    EOF: 0,                 // <EOF-token>
    Ident: 1,               // <ident-token>
    Function: 2,            // <function-token>
    AtKeyword: 3,           // <at-keyword-token>
    Hash: 4,                // <hash-token>
    String: 5,              // <string-token>
    BadString: 6,           // <bad-string-token>
    Url: 7,                 // <url-token>
    BadUrl: 8,              // <bad-url-token>
    Delim: 9,               // <delim-token>
    Number: 10,             // <number-token>
    Percentage: 11,         // <percentage-token>
    Dimension: 12,          // <dimension-token>
    WhiteSpace: 13,         // <whitespace-token>
    CDO: 14,                // <CDO-token>
    CDC: 15,                // <CDC-token>
    Colon: 16,              // <colon-token>     :
    Semicolon: 17,          // <semicolon-token> ;
    Comma: 18,              // <comma-token>     ,
    LeftSquareBracket: 19,  // <[-token>
    RightSquareBracket: 20, // <]-token>
    LeftParenthesis: 21,    // <(-token>
    RightParenthesis: 22,   // <)-token>
    LeftCurlyBracket: 23,   // <{-token>
    RightCurlyBracket: 24,  // <}-token>
    Comment: 25
};

var NAME = Object.keys(TYPE).reduce(function(result, key) {
    result[TYPE[key]] = key;
    return result;
}, {});

module.exports = {
    TYPE: TYPE,
    NAME: NAME
};


/***/ }),

/***/ "./node_modules/css-tree/lib/tokenizer/index.js":
/*!******************************************************!*\
  !*** ./node_modules/css-tree/lib/tokenizer/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TokenStream = __webpack_require__(/*! ../common/TokenStream */ "./node_modules/css-tree/lib/common/TokenStream.js");
var adoptBuffer = __webpack_require__(/*! ../common/adopt-buffer */ "./node_modules/css-tree/lib/common/adopt-buffer.js");

var constants = __webpack_require__(/*! ./const */ "./node_modules/css-tree/lib/tokenizer/const.js");
var TYPE = constants.TYPE;

var charCodeDefinitions = __webpack_require__(/*! ./char-code-definitions */ "./node_modules/css-tree/lib/tokenizer/char-code-definitions.js");
var isNewline = charCodeDefinitions.isNewline;
var isName = charCodeDefinitions.isName;
var isValidEscape = charCodeDefinitions.isValidEscape;
var isNumberStart = charCodeDefinitions.isNumberStart;
var isIdentifierStart = charCodeDefinitions.isIdentifierStart;
var charCodeCategory = charCodeDefinitions.charCodeCategory;
var isBOM = charCodeDefinitions.isBOM;

var utils = __webpack_require__(/*! ./utils */ "./node_modules/css-tree/lib/tokenizer/utils.js");
var cmpStr = utils.cmpStr;
var getNewlineLength = utils.getNewlineLength;
var findWhiteSpaceEnd = utils.findWhiteSpaceEnd;
var consumeEscaped = utils.consumeEscaped;
var consumeName = utils.consumeName;
var consumeNumber = utils.consumeNumber;
var consumeBadUrlRemnants = utils.consumeBadUrlRemnants;

var OFFSET_MASK = 0x00FFFFFF;
var TYPE_SHIFT = 24;

function tokenize(source, stream) {
    function getCharCode(offset) {
        return offset < sourceLength ? source.charCodeAt(offset) : 0;
    }

    // § 4.3.3. Consume a numeric token
    function consumeNumericToken() {
        // Consume a number and let number be the result.
        offset = consumeNumber(source, offset);

        // If the next 3 input code points would start an identifier, then:
        if (isIdentifierStart(getCharCode(offset), getCharCode(offset + 1), getCharCode(offset + 2))) {
            // Create a <dimension-token> with the same value and type flag as number, and a unit set initially to the empty string.
            // Consume a name. Set the <dimension-token>’s unit to the returned value.
            // Return the <dimension-token>.
            type = TYPE.Dimension;
            offset = consumeName(source, offset);
            return;
        }

        // Otherwise, if the next input code point is U+0025 PERCENTAGE SIGN (%), consume it.
        if (getCharCode(offset) === 0x0025) {
            // Create a <percentage-token> with the same value as number, and return it.
            type = TYPE.Percentage;
            offset++;
            return;
        }

        // Otherwise, create a <number-token> with the same value and type flag as number, and return it.
        type = TYPE.Number;
    }

    // § 4.3.4. Consume an ident-like token
    function consumeIdentLikeToken() {
        const nameStartOffset = offset;

        // Consume a name, and let string be the result.
        offset = consumeName(source, offset);

        // If string’s value is an ASCII case-insensitive match for "url",
        // and the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.
        if (cmpStr(source, nameStartOffset, offset, 'url') && getCharCode(offset) === 0x0028) {
            // While the next two input code points are whitespace, consume the next input code point.
            offset = findWhiteSpaceEnd(source, offset + 1);

            // If the next one or two input code points are U+0022 QUOTATION MARK ("), U+0027 APOSTROPHE ('),
            // or whitespace followed by U+0022 QUOTATION MARK (") or U+0027 APOSTROPHE ('),
            // then create a <function-token> with its value set to string and return it.
            if (getCharCode(offset) === 0x0022 ||
                getCharCode(offset) === 0x0027) {
                type = TYPE.Function;
                offset = nameStartOffset + 4;
                return;
            }

            // Otherwise, consume a url token, and return it.
            consumeUrlToken();
            return;
        }

        // Otherwise, if the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.
        // Create a <function-token> with its value set to string and return it.
        if (getCharCode(offset) === 0x0028) {
            type = TYPE.Function;
            offset++;
            return;
        }

        // Otherwise, create an <ident-token> with its value set to string and return it.
        type = TYPE.Ident;
    }

    // § 4.3.5. Consume a string token
    function consumeStringToken(endingCodePoint) {
        // This algorithm may be called with an ending code point, which denotes the code point
        // that ends the string. If an ending code point is not specified,
        // the current input code point is used.
        if (!endingCodePoint) {
            endingCodePoint = getCharCode(offset++);
        }

        // Initially create a <string-token> with its value set to the empty string.
        type = TYPE.String;

        // Repeatedly consume the next input code point from the stream:
        for (; offset < source.length; offset++) {
            var code = source.charCodeAt(offset);

            switch (charCodeCategory(code)) {
                // ending code point
                case endingCodePoint:
                    // Return the <string-token>.
                    offset++;
                    return;

                // EOF
                case charCodeCategory.Eof:
                    // This is a parse error. Return the <string-token>.
                    return;

                // newline
                case charCodeCategory.WhiteSpace:
                    if (isNewline(code)) {
                        // This is a parse error. Reconsume the current input code point,
                        // create a <bad-string-token>, and return it.
                        offset += getNewlineLength(source, offset, code);
                        type = TYPE.BadString;
                        return;
                    }
                    break;

                // U+005C REVERSE SOLIDUS (\)
                case 0x005C:
                    // If the next input code point is EOF, do nothing.
                    if (offset === source.length - 1) {
                        break;
                    }

                    var nextCode = getCharCode(offset + 1);

                    // Otherwise, if the next input code point is a newline, consume it.
                    if (isNewline(nextCode)) {
                        offset += getNewlineLength(source, offset + 1, nextCode);
                    } else if (isValidEscape(code, nextCode)) {
                        // Otherwise, (the stream starts with a valid escape) consume
                        // an escaped code point and append the returned code point to
                        // the <string-token>’s value.
                        offset = consumeEscaped(source, offset) - 1;
                    }
                    break;

                // anything else
                // Append the current input code point to the <string-token>’s value.
            }
        }
    }

    // § 4.3.6. Consume a url token
    // Note: This algorithm assumes that the initial "url(" has already been consumed.
    // This algorithm also assumes that it’s being called to consume an "unquoted" value, like url(foo).
    // A quoted value, like url("foo"), is parsed as a <function-token>. Consume an ident-like token
    // automatically handles this distinction; this algorithm shouldn’t be called directly otherwise.
    function consumeUrlToken() {
        // Initially create a <url-token> with its value set to the empty string.
        type = TYPE.Url;

        // Consume as much whitespace as possible.
        offset = findWhiteSpaceEnd(source, offset);

        // Repeatedly consume the next input code point from the stream:
        for (; offset < source.length; offset++) {
            var code = source.charCodeAt(offset);

            switch (charCodeCategory(code)) {
                // U+0029 RIGHT PARENTHESIS ())
                case 0x0029:
                    // Return the <url-token>.
                    offset++;
                    return;

                // EOF
                case charCodeCategory.Eof:
                    // This is a parse error. Return the <url-token>.
                    return;

                // whitespace
                case charCodeCategory.WhiteSpace:
                    // Consume as much whitespace as possible.
                    offset = findWhiteSpaceEnd(source, offset);

                    // If the next input code point is U+0029 RIGHT PARENTHESIS ()) or EOF,
                    // consume it and return the <url-token>
                    // (if EOF was encountered, this is a parse error);
                    if (getCharCode(offset) === 0x0029 || offset >= source.length) {
                        if (offset < source.length) {
                            offset++;
                        }
                        return;
                    }

                    // otherwise, consume the remnants of a bad url, create a <bad-url-token>,
                    // and return it.
                    offset = consumeBadUrlRemnants(source, offset);
                    type = TYPE.BadUrl;
                    return;

                // U+0022 QUOTATION MARK (")
                // U+0027 APOSTROPHE (')
                // U+0028 LEFT PARENTHESIS (()
                // non-printable code point
                case 0x0022:
                case 0x0027:
                case 0x0028:
                case charCodeCategory.NonPrintable:
                    // This is a parse error. Consume the remnants of a bad url,
                    // create a <bad-url-token>, and return it.
                    offset = consumeBadUrlRemnants(source, offset);
                    type = TYPE.BadUrl;
                    return;

                // U+005C REVERSE SOLIDUS (\)
                case 0x005C:
                    // If the stream starts with a valid escape, consume an escaped code point and
                    // append the returned code point to the <url-token>’s value.
                    if (isValidEscape(code, getCharCode(offset + 1))) {
                        offset = consumeEscaped(source, offset) - 1;
                        break;
                    }

                    // Otherwise, this is a parse error. Consume the remnants of a bad url,
                    // create a <bad-url-token>, and return it.
                    offset = consumeBadUrlRemnants(source, offset);
                    type = TYPE.BadUrl;
                    return;

                // anything else
                // Append the current input code point to the <url-token>’s value.
            }
        }
    }

    if (!stream) {
        stream = new TokenStream();
    }

    // ensure source is a string
    source = String(source || '');

    var sourceLength = source.length;
    var offsetAndType = adoptBuffer(stream.offsetAndType, sourceLength + 1); // +1 because of eof-token
    var balance = adoptBuffer(stream.balance, sourceLength + 1);
    var tokenCount = 0;
    var start = isBOM(getCharCode(0));
    var offset = start;
    var balanceCloseType = 0;
    var balanceStart = 0;
    var balancePrev = 0;

    // https://drafts.csswg.org/css-syntax-3/#consume-token
    // § 4.3.1. Consume a token
    while (offset < sourceLength) {
        var code = source.charCodeAt(offset);
        var type = 0;

        balance[tokenCount] = sourceLength;

        switch (charCodeCategory(code)) {
            // whitespace
            case charCodeCategory.WhiteSpace:
                // Consume as much whitespace as possible. Return a <whitespace-token>.
                type = TYPE.WhiteSpace;
                offset = findWhiteSpaceEnd(source, offset + 1);
                break;

            // U+0022 QUOTATION MARK (")
            case 0x0022:
                // Consume a string token and return it.
                consumeStringToken();
                break;

            // U+0023 NUMBER SIGN (#)
            case 0x0023:
                // If the next input code point is a name code point or the next two input code points are a valid escape, then:
                if (isName(getCharCode(offset + 1)) || isValidEscape(getCharCode(offset + 1), getCharCode(offset + 2))) {
                    // Create a <hash-token>.
                    type = TYPE.Hash;

                    // If the next 3 input code points would start an identifier, set the <hash-token>’s type flag to "id".
                    // if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {
                    //     // TODO: set id flag
                    // }

                    // Consume a name, and set the <hash-token>’s value to the returned string.
                    offset = consumeName(source, offset + 1);

                    // Return the <hash-token>.
                } else {
                    // Otherwise, return a <delim-token> with its value set to the current input code point.
                    type = TYPE.Delim;
                    offset++;
                }

                break;

            // U+0027 APOSTROPHE (')
            case 0x0027:
                // Consume a string token and return it.
                consumeStringToken();
                break;

            // U+0028 LEFT PARENTHESIS (()
            case 0x0028:
                // Return a <(-token>.
                type = TYPE.LeftParenthesis;
                offset++;
                break;

            // U+0029 RIGHT PARENTHESIS ())
            case 0x0029:
                // Return a <)-token>.
                type = TYPE.RightParenthesis;
                offset++;
                break;

            // U+002B PLUS SIGN (+)
            case 0x002B:
                // If the input stream starts with a number, ...
                if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
                    // ... reconsume the current input code point, consume a numeric token, and return it.
                    consumeNumericToken();
                } else {
                    // Otherwise, return a <delim-token> with its value set to the current input code point.
                    type = TYPE.Delim;
                    offset++;
                }
                break;

            // U+002C COMMA (,)
            case 0x002C:
                // Return a <comma-token>.
                type = TYPE.Comma;
                offset++;
                break;

            // U+002D HYPHEN-MINUS (-)
            case 0x002D:
                // If the input stream starts with a number, reconsume the current input code point, consume a numeric token, and return it.
                if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
                    consumeNumericToken();
                } else {
                    // Otherwise, if the next 2 input code points are U+002D HYPHEN-MINUS U+003E GREATER-THAN SIGN (->), consume them and return a <CDC-token>.
                    if (getCharCode(offset + 1) === 0x002D &&
                        getCharCode(offset + 2) === 0x003E) {
                        type = TYPE.CDC;
                        offset = offset + 3;
                    } else {
                        // Otherwise, if the input stream starts with an identifier, ...
                        if (isIdentifierStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
                            // ... reconsume the current input code point, consume an ident-like token, and return it.
                            consumeIdentLikeToken();
                        } else {
                            // Otherwise, return a <delim-token> with its value set to the current input code point.
                            type = TYPE.Delim;
                            offset++;
                        }
                    }
                }
                break;

            // U+002E FULL STOP (.)
            case 0x002E:
                // If the input stream starts with a number, ...
                if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
                    // ... reconsume the current input code point, consume a numeric token, and return it.
                    consumeNumericToken();
                } else {
                    // Otherwise, return a <delim-token> with its value set to the current input code point.
                    type = TYPE.Delim;
                    offset++;
                }

                break;

            // U+002F SOLIDUS (/)
            case 0x002F:
                // If the next two input code point are U+002F SOLIDUS (/) followed by a U+002A ASTERISK (*),
                if (getCharCode(offset + 1) === 0x002A) {
                    // ... consume them and all following code points up to and including the first U+002A ASTERISK (*)
                    // followed by a U+002F SOLIDUS (/), or up to an EOF code point.
                    type = TYPE.Comment;
                    offset = source.indexOf('*/', offset + 2) + 2;
                    if (offset === 1) {
                        offset = source.length;
                    }
                } else {
                    type = TYPE.Delim;
                    offset++;
                }
                break;

            // U+003A COLON (:)
            case 0x003A:
                // Return a <colon-token>.
                type = TYPE.Colon;
                offset++;
                break;

            // U+003B SEMICOLON (;)
            case 0x003B:
                // Return a <semicolon-token>.
                type = TYPE.Semicolon;
                offset++;
                break;

            // U+003C LESS-THAN SIGN (<)
            case 0x003C:
                // If the next 3 input code points are U+0021 EXCLAMATION MARK U+002D HYPHEN-MINUS U+002D HYPHEN-MINUS (!--), ...
                if (getCharCode(offset + 1) === 0x0021 &&
                    getCharCode(offset + 2) === 0x002D &&
                    getCharCode(offset + 3) === 0x002D) {
                    // ... consume them and return a <CDO-token>.
                    type = TYPE.CDO;
                    offset = offset + 4;
                } else {
                    // Otherwise, return a <delim-token> with its value set to the current input code point.
                    type = TYPE.Delim;
                    offset++;
                }

                break;

            // U+0040 COMMERCIAL AT (@)
            case 0x0040:
                // If the next 3 input code points would start an identifier, ...
                if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {
                    // ... consume a name, create an <at-keyword-token> with its value set to the returned value, and return it.
                    type = TYPE.AtKeyword;
                    offset = consumeName(source, offset + 1);
                } else {
                    // Otherwise, return a <delim-token> with its value set to the current input code point.
                    type = TYPE.Delim;
                    offset++;
                }

                break;

            // U+005B LEFT SQUARE BRACKET ([)
            case 0x005B:
                // Return a <[-token>.
                type = TYPE.LeftSquareBracket;
                offset++;
                break;

            // U+005C REVERSE SOLIDUS (\)
            case 0x005C:
                // If the input stream starts with a valid escape, ...
                if (isValidEscape(code, getCharCode(offset + 1))) {
                    // ... reconsume the current input code point, consume an ident-like token, and return it.
                    consumeIdentLikeToken();
                } else {
                    // Otherwise, this is a parse error. Return a <delim-token> with its value set to the current input code point.
                    type = TYPE.Delim;
                    offset++;
                }
                break;

            // U+005D RIGHT SQUARE BRACKET (])
            case 0x005D:
                // Return a <]-token>.
                type = TYPE.RightSquareBracket;
                offset++;
                break;

            // U+007B LEFT CURLY BRACKET ({)
            case 0x007B:
                // Return a <{-token>.
                type = TYPE.LeftCurlyBracket;
                offset++;
                break;

            // U+007D RIGHT CURLY BRACKET (})
            case 0x007D:
                // Return a <}-token>.
                type = TYPE.RightCurlyBracket;
                offset++;
                break;

            // digit
            case charCodeCategory.Digit:
                // Reconsume the current input code point, consume a numeric token, and return it.
                consumeNumericToken();
                break;

            // name-start code point
            case charCodeCategory.NameStart:
                // Reconsume the current input code point, consume an ident-like token, and return it.
                consumeIdentLikeToken();
                break;

            // EOF
            case charCodeCategory.Eof:
                // Return an <EOF-token>.
                break;

            // anything else
            default:
                // Return a <delim-token> with its value set to the current input code point.
                type = TYPE.Delim;
                offset++;
        }

        switch (type) {
            case balanceCloseType:
                balancePrev = balanceStart & OFFSET_MASK;
                balanceStart = balance[balancePrev];
                balanceCloseType = balanceStart >> TYPE_SHIFT;
                balance[tokenCount] = balancePrev;
                balance[balancePrev++] = tokenCount;
                for (; balancePrev < tokenCount; balancePrev++) {
                    if (balance[balancePrev] === sourceLength) {
                        balance[balancePrev] = tokenCount;
                    }
                }
                break;

            case TYPE.LeftParenthesis:
            case TYPE.Function:
                balance[tokenCount] = balanceStart;
                balanceCloseType = TYPE.RightParenthesis;
                balanceStart = (balanceCloseType << TYPE_SHIFT) | tokenCount;
                break;

            case TYPE.LeftSquareBracket:
                balance[tokenCount] = balanceStart;
                balanceCloseType = TYPE.RightSquareBracket;
                balanceStart = (balanceCloseType << TYPE_SHIFT) | tokenCount;
                break;

            case TYPE.LeftCurlyBracket:
                balance[tokenCount] = balanceStart;
                balanceCloseType = TYPE.RightCurlyBracket;
                balanceStart = (balanceCloseType << TYPE_SHIFT) | tokenCount;
                break;
        }

        offsetAndType[tokenCount++] = (type << TYPE_SHIFT) | offset;
    }

    // finalize buffers
    offsetAndType[tokenCount] = (TYPE.EOF << TYPE_SHIFT) | offset; // <EOF-token>
    balance[tokenCount] = sourceLength;
    balance[sourceLength] = sourceLength; // prevents false positive balance match with any token
    while (balanceStart !== 0) {
        balancePrev = balanceStart & OFFSET_MASK;
        balanceStart = balance[balancePrev];
        balance[balancePrev] = sourceLength;
    }

    // update stream
    stream.source = source;
    stream.firstCharOffset = start;
    stream.offsetAndType = offsetAndType;
    stream.tokenCount = tokenCount;
    stream.balance = balance;
    stream.reset();
    stream.next();

    return stream;
}

// extend tokenizer with constants
Object.keys(constants).forEach(function(key) {
    tokenize[key] = constants[key];
});

// extend tokenizer with static methods from utils
Object.keys(charCodeDefinitions).forEach(function(key) {
    tokenize[key] = charCodeDefinitions[key];
});
Object.keys(utils).forEach(function(key) {
    tokenize[key] = utils[key];
});

module.exports = tokenize;


/***/ }),

/***/ "./node_modules/css-tree/lib/tokenizer/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/css-tree/lib/tokenizer/utils.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var charCodeDef = __webpack_require__(/*! ./char-code-definitions */ "./node_modules/css-tree/lib/tokenizer/char-code-definitions.js");
var isDigit = charCodeDef.isDigit;
var isHexDigit = charCodeDef.isHexDigit;
var isUppercaseLetter = charCodeDef.isUppercaseLetter;
var isName = charCodeDef.isName;
var isWhiteSpace = charCodeDef.isWhiteSpace;
var isValidEscape = charCodeDef.isValidEscape;

function getCharCode(source, offset) {
    return offset < source.length ? source.charCodeAt(offset) : 0;
}

function getNewlineLength(source, offset, code) {
    if (code === 13 /* \r */ && getCharCode(source, offset + 1) === 10 /* \n */) {
        return 2;
    }

    return 1;
}

function cmpChar(testStr, offset, referenceCode) {
    var code = testStr.charCodeAt(offset);

    // code.toLowerCase() for A..Z
    if (isUppercaseLetter(code)) {
        code = code | 32;
    }

    return code === referenceCode;
}

function cmpStr(testStr, start, end, referenceStr) {
    if (end - start !== referenceStr.length) {
        return false;
    }

    if (start < 0 || end > testStr.length) {
        return false;
    }

    for (var i = start; i < end; i++) {
        var testCode = testStr.charCodeAt(i);
        var referenceCode = referenceStr.charCodeAt(i - start);

        // testCode.toLowerCase() for A..Z
        if (isUppercaseLetter(testCode)) {
            testCode = testCode | 32;
        }

        if (testCode !== referenceCode) {
            return false;
        }
    }

    return true;
}

function findWhiteSpaceStart(source, offset) {
    for (; offset >= 0; offset--) {
        if (!isWhiteSpace(source.charCodeAt(offset))) {
            break;
        }
    }

    return offset + 1;
}

function findWhiteSpaceEnd(source, offset) {
    for (; offset < source.length; offset++) {
        if (!isWhiteSpace(source.charCodeAt(offset))) {
            break;
        }
    }

    return offset;
}

function findDecimalNumberEnd(source, offset) {
    for (; offset < source.length; offset++) {
        if (!isDigit(source.charCodeAt(offset))) {
            break;
        }
    }

    return offset;
}

// § 4.3.7. Consume an escaped code point
function consumeEscaped(source, offset) {
    // It assumes that the U+005C REVERSE SOLIDUS (\) has already been consumed and
    // that the next input code point has already been verified to be part of a valid escape.
    offset += 2;

    // hex digit
    if (isHexDigit(getCharCode(source, offset - 1))) {
        // Consume as many hex digits as possible, but no more than 5.
        // Note that this means 1-6 hex digits have been consumed in total.
        for (var maxOffset = Math.min(source.length, offset + 5); offset < maxOffset; offset++) {
            if (!isHexDigit(getCharCode(source, offset))) {
                break;
            }
        }

        // If the next input code point is whitespace, consume it as well.
        var code = getCharCode(source, offset);
        if (isWhiteSpace(code)) {
            offset += getNewlineLength(source, offset, code);
        }
    }

    return offset;
}

// §4.3.11. Consume a name
// Note: This algorithm does not do the verification of the first few code points that are necessary
// to ensure the returned code points would constitute an <ident-token>. If that is the intended use,
// ensure that the stream starts with an identifier before calling this algorithm.
function consumeName(source, offset) {
    // Let result initially be an empty string.
    // Repeatedly consume the next input code point from the stream:
    for (; offset < source.length; offset++) {
        var code = source.charCodeAt(offset);

        // name code point
        if (isName(code)) {
            // Append the code point to result.
            continue;
        }

        // the stream starts with a valid escape
        if (isValidEscape(code, getCharCode(source, offset + 1))) {
            // Consume an escaped code point. Append the returned code point to result.
            offset = consumeEscaped(source, offset) - 1;
            continue;
        }

        // anything else
        // Reconsume the current input code point. Return result.
        break;
    }

    return offset;
}

// §4.3.12. Consume a number
function consumeNumber(source, offset) {
    var code = source.charCodeAt(offset);

    // 2. If the next input code point is U+002B PLUS SIGN (+) or U+002D HYPHEN-MINUS (-),
    // consume it and append it to repr.
    if (code === 0x002B || code === 0x002D) {
        code = source.charCodeAt(offset += 1);
    }

    // 3. While the next input code point is a digit, consume it and append it to repr.
    if (isDigit(code)) {
        offset = findDecimalNumberEnd(source, offset + 1);
        code = source.charCodeAt(offset);
    }

    // 4. If the next 2 input code points are U+002E FULL STOP (.) followed by a digit, then:
    if (code === 0x002E && isDigit(source.charCodeAt(offset + 1))) {
        // 4.1 Consume them.
        // 4.2 Append them to repr.
        code = source.charCodeAt(offset += 2);

        // 4.3 Set type to "number".
        // TODO

        // 4.4 While the next input code point is a digit, consume it and append it to repr.

        offset = findDecimalNumberEnd(source, offset);
    }

    // 5. If the next 2 or 3 input code points are U+0045 LATIN CAPITAL LETTER E (E)
    // or U+0065 LATIN SMALL LETTER E (e), ... , followed by a digit, then:
    if (cmpChar(source, offset, 101 /* e */)) {
        var sign = 0;
        code = source.charCodeAt(offset + 1);

        // ... optionally followed by U+002D HYPHEN-MINUS (-) or U+002B PLUS SIGN (+) ...
        if (code === 0x002D || code === 0x002B) {
            sign = 1;
            code = source.charCodeAt(offset + 2);
        }

        // ... followed by a digit
        if (isDigit(code)) {
            // 5.1 Consume them.
            // 5.2 Append them to repr.

            // 5.3 Set type to "number".
            // TODO

            // 5.4 While the next input code point is a digit, consume it and append it to repr.
            offset = findDecimalNumberEnd(source, offset + 1 + sign + 1);
        }
    }

    return offset;
}

// § 4.3.14. Consume the remnants of a bad url
// ... its sole use is to consume enough of the input stream to reach a recovery point
// where normal tokenizing can resume.
function consumeBadUrlRemnants(source, offset) {
    // Repeatedly consume the next input code point from the stream:
    for (; offset < source.length; offset++) {
        var code = source.charCodeAt(offset);

        // U+0029 RIGHT PARENTHESIS ())
        // EOF
        if (code === 0x0029) {
            // Return.
            offset++;
            break;
        }

        if (isValidEscape(code, getCharCode(source, offset + 1))) {
            // Consume an escaped code point.
            // Note: This allows an escaped right parenthesis ("\)") to be encountered
            // without ending the <bad-url-token>. This is otherwise identical to
            // the "anything else" clause.
            offset = consumeEscaped(source, offset);
        }
    }

    return offset;
}

module.exports = {
    consumeEscaped: consumeEscaped,
    consumeName: consumeName,
    consumeNumber: consumeNumber,
    consumeBadUrlRemnants: consumeBadUrlRemnants,

    cmpChar: cmpChar,
    cmpStr: cmpStr,

    getNewlineLength: getNewlineLength,
    findWhiteSpaceStart: findWhiteSpaceStart,
    findWhiteSpaceEnd: findWhiteSpaceEnd
};


/***/ }),

/***/ "./node_modules/css-tree/lib/utils/clone.js":
/*!**************************************************!*\
  !*** ./node_modules/css-tree/lib/utils/clone.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var List = __webpack_require__(/*! ../common/List */ "./node_modules/css-tree/lib/common/List.js");

module.exports = function clone(node) {
    var result = {};

    for (var key in node) {
        var value = node[key];

        if (value) {
            if (Array.isArray(value) || value instanceof List) {
                value = value.map(clone);
            } else if (value.constructor === Object) {
                value = clone(value);
            }
        }

        result[key] = value;
    }

    return result;
};


/***/ }),

/***/ "./node_modules/css-tree/lib/utils/createCustomError.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-tree/lib/utils/createCustomError.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function createCustomError(name, message) {
    // use Object.create(), because some VMs prevent setting line/column otherwise
    // (iOS Safari 10 even throws an exception)
    var error = Object.create(SyntaxError.prototype);
    var errorStack = new Error();

    error.name = name;
    error.message = message;

    Object.defineProperty(error, 'stack', {
        get: function() {
            return (errorStack.stack || '').replace(/^(.+\n){1,3}/, name + ': ' + message + '\n');
        }
    });

    return error;
};


/***/ }),

/***/ "./node_modules/css-tree/lib/utils/names.js":
/*!**************************************************!*\
  !*** ./node_modules/css-tree/lib/utils/names.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = Object.prototype.hasOwnProperty;
var keywords = Object.create(null);
var properties = Object.create(null);
var HYPHENMINUS = 45; // '-'.charCodeAt()

function isCustomProperty(str, offset) {
    offset = offset || 0;

    return str.length - offset >= 2 &&
           str.charCodeAt(offset) === HYPHENMINUS &&
           str.charCodeAt(offset + 1) === HYPHENMINUS;
}

function getVendorPrefix(str, offset) {
    offset = offset || 0;

    // verdor prefix should be at least 3 chars length
    if (str.length - offset >= 3) {
        // vendor prefix starts with hyper minus following non-hyper minus
        if (str.charCodeAt(offset) === HYPHENMINUS &&
            str.charCodeAt(offset + 1) !== HYPHENMINUS) {
            // vendor prefix should contain a hyper minus at the ending
            var secondDashIndex = str.indexOf('-', offset + 2);

            if (secondDashIndex !== -1) {
                return str.substring(offset, secondDashIndex + 1);
            }
        }
    }

    return '';
}

function getKeywordDescriptor(keyword) {
    if (hasOwnProperty.call(keywords, keyword)) {
        return keywords[keyword];
    }

    var name = keyword.toLowerCase();

    if (hasOwnProperty.call(keywords, name)) {
        return keywords[keyword] = keywords[name];
    }

    var custom = isCustomProperty(name, 0);
    var vendor = !custom ? getVendorPrefix(name, 0) : '';

    return keywords[keyword] = Object.freeze({
        basename: name.substr(vendor.length),
        name: name,
        vendor: vendor,
        prefix: vendor,
        custom: custom
    });
}

function getPropertyDescriptor(property) {
    if (hasOwnProperty.call(properties, property)) {
        return properties[property];
    }

    var name = property;
    var hack = property[0];

    if (hack === '/') {
        hack = property[1] === '/' ? '//' : '/';
    } else if (hack !== '_' &&
               hack !== '*' &&
               hack !== '$' &&
               hack !== '#' &&
               hack !== '+' &&
               hack !== '&') {
        hack = '';
    }

    var custom = isCustomProperty(name, hack.length);

    // re-use result when possible (the same as for lower case)
    if (!custom) {
        name = name.toLowerCase();
        if (hasOwnProperty.call(properties, name)) {
            return properties[property] = properties[name];
        }
    }

    var vendor = !custom ? getVendorPrefix(name, hack.length) : '';
    var prefix = name.substr(0, hack.length + vendor.length);

    return properties[property] = Object.freeze({
        basename: name.substr(prefix.length),
        name: name.substr(hack.length),
        hack: hack,
        vendor: vendor,
        prefix: prefix,
        custom: custom
    });
}

module.exports = {
    keyword: getKeywordDescriptor,
    property: getPropertyDescriptor,
    isCustomProperty: isCustomProperty,
    vendorPrefix: getVendorPrefix
};


/***/ }),

/***/ "./node_modules/css-tree/lib/walker/create.js":
/*!****************************************************!*\
  !*** ./node_modules/css-tree/lib/walker/create.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = Object.prototype.hasOwnProperty;
var noop = function() {};

function ensureFunction(value) {
    return typeof value === 'function' ? value : noop;
}

function invokeForType(fn, type) {
    return function(node, item, list) {
        if (node.type === type) {
            fn.call(this, node, item, list);
        }
    };
}

function getWalkersFromStructure(name, nodeType) {
    var structure = nodeType.structure;
    var walkers = [];

    for (var key in structure) {
        if (hasOwnProperty.call(structure, key) === false) {
            continue;
        }

        var fieldTypes = structure[key];
        var walker = {
            name: key,
            type: false,
            nullable: false
        };

        if (!Array.isArray(structure[key])) {
            fieldTypes = [structure[key]];
        }

        for (var i = 0; i < fieldTypes.length; i++) {
            var fieldType = fieldTypes[i];
            if (fieldType === null) {
                walker.nullable = true;
            } else if (typeof fieldType === 'string') {
                walker.type = 'node';
            } else if (Array.isArray(fieldType)) {
                walker.type = 'list';
            }
        }

        if (walker.type) {
            walkers.push(walker);
        }
    }

    if (walkers.length) {
        return {
            context: nodeType.walkContext,
            fields: walkers
        };
    }

    return null;
}

function getTypesFromConfig(config) {
    var types = {};

    for (var name in config.node) {
        if (hasOwnProperty.call(config.node, name)) {
            var nodeType = config.node[name];

            if (!nodeType.structure) {
                throw new Error('Missed `structure` field in `' + name + '` node type definition');
            }

            types[name] = getWalkersFromStructure(name, nodeType);
        }
    }

    return types;
}

function createTypeIterator(config, reverse) {
    var fields = config.fields.slice();
    var contextName = config.context;
    var useContext = typeof contextName === 'string';

    if (reverse) {
        fields.reverse();
    }

    return function(node, context, walk, walkReducer) {
        var prevContextValue;

        if (useContext) {
            prevContextValue = context[contextName];
            context[contextName] = node;
        }

        for (var i = 0; i < fields.length; i++) {
            var field = fields[i];
            var ref = node[field.name];

            if (!field.nullable || ref) {
                if (field.type === 'list') {
                    var breakWalk = reverse
                        ? ref.reduceRight(walkReducer, false)
                        : ref.reduce(walkReducer, false);

                    if (breakWalk) {
                        return true;
                    }
                } else if (walk(ref)) {
                    return true;
                }
            }
        }

        if (useContext) {
            context[contextName] = prevContextValue;
        }
    };
}

function createFastTraveralMap(iterators) {
    return {
        Atrule: {
            StyleSheet: iterators.StyleSheet,
            Atrule: iterators.Atrule,
            Rule: iterators.Rule,
            Block: iterators.Block
        },
        Rule: {
            StyleSheet: iterators.StyleSheet,
            Atrule: iterators.Atrule,
            Rule: iterators.Rule,
            Block: iterators.Block
        },
        Declaration: {
            StyleSheet: iterators.StyleSheet,
            Atrule: iterators.Atrule,
            Rule: iterators.Rule,
            Block: iterators.Block,
            DeclarationList: iterators.DeclarationList
        }
    };
}

module.exports = function createWalker(config) {
    var types = getTypesFromConfig(config);
    var iteratorsNatural = {};
    var iteratorsReverse = {};
    var breakWalk = Symbol('break-walk');
    var skipNode = Symbol('skip-node');

    for (var name in types) {
        if (hasOwnProperty.call(types, name) && types[name] !== null) {
            iteratorsNatural[name] = createTypeIterator(types[name], false);
            iteratorsReverse[name] = createTypeIterator(types[name], true);
        }
    }

    var fastTraversalIteratorsNatural = createFastTraveralMap(iteratorsNatural);
    var fastTraversalIteratorsReverse = createFastTraveralMap(iteratorsReverse);

    var walk = function(root, options) {
        function walkNode(node, item, list) {
            var enterRet = enter.call(context, node, item, list);

            if (enterRet === breakWalk) {
                debugger;
                return true;
            }

            if (enterRet === skipNode) {
                return false;
            }

            if (iterators.hasOwnProperty(node.type)) {
                if (iterators[node.type](node, context, walkNode, walkReducer)) {
                    return true;
                }
            }

            if (leave.call(context, node, item, list) === breakWalk) {
                return true;
            }

            return false;
        }

        var walkReducer = (ret, data, item, list) => ret || walkNode(data, item, list);
        var enter = noop;
        var leave = noop;
        var iterators = iteratorsNatural;
        var context = {
            break: breakWalk,
            skip: skipNode,

            root: root,
            stylesheet: null,
            atrule: null,
            atrulePrelude: null,
            rule: null,
            selector: null,
            block: null,
            declaration: null,
            function: null
        };

        if (typeof options === 'function') {
            enter = options;
        } else if (options) {
            enter = ensureFunction(options.enter);
            leave = ensureFunction(options.leave);

            if (options.reverse) {
                iterators = iteratorsReverse;
            }

            if (options.visit) {
                if (fastTraversalIteratorsNatural.hasOwnProperty(options.visit)) {
                    iterators = options.reverse
                        ? fastTraversalIteratorsReverse[options.visit]
                        : fastTraversalIteratorsNatural[options.visit];
                } else if (!types.hasOwnProperty(options.visit)) {
                    throw new Error('Bad value `' + options.visit + '` for `visit` option (should be: ' + Object.keys(types).join(', ') + ')');
                }

                enter = invokeForType(enter, options.visit);
                leave = invokeForType(leave, options.visit);
            }
        }

        if (enter === noop && leave === noop) {
            throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\'t a function');
        }

        walkNode(root);
    };

    walk.break = breakWalk;
    walk.skip = skipNode;

    walk.find = function(ast, fn) {
        var found = null;

        walk(ast, function(node, item, list) {
            if (fn.call(this, node, item, list)) {
                found = node;
                return breakWalk;
            }
        });

        return found;
    };

    walk.findLast = function(ast, fn) {
        var found = null;

        walk(ast, {
            reverse: true,
            enter: function(node, item, list) {
                if (fn.call(this, node, item, list)) {
                    found = node;
                    return breakWalk;
                }
            }
        });

        return found;
    };

    walk.findAll = function(ast, fn) {
        var found = [];

        walk(ast, function(node, item, list) {
            if (fn.call(this, node, item, list)) {
                found.push(node);
            }
        });

        return found;
    };

    return walk;
};


/***/ }),

/***/ "./node_modules/css-tree/package.json":
/*!********************************************!*\
  !*** ./node_modules/css-tree/package.json ***!
  \********************************************/
/*! exports provided: name, version, description, author, license, repository, keywords, main, unpkg, jsdelivr, scripts, dependencies, devDependencies, engines, files, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"css-tree\",\"version\":\"1.1.3\",\"description\":\"A tool set for CSS: fast detailed parser (CSS → AST), walker (AST traversal), generator (AST → CSS) and lexer (validation and matching) based on specs and browser implementations\",\"author\":\"Roman Dvornov <rdvornov@gmail.com> (https://github.com/lahmatiy)\",\"license\":\"MIT\",\"repository\":\"csstree/csstree\",\"keywords\":[\"css\",\"ast\",\"tokenizer\",\"parser\",\"walker\",\"lexer\",\"generator\",\"utils\",\"syntax\",\"validation\"],\"main\":\"lib/index.js\",\"unpkg\":\"dist/csstree.min.js\",\"jsdelivr\":\"dist/csstree.min.js\",\"scripts\":{\"build\":\"rollup --config\",\"lint\":\"eslint data lib scripts test && node scripts/review-syntax-patch --lint && node scripts/update-docs --lint\",\"lint-and-test\":\"npm run lint && npm test\",\"update:docs\":\"node scripts/update-docs\",\"review:syntax-patch\":\"node scripts/review-syntax-patch\",\"test\":\"mocha --reporter progress\",\"coverage\":\"nyc npm test\",\"travis\":\"nyc npm run lint-and-test && npm run coveralls\",\"coveralls\":\"nyc report --reporter=text-lcov | coveralls\",\"prepublishOnly\":\"npm run build\",\"hydrogen\":\"node --trace-hydrogen --trace-phase=Z --trace-deopt --code-comments --hydrogen-track-positions --redirect-code-traces --redirect-code-traces-to=code.asm --trace_hydrogen_file=code.cfg --print-opt-code bin/parse --stat -o /dev/null\"},\"dependencies\":{\"mdn-data\":\"2.0.14\",\"source-map\":\"^0.6.1\"},\"devDependencies\":{\"@rollup/plugin-commonjs\":\"^11.0.2\",\"@rollup/plugin-json\":\"^4.0.2\",\"@rollup/plugin-node-resolve\":\"^7.1.1\",\"coveralls\":\"^3.0.9\",\"eslint\":\"^6.8.0\",\"json-to-ast\":\"^2.1.0\",\"mocha\":\"^6.2.3\",\"nyc\":\"^14.1.1\",\"rollup\":\"^1.32.1\",\"rollup-plugin-terser\":\"^5.3.0\"},\"engines\":{\"node\":\">=8.0.0\"},\"files\":[\"data\",\"dist\",\"lib\"]}");

/***/ }),

/***/ "./node_modules/dompurify/dist/purify.js":
/*!***********************************************!*\
  !*** ./node_modules/dompurify/dist/purify.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*! @license DOMPurify | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.2.2/LICENSE */

(function (global, factory) {
   true ? module.exports = factory() :
  undefined;
}(this, function () { 'use strict';

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  var hasOwnProperty = Object.hasOwnProperty,
      setPrototypeOf = Object.setPrototypeOf,
      isFrozen = Object.isFrozen,
      getPrototypeOf = Object.getPrototypeOf,
      getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var freeze = Object.freeze,
      seal = Object.seal,
      create = Object.create; // eslint-disable-line import/no-mutable-exports

  var _ref = typeof Reflect !== 'undefined' && Reflect,
      apply = _ref.apply,
      construct = _ref.construct;

  if (!apply) {
    apply = function apply(fun, thisValue, args) {
      return fun.apply(thisValue, args);
    };
  }

  if (!freeze) {
    freeze = function freeze(x) {
      return x;
    };
  }

  if (!seal) {
    seal = function seal(x) {
      return x;
    };
  }

  if (!construct) {
    construct = function construct(Func, args) {
      return new (Function.prototype.bind.apply(Func, [null].concat(_toConsumableArray(args))))();
    };
  }

  var arrayForEach = unapply(Array.prototype.forEach);
  var arrayPop = unapply(Array.prototype.pop);
  var arrayPush = unapply(Array.prototype.push);

  var stringToLowerCase = unapply(String.prototype.toLowerCase);
  var stringMatch = unapply(String.prototype.match);
  var stringReplace = unapply(String.prototype.replace);
  var stringIndexOf = unapply(String.prototype.indexOf);
  var stringTrim = unapply(String.prototype.trim);

  var regExpTest = unapply(RegExp.prototype.test);

  var typeErrorCreate = unconstruct(TypeError);

  function unapply(func) {
    return function (thisArg) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return apply(func, thisArg, args);
    };
  }

  function unconstruct(func) {
    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return construct(func, args);
    };
  }

  /* Add properties to a lookup table */
  function addToSet(set, array) {
    if (setPrototypeOf) {
      // Make 'in' and truthy checks like Boolean(set.constructor)
      // independent of any properties defined on Object.prototype.
      // Prevent prototype setters from intercepting set as a this value.
      setPrototypeOf(set, null);
    }

    var l = array.length;
    while (l--) {
      var element = array[l];
      if (typeof element === 'string') {
        var lcElement = stringToLowerCase(element);
        if (lcElement !== element) {
          // Config presets (e.g. tags.js, attrs.js) are immutable.
          if (!isFrozen(array)) {
            array[l] = lcElement;
          }

          element = lcElement;
        }
      }

      set[element] = true;
    }

    return set;
  }

  /* Shallow clone an object */
  function clone(object) {
    var newObject = create(null);

    var property = void 0;
    for (property in object) {
      if (apply(hasOwnProperty, object, [property])) {
        newObject[property] = object[property];
      }
    }

    return newObject;
  }

  /* IE10 doesn't support __lookupGetter__ so lets'
   * simulate it. It also automatically checks
   * if the prop is function or getter and behaves
   * accordingly. */
  function lookupGetter(object, prop) {
    while (object !== null) {
      var desc = getOwnPropertyDescriptor(object, prop);
      if (desc) {
        if (desc.get) {
          return unapply(desc.get);
        }

        if (typeof desc.value === 'function') {
          return unapply(desc.value);
        }
      }

      object = getPrototypeOf(object);
    }

    function fallbackValue(element) {
      console.warn('fallback value for', element);
      return null;
    }

    return fallbackValue;
  }

  var html = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);

  // SVG
  var svg = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);

  var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);

  // List of SVG elements that are disallowed by default.
  // We still need to know them so that we can do namespace
  // checks properly in case one wants to add them to
  // allow-list.
  var svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'fedropshadow', 'feimage', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);

  var mathMl = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']);

  // Similarly to SVG, we want to know all MathML elements,
  // even those that we disallow by default.
  var mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);

  var text = freeze(['#text']);

  var html$1 = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns']);

  var svg$1 = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);

  var mathMl$1 = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);

  var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);

  // eslint-disable-next-line unicorn/better-regex
  var MUSTACHE_EXPR = seal(/\{\{[\s\S]*|[\s\S]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode
  var ERB_EXPR = seal(/<%[\s\S]*|[\s\S]*%>/gm);
  var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape
  var ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape
  var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
  );
  var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
  var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
  );

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  function _toConsumableArray$1(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  var getGlobal = function getGlobal() {
    return typeof window === 'undefined' ? null : window;
  };

  /**
   * Creates a no-op policy for internal use only.
   * Don't export this function outside this module!
   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
   * @param {Document} document The document object (to determine policy name suffix)
   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
   * are not supported).
   */
  var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {
    if ((typeof trustedTypes === 'undefined' ? 'undefined' : _typeof(trustedTypes)) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
      return null;
    }

    // Allow the callers to control the unique policy name
    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
    // Policy creation with duplicate names throws in Trusted Types.
    var suffix = null;
    var ATTR_NAME = 'data-tt-policy-suffix';
    if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {
      suffix = document.currentScript.getAttribute(ATTR_NAME);
    }

    var policyName = 'dompurify' + (suffix ? '#' + suffix : '');

    try {
      return trustedTypes.createPolicy(policyName, {
        createHTML: function createHTML(html$$1) {
          return html$$1;
        }
      });
    } catch (_) {
      // Policy creation failed (most likely another DOMPurify script has
      // already run). Skip creating the policy, as this will only cause errors
      // if TT are enforced.
      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
      return null;
    }
  };

  function createDOMPurify() {
    var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();

    var DOMPurify = function DOMPurify(root) {
      return createDOMPurify(root);
    };

    /**
     * Version label, exposed for easier checks
     * if DOMPurify is up to date or not
     */
    DOMPurify.version = '2.2.7';

    /**
     * Array of elements that DOMPurify removed during sanitation.
     * Empty if nothing was removed.
     */
    DOMPurify.removed = [];

    if (!window || !window.document || window.document.nodeType !== 9) {
      // Not running in a browser, provide a factory function
      // so that you can pass your own Window
      DOMPurify.isSupported = false;

      return DOMPurify;
    }

    var originalDocument = window.document;

    var document = window.document;
    var DocumentFragment = window.DocumentFragment,
        HTMLTemplateElement = window.HTMLTemplateElement,
        Node = window.Node,
        Element = window.Element,
        NodeFilter = window.NodeFilter,
        _window$NamedNodeMap = window.NamedNodeMap,
        NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,
        Text = window.Text,
        Comment = window.Comment,
        DOMParser = window.DOMParser,
        trustedTypes = window.trustedTypes;


    var ElementPrototype = Element.prototype;

    var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
    var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
    var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
    var getParentNode = lookupGetter(ElementPrototype, 'parentNode');

    // As per issue #47, the web-components registry is inherited by a
    // new document created via createHTMLDocument. As per the spec
    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
    // a new empty registry is used when creating a template contents owner
    // document, so we use that as our parent document to ensure nothing
    // is inherited.
    if (typeof HTMLTemplateElement === 'function') {
      var template = document.createElement('template');
      if (template.content && template.content.ownerDocument) {
        document = template.content.ownerDocument;
      }
    }

    var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);
    var emptyHTML = trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML('') : '';

    var _document = document,
        implementation = _document.implementation,
        createNodeIterator = _document.createNodeIterator,
        getElementsByTagName = _document.getElementsByTagName,
        createDocumentFragment = _document.createDocumentFragment;
    var importNode = originalDocument.importNode;


    var documentMode = {};
    try {
      documentMode = clone(document).documentMode ? document.documentMode : {};
    } catch (_) {}

    var hooks = {};

    /**
     * Expose whether this browser supports running the full DOMPurify.
     */
    DOMPurify.isSupported = typeof getParentNode === 'function' && implementation && typeof implementation.createHTMLDocument !== 'undefined' && documentMode !== 9;

    var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,
        ERB_EXPR$$1 = ERB_EXPR,
        DATA_ATTR$$1 = DATA_ATTR,
        ARIA_ATTR$$1 = ARIA_ATTR,
        IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,
        ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;
    var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;

    /**
     * We consider the elements and attributes below to be safe. Ideally
     * don't add any new ones but feel free to remove unwanted ones.
     */

    /* allowed element names */

    var ALLOWED_TAGS = null;
    var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(html), _toConsumableArray$1(svg), _toConsumableArray$1(svgFilters), _toConsumableArray$1(mathMl), _toConsumableArray$1(text)));

    /* Allowed attribute names */
    var ALLOWED_ATTR = null;
    var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray$1(html$1), _toConsumableArray$1(svg$1), _toConsumableArray$1(mathMl$1), _toConsumableArray$1(xml)));

    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */
    var FORBID_TAGS = null;

    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */
    var FORBID_ATTR = null;

    /* Decide if ARIA attributes are okay */
    var ALLOW_ARIA_ATTR = true;

    /* Decide if custom data attributes are okay */
    var ALLOW_DATA_ATTR = true;

    /* Decide if unknown protocols are okay */
    var ALLOW_UNKNOWN_PROTOCOLS = false;

    /* Output should be safe for common template engines.
     * This means, DOMPurify removes data attributes, mustaches and ERB
     */
    var SAFE_FOR_TEMPLATES = false;

    /* Decide if document with <html>... should be returned */
    var WHOLE_DOCUMENT = false;

    /* Track whether config is already set on this instance of DOMPurify. */
    var SET_CONFIG = false;

    /* Decide if all elements (e.g. style, script) must be children of
     * document.body. By default, browsers might move them to document.head */
    var FORCE_BODY = false;

    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
     * string (or a TrustedHTML object if Trusted Types are supported).
     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
     */
    var RETURN_DOM = false;

    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
     * string  (or a TrustedHTML object if Trusted Types are supported) */
    var RETURN_DOM_FRAGMENT = false;

    /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM
     * `Node` is imported into the current `Document`. If this flag is not enabled the
     * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by
     * DOMPurify.
     *
     * This defaults to `true` starting DOMPurify 2.2.0. Note that setting it to `false`
     * might cause XSS from attacks hidden in closed shadowroots in case the browser
     * supports Declarative Shadow: DOM https://web.dev/declarative-shadow-dom/
     */
    var RETURN_DOM_IMPORT = true;

    /* Try to return a Trusted Type object instead of a string, return a string in
     * case Trusted Types are not supported  */
    var RETURN_TRUSTED_TYPE = false;

    /* Output should be free from DOM clobbering attacks? */
    var SANITIZE_DOM = true;

    /* Keep element content when removing element? */
    var KEEP_CONTENT = true;

    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
     * of importing it into a new Document and returning a sanitized copy */
    var IN_PLACE = false;

    /* Allow usage of profiles like html, svg and mathMl */
    var USE_PROFILES = {};

    /* Tags to ignore content of when KEEP_CONTENT is true */
    var FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);

    /* Tags that are safe for data: URIs */
    var DATA_URI_TAGS = null;
    var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);

    /* Attributes safe for values like "javascript:" */
    var URI_SAFE_ATTRIBUTES = null;
    var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'summary', 'title', 'value', 'style', 'xmlns']);

    /* Keep a reference to config to pass to hooks */
    var CONFIG = null;

    /* Ideally, do not touch anything below this line */
    /* ______________________________________________ */

    var formElement = document.createElement('form');

    /**
     * _parseConfig
     *
     * @param  {Object} cfg optional config literal
     */
    // eslint-disable-next-line complexity
    var _parseConfig = function _parseConfig(cfg) {
      if (CONFIG && CONFIG === cfg) {
        return;
      }

      /* Shield configuration object from tampering */
      if (!cfg || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {
        cfg = {};
      }

      /* Shield configuration object from prototype pollution */
      cfg = clone(cfg);

      /* Set configuration parameters */
      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;
      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;
      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;
      DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;
      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};
      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};
      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;
      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true
      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true
      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false
      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false
      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false
      RETURN_DOM = cfg.RETURN_DOM || false; // Default false
      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false
      RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT !== false; // Default true
      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false
      FORCE_BODY = cfg.FORCE_BODY || false; // Default false
      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true
      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true
      IN_PLACE = cfg.IN_PLACE || false; // Default false
      IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;
      if (SAFE_FOR_TEMPLATES) {
        ALLOW_DATA_ATTR = false;
      }

      if (RETURN_DOM_FRAGMENT) {
        RETURN_DOM = true;
      }

      /* Parse profile info */
      if (USE_PROFILES) {
        ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(text)));
        ALLOWED_ATTR = [];
        if (USE_PROFILES.html === true) {
          addToSet(ALLOWED_TAGS, html);
          addToSet(ALLOWED_ATTR, html$1);
        }

        if (USE_PROFILES.svg === true) {
          addToSet(ALLOWED_TAGS, svg);
          addToSet(ALLOWED_ATTR, svg$1);
          addToSet(ALLOWED_ATTR, xml);
        }

        if (USE_PROFILES.svgFilters === true) {
          addToSet(ALLOWED_TAGS, svgFilters);
          addToSet(ALLOWED_ATTR, svg$1);
          addToSet(ALLOWED_ATTR, xml);
        }

        if (USE_PROFILES.mathMl === true) {
          addToSet(ALLOWED_TAGS, mathMl);
          addToSet(ALLOWED_ATTR, mathMl$1);
          addToSet(ALLOWED_ATTR, xml);
        }
      }

      /* Merge configuration parameters */
      if (cfg.ADD_TAGS) {
        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
          ALLOWED_TAGS = clone(ALLOWED_TAGS);
        }

        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);
      }

      if (cfg.ADD_ATTR) {
        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
          ALLOWED_ATTR = clone(ALLOWED_ATTR);
        }

        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);
      }

      if (cfg.ADD_URI_SAFE_ATTR) {
        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);
      }

      /* Add #text in case KEEP_CONTENT is set to true */
      if (KEEP_CONTENT) {
        ALLOWED_TAGS['#text'] = true;
      }

      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */
      if (WHOLE_DOCUMENT) {
        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
      }

      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */
      if (ALLOWED_TAGS.table) {
        addToSet(ALLOWED_TAGS, ['tbody']);
        delete FORBID_TAGS.tbody;
      }

      // Prevent further manipulation of configuration.
      // Not available in IE8, Safari 5, etc.
      if (freeze) {
        freeze(cfg);
      }

      CONFIG = cfg;
    };

    var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);

    var HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']);

    /* Keep track of all possible SVG and MathML tags
     * so that we can perform the namespace checks
     * correctly. */
    var ALL_SVG_TAGS = addToSet({}, svg);
    addToSet(ALL_SVG_TAGS, svgFilters);
    addToSet(ALL_SVG_TAGS, svgDisallowed);

    var ALL_MATHML_TAGS = addToSet({}, mathMl);
    addToSet(ALL_MATHML_TAGS, mathMlDisallowed);

    var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';

    /**
     *
     *
     * @param  {Element} element a DOM element whose namespace is being checked
     * @returns {boolean} Return false if the element has a
     *  namespace that a spec-compliant parser would never
     *  return. Return true otherwise.
     */
    var _checkValidNamespace = function _checkValidNamespace(element) {
      var parent = getParentNode(element);

      // In JSDOM, if we're inside shadow DOM, then parentNode
      // can be null. We just simulate parent in this case.
      if (!parent || !parent.tagName) {
        parent = {
          namespaceURI: HTML_NAMESPACE,
          tagName: 'template'
        };
      }

      var tagName = stringToLowerCase(element.tagName);
      var parentTagName = stringToLowerCase(parent.tagName);

      if (element.namespaceURI === SVG_NAMESPACE) {
        // The only way to switch from HTML namespace to SVG
        // is via <svg>. If it happens via any other tag, then
        // it should be killed.
        if (parent.namespaceURI === HTML_NAMESPACE) {
          return tagName === 'svg';
        }

        // The only way to switch from MathML to SVG is via
        // svg if parent is either <annotation-xml> or MathML
        // text integration points.
        if (parent.namespaceURI === MATHML_NAMESPACE) {
          return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
        }

        // We only allow elements that are defined in SVG
        // spec. All others are disallowed in SVG namespace.
        return Boolean(ALL_SVG_TAGS[tagName]);
      }

      if (element.namespaceURI === MATHML_NAMESPACE) {
        // The only way to switch from HTML namespace to MathML
        // is via <math>. If it happens via any other tag, then
        // it should be killed.
        if (parent.namespaceURI === HTML_NAMESPACE) {
          return tagName === 'math';
        }

        // The only way to switch from SVG to MathML is via
        // <math> and HTML integration points
        if (parent.namespaceURI === SVG_NAMESPACE) {
          return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
        }

        // We only allow elements that are defined in MathML
        // spec. All others are disallowed in MathML namespace.
        return Boolean(ALL_MATHML_TAGS[tagName]);
      }

      if (element.namespaceURI === HTML_NAMESPACE) {
        // The only way to switch from SVG to HTML is via
        // HTML integration points, and from MathML to HTML
        // is via MathML text integration points
        if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
          return false;
        }

        if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
          return false;
        }

        // Certain elements are allowed in both SVG and HTML
        // namespace. We need to specify them explicitly
        // so that they don't get erronously deleted from
        // HTML namespace.
        var commonSvgAndHTMLElements = addToSet({}, ['title', 'style', 'font', 'a', 'script']);

        // We disallow tags that are specific for MathML
        // or SVG and should never appear in HTML namespace
        return !ALL_MATHML_TAGS[tagName] && (commonSvgAndHTMLElements[tagName] || !ALL_SVG_TAGS[tagName]);
      }

      // The code should never reach this place (this means
      // that the element somehow got namespace that is not
      // HTML, SVG or MathML). Return false just in case.
      return false;
    };

    /**
     * _forceRemove
     *
     * @param  {Node} node a DOM node
     */
    var _forceRemove = function _forceRemove(node) {
      arrayPush(DOMPurify.removed, { element: node });
      try {
        node.parentNode.removeChild(node);
      } catch (_) {
        try {
          node.outerHTML = emptyHTML;
        } catch (_) {
          node.remove();
        }
      }
    };

    /**
     * _removeAttribute
     *
     * @param  {String} name an Attribute name
     * @param  {Node} node a DOM node
     */
    var _removeAttribute = function _removeAttribute(name, node) {
      try {
        arrayPush(DOMPurify.removed, {
          attribute: node.getAttributeNode(name),
          from: node
        });
      } catch (_) {
        arrayPush(DOMPurify.removed, {
          attribute: null,
          from: node
        });
      }

      node.removeAttribute(name);

      // We void attribute values for unremovable "is"" attributes
      if (name === 'is' && !ALLOWED_ATTR[name]) {
        if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
          try {
            _forceRemove(node);
          } catch (_) {}
        } else {
          try {
            node.setAttribute(name, '');
          } catch (_) {}
        }
      }
    };

    /**
     * _initDocument
     *
     * @param  {String} dirty a string of dirty markup
     * @return {Document} a DOM, filled with the dirty markup
     */
    var _initDocument = function _initDocument(dirty) {
      /* Create a HTML document */
      var doc = void 0;
      var leadingWhitespace = void 0;

      if (FORCE_BODY) {
        dirty = '<remove></remove>' + dirty;
      } else {
        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
        var matches = stringMatch(dirty, /^[\r\n\t ]+/);
        leadingWhitespace = matches && matches[0];
      }

      var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
      /* Use the DOMParser API by default, fallback later if needs be */
      try {
        doc = new DOMParser().parseFromString(dirtyPayload, 'text/html');
      } catch (_) {}

      /* Use createHTMLDocument in case DOMParser is not available */
      if (!doc || !doc.documentElement) {
        doc = implementation.createHTMLDocument('');
        var _doc = doc,
            body = _doc.body;

        body.parentNode.removeChild(body.parentNode.firstElementChild);
        body.outerHTML = dirtyPayload;
      }

      if (dirty && leadingWhitespace) {
        doc.body.insertBefore(document.createTextNode(leadingWhitespace), doc.body.childNodes[0] || null);
      }

      /* Work on whole document or just its body */
      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
    };

    /**
     * _createIterator
     *
     * @param  {Document} root document/fragment to create iterator for
     * @return {Iterator} iterator instance
     */
    var _createIterator = function _createIterator(root) {
      return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, function () {
        return NodeFilter.FILTER_ACCEPT;
      }, false);
    };

    /**
     * _isClobbered
     *
     * @param  {Node} elm element to check for clobbering attacks
     * @return {Boolean} true if clobbered, false if safe
     */
    var _isClobbered = function _isClobbered(elm) {
      if (elm instanceof Text || elm instanceof Comment) {
        return false;
      }

      if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function') {
        return true;
      }

      return false;
    };

    /**
     * _isNode
     *
     * @param  {Node} obj object to check whether it's a DOM node
     * @return {Boolean} true is object is a DOM node
     */
    var _isNode = function _isNode(object) {
      return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? object instanceof Node : object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';
    };

    /**
     * _executeHook
     * Execute user configurable hooks
     *
     * @param  {String} entryPoint  Name of the hook's entry point
     * @param  {Node} currentNode node to work on with the hook
     * @param  {Object} data additional hook parameters
     */
    var _executeHook = function _executeHook(entryPoint, currentNode, data) {
      if (!hooks[entryPoint]) {
        return;
      }

      arrayForEach(hooks[entryPoint], function (hook) {
        hook.call(DOMPurify, currentNode, data, CONFIG);
      });
    };

    /**
     * _sanitizeElements
     *
     * @protect nodeName
     * @protect textContent
     * @protect removeChild
     *
     * @param   {Node} currentNode to check for permission to exist
     * @return  {Boolean} true if node was killed, false if left alive
     */
    var _sanitizeElements = function _sanitizeElements(currentNode) {
      var content = void 0;

      /* Execute a hook if present */
      _executeHook('beforeSanitizeElements', currentNode, null);

      /* Check if element is clobbered or can clobber */
      if (_isClobbered(currentNode)) {
        _forceRemove(currentNode);
        return true;
      }

      /* Check if tagname contains Unicode */
      if (stringMatch(currentNode.nodeName, /[\u0080-\uFFFF]/)) {
        _forceRemove(currentNode);
        return true;
      }

      /* Now let's check the element's type and name */
      var tagName = stringToLowerCase(currentNode.nodeName);

      /* Execute a hook if present */
      _executeHook('uponSanitizeElement', currentNode, {
        tagName: tagName,
        allowedTags: ALLOWED_TAGS
      });

      /* Detect mXSS attempts abusing namespace confusion */
      if (!_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
        _forceRemove(currentNode);
        return true;
      }

      /* Remove element if anything forbids its presence */
      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
        /* Keep content except for bad-listed elements */
        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
          var parentNode = getParentNode(currentNode);
          var childNodes = getChildNodes(currentNode);

          if (childNodes && parentNode) {
            var childCount = childNodes.length;

            for (var i = childCount - 1; i >= 0; --i) {
              parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
            }
          }
        }

        _forceRemove(currentNode);
        return true;
      }

      /* Check whether element has a valid namespace */
      if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
        _forceRemove(currentNode);
        return true;
      }

      if ((tagName === 'noscript' || tagName === 'noembed') && regExpTest(/<\/no(script|embed)/i, currentNode.innerHTML)) {
        _forceRemove(currentNode);
        return true;
      }

      /* Sanitize element content to be template-safe */
      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
        /* Get the element's text content */
        content = currentNode.textContent;
        content = stringReplace(content, MUSTACHE_EXPR$$1, ' ');
        content = stringReplace(content, ERB_EXPR$$1, ' ');
        if (currentNode.textContent !== content) {
          arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });
          currentNode.textContent = content;
        }
      }

      /* Execute a hook if present */
      _executeHook('afterSanitizeElements', currentNode, null);

      return false;
    };

    /**
     * _isValidAttribute
     *
     * @param  {string} lcTag Lowercase tag name of containing element.
     * @param  {string} lcName Lowercase attribute name.
     * @param  {string} value Attribute value.
     * @return {Boolean} Returns true if `value` is valid, otherwise false.
     */
    // eslint-disable-next-line complexity
    var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
      /* Make sure attribute cannot clobber */
      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
        return false;
      }

      /* Allow valid data-* attributes: At least one character after "-"
          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
          We don't need to check the value; it's always URI safe. */
      if (ALLOW_DATA_ATTR && regExpTest(DATA_ATTR$$1, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$$1, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
        return false;

        /* Check value is safe. First, is attr inert? If so, is safe */
      } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if (!value) ; else {
        return false;
      }

      return true;
    };

    /**
     * _sanitizeAttributes
     *
     * @protect attributes
     * @protect nodeName
     * @protect removeAttribute
     * @protect setAttribute
     *
     * @param  {Node} currentNode to sanitize
     */
    var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
      var attr = void 0;
      var value = void 0;
      var lcName = void 0;
      var l = void 0;
      /* Execute a hook if present */
      _executeHook('beforeSanitizeAttributes', currentNode, null);

      var attributes = currentNode.attributes;

      /* Check if we have attributes; if not we might have a text node */

      if (!attributes) {
        return;
      }

      var hookEvent = {
        attrName: '',
        attrValue: '',
        keepAttr: true,
        allowedAttributes: ALLOWED_ATTR
      };
      l = attributes.length;

      /* Go backwards over all attributes; safely remove bad ones */
      while (l--) {
        attr = attributes[l];
        var _attr = attr,
            name = _attr.name,
            namespaceURI = _attr.namespaceURI;

        value = stringTrim(attr.value);
        lcName = stringToLowerCase(name);

        /* Execute a hook if present */
        hookEvent.attrName = lcName;
        hookEvent.attrValue = value;
        hookEvent.keepAttr = true;
        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set
        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);
        value = hookEvent.attrValue;
        /* Did the hooks approve of the attribute? */
        if (hookEvent.forceKeepAttr) {
          continue;
        }

        /* Remove attribute */
        _removeAttribute(name, currentNode);

        /* Did the hooks approve of the attribute? */
        if (!hookEvent.keepAttr) {
          continue;
        }

        /* Work around a security issue in jQuery 3.0 */
        if (regExpTest(/\/>/i, value)) {
          _removeAttribute(name, currentNode);
          continue;
        }

        /* Sanitize attribute content to be template-safe */
        if (SAFE_FOR_TEMPLATES) {
          value = stringReplace(value, MUSTACHE_EXPR$$1, ' ');
          value = stringReplace(value, ERB_EXPR$$1, ' ');
        }

        /* Is `value` valid for this attribute? */
        var lcTag = currentNode.nodeName.toLowerCase();
        if (!_isValidAttribute(lcTag, lcName, value)) {
          continue;
        }

        /* Handle invalid data-* attribute set by try-catching it */
        try {
          if (namespaceURI) {
            currentNode.setAttributeNS(namespaceURI, name, value);
          } else {
            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
            currentNode.setAttribute(name, value);
          }

          arrayPop(DOMPurify.removed);
        } catch (_) {}
      }

      /* Execute a hook if present */
      _executeHook('afterSanitizeAttributes', currentNode, null);
    };

    /**
     * _sanitizeShadowDOM
     *
     * @param  {DocumentFragment} fragment to iterate over recursively
     */
    var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
      var shadowNode = void 0;
      var shadowIterator = _createIterator(fragment);

      /* Execute a hook if present */
      _executeHook('beforeSanitizeShadowDOM', fragment, null);

      while (shadowNode = shadowIterator.nextNode()) {
        /* Execute a hook if present */
        _executeHook('uponSanitizeShadowNode', shadowNode, null);

        /* Sanitize tags and elements */
        if (_sanitizeElements(shadowNode)) {
          continue;
        }

        /* Deep shadow DOM detected */
        if (shadowNode.content instanceof DocumentFragment) {
          _sanitizeShadowDOM(shadowNode.content);
        }

        /* Check attributes, sanitize if necessary */
        _sanitizeAttributes(shadowNode);
      }

      /* Execute a hook if present */
      _executeHook('afterSanitizeShadowDOM', fragment, null);
    };

    /**
     * Sanitize
     * Public method providing core sanitation functionality
     *
     * @param {String|Node} dirty string or DOM node
     * @param {Object} configuration object
     */
    // eslint-disable-next-line complexity
    DOMPurify.sanitize = function (dirty, cfg) {
      var body = void 0;
      var importedNode = void 0;
      var currentNode = void 0;
      var oldNode = void 0;
      var returnNode = void 0;
      /* Make sure we have a string to sanitize.
        DO NOT return early, as this will return the wrong type if
        the user has requested a DOM object rather than a string */
      if (!dirty) {
        dirty = '<!-->';
      }

      /* Stringify, in case dirty is an object */
      if (typeof dirty !== 'string' && !_isNode(dirty)) {
        // eslint-disable-next-line no-negated-condition
        if (typeof dirty.toString !== 'function') {
          throw typeErrorCreate('toString is not a function');
        } else {
          dirty = dirty.toString();
          if (typeof dirty !== 'string') {
            throw typeErrorCreate('dirty is not a string, aborting');
          }
        }
      }

      /* Check we can run. Otherwise fall back or ignore */
      if (!DOMPurify.isSupported) {
        if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {
          if (typeof dirty === 'string') {
            return window.toStaticHTML(dirty);
          }

          if (_isNode(dirty)) {
            return window.toStaticHTML(dirty.outerHTML);
          }
        }

        return dirty;
      }

      /* Assign config vars */
      if (!SET_CONFIG) {
        _parseConfig(cfg);
      }

      /* Clean up removed elements */
      DOMPurify.removed = [];

      /* Check if dirty is correctly typed for IN_PLACE */
      if (typeof dirty === 'string') {
        IN_PLACE = false;
      }

      if (IN_PLACE) ; else if (dirty instanceof Node) {
        /* If dirty is a DOM element, append to an empty document to avoid
           elements being stripped by the parser */
        body = _initDocument('<!---->');
        importedNode = body.ownerDocument.importNode(dirty, true);
        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {
          /* Node is already a body, use as is */
          body = importedNode;
        } else if (importedNode.nodeName === 'HTML') {
          body = importedNode;
        } else {
          // eslint-disable-next-line unicorn/prefer-node-append
          body.appendChild(importedNode);
        }
      } else {
        /* Exit directly if we have nothing to do */
        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&
        // eslint-disable-next-line unicorn/prefer-includes
        dirty.indexOf('<') === -1) {
          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
        }

        /* Initialize the document to work on */
        body = _initDocument(dirty);

        /* Check we have a DOM node from the data */
        if (!body) {
          return RETURN_DOM ? null : emptyHTML;
        }
      }

      /* Remove first element node (ours) if FORCE_BODY is set */
      if (body && FORCE_BODY) {
        _forceRemove(body.firstChild);
      }

      /* Get node iterator */
      var nodeIterator = _createIterator(IN_PLACE ? dirty : body);

      /* Now start iterating over the created document */
      while (currentNode = nodeIterator.nextNode()) {
        /* Fix IE's strange behavior with manipulated textNodes #89 */
        if (currentNode.nodeType === 3 && currentNode === oldNode) {
          continue;
        }

        /* Sanitize tags and elements */
        if (_sanitizeElements(currentNode)) {
          continue;
        }

        /* Shadow DOM detected, sanitize it */
        if (currentNode.content instanceof DocumentFragment) {
          _sanitizeShadowDOM(currentNode.content);
        }

        /* Check attributes, sanitize if necessary */
        _sanitizeAttributes(currentNode);

        oldNode = currentNode;
      }

      oldNode = null;

      /* If we sanitized `dirty` in-place, return it. */
      if (IN_PLACE) {
        return dirty;
      }

      /* Return sanitized string or DOM */
      if (RETURN_DOM) {
        if (RETURN_DOM_FRAGMENT) {
          returnNode = createDocumentFragment.call(body.ownerDocument);

          while (body.firstChild) {
            // eslint-disable-next-line unicorn/prefer-node-append
            returnNode.appendChild(body.firstChild);
          }
        } else {
          returnNode = body;
        }

        if (RETURN_DOM_IMPORT) {
          /*
            AdoptNode() is not used because internal state is not reset
            (e.g. the past names map of a HTMLFormElement), this is safe
            in theory but we would rather not risk another attack vector.
            The state that is cloned by importNode() is explicitly defined
            by the specs.
          */
          returnNode = importNode.call(originalDocument, returnNode, true);
        }

        return returnNode;
      }

      var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;

      /* Sanitize final string template-safe */
      if (SAFE_FOR_TEMPLATES) {
        serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$$1, ' ');
        serializedHTML = stringReplace(serializedHTML, ERB_EXPR$$1, ' ');
      }

      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
    };

    /**
     * Public method to set the configuration once
     * setConfig
     *
     * @param {Object} cfg configuration object
     */
    DOMPurify.setConfig = function (cfg) {
      _parseConfig(cfg);
      SET_CONFIG = true;
    };

    /**
     * Public method to remove the configuration
     * clearConfig
     *
     */
    DOMPurify.clearConfig = function () {
      CONFIG = null;
      SET_CONFIG = false;
    };

    /**
     * Public method to check if an attribute value is valid.
     * Uses last set config, if any. Otherwise, uses config defaults.
     * isValidAttribute
     *
     * @param  {string} tag Tag name of containing element.
     * @param  {string} attr Attribute name.
     * @param  {string} value Attribute value.
     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
     */
    DOMPurify.isValidAttribute = function (tag, attr, value) {
      /* Initialize shared config vars if necessary. */
      if (!CONFIG) {
        _parseConfig({});
      }

      var lcTag = stringToLowerCase(tag);
      var lcName = stringToLowerCase(attr);
      return _isValidAttribute(lcTag, lcName, value);
    };

    /**
     * AddHook
     * Public method to add DOMPurify hooks
     *
     * @param {String} entryPoint entry point for the hook to add
     * @param {Function} hookFunction function to execute
     */
    DOMPurify.addHook = function (entryPoint, hookFunction) {
      if (typeof hookFunction !== 'function') {
        return;
      }

      hooks[entryPoint] = hooks[entryPoint] || [];
      arrayPush(hooks[entryPoint], hookFunction);
    };

    /**
     * RemoveHook
     * Public method to remove a DOMPurify hook at a given entryPoint
     * (pops it from the stack of hooks if more are present)
     *
     * @param {String} entryPoint entry point for the hook to remove
     */
    DOMPurify.removeHook = function (entryPoint) {
      if (hooks[entryPoint]) {
        arrayPop(hooks[entryPoint]);
      }
    };

    /**
     * RemoveHooks
     * Public method to remove all DOMPurify hooks at a given entryPoint
     *
     * @param  {String} entryPoint entry point for the hooks to remove
     */
    DOMPurify.removeHooks = function (entryPoint) {
      if (hooks[entryPoint]) {
        hooks[entryPoint] = [];
      }
    };

    /**
     * RemoveAllHooks
     * Public method to remove all DOMPurify hooks
     *
     */
    DOMPurify.removeAllHooks = function () {
      hooks = {};
    };

    return DOMPurify;
  }

  var purify = createDOMPurify();

  return purify;

}));
//# sourceMappingURL=purify.js.map


/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./node_modules/fastestsmallesttextencoderdecoder/EncoderDecoderTogether.min.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/fastestsmallesttextencoderdecoder/EncoderDecoderTogether.min.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {(function(r){function x(){}function y(){}var z=String.fromCharCode,v={}.toString,A=v.call(r.SharedArrayBuffer),B=v(),q=r.Uint8Array,t=q||Array,w=q?ArrayBuffer:t,C=w.isView||function(g){return g&&"length"in g},D=v.call(w.prototype);w=y.prototype;var E=r.TextEncoder,a=new (q?Uint16Array:t)(32);x.prototype.decode=function(g){if(!C(g)){var l=v.call(g);if(l!==D&&l!==A&&l!==B)throw TypeError("Failed to execute 'decode' on 'TextDecoder': The provided value is not of type '(ArrayBuffer or ArrayBufferView)'");
g=q?new t(g):g||[]}for(var f=l="",b=0,c=g.length|0,u=c-32|0,e,d,h=0,p=0,m,k=0,n=-1;b<c;){for(e=b<=u?32:c-b|0;k<e;b=b+1|0,k=k+1|0){d=g[b]&255;switch(d>>4){case 15:m=g[b=b+1|0]&255;if(2!==m>>6||247<d){b=b-1|0;break}h=(d&7)<<6|m&63;p=5;d=256;case 14:m=g[b=b+1|0]&255,h<<=6,h|=(d&15)<<6|m&63,p=2===m>>6?p+4|0:24,d=d+256&768;case 13:case 12:m=g[b=b+1|0]&255,h<<=6,h|=(d&31)<<6|m&63,p=p+7|0,b<c&&2===m>>6&&h>>p&&1114112>h?(d=h,h=h-65536|0,0<=h&&(n=(h>>10)+55296|0,d=(h&1023)+56320|0,31>k?(a[k]=n,k=k+1|0,n=-1):
(m=n,n=d,d=m))):(d>>=8,b=b-d-1|0,d=65533),h=p=0,e=b<=u?32:c-b|0;default:a[k]=d;continue;case 11:case 10:case 9:case 8:}a[k]=65533}f+=z(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30],a[31]);32>k&&(f=f.slice(0,k-32|0));if(b<c){if(a[0]=n,k=~n>>>31,n=-1,f.length<l.length)continue}else-1!==n&&(f+=z(n));l+=f;f=""}return l};w.encode=function(g){g=void 0===g?"":""+g;var l=g.length|
0,f=new t((l<<1)+8|0),b,c=0,u=!q;for(b=0;b<l;b=b+1|0,c=c+1|0){var e=g.charCodeAt(b)|0;if(127>=e)f[c]=e;else{if(2047>=e)f[c]=192|e>>6;else{a:{if(55296<=e)if(56319>=e){var d=g.charCodeAt(b=b+1|0)|0;if(56320<=d&&57343>=d){e=(e<<10)+d-56613888|0;if(65535<e){f[c]=240|e>>18;f[c=c+1|0]=128|e>>12&63;f[c=c+1|0]=128|e>>6&63;f[c=c+1|0]=128|e&63;continue}break a}e=65533}else 57343>=e&&(e=65533);!u&&b<<1<c&&b<<1<(c-7|0)&&(u=!0,d=new t(3*l),d.set(f),f=d)}f[c]=224|e>>12;f[c=c+1|0]=128|e>>6&63}f[c=c+1|0]=128|e&63}}return q?
f.subarray(0,c):f.slice(0,c)};E||(r.TextDecoder=x,r.TextEncoder=y)})(""+void 0==typeof global?""+void 0==typeof self?this:self:global);//AnonyCo
//# sourceMappingURL=https://cdn.jsdelivr.net/gh/AnonyCo/FastestSmallestTextEncoderDecoder/EncoderDecoderTogether.min.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/grapheme-breaker/src/classes.json":
/*!********************************************************!*\
  !*** ./node_modules/grapheme-breaker/src/classes.json ***!
  \********************************************************/
/*! exports provided: Other, CR, LF, Control, Extend, Regional_Indicator, SpacingMark, L, V, T, LV, LVT, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"Other\":0,\"CR\":1,\"LF\":2,\"Control\":3,\"Extend\":4,\"Regional_Indicator\":5,\"SpacingMark\":6,\"L\":7,\"V\":8,\"T\":9,\"LV\":10,\"LVT\":11}");

/***/ }),

/***/ "./node_modules/hull.js/src/convex.js":
/*!********************************************!*\
  !*** ./node_modules/hull.js/src/convex.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _cross(o, a, b) {
    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]);
}

function _upperTangent(pointset) {
    var lower = [];
    for (var l = 0; l < pointset.length; l++) {
        while (lower.length >= 2 && (_cross(lower[lower.length - 2], lower[lower.length - 1], pointset[l]) <= 0)) {
            lower.pop();
        }
        lower.push(pointset[l]);
    }
    lower.pop();
    return lower;
}

function _lowerTangent(pointset) {
    var reversed = pointset.reverse(),
        upper = [];
    for (var u = 0; u < reversed.length; u++) {
        while (upper.length >= 2 && (_cross(upper[upper.length - 2], upper[upper.length - 1], reversed[u]) <= 0)) {
            upper.pop();
        }
        upper.push(reversed[u]);
    }
    upper.pop();
    return upper;
}

// pointset has to be sorted by X
function convex(pointset) {
    var convex,
        upper = _upperTangent(pointset),
        lower = _lowerTangent(pointset);
    convex = lower.concat(upper);
    convex.push(pointset[0]);  
    return convex;  
}

module.exports = convex;


/***/ }),

/***/ "./node_modules/hull.js/src/format.js":
/*!********************************************!*\
  !*** ./node_modules/hull.js/src/format.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {

    toXy: function(pointset, format) {
        if (format === undefined) {
            return pointset.slice();
        }
        return pointset.map(function(pt) {
            /*jslint evil: true */
            var _getXY = new Function('pt', 'return [pt' + format[0] + ',' + 'pt' + format[1] + '];');
            return _getXY(pt);
        });
    },

    fromXy: function(pointset, format) {
        if (format === undefined) {
            return pointset.slice();
        }
        return pointset.map(function(pt) {
            /*jslint evil: true */
            var _getObj = new Function('pt', 'var o = {}; o' + format[0] + '= pt[0]; o' + format[1] + '= pt[1]; return o;');
            return _getObj(pt);
        });
    }

}

/***/ }),

/***/ "./node_modules/hull.js/src/grid.js":
/*!******************************************!*\
  !*** ./node_modules/hull.js/src/grid.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function Grid(points, cellSize) {
    this._cells = [];
    this._cellSize = cellSize;

    points.forEach(function(point) {
        var cellXY = this.point2CellXY(point),
            x = cellXY[0],
            y = cellXY[1];
        if (this._cells[x] === undefined) {
            this._cells[x] = [];
        }
        if (this._cells[x][y] === undefined) {
            this._cells[x][y] = [];
        }
        this._cells[x][y].push(point);
    }, this);
}

Grid.prototype = {
    cellPoints: function(x, y) { // (Number, Number) -> Array
        return (this._cells[x] !== undefined && this._cells[x][y] !== undefined) ? this._cells[x][y] : [];
    },

    rangePoints: function(bbox) { // (Array) -> Array
        var tlCellXY = this.point2CellXY([bbox[0], bbox[1]]),
            brCellXY = this.point2CellXY([bbox[2], bbox[3]]),
            points = [];

        for (var x = tlCellXY[0]; x <= brCellXY[0]; x++) {
            for (var y = tlCellXY[1]; y <= brCellXY[1]; y++) {
                points = points.concat(this.cellPoints(x, y));
            }
        }

        return points;
    },

    removePoint: function(point) { // (Array) -> Array
        var cellXY = this.point2CellXY(point),
            cell = this._cells[cellXY[0]][cellXY[1]],
            pointIdxInCell;
        
        for (var i = 0; i < cell.length; i++) {
            if (cell[i][0] === point[0] && cell[i][1] === point[1]) {
                pointIdxInCell = i;
                break;
            }
        }

        cell.splice(pointIdxInCell, 1);

        return cell;
    },

    point2CellXY: function(point) { // (Array) -> Array
        var x = parseInt(point[0] / this._cellSize),
            y = parseInt(point[1] / this._cellSize);
        return [x, y];
    },

    extendBbox: function(bbox, scaleFactor) { // (Array, Number) -> Array
        return [
            bbox[0] - (scaleFactor * this._cellSize),
            bbox[1] - (scaleFactor * this._cellSize),
            bbox[2] + (scaleFactor * this._cellSize),
            bbox[3] + (scaleFactor * this._cellSize)
        ];
    }
};

function grid(points, cellSize) {
    return new Grid(points, cellSize);
}

module.exports = grid;

/***/ }),

/***/ "./node_modules/hull.js/src/hull.js":
/*!******************************************!*\
  !*** ./node_modules/hull.js/src/hull.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 (c) 2014-2016, Andrii Heonia
 Hull.js, a JavaScript library for concave hull generation by set of points.
 https://github.com/AndriiHeonia/hull
*/



var intersect = __webpack_require__(/*! ./intersect.js */ "./node_modules/hull.js/src/intersect.js");
var grid = __webpack_require__(/*! ./grid.js */ "./node_modules/hull.js/src/grid.js");
var formatUtil = __webpack_require__(/*! ./format.js */ "./node_modules/hull.js/src/format.js");
var convexHull = __webpack_require__(/*! ./convex.js */ "./node_modules/hull.js/src/convex.js");

function _filterDuplicates(pointset) {
    return pointset.filter(function(el, idx, arr) {
        var prevEl = arr[idx - 1];
        return idx === 0 || !(prevEl[0] === el[0] && prevEl[1] === el[1]);
    });
}

function _sortByX(pointset) {
    return pointset.sort(function(a, b) {
        if (a[0] == b[0]) {
            return a[1] - b[1];
        } else {
            return a[0] - b[0];
        }
    });
}

function _sqLength(a, b) {
    return Math.pow(b[0] - a[0], 2) + Math.pow(b[1] - a[1], 2);
}

function _cos(o, a, b) {
    var aShifted = [a[0] - o[0], a[1] - o[1]],
        bShifted = [b[0] - o[0], b[1] - o[1]],
        sqALen = _sqLength(o, a),
        sqBLen = _sqLength(o, b),
        dot = aShifted[0] * bShifted[0] + aShifted[1] * bShifted[1];

    return dot / Math.sqrt(sqALen * sqBLen);
}

function _intersect(segment, pointset) {
    for (var i = 0; i < pointset.length - 1; i++) {
        var seg = [pointset[i], pointset[i + 1]];
        if (segment[0][0] === seg[0][0] && segment[0][1] === seg[0][1] ||
            segment[0][0] === seg[1][0] && segment[0][1] === seg[1][1]) {
            continue;
        }
        if (intersect(segment, seg)) {
            return true;
        }
    }
    return false;
}

function _occupiedArea(pointset) {
    var minX = Infinity,
        minY = Infinity,
        maxX = -Infinity,
        maxY = -Infinity;

    for (var i = pointset.length - 1; i >= 0; i--) {
        if (pointset[i][0] < minX) {
            minX = pointset[i][0];
        }
        if (pointset[i][1] < minY) {
            minY = pointset[i][1];
        }
        if (pointset[i][0] > maxX) {
            maxX = pointset[i][0];
        }
        if (pointset[i][1] > maxY) {
            maxY = pointset[i][1];
        }
    }

    return [
        maxX - minX, // width
        maxY - minY  // height
    ];
}

function _bBoxAround(edge) {
    return [
        Math.min(edge[0][0], edge[1][0]), // left
        Math.min(edge[0][1], edge[1][1]), // top
        Math.max(edge[0][0], edge[1][0]), // right
        Math.max(edge[0][1], edge[1][1])  // bottom
    ];
}

function _midPoint(edge, innerPoints, convex) {
    var point = null,
        angle1Cos = MAX_CONCAVE_ANGLE_COS,
        angle2Cos = MAX_CONCAVE_ANGLE_COS,
        a1Cos, a2Cos;

    for (var i = 0; i < innerPoints.length; i++) {
        a1Cos = _cos(edge[0], edge[1], innerPoints[i]);
        a2Cos = _cos(edge[1], edge[0], innerPoints[i]);

        if (a1Cos > angle1Cos && a2Cos > angle2Cos &&
            !_intersect([edge[0], innerPoints[i]], convex) &&
            !_intersect([edge[1], innerPoints[i]], convex)) {

            angle1Cos = a1Cos;
            angle2Cos = a2Cos;
            point = innerPoints[i];
        }
    }

    return point;
}

function _concave(convex, maxSqEdgeLen, maxSearchArea, grid, edgeSkipList) {
    var edge,
        keyInSkipList,
        scaleFactor,
        midPoint,
        bBoxAround,
        bBoxWidth,
        bBoxHeight,
        midPointInserted = false;

    for (var i = 0; i < convex.length - 1; i++) {
        edge = [convex[i], convex[i + 1]];
        keyInSkipList = edge[0].join() + ',' + edge[1].join();

        if (_sqLength(edge[0], edge[1]) < maxSqEdgeLen ||
            edgeSkipList[keyInSkipList] === true) { continue; }

        scaleFactor = 0;
        bBoxAround = _bBoxAround(edge);
        do {
            bBoxAround = grid.extendBbox(bBoxAround, scaleFactor);
            bBoxWidth = bBoxAround[2] - bBoxAround[0];
            bBoxHeight = bBoxAround[3] - bBoxAround[1];

            midPoint = _midPoint(edge, grid.rangePoints(bBoxAround), convex);            
            scaleFactor++;
        }  while (midPoint === null && (maxSearchArea[0] > bBoxWidth || maxSearchArea[1] > bBoxHeight));

        if (bBoxWidth >= maxSearchArea[0] && bBoxHeight >= maxSearchArea[1]) {
            edgeSkipList[keyInSkipList] = true;
        }

        if (midPoint !== null) {
            convex.splice(i + 1, 0, midPoint);
            grid.removePoint(midPoint);
            midPointInserted = true;
        }
    }

    if (midPointInserted) {
        return _concave(convex, maxSqEdgeLen, maxSearchArea, grid, edgeSkipList);
    }

    return convex;
}

function hull(pointset, concavity, format) {
    var convex,
        concave,
        innerPoints,
        occupiedArea,
        maxSearchArea,
        cellSize,
        points,
        maxEdgeLen = concavity || 20;

    if (pointset.length < 4) {
        return pointset.slice();
    }

    points = _filterDuplicates(_sortByX(formatUtil.toXy(pointset, format)));

    occupiedArea = _occupiedArea(points);
    maxSearchArea = [
        occupiedArea[0] * MAX_SEARCH_BBOX_SIZE_PERCENT,
        occupiedArea[1] * MAX_SEARCH_BBOX_SIZE_PERCENT
    ];

    convex = convexHull(points);
    innerPoints = points.filter(function(pt) {
        return convex.indexOf(pt) < 0;
    });

    cellSize = Math.ceil(1 / (points.length / (occupiedArea[0] * occupiedArea[1])));

    concave = _concave(
        convex, Math.pow(maxEdgeLen, 2),
        maxSearchArea, grid(innerPoints, cellSize), {});
 
    return formatUtil.fromXy(concave, format);
}

var MAX_CONCAVE_ANGLE_COS = Math.cos(90 / (180 / Math.PI)); // angle = 90 deg
var MAX_SEARCH_BBOX_SIZE_PERCENT = 0.6;

module.exports = hull;

/***/ }),

/***/ "./node_modules/hull.js/src/intersect.js":
/*!***********************************************!*\
  !*** ./node_modules/hull.js/src/intersect.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function ccw(x1, y1, x2, y2, x3, y3) {           
    var cw = ((y3 - y1) * (x2 - x1)) - ((y2 - y1) * (x3 - x1));
    return cw > 0 ? true : cw < 0 ? false : true; // colinear
}

function intersect(seg1, seg2) {
  var x1 = seg1[0][0], y1 = seg1[0][1],
      x2 = seg1[1][0], y2 = seg1[1][1],
      x3 = seg2[0][0], y3 = seg2[0][1],
      x4 = seg2[1][0], y4 = seg2[1][1];

    return ccw(x1, y1, x3, y3, x4, y4) !== ccw(x2, y2, x3, y3, x4, y4) && ccw(x1, y1, x2, y2, x3, y3) !== ccw(x1, y1, x2, y2, x4, y4);
}

module.exports = intersect;

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/ify-loader/index.js!./node_modules/grapheme-breaker/src/GraphemeBreaker.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/ify-loader!./node_modules/grapheme-breaker/src/GraphemeBreaker.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Generated by CoffeeScript 1.8.0
(function() {
  var CR, Control, Extend, L, LF, LV, LVT, Regional_Indicator, SpacingMark, T, UnicodeTrie, V, classTrie, codePointAt, fs, shouldBreak, _ref;

  _ref = __webpack_require__(/*! ./classes.json */ "./node_modules/grapheme-breaker/src/classes.json"), CR = _ref.CR, LF = _ref.LF, Control = _ref.Control, Extend = _ref.Extend, Regional_Indicator = _ref.Regional_Indicator, SpacingMark = _ref.SpacingMark, L = _ref.L, V = _ref.V, T = _ref.T, LV = _ref.LV, LVT = _ref.LVT;

  UnicodeTrie = __webpack_require__(/*! unicode-trie */ "./node_modules/unicode-trie/index.js");

  

  classTrie = new UnicodeTrie(Buffer("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","base64"));

  codePointAt = function(str, idx) {
    var code, hi, low;
    idx = idx || 0;
    code = str.charCodeAt(idx);
    if ((0xD800 <= code && code <= 0xDBFF)) {
      hi = code;
      low = str.charCodeAt(idx + 1);
      if ((0xDC00 <= low && low <= 0xDFFF)) {
        return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
      }
      return hi;
    }
    if ((0xDC00 <= code && code <= 0xDFFF)) {
      hi = str.charCodeAt(idx - 1);
      low = code;
      if ((0xD800 <= hi && hi <= 0xDBFF)) {
        return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
      }
      return low;
    }
    return code;
  };

  shouldBreak = function(previous, current) {
    if (previous === CR && current === LF) {
      return false;
    } else if (previous === Control || previous === CR || previous === LF) {
      return true;
    } else if (current === Control || current === CR || current === LF) {
      return true;
    } else if (previous === L && (current === L || current === V || current === LV || current === LVT)) {
      return false;
    } else if ((previous === LV || previous === V) && (current === V || current === T)) {
      return false;
    } else if ((previous === LVT || previous === T) && current === T) {
      return false;
    } else if (previous === Regional_Indicator && current === Regional_Indicator) {
      return false;
    } else if (current === Extend) {
      return false;
    } else if (current === SpacingMark) {
      return false;
    }
    return true;
  };

  exports.nextBreak = function(string, index) {
    var i, next, prev, _i, _ref1, _ref2, _ref3, _ref4;
    if (index == null) {
      index = 0;
    }
    if (index < 0) {
      return 0;
    }
    if (index >= string.length - 1) {
      return string.length;
    }
    prev = classTrie.get(codePointAt(string, index));
    for (i = _i = _ref1 = index + 1, _ref2 = string.length; _i < _ref2; i = _i += 1) {
      if ((0xd800 <= (_ref3 = string.charCodeAt(i - 1)) && _ref3 <= 0xdbff) && (0xdc00 <= (_ref4 = string.charCodeAt(i)) && _ref4 <= 0xdfff)) {
        continue;
      }
      next = classTrie.get(codePointAt(string, i));
      if (shouldBreak(prev, next)) {
        return i;
      }
      prev = next;
    }
    return string.length;
  };

  exports.previousBreak = function(string, index) {
    var i, next, prev, _i, _ref1, _ref2, _ref3;
    if (index == null) {
      index = string.length;
    }
    if (index > string.length) {
      return string.length;
    }
    if (index <= 1) {
      return 0;
    }
    index--;
    next = classTrie.get(codePointAt(string, index));
    for (i = _i = _ref1 = index - 1; _i >= 0; i = _i += -1) {
      if ((0xd800 <= (_ref2 = string.charCodeAt(i)) && _ref2 <= 0xdbff) && (0xdc00 <= (_ref3 = string.charCodeAt(i + 1)) && _ref3 <= 0xdfff)) {
        continue;
      }
      prev = classTrie.get(codePointAt(string, i));
      if (shouldBreak(prev, next)) {
        return i + 1;
      }
      next = prev;
    }
    return 0;
  };

  exports["break"] = function(str) {
    var brk, index, res;
    res = [];
    index = 0;
    while ((brk = exports.nextBreak(str, index)) < str.length) {
      res.push(str.slice(index, brk));
      index = brk;
    }
    if (index < str.length) {
      res.push(str.slice(index));
    }
    return res;
  };

  exports.countBreaks = function(str) {
    var brk, count, index;
    count = 0;
    index = 0;
    while ((brk = exports.nextBreak(str, index)) < str.length) {
      index = brk;
      count++;
    }
    if (index < str.length) {
      count++;
    }
    return count;
  };

}).call(this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/ify-loader/index.js!./node_modules/linebreak/src/linebreaker.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/ify-loader!./node_modules/linebreak/src/linebreaker.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.7.1
(function() {
  var AI, AL, BA, BK, CB, CI_BRK, CJ, CP_BRK, CR, DI_BRK, ID, IN_BRK, LF, LineBreaker, NL, NS, PR_BRK, SA, SG, SP, UnicodeTrie, WJ, XX, base64, characterClasses, classTrie, data, fs, pairTable, _ref, _ref1;

  UnicodeTrie = __webpack_require__(/*! unicode-trie */ "./node_modules/unicode-trie/index.js");

  

  base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/lib/b64.js");

  _ref = __webpack_require__(/*! ./classes */ "./node_modules/linebreak/src/classes.js"), BK = _ref.BK, CR = _ref.CR, LF = _ref.LF, NL = _ref.NL, CB = _ref.CB, BA = _ref.BA, SP = _ref.SP, WJ = _ref.WJ, SP = _ref.SP, BK = _ref.BK, LF = _ref.LF, NL = _ref.NL, AI = _ref.AI, AL = _ref.AL, SA = _ref.SA, SG = _ref.SG, XX = _ref.XX, CJ = _ref.CJ, ID = _ref.ID, NS = _ref.NS, characterClasses = _ref.characterClasses;

  _ref1 = __webpack_require__(/*! ./pairs */ "./node_modules/linebreak/src/pairs.js"), DI_BRK = _ref1.DI_BRK, IN_BRK = _ref1.IN_BRK, CI_BRK = _ref1.CI_BRK, CP_BRK = _ref1.CP_BRK, PR_BRK = _ref1.PR_BRK, pairTable = _ref1.pairTable;

  data = base64.toByteArray("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");

  classTrie = new UnicodeTrie(data);

  LineBreaker = (function() {
    var Break, mapClass, mapFirst;

    function LineBreaker(string) {
      this.string = string;
      this.pos = 0;
      this.lastPos = 0;
      this.curClass = null;
      this.nextClass = null;
    }

    LineBreaker.prototype.nextCodePoint = function() {
      var code, next;
      code = this.string.charCodeAt(this.pos++);
      next = this.string.charCodeAt(this.pos);
      if ((0xd800 <= code && code <= 0xdbff) && (0xdc00 <= next && next <= 0xdfff)) {
        this.pos++;
        return ((code - 0xd800) * 0x400) + (next - 0xdc00) + 0x10000;
      }
      return code;
    };

    mapClass = function(c) {
      switch (c) {
        case AI:
          return AL;
        case SA:
        case SG:
        case XX:
          return AL;
        case CJ:
          return NS;
        default:
          return c;
      }
    };

    mapFirst = function(c) {
      switch (c) {
        case LF:
        case NL:
          return BK;
        case CB:
          return BA;
        case SP:
          return WJ;
        default:
          return c;
      }
    };

    LineBreaker.prototype.nextCharClass = function(first) {
      if (first == null) {
        first = false;
      }
      return mapClass(classTrie.get(this.nextCodePoint()));
    };

    Break = (function() {
      function Break(position, required) {
        this.position = position;
        this.required = required != null ? required : false;
      }

      return Break;

    })();

    LineBreaker.prototype.nextBreak = function() {
      var cur, lastClass, shouldBreak;
      if (this.curClass == null) {
        this.curClass = mapFirst(this.nextCharClass());
      }
      while (this.pos < this.string.length) {
        this.lastPos = this.pos;
        lastClass = this.nextClass;
        this.nextClass = this.nextCharClass();
        if (this.curClass === BK || (this.curClass === CR && this.nextClass !== LF)) {
          this.curClass = mapFirst(mapClass(this.nextClass));
          return new Break(this.lastPos, true);
        }
        cur = (function() {
          switch (this.nextClass) {
            case SP:
              return this.curClass;
            case BK:
            case LF:
            case NL:
              return BK;
            case CR:
              return CR;
            case CB:
              return BA;
          }
        }).call(this);
        if (cur != null) {
          this.curClass = cur;
          if (this.nextClass === CB) {
            return new Break(this.lastPos);
          }
          continue;
        }
        shouldBreak = false;
        switch (pairTable[this.curClass][this.nextClass]) {
          case DI_BRK:
            shouldBreak = true;
            break;
          case IN_BRK:
            shouldBreak = lastClass === SP;
            break;
          case CI_BRK:
            shouldBreak = lastClass === SP;
            if (!shouldBreak) {
              continue;
            }
            break;
          case CP_BRK:
            if (lastClass !== SP) {
              continue;
            }
        }
        this.curClass = this.nextClass;
        if (shouldBreak) {
          return new Break(this.lastPos);
        }
      }
      if (this.pos >= this.string.length) {
        if (this.lastPos < this.string.length) {
          this.lastPos = this.string.length;
          return new Break(this.string.length);
        } else {
          return null;
        }
      }
    };

    return LineBreaker;

  })();

  module.exports = LineBreaker;

}).call(this);


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/linebreak/src/classes.js":
/*!***********************************************!*\
  !*** ./node_modules/linebreak/src/classes.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.7.1
(function() {
  var AI, AL, B2, BA, BB, BK, CB, CJ, CL, CM, CP, CR, EX, GL, H2, H3, HL, HY, ID, IN, IS, JL, JT, JV, LF, NL, NS, NU, OP, PO, PR, QU, RI, SA, SG, SP, SY, WJ, XX, ZW;

  exports.OP = OP = 0;

  exports.CL = CL = 1;

  exports.CP = CP = 2;

  exports.QU = QU = 3;

  exports.GL = GL = 4;

  exports.NS = NS = 5;

  exports.EX = EX = 6;

  exports.SY = SY = 7;

  exports.IS = IS = 8;

  exports.PR = PR = 9;

  exports.PO = PO = 10;

  exports.NU = NU = 11;

  exports.AL = AL = 12;

  exports.HL = HL = 13;

  exports.ID = ID = 14;

  exports.IN = IN = 15;

  exports.HY = HY = 16;

  exports.BA = BA = 17;

  exports.BB = BB = 18;

  exports.B2 = B2 = 19;

  exports.ZW = ZW = 20;

  exports.CM = CM = 21;

  exports.WJ = WJ = 22;

  exports.H2 = H2 = 23;

  exports.H3 = H3 = 24;

  exports.JL = JL = 25;

  exports.JV = JV = 26;

  exports.JT = JT = 27;

  exports.RI = RI = 28;

  exports.AI = AI = 29;

  exports.BK = BK = 30;

  exports.CB = CB = 31;

  exports.CJ = CJ = 32;

  exports.CR = CR = 33;

  exports.LF = LF = 34;

  exports.NL = NL = 35;

  exports.SA = SA = 36;

  exports.SG = SG = 37;

  exports.SP = SP = 38;

  exports.XX = XX = 39;

}).call(this);


/***/ }),

/***/ "./node_modules/linebreak/src/pairs.js":
/*!*********************************************!*\
  !*** ./node_modules/linebreak/src/pairs.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.7.1
(function() {
  var CI_BRK, CP_BRK, DI_BRK, IN_BRK, PR_BRK;

  exports.DI_BRK = DI_BRK = 0;

  exports.IN_BRK = IN_BRK = 1;

  exports.CI_BRK = CI_BRK = 2;

  exports.CP_BRK = CP_BRK = 3;

  exports.PR_BRK = PR_BRK = 4;

  exports.pairTable = [[PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, CP_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, PR_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK]];

}).call(this);


/***/ }),

/***/ "./node_modules/mdn-data/css/at-rules.json":
/*!*************************************************!*\
  !*** ./node_modules/mdn-data/css/at-rules.json ***!
  \*************************************************/
/*! exports provided: @charset, @counter-style, @document, @font-face, @font-feature-values, @import, @keyframes, @media, @namespace, @page, @property, @supports, @viewport, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"@charset\":{\"syntax\":\"@charset \\\"<charset>\\\";\",\"groups\":[\"CSS Charsets\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/@charset\"},\"@counter-style\":{\"syntax\":\"@counter-style <counter-style-name> {\\n  [ system: <counter-system>; ] ||\\n  [ symbols: <counter-symbols>; ] ||\\n  [ additive-symbols: <additive-symbols>; ] ||\\n  [ negative: <negative-symbol>; ] ||\\n  [ prefix: <prefix>; ] ||\\n  [ suffix: <suffix>; ] ||\\n  [ range: <range>; ] ||\\n  [ pad: <padding>; ] ||\\n  [ speak-as: <speak-as>; ] ||\\n  [ fallback: <counter-style-name>; ]\\n}\",\"interfaces\":[\"CSSCounterStyleRule\"],\"groups\":[\"CSS Counter Styles\"],\"descriptors\":{\"additive-symbols\":{\"syntax\":\"[ <integer> && <symbol> ]#\",\"media\":\"all\",\"initial\":\"n/a (required)\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"standard\"},\"fallback\":{\"syntax\":\"<counter-style-name>\",\"media\":\"all\",\"initial\":\"decimal\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"negative\":{\"syntax\":\"<symbol> <symbol>?\",\"media\":\"all\",\"initial\":\"\\\"-\\\" hyphen-minus\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"standard\"},\"pad\":{\"syntax\":\"<integer> && <symbol>\",\"media\":\"all\",\"initial\":\"0 \\\"\\\"\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"prefix\":{\"syntax\":\"<symbol>\",\"media\":\"all\",\"initial\":\"\\\"\\\"\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"range\":{\"syntax\":\"[ [ <integer> | infinite ]{2} ]# | auto\",\"media\":\"all\",\"initial\":\"auto\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"standard\"},\"speak-as\":{\"syntax\":\"auto | bullets | numbers | words | spell-out | <counter-style-name>\",\"media\":\"all\",\"initial\":\"auto\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"suffix\":{\"syntax\":\"<symbol>\",\"media\":\"all\",\"initial\":\"\\\". \\\"\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"symbols\":{\"syntax\":\"<symbol>+\",\"media\":\"all\",\"initial\":\"n/a (required)\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"standard\"},\"system\":{\"syntax\":\"cyclic | numeric | alphabetic | symbolic | additive | [ fixed <integer>? ] | [ extends <counter-style-name> ]\",\"media\":\"all\",\"initial\":\"symbolic\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\"}},\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/@counter-style\"},\"@document\":{\"syntax\":\"@document [ <url> | url-prefix(<string>) | domain(<string>) | media-document(<string>) | regexp(<string>) ]# {\\n  <group-rule-body>\\n}\",\"interfaces\":[\"CSSGroupingRule\",\"CSSConditionRule\"],\"groups\":[\"CSS Conditional Rules\"],\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/@document\"},\"@font-face\":{\"syntax\":\"@font-face {\\n  [ font-family: <family-name>; ] ||\\n  [ src: <src>; ] ||\\n  [ unicode-range: <unicode-range>; ] ||\\n  [ font-variant: <font-variant>; ] ||\\n  [ font-feature-settings: <font-feature-settings>; ] ||\\n  [ font-variation-settings: <font-variation-settings>; ] ||\\n  [ font-stretch: <font-stretch>; ] ||\\n  [ font-weight: <font-weight>; ] ||\\n  [ font-style: <font-style>; ]\\n}\",\"interfaces\":[\"CSSFontFaceRule\"],\"groups\":[\"CSS Fonts\"],\"descriptors\":{\"font-display\":{\"syntax\":\"[ auto | block | swap | fallback | optional ]\",\"media\":\"visual\",\"percentages\":\"no\",\"initial\":\"auto\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"experimental\"},\"font-family\":{\"syntax\":\"<family-name>\",\"media\":\"all\",\"initial\":\"n/a (required)\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"font-feature-settings\":{\"syntax\":\"normal | <feature-tag-value>#\",\"media\":\"all\",\"initial\":\"normal\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"standard\"},\"font-variation-settings\":{\"syntax\":\"normal | [ <string> <number> ]#\",\"media\":\"all\",\"initial\":\"normal\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"standard\"},\"font-stretch\":{\"syntax\":\"<font-stretch-absolute>{1,2}\",\"media\":\"all\",\"initial\":\"normal\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"font-style\":{\"syntax\":\"normal | italic | oblique <angle>{0,2}\",\"media\":\"all\",\"initial\":\"normal\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"font-weight\":{\"syntax\":\"<font-weight-absolute>{1,2}\",\"media\":\"all\",\"initial\":\"normal\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"font-variant\":{\"syntax\":\"normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic(<feature-value-name>) || historical-forms || styleset(<feature-value-name>#) || character-variant(<feature-value-name>#) || swash(<feature-value-name>) || ornaments(<feature-value-name>) || annotation(<feature-value-name>) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]\",\"media\":\"all\",\"initial\":\"normal\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"standard\"},\"src\":{\"syntax\":\"[ <url> [ format( <string># ) ]? | local( <family-name> ) ]#\",\"media\":\"all\",\"initial\":\"n/a (required)\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"standard\"},\"unicode-range\":{\"syntax\":\"<unicode-range>#\",\"media\":\"all\",\"initial\":\"U+0-10FFFF\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"standard\"}},\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/@font-face\"},\"@font-feature-values\":{\"syntax\":\"@font-feature-values <family-name># {\\n  <feature-value-block-list>\\n}\",\"interfaces\":[\"CSSFontFeatureValuesRule\"],\"groups\":[\"CSS Fonts\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/@font-feature-values\"},\"@import\":{\"syntax\":\"@import [ <string> | <url> ] [ <media-query-list> ]?;\",\"groups\":[\"Media Queries\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/@import\"},\"@keyframes\":{\"syntax\":\"@keyframes <keyframes-name> {\\n  <keyframe-block-list>\\n}\",\"interfaces\":[\"CSSKeyframeRule\",\"CSSKeyframesRule\"],\"groups\":[\"CSS Animations\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/@keyframes\"},\"@media\":{\"syntax\":\"@media <media-query-list> {\\n  <group-rule-body>\\n}\",\"interfaces\":[\"CSSGroupingRule\",\"CSSConditionRule\",\"CSSMediaRule\",\"CSSCustomMediaRule\"],\"groups\":[\"CSS Conditional Rules\",\"Media Queries\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/@media\"},\"@namespace\":{\"syntax\":\"@namespace <namespace-prefix>? [ <string> | <url> ];\",\"groups\":[\"CSS Namespaces\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/@namespace\"},\"@page\":{\"syntax\":\"@page <page-selector-list> {\\n  <page-body>\\n}\",\"interfaces\":[\"CSSPageRule\"],\"groups\":[\"CSS Pages\"],\"descriptors\":{\"bleed\":{\"syntax\":\"auto | <length>\",\"media\":[\"visual\",\"paged\"],\"initial\":\"auto\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"marks\":{\"syntax\":\"none | [ crop || cross ]\",\"media\":[\"visual\",\"paged\"],\"initial\":\"none\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"standard\"},\"size\":{\"syntax\":\"<length>{1,2} | auto | [ <page-size> || [ portrait | landscape ] ]\",\"media\":[\"visual\",\"paged\"],\"initial\":\"auto\",\"percentages\":\"no\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"orderOfAppearance\",\"status\":\"standard\"}},\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/@page\"},\"@property\":{\"syntax\":\"@property <custom-property-name> {\\n  <declaration-list>\\n}\",\"interfaces\":[\"CSS\",\"CSSPropertyRule\"],\"groups\":[\"CSS Houdini\"],\"descriptors\":{\"syntax\":{\"syntax\":\"<string>\",\"media\":\"all\",\"percentages\":\"no\",\"initial\":\"n/a (required)\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"experimental\"},\"inherits\":{\"syntax\":\"true | false\",\"media\":\"all\",\"percentages\":\"no\",\"initial\":\"auto\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"experimental\"},\"initial-value\":{\"syntax\":\"<string>\",\"media\":\"all\",\"initial\":\"n/a (required)\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"experimental\"}},\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/@property\"},\"@supports\":{\"syntax\":\"@supports <supports-condition> {\\n  <group-rule-body>\\n}\",\"interfaces\":[\"CSSGroupingRule\",\"CSSConditionRule\",\"CSSSupportsRule\"],\"groups\":[\"CSS Conditional Rules\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/@supports\"},\"@viewport\":{\"syntax\":\"@viewport {\\n  <group-rule-body>\\n}\",\"interfaces\":[\"CSSViewportRule\"],\"groups\":[\"CSS Device Adaptation\"],\"descriptors\":{\"height\":{\"syntax\":\"<viewport-length>{1,2}\",\"media\":[\"visual\",\"continuous\"],\"initial\":[\"min-height\",\"max-height\"],\"percentages\":[\"min-height\",\"max-height\"],\"computed\":[\"min-height\",\"max-height\"],\"order\":\"orderOfAppearance\",\"status\":\"standard\"},\"max-height\":{\"syntax\":\"<viewport-length>\",\"media\":[\"visual\",\"continuous\"],\"initial\":\"auto\",\"percentages\":\"referToHeightOfInitialViewport\",\"computed\":\"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"max-width\":{\"syntax\":\"<viewport-length>\",\"media\":[\"visual\",\"continuous\"],\"initial\":\"auto\",\"percentages\":\"referToWidthOfInitialViewport\",\"computed\":\"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"max-zoom\":{\"syntax\":\"auto | <number> | <percentage>\",\"media\":[\"visual\",\"continuous\"],\"initial\":\"auto\",\"percentages\":\"the zoom factor itself\",\"computed\":\"autoNonNegativeOrPercentage\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"min-height\":{\"syntax\":\"<viewport-length>\",\"media\":[\"visual\",\"continuous\"],\"initial\":\"auto\",\"percentages\":\"referToHeightOfInitialViewport\",\"computed\":\"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"min-width\":{\"syntax\":\"<viewport-length>\",\"media\":[\"visual\",\"continuous\"],\"initial\":\"auto\",\"percentages\":\"referToWidthOfInitialViewport\",\"computed\":\"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"min-zoom\":{\"syntax\":\"auto | <number> | <percentage>\",\"media\":[\"visual\",\"continuous\"],\"initial\":\"auto\",\"percentages\":\"the zoom factor itself\",\"computed\":\"autoNonNegativeOrPercentage\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"orientation\":{\"syntax\":\"auto | portrait | landscape\",\"media\":[\"visual\",\"continuous\"],\"initial\":\"auto\",\"percentages\":\"referToSizeOfBoundingBox\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"user-zoom\":{\"syntax\":\"zoom | fixed\",\"media\":[\"visual\",\"continuous\"],\"initial\":\"zoom\",\"percentages\":\"referToSizeOfBoundingBox\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"viewport-fit\":{\"syntax\":\"auto | contain | cover\",\"media\":[\"visual\",\"continuous\"],\"initial\":\"auto\",\"percentages\":\"no\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\"},\"width\":{\"syntax\":\"<viewport-length>{1,2}\",\"media\":[\"visual\",\"continuous\"],\"initial\":[\"min-width\",\"max-width\"],\"percentages\":[\"min-width\",\"max-width\"],\"computed\":[\"min-width\",\"max-width\"],\"order\":\"orderOfAppearance\",\"status\":\"standard\"},\"zoom\":{\"syntax\":\"auto | <number> | <percentage>\",\"media\":[\"visual\",\"continuous\"],\"initial\":\"auto\",\"percentages\":\"the zoom factor itself\",\"computed\":\"autoNonNegativeOrPercentage\",\"order\":\"uniqueOrder\",\"status\":\"standard\"}},\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/@viewport\"}}");

/***/ }),

/***/ "./node_modules/mdn-data/css/properties.json":
/*!***************************************************!*\
  !*** ./node_modules/mdn-data/css/properties.json ***!
  \***************************************************/
/*! exports provided: --*, -ms-accelerator, -ms-block-progression, -ms-content-zoom-chaining, -ms-content-zooming, -ms-content-zoom-limit, -ms-content-zoom-limit-max, -ms-content-zoom-limit-min, -ms-content-zoom-snap, -ms-content-zoom-snap-points, -ms-content-zoom-snap-type, -ms-filter, -ms-flow-from, -ms-flow-into, -ms-grid-columns, -ms-grid-rows, -ms-high-contrast-adjust, -ms-hyphenate-limit-chars, -ms-hyphenate-limit-lines, -ms-hyphenate-limit-zone, -ms-ime-align, -ms-overflow-style, -ms-scrollbar-3dlight-color, -ms-scrollbar-arrow-color, -ms-scrollbar-base-color, -ms-scrollbar-darkshadow-color, -ms-scrollbar-face-color, -ms-scrollbar-highlight-color, -ms-scrollbar-shadow-color, -ms-scrollbar-track-color, -ms-scroll-chaining, -ms-scroll-limit, -ms-scroll-limit-x-max, -ms-scroll-limit-x-min, -ms-scroll-limit-y-max, -ms-scroll-limit-y-min, -ms-scroll-rails, -ms-scroll-snap-points-x, -ms-scroll-snap-points-y, -ms-scroll-snap-type, -ms-scroll-snap-x, -ms-scroll-snap-y, -ms-scroll-translation, -ms-text-autospace, -ms-touch-select, -ms-user-select, -ms-wrap-flow, -ms-wrap-margin, -ms-wrap-through, -moz-appearance, -moz-binding, -moz-border-bottom-colors, -moz-border-left-colors, -moz-border-right-colors, -moz-border-top-colors, -moz-context-properties, -moz-float-edge, -moz-force-broken-image-icon, -moz-image-region, -moz-orient, -moz-outline-radius, -moz-outline-radius-bottomleft, -moz-outline-radius-bottomright, -moz-outline-radius-topleft, -moz-outline-radius-topright, -moz-stack-sizing, -moz-text-blink, -moz-user-focus, -moz-user-input, -moz-user-modify, -moz-window-dragging, -moz-window-shadow, -webkit-appearance, -webkit-border-before, -webkit-border-before-color, -webkit-border-before-style, -webkit-border-before-width, -webkit-box-reflect, -webkit-line-clamp, -webkit-mask, -webkit-mask-attachment, -webkit-mask-clip, -webkit-mask-composite, -webkit-mask-image, -webkit-mask-origin, -webkit-mask-position, -webkit-mask-position-x, -webkit-mask-position-y, -webkit-mask-repeat, -webkit-mask-repeat-x, -webkit-mask-repeat-y, -webkit-mask-size, -webkit-overflow-scrolling, -webkit-tap-highlight-color, -webkit-text-fill-color, -webkit-text-stroke, -webkit-text-stroke-color, -webkit-text-stroke-width, -webkit-touch-callout, -webkit-user-modify, align-content, align-items, align-self, align-tracks, all, animation, animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, appearance, aspect-ratio, azimuth, backdrop-filter, backface-visibility, background, background-attachment, background-blend-mode, background-clip, background-color, background-image, background-origin, background-position, background-position-x, background-position-y, background-repeat, background-size, block-overflow, block-size, border, border-block, border-block-color, border-block-style, border-block-width, border-block-end, border-block-end-color, border-block-end-style, border-block-end-width, border-block-start, border-block-start-color, border-block-start-style, border-block-start-width, border-bottom, border-bottom-color, border-bottom-left-radius, border-bottom-right-radius, border-bottom-style, border-bottom-width, border-collapse, border-color, border-end-end-radius, border-end-start-radius, border-image, border-image-outset, border-image-repeat, border-image-slice, border-image-source, border-image-width, border-inline, border-inline-end, border-inline-color, border-inline-style, border-inline-width, border-inline-end-color, border-inline-end-style, border-inline-end-width, border-inline-start, border-inline-start-color, border-inline-start-style, border-inline-start-width, border-left, border-left-color, border-left-style, border-left-width, border-radius, border-right, border-right-color, border-right-style, border-right-width, border-spacing, border-start-end-radius, border-start-start-radius, border-style, border-top, border-top-color, border-top-left-radius, border-top-right-radius, border-top-style, border-top-width, border-width, bottom, box-align, box-decoration-break, box-direction, box-flex, box-flex-group, box-lines, box-ordinal-group, box-orient, box-pack, box-shadow, box-sizing, break-after, break-before, break-inside, caption-side, caret-color, clear, clip, clip-path, color, color-adjust, column-count, column-fill, column-gap, column-rule, column-rule-color, column-rule-style, column-rule-width, column-span, column-width, columns, contain, content, counter-increment, counter-reset, counter-set, cursor, direction, display, empty-cells, filter, flex, flex-basis, flex-direction, flex-flow, flex-grow, flex-shrink, flex-wrap, float, font, font-family, font-feature-settings, font-kerning, font-language-override, font-optical-sizing, font-variation-settings, font-size, font-size-adjust, font-smooth, font-stretch, font-style, font-synthesis, font-variant, font-variant-alternates, font-variant-caps, font-variant-east-asian, font-variant-ligatures, font-variant-numeric, font-variant-position, font-weight, gap, grid, grid-area, grid-auto-columns, grid-auto-flow, grid-auto-rows, grid-column, grid-column-end, grid-column-gap, grid-column-start, grid-gap, grid-row, grid-row-end, grid-row-gap, grid-row-start, grid-template, grid-template-areas, grid-template-columns, grid-template-rows, hanging-punctuation, height, hyphens, image-orientation, image-rendering, image-resolution, ime-mode, initial-letter, initial-letter-align, inline-size, inset, inset-block, inset-block-end, inset-block-start, inset-inline, inset-inline-end, inset-inline-start, isolation, justify-content, justify-items, justify-self, justify-tracks, left, letter-spacing, line-break, line-clamp, line-height, line-height-step, list-style, list-style-image, list-style-position, list-style-type, margin, margin-block, margin-block-end, margin-block-start, margin-bottom, margin-inline, margin-inline-end, margin-inline-start, margin-left, margin-right, margin-top, margin-trim, mask, mask-border, mask-border-mode, mask-border-outset, mask-border-repeat, mask-border-slice, mask-border-source, mask-border-width, mask-clip, mask-composite, mask-image, mask-mode, mask-origin, mask-position, mask-repeat, mask-size, mask-type, masonry-auto-flow, math-style, max-block-size, max-height, max-inline-size, max-lines, max-width, min-block-size, min-height, min-inline-size, min-width, mix-blend-mode, object-fit, object-position, offset, offset-anchor, offset-distance, offset-path, offset-position, offset-rotate, opacity, order, orphans, outline, outline-color, outline-offset, outline-style, outline-width, overflow, overflow-anchor, overflow-block, overflow-clip-box, overflow-inline, overflow-wrap, overflow-x, overflow-y, overscroll-behavior, overscroll-behavior-block, overscroll-behavior-inline, overscroll-behavior-x, overscroll-behavior-y, padding, padding-block, padding-block-end, padding-block-start, padding-bottom, padding-inline, padding-inline-end, padding-inline-start, padding-left, padding-right, padding-top, page-break-after, page-break-before, page-break-inside, paint-order, perspective, perspective-origin, place-content, place-items, place-self, pointer-events, position, quotes, resize, right, rotate, row-gap, ruby-align, ruby-merge, ruby-position, scale, scrollbar-color, scrollbar-gutter, scrollbar-width, scroll-behavior, scroll-margin, scroll-margin-block, scroll-margin-block-start, scroll-margin-block-end, scroll-margin-bottom, scroll-margin-inline, scroll-margin-inline-start, scroll-margin-inline-end, scroll-margin-left, scroll-margin-right, scroll-margin-top, scroll-padding, scroll-padding-block, scroll-padding-block-start, scroll-padding-block-end, scroll-padding-bottom, scroll-padding-inline, scroll-padding-inline-start, scroll-padding-inline-end, scroll-padding-left, scroll-padding-right, scroll-padding-top, scroll-snap-align, scroll-snap-coordinate, scroll-snap-destination, scroll-snap-points-x, scroll-snap-points-y, scroll-snap-stop, scroll-snap-type, scroll-snap-type-x, scroll-snap-type-y, shape-image-threshold, shape-margin, shape-outside, tab-size, table-layout, text-align, text-align-last, text-combine-upright, text-decoration, text-decoration-color, text-decoration-line, text-decoration-skip, text-decoration-skip-ink, text-decoration-style, text-decoration-thickness, text-emphasis, text-emphasis-color, text-emphasis-position, text-emphasis-style, text-indent, text-justify, text-orientation, text-overflow, text-rendering, text-shadow, text-size-adjust, text-transform, text-underline-offset, text-underline-position, top, touch-action, transform, transform-box, transform-origin, transform-style, transition, transition-delay, transition-duration, transition-property, transition-timing-function, translate, unicode-bidi, user-select, vertical-align, visibility, white-space, widows, width, will-change, word-break, word-spacing, word-wrap, writing-mode, z-index, zoom, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"--*\":{\"syntax\":\"<declaration-value>\",\"media\":\"all\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Variables\"],\"initial\":\"seeProse\",\"appliesto\":\"allElements\",\"computed\":\"asSpecifiedWithVarsSubstituted\",\"order\":\"perGrammar\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/--*\"},\"-ms-accelerator\":{\"syntax\":\"false | true\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"false\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-accelerator\"},\"-ms-block-progression\":{\"syntax\":\"tb | rl | bt | lr\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"tb\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-block-progression\"},\"-ms-content-zoom-chaining\":{\"syntax\":\"none | chained\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"none\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-content-zoom-chaining\"},\"-ms-content-zooming\":{\"syntax\":\"none | zoom\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"zoomForTheTopLevelNoneForTheRest\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-content-zooming\"},\"-ms-content-zoom-limit\":{\"syntax\":\"<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":[\"-ms-content-zoom-limit-max\",\"-ms-content-zoom-limit-min\"],\"groups\":[\"Microsoft Extensions\"],\"initial\":[\"-ms-content-zoom-limit-max\",\"-ms-content-zoom-limit-min\"],\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":[\"-ms-content-zoom-limit-max\",\"-ms-content-zoom-limit-min\"],\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-content-zoom-limit\"},\"-ms-content-zoom-limit-max\":{\"syntax\":\"<percentage>\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"maxZoomFactor\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"400%\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-content-zoom-limit-max\"},\"-ms-content-zoom-limit-min\":{\"syntax\":\"<percentage>\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"minZoomFactor\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"100%\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-content-zoom-limit-min\"},\"-ms-content-zoom-snap\":{\"syntax\":\"<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":[\"-ms-content-zoom-snap-type\",\"-ms-content-zoom-snap-points\"],\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":[\"-ms-content-zoom-snap-type\",\"-ms-content-zoom-snap-points\"],\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-content-zoom-snap\"},\"-ms-content-zoom-snap-points\":{\"syntax\":\"snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"snapInterval(0%, 100%)\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-content-zoom-snap-points\"},\"-ms-content-zoom-snap-type\":{\"syntax\":\"none | proximity | mandatory\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"none\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-content-zoom-snap-type\"},\"-ms-filter\":{\"syntax\":\"<string>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"\\\"\\\"\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-filter\"},\"-ms-flow-from\":{\"syntax\":\"[ none | <custom-ident> ]#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"none\",\"appliesto\":\"nonReplacedElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-flow-from\"},\"-ms-flow-into\":{\"syntax\":\"[ none | <custom-ident> ]#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"none\",\"appliesto\":\"iframeElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-flow-into\"},\"-ms-grid-columns\":{\"syntax\":\"none | <track-list> | <auto-track-list>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"simpleListOfLpcDifferenceLpc\",\"percentages\":\"referToDimensionOfContentArea\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"none\",\"appliesto\":\"gridContainers\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-grid-columns\"},\"-ms-grid-rows\":{\"syntax\":\"none | <track-list> | <auto-track-list>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"simpleListOfLpcDifferenceLpc\",\"percentages\":\"referToDimensionOfContentArea\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"none\",\"appliesto\":\"gridContainers\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-grid-rows\"},\"-ms-high-contrast-adjust\":{\"syntax\":\"auto | none\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-high-contrast-adjust\"},\"-ms-hyphenate-limit-chars\":{\"syntax\":\"auto | <integer>{1,3}\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-hyphenate-limit-chars\"},\"-ms-hyphenate-limit-lines\":{\"syntax\":\"no-limit | <integer>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"no-limit\",\"appliesto\":\"blockContainerElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-hyphenate-limit-lines\"},\"-ms-hyphenate-limit-zone\":{\"syntax\":\"<percentage> | <length>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"referToLineBoxWidth\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"0\",\"appliesto\":\"blockContainerElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-hyphenate-limit-zone\"},\"-ms-ime-align\":{\"syntax\":\"auto | after\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-ime-align\"},\"-ms-overflow-style\":{\"syntax\":\"auto | none | scrollbar | -ms-autohiding-scrollbar\",\"media\":\"interactive\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"auto\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-overflow-style\"},\"-ms-scrollbar-3dlight-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"dependsOnUserAgent\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-3dlight-color\"},\"-ms-scrollbar-arrow-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"ButtonText\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-arrow-color\"},\"-ms-scrollbar-base-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"dependsOnUserAgent\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-base-color\"},\"-ms-scrollbar-darkshadow-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"ThreeDDarkShadow\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-darkshadow-color\"},\"-ms-scrollbar-face-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"ThreeDFace\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-face-color\"},\"-ms-scrollbar-highlight-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"ThreeDHighlight\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-highlight-color\"},\"-ms-scrollbar-shadow-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"ThreeDDarkShadow\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-shadow-color\"},\"-ms-scrollbar-track-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"Scrollbar\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-track-color\"},\"-ms-scroll-chaining\":{\"syntax\":\"chained | none\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"chained\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-chaining\"},\"-ms-scroll-limit\":{\"syntax\":\"<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":[\"-ms-scroll-limit-x-min\",\"-ms-scroll-limit-y-min\",\"-ms-scroll-limit-x-max\",\"-ms-scroll-limit-y-max\"],\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":[\"-ms-scroll-limit-x-min\",\"-ms-scroll-limit-y-min\",\"-ms-scroll-limit-x-max\",\"-ms-scroll-limit-y-max\"],\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-limit\"},\"-ms-scroll-limit-x-max\":{\"syntax\":\"auto | <length>\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"auto\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-limit-x-max\"},\"-ms-scroll-limit-x-min\":{\"syntax\":\"<length>\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"0\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-limit-x-min\"},\"-ms-scroll-limit-y-max\":{\"syntax\":\"auto | <length>\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"auto\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-limit-y-max\"},\"-ms-scroll-limit-y-min\":{\"syntax\":\"<length>\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"0\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-limit-y-min\"},\"-ms-scroll-rails\":{\"syntax\":\"none | railed\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"railed\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-rails\"},\"-ms-scroll-snap-points-x\":{\"syntax\":\"snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"snapInterval(0px, 100%)\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-snap-points-x\"},\"-ms-scroll-snap-points-y\":{\"syntax\":\"snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"snapInterval(0px, 100%)\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-snap-points-y\"},\"-ms-scroll-snap-type\":{\"syntax\":\"none | proximity | mandatory\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"none\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-snap-type\"},\"-ms-scroll-snap-x\":{\"syntax\":\"<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":[\"-ms-scroll-snap-type\",\"-ms-scroll-snap-points-x\"],\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":[\"-ms-scroll-snap-type\",\"-ms-scroll-snap-points-x\"],\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-snap-x\"},\"-ms-scroll-snap-y\":{\"syntax\":\"<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":[\"-ms-scroll-snap-type\",\"-ms-scroll-snap-points-y\"],\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":[\"-ms-scroll-snap-type\",\"-ms-scroll-snap-points-y\"],\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-snap-y\"},\"-ms-scroll-translation\":{\"syntax\":\"none | vertical-to-horizontal\",\"media\":\"interactive\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-translation\"},\"-ms-text-autospace\":{\"syntax\":\"none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-text-autospace\"},\"-ms-touch-select\":{\"syntax\":\"grippers | none\",\"media\":\"interactive\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"grippers\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-touch-select\"},\"-ms-user-select\":{\"syntax\":\"none | element | text\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"text\",\"appliesto\":\"nonReplacedElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-user-select\"},\"-ms-wrap-flow\":{\"syntax\":\"auto | both | start | end | maximum | clear\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"auto\",\"appliesto\":\"blockLevelElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-wrap-flow\"},\"-ms-wrap-margin\":{\"syntax\":\"<length>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"0\",\"appliesto\":\"exclusionElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-wrap-margin\"},\"-ms-wrap-through\":{\"syntax\":\"wrap | none\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"wrap\",\"appliesto\":\"blockLevelElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-ms-wrap-through\"},\"-moz-appearance\":{\"syntax\":\"none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\",\"WebKit Extensions\"],\"initial\":\"noneButOverriddenInUserAgentCSS\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/appearance\"},\"-moz-binding\":{\"syntax\":\"<url> | none\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"none\",\"appliesto\":\"allElementsExceptGeneratedContentOrPseudoElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-binding\"},\"-moz-border-bottom-colors\":{\"syntax\":\"<color>+ | none\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-border-bottom-colors\"},\"-moz-border-left-colors\":{\"syntax\":\"<color>+ | none\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-border-left-colors\"},\"-moz-border-right-colors\":{\"syntax\":\"<color>+ | none\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-border-right-colors\"},\"-moz-border-top-colors\":{\"syntax\":\"<color>+ | none\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-border-top-colors\"},\"-moz-context-properties\":{\"syntax\":\"none | [ fill | fill-opacity | stroke | stroke-opacity ]#\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"none\",\"appliesto\":\"allElementsThatCanReferenceImages\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-context-properties\"},\"-moz-float-edge\":{\"syntax\":\"border-box | content-box | margin-box | padding-box\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"content-box\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-float-edge\"},\"-moz-force-broken-image-icon\":{\"syntax\":\"<integer [0,1]>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"0\",\"appliesto\":\"images\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-force-broken-image-icon\"},\"-moz-image-region\":{\"syntax\":\"<shape> | auto\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"auto\",\"appliesto\":\"xulImageElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-image-region\"},\"-moz-orient\":{\"syntax\":\"inline | block | horizontal | vertical\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"inline\",\"appliesto\":\"anyElementEffectOnProgressAndMeter\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-orient\"},\"-moz-outline-radius\":{\"syntax\":\"<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"-moz-outline-radius-topleft\",\"-moz-outline-radius-topright\",\"-moz-outline-radius-bottomright\",\"-moz-outline-radius-bottomleft\"],\"percentages\":[\"-moz-outline-radius-topleft\",\"-moz-outline-radius-topright\",\"-moz-outline-radius-bottomright\",\"-moz-outline-radius-bottomleft\"],\"groups\":[\"Mozilla Extensions\"],\"initial\":[\"-moz-outline-radius-topleft\",\"-moz-outline-radius-topright\",\"-moz-outline-radius-bottomright\",\"-moz-outline-radius-bottomleft\"],\"appliesto\":\"allElements\",\"computed\":[\"-moz-outline-radius-topleft\",\"-moz-outline-radius-topright\",\"-moz-outline-radius-bottomright\",\"-moz-outline-radius-bottomleft\"],\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius\"},\"-moz-outline-radius-bottomleft\":{\"syntax\":\"<outline-radius>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToDimensionOfBorderBox\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius-bottomleft\"},\"-moz-outline-radius-bottomright\":{\"syntax\":\"<outline-radius>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToDimensionOfBorderBox\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius-bottomright\"},\"-moz-outline-radius-topleft\":{\"syntax\":\"<outline-radius>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToDimensionOfBorderBox\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius-topleft\"},\"-moz-outline-radius-topright\":{\"syntax\":\"<outline-radius>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToDimensionOfBorderBox\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius-topright\"},\"-moz-stack-sizing\":{\"syntax\":\"ignore | stretch-to-fit\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"stretch-to-fit\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-stack-sizing\"},\"-moz-text-blink\":{\"syntax\":\"none | blink\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-text-blink\"},\"-moz-user-focus\":{\"syntax\":\"ignore | normal | select-after | select-before | select-menu | select-same | select-all | none\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-user-focus\"},\"-moz-user-input\":{\"syntax\":\"auto | none | enabled | disabled\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-user-input\"},\"-moz-user-modify\":{\"syntax\":\"read-only | read-write | write-only\",\"media\":\"interactive\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"read-only\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-user-modify\"},\"-moz-window-dragging\":{\"syntax\":\"drag | no-drag\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"drag\",\"appliesto\":\"allElementsCreatingNativeWindows\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-window-dragging\"},\"-moz-window-shadow\":{\"syntax\":\"default | menu | tooltip | sheet | none\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"default\",\"appliesto\":\"allElementsCreatingNativeWindows\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-moz-window-shadow\"},\"-webkit-appearance\":{\"syntax\":\"none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"noneButOverriddenInUserAgentCSS\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/appearance\"},\"-webkit-border-before\":{\"syntax\":\"<'border-width'> || <'border-style'> || <'color'>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":[\"-webkit-border-before-width\"],\"groups\":[\"WebKit Extensions\"],\"initial\":[\"border-width\",\"border-style\",\"color\"],\"appliesto\":\"allElements\",\"computed\":[\"border-width\",\"border-style\",\"color\"],\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-border-before\"},\"-webkit-border-before-color\":{\"syntax\":\"<'color'>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\"},\"-webkit-border-before-style\":{\"syntax\":\"<'border-style'>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\"},\"-webkit-border-before-width\":{\"syntax\":\"<'border-width'>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"medium\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthZeroIfBorderStyleNoneOrHidden\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\"},\"-webkit-box-reflect\":{\"syntax\":\"[ above | below | right | left ]? <length>? <image>?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-box-reflect\"},\"-webkit-line-clamp\":{\"syntax\":\"none | <integer>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\",\"CSS Overflow\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-line-clamp\"},\"-webkit-mask\":{\"syntax\":\"[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":[\"-webkit-mask-image\",\"-webkit-mask-repeat\",\"-webkit-mask-attachment\",\"-webkit-mask-position\",\"-webkit-mask-origin\",\"-webkit-mask-clip\"],\"appliesto\":\"allElements\",\"computed\":[\"-webkit-mask-image\",\"-webkit-mask-repeat\",\"-webkit-mask-attachment\",\"-webkit-mask-position\",\"-webkit-mask-origin\",\"-webkit-mask-clip\"],\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask\"},\"-webkit-mask-attachment\":{\"syntax\":\"<attachment>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"scroll\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-attachment\"},\"-webkit-mask-clip\":{\"syntax\":\"[ <box> | border | padding | content | text ]#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"border\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-clip\"},\"-webkit-mask-composite\":{\"syntax\":\"<composite-style>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"source-over\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-composite\"},\"-webkit-mask-image\":{\"syntax\":\"<mask-reference>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"absoluteURIOrNone\",\"order\":\"orderOfAppearance\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-image\"},\"-webkit-mask-origin\":{\"syntax\":\"[ <box> | border | padding | content ]#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"padding\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-origin\"},\"-webkit-mask-position\":{\"syntax\":\"<position>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"referToSizeOfElement\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"0% 0%\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthOrPercentage\",\"order\":\"orderOfAppearance\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-position\"},\"-webkit-mask-position-x\":{\"syntax\":\"[ <length-percentage> | left | center | right ]#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"referToSizeOfElement\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"0%\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthOrPercentage\",\"order\":\"orderOfAppearance\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-position-x\"},\"-webkit-mask-position-y\":{\"syntax\":\"[ <length-percentage> | top | center | bottom ]#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"referToSizeOfElement\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"0%\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthOrPercentage\",\"order\":\"orderOfAppearance\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-position-y\"},\"-webkit-mask-repeat\":{\"syntax\":\"<repeat-style>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"repeat\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-repeat\"},\"-webkit-mask-repeat-x\":{\"syntax\":\"repeat | no-repeat | space | round\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"repeat\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-repeat-x\"},\"-webkit-mask-repeat-y\":{\"syntax\":\"repeat | no-repeat | space | round\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"repeat\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthOrPercentage\",\"order\":\"orderOfAppearance\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-repeat-y\"},\"-webkit-mask-size\":{\"syntax\":\"<bg-size>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"relativeToBackgroundPositioningArea\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"auto auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-size\"},\"-webkit-overflow-scrolling\":{\"syntax\":\"auto | touch\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"auto\",\"appliesto\":\"scrollingBoxes\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-overflow-scrolling\"},\"-webkit-tap-highlight-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"black\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-tap-highlight-color\"},\"-webkit-text-fill-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-text-fill-color\"},\"-webkit-text-stroke\":{\"syntax\":\"<length> || <color>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":[\"-webkit-text-stroke-width\",\"-webkit-text-stroke-color\"],\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":[\"-webkit-text-stroke-width\",\"-webkit-text-stroke-color\"],\"appliesto\":\"allElements\",\"computed\":[\"-webkit-text-stroke-width\",\"-webkit-text-stroke-color\"],\"order\":\"canonicalOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke\"},\"-webkit-text-stroke-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-color\"},\"-webkit-text-stroke-width\":{\"syntax\":\"<length>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLength\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-width\"},\"-webkit-touch-callout\":{\"syntax\":\"default | none\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"default\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/-webkit-touch-callout\"},\"-webkit-user-modify\":{\"syntax\":\"read-only | read-write | read-write-plaintext-only\",\"media\":\"interactive\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"WebKit Extensions\"],\"initial\":\"read-only\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\"},\"align-content\":{\"syntax\":\"normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Alignment\"],\"initial\":\"normal\",\"appliesto\":\"multilineFlexContainers\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/align-content\"},\"align-items\":{\"syntax\":\"normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Alignment\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/align-items\"},\"align-self\":{\"syntax\":\"auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Alignment\"],\"initial\":\"auto\",\"appliesto\":\"flexItemsGridItemsAndAbsolutelyPositionedBoxes\",\"computed\":\"autoOnAbsolutelyPositionedElementsValueOfAlignItemsOnParent\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/align-self\"},\"align-tracks\":{\"syntax\":\"[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"normal\",\"appliesto\":\"gridContainersWithMasonryLayoutInTheirBlockAxis\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/align-tracks\"},\"all\":{\"syntax\":\"initial | inherit | unset | revert\",\"media\":\"noPracticalMedia\",\"inherited\":false,\"animationType\":\"eachOfShorthandPropertiesExceptUnicodeBiDiAndDirection\",\"percentages\":\"no\",\"groups\":[\"CSS Miscellaneous\"],\"initial\":\"noPracticalInitialValue\",\"appliesto\":\"allElements\",\"computed\":\"asSpecifiedAppliesToEachProperty\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/all\"},\"animation\":{\"syntax\":\"<single-animation>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Animations\"],\"initial\":[\"animation-name\",\"animation-duration\",\"animation-timing-function\",\"animation-delay\",\"animation-iteration-count\",\"animation-direction\",\"animation-fill-mode\",\"animation-play-state\"],\"appliesto\":\"allElementsAndPseudos\",\"computed\":[\"animation-name\",\"animation-duration\",\"animation-timing-function\",\"animation-delay\",\"animation-direction\",\"animation-iteration-count\",\"animation-fill-mode\",\"animation-play-state\"],\"order\":\"orderOfAppearance\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/animation\"},\"animation-delay\":{\"syntax\":\"<time>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Animations\"],\"initial\":\"0s\",\"appliesto\":\"allElementsAndPseudos\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/animation-delay\"},\"animation-direction\":{\"syntax\":\"<single-animation-direction>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Animations\"],\"initial\":\"normal\",\"appliesto\":\"allElementsAndPseudos\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/animation-direction\"},\"animation-duration\":{\"syntax\":\"<time>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Animations\"],\"initial\":\"0s\",\"appliesto\":\"allElementsAndPseudos\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/animation-duration\"},\"animation-fill-mode\":{\"syntax\":\"<single-animation-fill-mode>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Animations\"],\"initial\":\"none\",\"appliesto\":\"allElementsAndPseudos\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode\"},\"animation-iteration-count\":{\"syntax\":\"<single-animation-iteration-count>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Animations\"],\"initial\":\"1\",\"appliesto\":\"allElementsAndPseudos\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count\"},\"animation-name\":{\"syntax\":\"[ none | <keyframes-name> ]#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Animations\"],\"initial\":\"none\",\"appliesto\":\"allElementsAndPseudos\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/animation-name\"},\"animation-play-state\":{\"syntax\":\"<single-animation-play-state>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Animations\"],\"initial\":\"running\",\"appliesto\":\"allElementsAndPseudos\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/animation-play-state\"},\"animation-timing-function\":{\"syntax\":\"<timing-function>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Animations\"],\"initial\":\"ease\",\"appliesto\":\"allElementsAndPseudos\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/animation-timing-function\"},\"appearance\":{\"syntax\":\"none | auto | textfield | menulist-button | <compat-auto>\",\"media\":\"all\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Basic User Interface\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/appearance\"},\"aspect-ratio\":{\"syntax\":\"auto | <ratio>\",\"media\":\"all\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Basic User Interface\"],\"initial\":\"auto\",\"appliesto\":\"allElementsExceptInlineBoxesAndInternalRubyOrTableBoxes\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/aspect-ratio\"},\"azimuth\":{\"syntax\":\"<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards\",\"media\":\"aural\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Speech\"],\"initial\":\"center\",\"appliesto\":\"allElements\",\"computed\":\"normalizedAngle\",\"order\":\"orderOfAppearance\",\"status\":\"obsolete\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/azimuth\"},\"backdrop-filter\":{\"syntax\":\"none | <filter-function-list>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"filterList\",\"percentages\":\"no\",\"groups\":[\"Filter Effects\"],\"initial\":\"none\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/backdrop-filter\"},\"backface-visibility\":{\"syntax\":\"visible | hidden\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Transforms\"],\"initial\":\"visible\",\"appliesto\":\"transformableElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/backface-visibility\"},\"background\":{\"syntax\":\"[ <bg-layer> , ]* <final-bg-layer>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"background-color\",\"background-image\",\"background-clip\",\"background-position\",\"background-size\",\"background-repeat\",\"background-attachment\"],\"percentages\":[\"background-position\",\"background-size\"],\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":[\"background-image\",\"background-position\",\"background-size\",\"background-repeat\",\"background-origin\",\"background-clip\",\"background-attachment\",\"background-color\"],\"appliesto\":\"allElements\",\"computed\":[\"background-image\",\"background-position\",\"background-size\",\"background-repeat\",\"background-origin\",\"background-clip\",\"background-attachment\",\"background-color\"],\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/background\"},\"background-attachment\":{\"syntax\":\"<attachment>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"scroll\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/background-attachment\"},\"background-blend-mode\":{\"syntax\":\"<blend-mode>#\",\"media\":\"none\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Compositing and Blending\"],\"initial\":\"normal\",\"appliesto\":\"allElementsSVGContainerGraphicsAndGraphicsReferencingElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/background-blend-mode\"},\"background-clip\":{\"syntax\":\"<box>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"border-box\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/background-clip\"},\"background-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"transparent\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/background-color\"},\"background-image\":{\"syntax\":\"<bg-image>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecifiedURLsAbsolute\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/background-image\"},\"background-origin\":{\"syntax\":\"<box>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"padding-box\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/background-origin\"},\"background-position\":{\"syntax\":\"<bg-position>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"repeatableListOfSimpleListOfLpc\",\"percentages\":\"referToSizeOfBackgroundPositioningAreaMinusBackgroundImageSize\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"0% 0%\",\"appliesto\":\"allElements\",\"computed\":\"listEachItemTwoKeywordsOriginOffsets\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/background-position\"},\"background-position-x\":{\"syntax\":\"[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"referToWidthOfBackgroundPositioningAreaMinusBackgroundImageHeight\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"left\",\"appliesto\":\"allElements\",\"computed\":\"listEachItemConsistingOfAbsoluteLengthPercentageAndOrigin\",\"order\":\"uniqueOrder\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/background-position-x\"},\"background-position-y\":{\"syntax\":\"[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"referToHeightOfBackgroundPositioningAreaMinusBackgroundImageHeight\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"top\",\"appliesto\":\"allElements\",\"computed\":\"listEachItemConsistingOfAbsoluteLengthPercentageAndOrigin\",\"order\":\"uniqueOrder\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/background-position-y\"},\"background-repeat\":{\"syntax\":\"<repeat-style>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"repeat\",\"appliesto\":\"allElements\",\"computed\":\"listEachItemHasTwoKeywordsOnePerDimension\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/background-repeat\"},\"background-size\":{\"syntax\":\"<bg-size>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"repeatableListOfSimpleListOfLpc\",\"percentages\":\"relativeToBackgroundPositioningArea\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"auto auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/background-size\"},\"block-overflow\":{\"syntax\":\"clip | ellipsis | <string>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Overflow\"],\"initial\":\"clip\",\"appliesto\":\"blockContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"experimental\"},\"block-size\":{\"syntax\":\"<'width'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"blockSizeOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"auto\",\"appliesto\":\"sameAsWidthAndHeight\",\"computed\":\"sameAsWidthAndHeight\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/block-size\"},\"border\":{\"syntax\":\"<line-width> || <line-style> || <color>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"border-color\",\"border-style\",\"border-width\"],\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":[\"border-width\",\"border-style\",\"border-color\"],\"appliesto\":\"allElements\",\"computed\":[\"border-width\",\"border-style\",\"border-color\"],\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border\"},\"border-block\":{\"syntax\":\"<'border-top-width'> || <'border-top-style'> || <'color'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":[\"border-top-width\",\"border-top-style\",\"border-top-color\"],\"appliesto\":\"allElements\",\"computed\":[\"border-top-width\",\"border-top-style\",\"border-top-color\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-block\"},\"border-block-color\":{\"syntax\":\"<'border-top-color'>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-block-color\"},\"border-block-style\":{\"syntax\":\"<'border-top-style'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-block-style\"},\"border-block-width\":{\"syntax\":\"<'border-top-width'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"medium\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthZeroIfBorderStyleNoneOrHidden\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-block-width\"},\"border-block-end\":{\"syntax\":\"<'border-top-width'> || <'border-top-style'> || <'color'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"border-block-end-color\",\"border-block-end-style\",\"border-block-end-width\"],\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":[\"border-top-width\",\"border-top-style\",\"border-top-color\"],\"appliesto\":\"allElements\",\"computed\":[\"border-top-width\",\"border-top-style\",\"border-top-color\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-block-end\"},\"border-block-end-color\":{\"syntax\":\"<'border-top-color'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-block-end-color\"},\"border-block-end-style\":{\"syntax\":\"<'border-top-style'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-block-end-style\"},\"border-block-end-width\":{\"syntax\":\"<'border-top-width'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"medium\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthZeroIfBorderStyleNoneOrHidden\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-block-end-width\"},\"border-block-start\":{\"syntax\":\"<'border-top-width'> || <'border-top-style'> || <'color'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"border-block-start-color\",\"border-block-start-style\",\"border-block-start-width\"],\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":[\"border-width\",\"border-style\",\"color\"],\"appliesto\":\"allElements\",\"computed\":[\"border-width\",\"border-style\",\"border-block-start-color\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-block-start\"},\"border-block-start-color\":{\"syntax\":\"<'border-top-color'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-block-start-color\"},\"border-block-start-style\":{\"syntax\":\"<'border-top-style'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-block-start-style\"},\"border-block-start-width\":{\"syntax\":\"<'border-top-width'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"medium\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthZeroIfBorderStyleNoneOrHidden\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-block-start-width\"},\"border-bottom\":{\"syntax\":\"<line-width> || <line-style> || <color>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"border-bottom-color\",\"border-bottom-style\",\"border-bottom-width\"],\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":[\"border-bottom-width\",\"border-bottom-style\",\"border-bottom-color\"],\"appliesto\":\"allElements\",\"computed\":[\"border-bottom-width\",\"border-bottom-style\",\"border-bottom-color\"],\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-bottom\"},\"border-bottom-color\":{\"syntax\":\"<'border-top-color'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-bottom-color\"},\"border-bottom-left-radius\":{\"syntax\":\"<length-percentage>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToDimensionOfBorderBox\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"0\",\"appliesto\":\"allElementsUAsNotRequiredWhenCollapse\",\"computed\":\"twoAbsoluteLengthOrPercentages\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius\"},\"border-bottom-right-radius\":{\"syntax\":\"<length-percentage>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToDimensionOfBorderBox\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"0\",\"appliesto\":\"allElementsUAsNotRequiredWhenCollapse\",\"computed\":\"twoAbsoluteLengthOrPercentages\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius\"},\"border-bottom-style\":{\"syntax\":\"<line-style>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-bottom-style\"},\"border-bottom-width\":{\"syntax\":\"<line-width>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"medium\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthOr0IfBorderBottomStyleNoneOrHidden\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-bottom-width\"},\"border-collapse\":{\"syntax\":\"collapse | separate\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Table\"],\"initial\":\"separate\",\"appliesto\":\"tableElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-collapse\"},\"border-color\":{\"syntax\":\"<color>{1,4}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"border-bottom-color\",\"border-left-color\",\"border-right-color\",\"border-top-color\"],\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":[\"border-top-color\",\"border-right-color\",\"border-bottom-color\",\"border-left-color\"],\"appliesto\":\"allElements\",\"computed\":[\"border-bottom-color\",\"border-left-color\",\"border-right-color\",\"border-top-color\"],\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-color\"},\"border-end-end-radius\":{\"syntax\":\"<length-percentage>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToDimensionOfBorderBox\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"allElementsUAsNotRequiredWhenCollapse\",\"computed\":\"twoAbsoluteLengthOrPercentages\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius\"},\"border-end-start-radius\":{\"syntax\":\"<length-percentage>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToDimensionOfBorderBox\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"allElementsUAsNotRequiredWhenCollapse\",\"computed\":\"twoAbsoluteLengthOrPercentages\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius\"},\"border-image\":{\"syntax\":\"<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":[\"border-image-slice\",\"border-image-width\"],\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":[\"border-image-source\",\"border-image-slice\",\"border-image-width\",\"border-image-outset\",\"border-image-repeat\"],\"appliesto\":\"allElementsExceptTableElementsWhenCollapse\",\"computed\":[\"border-image-outset\",\"border-image-repeat\",\"border-image-slice\",\"border-image-source\",\"border-image-width\"],\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-image\"},\"border-image-outset\":{\"syntax\":\"[ <length> | <number> ]{1,4}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"0\",\"appliesto\":\"allElementsExceptTableElementsWhenCollapse\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-image-outset\"},\"border-image-repeat\":{\"syntax\":\"[ stretch | repeat | round | space ]{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"stretch\",\"appliesto\":\"allElementsExceptTableElementsWhenCollapse\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-image-repeat\"},\"border-image-slice\":{\"syntax\":\"<number-percentage>{1,4} && fill?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"referToSizeOfBorderImage\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"100%\",\"appliesto\":\"allElementsExceptTableElementsWhenCollapse\",\"computed\":\"oneToFourPercentagesOrAbsoluteLengthsPlusFill\",\"order\":\"percentagesOrLengthsFollowedByFill\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-image-slice\"},\"border-image-source\":{\"syntax\":\"none | <image>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"none\",\"appliesto\":\"allElementsExceptTableElementsWhenCollapse\",\"computed\":\"noneOrImageWithAbsoluteURI\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-image-source\"},\"border-image-width\":{\"syntax\":\"[ <length-percentage> | <number> | auto ]{1,4}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"referToWidthOrHeightOfBorderImageArea\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"1\",\"appliesto\":\"allElementsExceptTableElementsWhenCollapse\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-image-width\"},\"border-inline\":{\"syntax\":\"<'border-top-width'> || <'border-top-style'> || <'color'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":[\"border-top-width\",\"border-top-style\",\"border-top-color\"],\"appliesto\":\"allElements\",\"computed\":[\"border-top-width\",\"border-top-style\",\"border-top-color\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-inline\"},\"border-inline-end\":{\"syntax\":\"<'border-top-width'> || <'border-top-style'> || <'color'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"border-inline-end-color\",\"border-inline-end-style\",\"border-inline-end-width\"],\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":[\"border-width\",\"border-style\",\"color\"],\"appliesto\":\"allElements\",\"computed\":[\"border-width\",\"border-style\",\"border-inline-end-color\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-inline-end\"},\"border-inline-color\":{\"syntax\":\"<'border-top-color'>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-inline-color\"},\"border-inline-style\":{\"syntax\":\"<'border-top-style'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-inline-style\"},\"border-inline-width\":{\"syntax\":\"<'border-top-width'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"medium\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthZeroIfBorderStyleNoneOrHidden\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-inline-width\"},\"border-inline-end-color\":{\"syntax\":\"<'border-top-color'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color\"},\"border-inline-end-style\":{\"syntax\":\"<'border-top-style'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style\"},\"border-inline-end-width\":{\"syntax\":\"<'border-top-width'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"medium\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthZeroIfBorderStyleNoneOrHidden\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width\"},\"border-inline-start\":{\"syntax\":\"<'border-top-width'> || <'border-top-style'> || <'color'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"border-inline-start-color\",\"border-inline-start-style\",\"border-inline-start-width\"],\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":[\"border-width\",\"border-style\",\"color\"],\"appliesto\":\"allElements\",\"computed\":[\"border-width\",\"border-style\",\"border-inline-start-color\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-inline-start\"},\"border-inline-start-color\":{\"syntax\":\"<'border-top-color'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color\"},\"border-inline-start-style\":{\"syntax\":\"<'border-top-style'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style\"},\"border-inline-start-width\":{\"syntax\":\"<'border-top-width'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"medium\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthZeroIfBorderStyleNoneOrHidden\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width\"},\"border-left\":{\"syntax\":\"<line-width> || <line-style> || <color>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"border-left-color\",\"border-left-style\",\"border-left-width\"],\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":[\"border-left-width\",\"border-left-style\",\"border-left-color\"],\"appliesto\":\"allElements\",\"computed\":[\"border-left-width\",\"border-left-style\",\"border-left-color\"],\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-left\"},\"border-left-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-left-color\"},\"border-left-style\":{\"syntax\":\"<line-style>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-left-style\"},\"border-left-width\":{\"syntax\":\"<line-width>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"medium\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthOr0IfBorderLeftStyleNoneOrHidden\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-left-width\"},\"border-radius\":{\"syntax\":\"<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"border-top-left-radius\",\"border-top-right-radius\",\"border-bottom-right-radius\",\"border-bottom-left-radius\"],\"percentages\":\"referToDimensionOfBorderBox\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":[\"border-top-left-radius\",\"border-top-right-radius\",\"border-bottom-right-radius\",\"border-bottom-left-radius\"],\"appliesto\":\"allElementsUAsNotRequiredWhenCollapse\",\"computed\":[\"border-bottom-left-radius\",\"border-bottom-right-radius\",\"border-top-left-radius\",\"border-top-right-radius\"],\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-radius\"},\"border-right\":{\"syntax\":\"<line-width> || <line-style> || <color>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"border-right-color\",\"border-right-style\",\"border-right-width\"],\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":[\"border-right-width\",\"border-right-style\",\"border-right-color\"],\"appliesto\":\"allElements\",\"computed\":[\"border-right-width\",\"border-right-style\",\"border-right-color\"],\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-right\"},\"border-right-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-right-color\"},\"border-right-style\":{\"syntax\":\"<line-style>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-right-style\"},\"border-right-width\":{\"syntax\":\"<line-width>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"medium\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthOr0IfBorderRightStyleNoneOrHidden\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-right-width\"},\"border-spacing\":{\"syntax\":\"<length> <length>?\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Table\"],\"initial\":\"0\",\"appliesto\":\"tableElements\",\"computed\":\"twoAbsoluteLengths\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-spacing\"},\"border-start-end-radius\":{\"syntax\":\"<length-percentage>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToDimensionOfBorderBox\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"allElementsUAsNotRequiredWhenCollapse\",\"computed\":\"twoAbsoluteLengthOrPercentages\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius\"},\"border-start-start-radius\":{\"syntax\":\"<length-percentage>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToDimensionOfBorderBox\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"allElementsUAsNotRequiredWhenCollapse\",\"computed\":\"twoAbsoluteLengthOrPercentages\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius\"},\"border-style\":{\"syntax\":\"<line-style>{1,4}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":[\"border-top-style\",\"border-right-style\",\"border-bottom-style\",\"border-left-style\"],\"appliesto\":\"allElements\",\"computed\":[\"border-bottom-style\",\"border-left-style\",\"border-right-style\",\"border-top-style\"],\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-style\"},\"border-top\":{\"syntax\":\"<line-width> || <line-style> || <color>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"border-top-color\",\"border-top-style\",\"border-top-width\"],\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":[\"border-top-width\",\"border-top-style\",\"border-top-color\"],\"appliesto\":\"allElements\",\"computed\":[\"border-top-width\",\"border-top-style\",\"border-top-color\"],\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-top\"},\"border-top-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-top-color\"},\"border-top-left-radius\":{\"syntax\":\"<length-percentage>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToDimensionOfBorderBox\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"0\",\"appliesto\":\"allElementsUAsNotRequiredWhenCollapse\",\"computed\":\"twoAbsoluteLengthOrPercentages\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius\"},\"border-top-right-radius\":{\"syntax\":\"<length-percentage>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToDimensionOfBorderBox\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"0\",\"appliesto\":\"allElementsUAsNotRequiredWhenCollapse\",\"computed\":\"twoAbsoluteLengthOrPercentages\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius\"},\"border-top-style\":{\"syntax\":\"<line-style>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-top-style\"},\"border-top-width\":{\"syntax\":\"<line-width>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"medium\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthOr0IfBorderTopStyleNoneOrHidden\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-top-width\"},\"border-width\":{\"syntax\":\"<line-width>{1,4}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"border-bottom-width\",\"border-left-width\",\"border-right-width\",\"border-top-width\"],\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":[\"border-top-width\",\"border-right-width\",\"border-bottom-width\",\"border-left-width\"],\"appliesto\":\"allElements\",\"computed\":[\"border-bottom-width\",\"border-left-width\",\"border-right-width\",\"border-top-width\"],\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/border-width\"},\"bottom\":{\"syntax\":\"<length> | <percentage> | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToContainingBlockHeight\",\"groups\":[\"CSS Positioning\"],\"initial\":\"auto\",\"appliesto\":\"positionedElements\",\"computed\":\"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/bottom\"},\"box-align\":{\"syntax\":\"start | center | end | baseline | stretch\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\",\"WebKit Extensions\"],\"initial\":\"stretch\",\"appliesto\":\"elementsWithDisplayBoxOrInlineBox\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/box-align\"},\"box-decoration-break\":{\"syntax\":\"slice | clone\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fragmentation\"],\"initial\":\"slice\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/box-decoration-break\"},\"box-direction\":{\"syntax\":\"normal | reverse | inherit\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\",\"WebKit Extensions\"],\"initial\":\"normal\",\"appliesto\":\"elementsWithDisplayBoxOrInlineBox\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/box-direction\"},\"box-flex\":{\"syntax\":\"<number>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\",\"WebKit Extensions\"],\"initial\":\"0\",\"appliesto\":\"directChildrenOfElementsWithDisplayMozBoxMozInlineBox\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/box-flex\"},\"box-flex-group\":{\"syntax\":\"<integer>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\",\"WebKit Extensions\"],\"initial\":\"1\",\"appliesto\":\"inFlowChildrenOfBoxElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/box-flex-group\"},\"box-lines\":{\"syntax\":\"single | multiple\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\",\"WebKit Extensions\"],\"initial\":\"single\",\"appliesto\":\"boxElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/box-lines\"},\"box-ordinal-group\":{\"syntax\":\"<integer>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\",\"WebKit Extensions\"],\"initial\":\"1\",\"appliesto\":\"childrenOfBoxElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/box-ordinal-group\"},\"box-orient\":{\"syntax\":\"horizontal | vertical | inline-axis | block-axis | inherit\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\",\"WebKit Extensions\"],\"initial\":\"inlineAxisHorizontalInXUL\",\"appliesto\":\"elementsWithDisplayBoxOrInlineBox\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/box-orient\"},\"box-pack\":{\"syntax\":\"start | center | end | justify\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\",\"WebKit Extensions\"],\"initial\":\"start\",\"appliesto\":\"elementsWithDisplayMozBoxMozInlineBox\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/box-pack\"},\"box-shadow\":{\"syntax\":\"none | <shadow>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"shadowList\",\"percentages\":\"no\",\"groups\":[\"CSS Backgrounds and Borders\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthsSpecifiedColorAsSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/box-shadow\"},\"box-sizing\":{\"syntax\":\"content-box | border-box\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Basic User Interface\"],\"initial\":\"content-box\",\"appliesto\":\"allElementsAcceptingWidthOrHeight\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/box-sizing\"},\"break-after\":{\"syntax\":\"auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fragmentation\"],\"initial\":\"auto\",\"appliesto\":\"blockLevelElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/break-after\"},\"break-before\":{\"syntax\":\"auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fragmentation\"],\"initial\":\"auto\",\"appliesto\":\"blockLevelElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/break-before\"},\"break-inside\":{\"syntax\":\"auto | avoid | avoid-page | avoid-column | avoid-region\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fragmentation\"],\"initial\":\"auto\",\"appliesto\":\"blockLevelElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/break-inside\"},\"caption-side\":{\"syntax\":\"top | bottom | block-start | block-end | inline-start | inline-end\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Table\"],\"initial\":\"top\",\"appliesto\":\"tableCaptionElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/caption-side\"},\"caret-color\":{\"syntax\":\"auto | <color>\",\"media\":\"interactive\",\"inherited\":true,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Basic User Interface\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asAutoOrColor\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/caret-color\"},\"clear\":{\"syntax\":\"none | left | right | both | inline-start | inline-end\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Positioning\"],\"initial\":\"none\",\"appliesto\":\"blockLevelElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/clear\"},\"clip\":{\"syntax\":\"<shape> | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"rectangle\",\"percentages\":\"no\",\"groups\":[\"CSS Masking\"],\"initial\":\"auto\",\"appliesto\":\"absolutelyPositionedElements\",\"computed\":\"autoOrRectangle\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/clip\"},\"clip-path\":{\"syntax\":\"<clip-source> | [ <basic-shape> || <geometry-box> ] | none\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"basicShapeOtherwiseNo\",\"percentages\":\"referToReferenceBoxWhenSpecifiedOtherwiseBorderBox\",\"groups\":[\"CSS Masking\"],\"initial\":\"none\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecifiedURLsAbsolute\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/clip-path\"},\"color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Color\"],\"initial\":\"variesFromBrowserToBrowser\",\"appliesto\":\"allElements\",\"computed\":\"translucentValuesRGBAOtherwiseRGB\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/color\"},\"color-adjust\":{\"syntax\":\"economy | exact\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Color\"],\"initial\":\"economy\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/color-adjust\"},\"column-count\":{\"syntax\":\"<integer> | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"integer\",\"percentages\":\"no\",\"groups\":[\"CSS Columns\"],\"initial\":\"auto\",\"appliesto\":\"blockContainersExceptTableWrappers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/column-count\"},\"column-fill\":{\"syntax\":\"auto | balance | balance-all\",\"media\":\"visualInContinuousMediaNoEffectInOverflowColumns\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Columns\"],\"initial\":\"balance\",\"appliesto\":\"multicolElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/column-fill\"},\"column-gap\":{\"syntax\":\"normal | <length-percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToDimensionOfContentArea\",\"groups\":[\"CSS Box Alignment\"],\"initial\":\"normal\",\"appliesto\":\"multiColumnElementsFlexContainersGridContainers\",\"computed\":\"asSpecifiedWithLengthsAbsoluteAndNormalComputingToZeroExceptMultiColumn\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/column-gap\"},\"column-rule\":{\"syntax\":\"<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"column-rule-color\",\"column-rule-style\",\"column-rule-width\"],\"percentages\":\"no\",\"groups\":[\"CSS Columns\"],\"initial\":[\"column-rule-width\",\"column-rule-style\",\"column-rule-color\"],\"appliesto\":\"multicolElements\",\"computed\":[\"column-rule-color\",\"column-rule-style\",\"column-rule-width\"],\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/column-rule\"},\"column-rule-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Columns\"],\"initial\":\"currentcolor\",\"appliesto\":\"multicolElements\",\"computed\":\"computedColor\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/column-rule-color\"},\"column-rule-style\":{\"syntax\":\"<'border-style'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Columns\"],\"initial\":\"none\",\"appliesto\":\"multicolElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/column-rule-style\"},\"column-rule-width\":{\"syntax\":\"<'border-width'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"no\",\"groups\":[\"CSS Columns\"],\"initial\":\"medium\",\"appliesto\":\"multicolElements\",\"computed\":\"absoluteLength0IfColumnRuleStyleNoneOrHidden\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/column-rule-width\"},\"column-span\":{\"syntax\":\"none | all\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Columns\"],\"initial\":\"none\",\"appliesto\":\"inFlowBlockLevelElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/column-span\"},\"column-width\":{\"syntax\":\"<length> | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"no\",\"groups\":[\"CSS Columns\"],\"initial\":\"auto\",\"appliesto\":\"blockContainersExceptTableWrappers\",\"computed\":\"absoluteLengthZeroOrLarger\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/column-width\"},\"columns\":{\"syntax\":\"<'column-width'> || <'column-count'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"column-width\",\"column-count\"],\"percentages\":\"no\",\"groups\":[\"CSS Columns\"],\"initial\":[\"column-width\",\"column-count\"],\"appliesto\":\"blockContainersExceptTableWrappers\",\"computed\":[\"column-width\",\"column-count\"],\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/columns\"},\"contain\":{\"syntax\":\"none | strict | content | [ size || layout || style || paint ]\",\"media\":\"all\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Containment\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/contain\"},\"content\":{\"syntax\":\"normal | none | [ <content-replacement> | <content-list> ] [/ <string> ]?\",\"media\":\"all\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Generated Content\"],\"initial\":\"normal\",\"appliesto\":\"beforeAndAfterPseudos\",\"computed\":\"normalOnElementsForPseudosNoneAbsoluteURIStringOrAsSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/content\"},\"counter-increment\":{\"syntax\":\"[ <custom-ident> <integer>? ]+ | none\",\"media\":\"all\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Counter Styles\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/counter-increment\"},\"counter-reset\":{\"syntax\":\"[ <custom-ident> <integer>? ]+ | none\",\"media\":\"all\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Counter Styles\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/counter-reset\"},\"counter-set\":{\"syntax\":\"[ <custom-ident> <integer>? ]+ | none\",\"media\":\"all\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Counter Styles\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/counter-set\"},\"cursor\":{\"syntax\":\"[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]\",\"media\":[\"visual\",\"interactive\"],\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Basic User Interface\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecifiedURLsAbsolute\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/cursor\"},\"direction\":{\"syntax\":\"ltr | rtl\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Writing Modes\"],\"initial\":\"ltr\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/direction\"},\"display\":{\"syntax\":\"[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>\",\"media\":\"all\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Display\"],\"initial\":\"inline\",\"appliesto\":\"allElements\",\"computed\":\"asSpecifiedExceptPositionedFloatingAndRootElementsKeywordMaybeDifferent\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/display\"},\"empty-cells\":{\"syntax\":\"show | hide\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Table\"],\"initial\":\"show\",\"appliesto\":\"tableCellElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/empty-cells\"},\"filter\":{\"syntax\":\"none | <filter-function-list>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"filterList\",\"percentages\":\"no\",\"groups\":[\"Filter Effects\"],\"initial\":\"none\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/filter\"},\"flex\":{\"syntax\":\"none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"flex-grow\",\"flex-shrink\",\"flex-basis\"],\"percentages\":\"no\",\"groups\":[\"CSS Flexible Box Layout\"],\"initial\":[\"flex-grow\",\"flex-shrink\",\"flex-basis\"],\"appliesto\":\"flexItemsAndInFlowPseudos\",\"computed\":[\"flex-grow\",\"flex-shrink\",\"flex-basis\"],\"order\":\"orderOfAppearance\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/flex\"},\"flex-basis\":{\"syntax\":\"content | <'width'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToFlexContainersInnerMainSize\",\"groups\":[\"CSS Flexible Box Layout\"],\"initial\":\"auto\",\"appliesto\":\"flexItemsAndInFlowPseudos\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"lengthOrPercentageBeforeKeywordIfBothPresent\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/flex-basis\"},\"flex-direction\":{\"syntax\":\"row | row-reverse | column | column-reverse\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Flexible Box Layout\"],\"initial\":\"row\",\"appliesto\":\"flexContainers\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/flex-direction\"},\"flex-flow\":{\"syntax\":\"<'flex-direction'> || <'flex-wrap'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Flexible Box Layout\"],\"initial\":[\"flex-direction\",\"flex-wrap\"],\"appliesto\":\"flexContainers\",\"computed\":[\"flex-direction\",\"flex-wrap\"],\"order\":\"orderOfAppearance\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/flex-flow\"},\"flex-grow\":{\"syntax\":\"<number>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"number\",\"percentages\":\"no\",\"groups\":[\"CSS Flexible Box Layout\"],\"initial\":\"0\",\"appliesto\":\"flexItemsAndInFlowPseudos\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/flex-grow\"},\"flex-shrink\":{\"syntax\":\"<number>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"number\",\"percentages\":\"no\",\"groups\":[\"CSS Flexible Box Layout\"],\"initial\":\"1\",\"appliesto\":\"flexItemsAndInFlowPseudos\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/flex-shrink\"},\"flex-wrap\":{\"syntax\":\"nowrap | wrap | wrap-reverse\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Flexible Box Layout\"],\"initial\":\"nowrap\",\"appliesto\":\"flexContainers\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/flex-wrap\"},\"float\":{\"syntax\":\"left | right | none | inline-start | inline-end\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Positioning\"],\"initial\":\"none\",\"appliesto\":\"allElementsNoEffectIfDisplayNone\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/float\"},\"font\":{\"syntax\":\"[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar\",\"media\":\"visual\",\"inherited\":true,\"animationType\":[\"font-style\",\"font-variant\",\"font-weight\",\"font-stretch\",\"font-size\",\"line-height\",\"font-family\"],\"percentages\":[\"font-size\",\"line-height\"],\"groups\":[\"CSS Fonts\"],\"initial\":[\"font-style\",\"font-variant\",\"font-weight\",\"font-stretch\",\"font-size\",\"line-height\",\"font-family\"],\"appliesto\":\"allElements\",\"computed\":[\"font-style\",\"font-variant\",\"font-weight\",\"font-stretch\",\"font-size\",\"line-height\",\"font-family\"],\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font\"},\"font-family\":{\"syntax\":\"[ <family-name> | <generic-family> ]#\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"dependsOnUserAgent\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-family\"},\"font-feature-settings\":{\"syntax\":\"normal | <feature-tag-value>#\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-feature-settings\"},\"font-kerning\":{\"syntax\":\"auto | normal | none\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-kerning\"},\"font-language-override\":{\"syntax\":\"normal | <string>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-language-override\"},\"font-optical-sizing\":{\"syntax\":\"auto | none\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing\"},\"font-variation-settings\":{\"syntax\":\"normal | [ <string> <number> ]#\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"transform\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-variation-settings\"},\"font-size\":{\"syntax\":\"<absolute-size> | <relative-size> | <length-percentage>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"length\",\"percentages\":\"referToParentElementsFontSize\",\"groups\":[\"CSS Fonts\"],\"initial\":\"medium\",\"appliesto\":\"allElements\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-size\"},\"font-size-adjust\":{\"syntax\":\"none | <number>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"number\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-size-adjust\"},\"font-smooth\":{\"syntax\":\"auto | never | always | <absolute-size> | <length>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-smooth\"},\"font-stretch\":{\"syntax\":\"<font-stretch-absolute>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"fontStretch\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-stretch\"},\"font-style\":{\"syntax\":\"normal | italic | oblique <angle>?\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-style\"},\"font-synthesis\":{\"syntax\":\"none | [ weight || style ]\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"weight style\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-synthesis\"},\"font-variant\":{\"syntax\":\"normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-variant\"},\"font-variant-alternates\":{\"syntax\":\"normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates\"},\"font-variant-caps\":{\"syntax\":\"normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-variant-caps\"},\"font-variant-east-asian\":{\"syntax\":\"normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian\"},\"font-variant-ligatures\":{\"syntax\":\"normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures\"},\"font-variant-numeric\":{\"syntax\":\"normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric\"},\"font-variant-position\":{\"syntax\":\"normal | sub | super\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-variant-position\"},\"font-weight\":{\"syntax\":\"<font-weight-absolute> | bolder | lighter\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"fontWeight\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"keywordOrNumericalValueBolderLighterTransformedToRealValue\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/font-weight\"},\"gap\":{\"syntax\":\"<'row-gap'> <'column-gap'>?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"row-gap\",\"column-gap\"],\"percentages\":\"no\",\"groups\":[\"CSS Box Alignment\"],\"initial\":[\"row-gap\",\"column-gap\"],\"appliesto\":\"multiColumnElementsFlexContainersGridContainers\",\"computed\":[\"row-gap\",\"column-gap\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/gap\"},\"grid\":{\"syntax\":\"<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":[\"grid-template-rows\",\"grid-template-columns\",\"grid-auto-rows\",\"grid-auto-columns\"],\"groups\":[\"CSS Grid Layout\"],\"initial\":[\"grid-template-rows\",\"grid-template-columns\",\"grid-template-areas\",\"grid-auto-rows\",\"grid-auto-columns\",\"grid-auto-flow\",\"grid-column-gap\",\"grid-row-gap\",\"column-gap\",\"row-gap\"],\"appliesto\":\"gridContainers\",\"computed\":[\"grid-template-rows\",\"grid-template-columns\",\"grid-template-areas\",\"grid-auto-rows\",\"grid-auto-columns\",\"grid-auto-flow\",\"grid-column-gap\",\"grid-row-gap\",\"column-gap\",\"row-gap\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid\"},\"grid-area\":{\"syntax\":\"<grid-line> [ / <grid-line> ]{0,3}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Grid Layout\"],\"initial\":[\"grid-row-start\",\"grid-column-start\",\"grid-row-end\",\"grid-column-end\"],\"appliesto\":\"gridItemsAndBoxesWithinGridContainer\",\"computed\":[\"grid-row-start\",\"grid-column-start\",\"grid-row-end\",\"grid-column-end\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid-area\"},\"grid-auto-columns\":{\"syntax\":\"<track-size>+\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"referToDimensionOfContentArea\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"auto\",\"appliesto\":\"gridContainers\",\"computed\":\"percentageAsSpecifiedOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns\"},\"grid-auto-flow\":{\"syntax\":\"[ row | column ] || dense\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"row\",\"appliesto\":\"gridContainers\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow\"},\"grid-auto-rows\":{\"syntax\":\"<track-size>+\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"referToDimensionOfContentArea\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"auto\",\"appliesto\":\"gridContainers\",\"computed\":\"percentageAsSpecifiedOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows\"},\"grid-column\":{\"syntax\":\"<grid-line> [ / <grid-line> ]?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Grid Layout\"],\"initial\":[\"grid-column-start\",\"grid-column-end\"],\"appliesto\":\"gridItemsAndBoxesWithinGridContainer\",\"computed\":[\"grid-column-start\",\"grid-column-end\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid-column\"},\"grid-column-end\":{\"syntax\":\"<grid-line>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"auto\",\"appliesto\":\"gridItemsAndBoxesWithinGridContainer\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid-column-end\"},\"grid-column-gap\":{\"syntax\":\"<length-percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"referToDimensionOfContentArea\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"0\",\"appliesto\":\"gridContainers\",\"computed\":\"percentageAsSpecifiedOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"status\":\"obsolete\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/column-gap\"},\"grid-column-start\":{\"syntax\":\"<grid-line>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"auto\",\"appliesto\":\"gridItemsAndBoxesWithinGridContainer\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid-column-start\"},\"grid-gap\":{\"syntax\":\"<'grid-row-gap'> <'grid-column-gap'>?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"grid-row-gap\",\"grid-column-gap\"],\"percentages\":\"no\",\"groups\":[\"CSS Grid Layout\"],\"initial\":[\"grid-row-gap\",\"grid-column-gap\"],\"appliesto\":\"gridContainers\",\"computed\":[\"grid-row-gap\",\"grid-column-gap\"],\"order\":\"uniqueOrder\",\"status\":\"obsolete\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/gap\"},\"grid-row\":{\"syntax\":\"<grid-line> [ / <grid-line> ]?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Grid Layout\"],\"initial\":[\"grid-row-start\",\"grid-row-end\"],\"appliesto\":\"gridItemsAndBoxesWithinGridContainer\",\"computed\":[\"grid-row-start\",\"grid-row-end\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid-row\"},\"grid-row-end\":{\"syntax\":\"<grid-line>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"auto\",\"appliesto\":\"gridItemsAndBoxesWithinGridContainer\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid-row-end\"},\"grid-row-gap\":{\"syntax\":\"<length-percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"referToDimensionOfContentArea\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"0\",\"appliesto\":\"gridContainers\",\"computed\":\"percentageAsSpecifiedOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"status\":\"obsolete\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/row-gap\"},\"grid-row-start\":{\"syntax\":\"<grid-line>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"auto\",\"appliesto\":\"gridItemsAndBoxesWithinGridContainer\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid-row-start\"},\"grid-template\":{\"syntax\":\"none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":[\"grid-template-columns\",\"grid-template-rows\"],\"groups\":[\"CSS Grid Layout\"],\"initial\":[\"grid-template-columns\",\"grid-template-rows\",\"grid-template-areas\"],\"appliesto\":\"gridContainers\",\"computed\":[\"grid-template-columns\",\"grid-template-rows\",\"grid-template-areas\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid-template\"},\"grid-template-areas\":{\"syntax\":\"none | <string>+\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"none\",\"appliesto\":\"gridContainers\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid-template-areas\"},\"grid-template-columns\":{\"syntax\":\"none | <track-list> | <auto-track-list> | subgrid <line-name-list>?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"simpleListOfLpcDifferenceLpc\",\"percentages\":\"referToDimensionOfContentArea\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"none\",\"appliesto\":\"gridContainers\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid-template-columns\"},\"grid-template-rows\":{\"syntax\":\"none | <track-list> | <auto-track-list> | subgrid <line-name-list>?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"simpleListOfLpcDifferenceLpc\",\"percentages\":\"referToDimensionOfContentArea\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"none\",\"appliesto\":\"gridContainers\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/grid-template-rows\"},\"hanging-punctuation\":{\"syntax\":\"none | [ first || [ force-end | allow-end ] || last ]\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation\"},\"height\":{\"syntax\":\"auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"regardingHeightOfGeneratedBoxContainingBlockPercentagesRelativeToContainingBlock\",\"groups\":[\"CSS Box Model\"],\"initial\":\"auto\",\"appliesto\":\"allElementsButNonReplacedAndTableColumns\",\"computed\":\"percentageAutoOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/height\"},\"hyphens\":{\"syntax\":\"none | manual | auto\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text\"],\"initial\":\"manual\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/hyphens\"},\"image-orientation\":{\"syntax\":\"from-image | <angle> | [ <angle>? flip ]\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Images\"],\"initial\":\"from-image\",\"appliesto\":\"allElements\",\"computed\":\"angleRoundedToNextQuarter\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/image-orientation\"},\"image-rendering\":{\"syntax\":\"auto | crisp-edges | pixelated\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Images\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/image-rendering\"},\"image-resolution\":{\"syntax\":\"[ from-image || <resolution> ] && snap?\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Images\"],\"initial\":\"1dppx\",\"appliesto\":\"allElements\",\"computed\":\"asSpecifiedWithExceptionOfResolution\",\"order\":\"uniqueOrder\",\"status\":\"experimental\"},\"ime-mode\":{\"syntax\":\"auto | normal | active | inactive | disabled\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Basic User Interface\"],\"initial\":\"auto\",\"appliesto\":\"textFields\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"obsolete\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/ime-mode\"},\"initial-letter\":{\"syntax\":\"normal | [ <number> <integer>? ]\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Inline\"],\"initial\":\"normal\",\"appliesto\":\"firstLetterPseudoElementsAndInlineLevelFirstChildren\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/initial-letter\"},\"initial-letter-align\":{\"syntax\":\"[ auto | alphabetic | hanging | ideographic ]\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Inline\"],\"initial\":\"auto\",\"appliesto\":\"firstLetterPseudoElementsAndInlineLevelFirstChildren\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/initial-letter-align\"},\"inline-size\":{\"syntax\":\"<'width'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"inlineSizeOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"auto\",\"appliesto\":\"sameAsWidthAndHeight\",\"computed\":\"sameAsWidthAndHeight\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/inline-size\"},\"inset\":{\"syntax\":\"<'top'>{1,4}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"logicalHeightOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"auto\",\"appliesto\":\"positionedElements\",\"computed\":\"sameAsBoxOffsets\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/inset\"},\"inset-block\":{\"syntax\":\"<'top'>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"logicalHeightOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"auto\",\"appliesto\":\"positionedElements\",\"computed\":\"sameAsBoxOffsets\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/inset-block\"},\"inset-block-end\":{\"syntax\":\"<'top'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"logicalHeightOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"auto\",\"appliesto\":\"positionedElements\",\"computed\":\"sameAsBoxOffsets\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/inset-block-end\"},\"inset-block-start\":{\"syntax\":\"<'top'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"logicalHeightOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"auto\",\"appliesto\":\"positionedElements\",\"computed\":\"sameAsBoxOffsets\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/inset-block-start\"},\"inset-inline\":{\"syntax\":\"<'top'>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"auto\",\"appliesto\":\"positionedElements\",\"computed\":\"sameAsBoxOffsets\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/inset-inline\"},\"inset-inline-end\":{\"syntax\":\"<'top'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"auto\",\"appliesto\":\"positionedElements\",\"computed\":\"sameAsBoxOffsets\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/inset-inline-end\"},\"inset-inline-start\":{\"syntax\":\"<'top'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"auto\",\"appliesto\":\"positionedElements\",\"computed\":\"sameAsBoxOffsets\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/inset-inline-start\"},\"isolation\":{\"syntax\":\"auto | isolate\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Compositing and Blending\"],\"initial\":\"auto\",\"appliesto\":\"allElementsSVGContainerGraphicsAndGraphicsReferencingElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/isolation\"},\"justify-content\":{\"syntax\":\"normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Alignment\"],\"initial\":\"normal\",\"appliesto\":\"flexContainers\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/justify-content\"},\"justify-items\":{\"syntax\":\"normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Alignment\"],\"initial\":\"legacy\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/justify-items\"},\"justify-self\":{\"syntax\":\"auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Alignment\"],\"initial\":\"auto\",\"appliesto\":\"blockLevelBoxesAndAbsolutelyPositionedBoxesAndGridItems\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/justify-self\"},\"justify-tracks\":{\"syntax\":\"[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"normal\",\"appliesto\":\"gridContainersWithMasonryLayoutInTheirInlineAxis\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/justify-tracks\"},\"left\":{\"syntax\":\"<length> | <percentage> | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Positioning\"],\"initial\":\"auto\",\"appliesto\":\"positionedElements\",\"computed\":\"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/left\"},\"letter-spacing\":{\"syntax\":\"normal | <length>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"length\",\"percentages\":\"no\",\"groups\":[\"CSS Text\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"optimumValueOfAbsoluteLengthOrNormal\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/letter-spacing\"},\"line-break\":{\"syntax\":\"auto | loose | normal | strict | anywhere\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/line-break\"},\"line-clamp\":{\"syntax\":\"none | <integer>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"integer\",\"percentages\":\"no\",\"groups\":[\"CSS Overflow\"],\"initial\":\"none\",\"appliesto\":\"blockContainersExceptMultiColumnContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"experimental\"},\"line-height\":{\"syntax\":\"normal | <number> | <length> | <percentage>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"numberOrLength\",\"percentages\":\"referToElementFontSize\",\"groups\":[\"CSS Fonts\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLengthOrAsSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/line-height\"},\"line-height-step\":{\"syntax\":\"<length>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fonts\"],\"initial\":\"0\",\"appliesto\":\"blockContainers\",\"computed\":\"absoluteLength\",\"order\":\"perGrammar\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/line-height-step\"},\"list-style\":{\"syntax\":\"<'list-style-type'> || <'list-style-position'> || <'list-style-image'>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Lists and Counters\"],\"initial\":[\"list-style-type\",\"list-style-position\",\"list-style-image\"],\"appliesto\":\"listItems\",\"computed\":[\"list-style-image\",\"list-style-position\",\"list-style-type\"],\"order\":\"orderOfAppearance\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/list-style\"},\"list-style-image\":{\"syntax\":\"<url> | none\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Lists and Counters\"],\"initial\":\"none\",\"appliesto\":\"listItems\",\"computed\":\"noneOrImageWithAbsoluteURI\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/list-style-image\"},\"list-style-position\":{\"syntax\":\"inside | outside\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Lists and Counters\"],\"initial\":\"outside\",\"appliesto\":\"listItems\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/list-style-position\"},\"list-style-type\":{\"syntax\":\"<counter-style> | <string> | none\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Lists and Counters\"],\"initial\":\"disc\",\"appliesto\":\"listItems\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/list-style-type\"},\"margin\":{\"syntax\":\"[ <length> | <percentage> | auto ]{1,4}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Box Model\"],\"initial\":[\"margin-bottom\",\"margin-left\",\"margin-right\",\"margin-top\"],\"appliesto\":\"allElementsExceptTableDisplayTypes\",\"computed\":[\"margin-bottom\",\"margin-left\",\"margin-right\",\"margin-top\"],\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/margin\"},\"margin-block\":{\"syntax\":\"<'margin-left'>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"dependsOnLayoutModel\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"sameAsMargin\",\"computed\":\"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/margin-block\"},\"margin-block-end\":{\"syntax\":\"<'margin-left'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"dependsOnLayoutModel\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"sameAsMargin\",\"computed\":\"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/margin-block-end\"},\"margin-block-start\":{\"syntax\":\"<'margin-left'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"dependsOnLayoutModel\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"sameAsMargin\",\"computed\":\"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/margin-block-start\"},\"margin-bottom\":{\"syntax\":\"<length> | <percentage> | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Box Model\"],\"initial\":\"0\",\"appliesto\":\"allElementsExceptTableDisplayTypes\",\"computed\":\"percentageAsSpecifiedOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/margin-bottom\"},\"margin-inline\":{\"syntax\":\"<'margin-left'>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"dependsOnLayoutModel\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"sameAsMargin\",\"computed\":\"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/margin-inline\"},\"margin-inline-end\":{\"syntax\":\"<'margin-left'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"dependsOnLayoutModel\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"sameAsMargin\",\"computed\":\"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/margin-inline-end\"},\"margin-inline-start\":{\"syntax\":\"<'margin-left'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"dependsOnLayoutModel\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"sameAsMargin\",\"computed\":\"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/margin-inline-start\"},\"margin-left\":{\"syntax\":\"<length> | <percentage> | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Box Model\"],\"initial\":\"0\",\"appliesto\":\"allElementsExceptTableDisplayTypes\",\"computed\":\"percentageAsSpecifiedOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/margin-left\"},\"margin-right\":{\"syntax\":\"<length> | <percentage> | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Box Model\"],\"initial\":\"0\",\"appliesto\":\"allElementsExceptTableDisplayTypes\",\"computed\":\"percentageAsSpecifiedOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/margin-right\"},\"margin-top\":{\"syntax\":\"<length> | <percentage> | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Box Model\"],\"initial\":\"0\",\"appliesto\":\"allElementsExceptTableDisplayTypes\",\"computed\":\"percentageAsSpecifiedOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/margin-top\"},\"margin-trim\":{\"syntax\":\"none | in-flow | all\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Model\"],\"initial\":\"none\",\"appliesto\":\"blockContainersAndMultiColumnContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\"],\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/margin-trim\"},\"mask\":{\"syntax\":\"<mask-layer>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"mask-image\",\"mask-mode\",\"mask-repeat\",\"mask-position\",\"mask-clip\",\"mask-origin\",\"mask-size\",\"mask-composite\"],\"percentages\":[\"mask-position\"],\"groups\":[\"CSS Masking\"],\"initial\":[\"mask-image\",\"mask-mode\",\"mask-repeat\",\"mask-position\",\"mask-clip\",\"mask-origin\",\"mask-size\",\"mask-composite\"],\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":[\"mask-image\",\"mask-mode\",\"mask-repeat\",\"mask-position\",\"mask-clip\",\"mask-origin\",\"mask-size\",\"mask-composite\"],\"order\":\"perGrammar\",\"stacking\":true,\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask\"},\"mask-border\":{\"syntax\":\"<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"mask-border-mode\",\"mask-border-outset\",\"mask-border-repeat\",\"mask-border-slice\",\"mask-border-source\",\"mask-border-width\"],\"percentages\":[\"mask-border-slice\",\"mask-border-width\"],\"groups\":[\"CSS Masking\"],\"initial\":[\"mask-border-mode\",\"mask-border-outset\",\"mask-border-repeat\",\"mask-border-slice\",\"mask-border-source\",\"mask-border-width\"],\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":[\"mask-border-mode\",\"mask-border-outset\",\"mask-border-repeat\",\"mask-border-slice\",\"mask-border-source\",\"mask-border-width\"],\"order\":\"perGrammar\",\"stacking\":true,\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-border\"},\"mask-border-mode\":{\"syntax\":\"luminance | alpha\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Masking\"],\"initial\":\"alpha\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-border-mode\"},\"mask-border-outset\":{\"syntax\":\"[ <length> | <number> ]{1,4}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Masking\"],\"initial\":\"0\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-border-outset\"},\"mask-border-repeat\":{\"syntax\":\"[ stretch | repeat | round | space ]{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Masking\"],\"initial\":\"stretch\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat\"},\"mask-border-slice\":{\"syntax\":\"<number-percentage>{1,4} fill?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"referToSizeOfMaskBorderImage\",\"groups\":[\"CSS Masking\"],\"initial\":\"0\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-border-slice\"},\"mask-border-source\":{\"syntax\":\"none | <image>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Masking\"],\"initial\":\"none\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecifiedURLsAbsolute\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-border-source\"},\"mask-border-width\":{\"syntax\":\"[ <length-percentage> | <number> | auto ]{1,4}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"relativeToMaskBorderImageArea\",\"groups\":[\"CSS Masking\"],\"initial\":\"auto\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-border-width\"},\"mask-clip\":{\"syntax\":\"[ <geometry-box> | no-clip ]#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Masking\"],\"initial\":\"border-box\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-clip\"},\"mask-composite\":{\"syntax\":\"<compositing-operator>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Masking\"],\"initial\":\"add\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-composite\"},\"mask-image\":{\"syntax\":\"<mask-reference>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Masking\"],\"initial\":\"none\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecifiedURLsAbsolute\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-image\"},\"mask-mode\":{\"syntax\":\"<masking-mode>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Masking\"],\"initial\":\"match-source\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-mode\"},\"mask-origin\":{\"syntax\":\"<geometry-box>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Masking\"],\"initial\":\"border-box\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-origin\"},\"mask-position\":{\"syntax\":\"<position>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"repeatableListOfSimpleListOfLpc\",\"percentages\":\"referToSizeOfMaskPaintingArea\",\"groups\":[\"CSS Masking\"],\"initial\":\"center\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"consistsOfTwoKeywordsForOriginAndOffsets\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-position\"},\"mask-repeat\":{\"syntax\":\"<repeat-style>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Masking\"],\"initial\":\"no-repeat\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"consistsOfTwoDimensionKeywords\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-repeat\"},\"mask-size\":{\"syntax\":\"<bg-size>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"repeatableListOfSimpleListOfLpc\",\"percentages\":\"no\",\"groups\":[\"CSS Masking\"],\"initial\":\"auto\",\"appliesto\":\"allElementsSVGContainerElements\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-size\"},\"mask-type\":{\"syntax\":\"luminance | alpha\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Masking\"],\"initial\":\"luminance\",\"appliesto\":\"maskElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mask-type\"},\"masonry-auto-flow\":{\"syntax\":\"[ pack | next ] || [ definite-first | ordered ]\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Grid Layout\"],\"initial\":\"pack\",\"appliesto\":\"gridContainersWithMasonryLayout\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/masonry-auto-flow\"},\"math-style\":{\"syntax\":\"normal | compact\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"notAnimatable\",\"percentages\":\"no\",\"groups\":[\"MathML\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/math-style\"},\"max-block-size\":{\"syntax\":\"<'max-width'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"blockSizeOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"sameAsWidthAndHeight\",\"computed\":\"sameAsMaxWidthAndMaxHeight\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/max-block-size\"},\"max-height\":{\"syntax\":\"none | <length-percentage> | min-content | max-content | fit-content(<length-percentage>)\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"regardingHeightOfGeneratedBoxContainingBlockPercentagesNone\",\"groups\":[\"CSS Box Model\"],\"initial\":\"none\",\"appliesto\":\"allElementsButNonReplacedAndTableColumns\",\"computed\":\"percentageAsSpecifiedAbsoluteLengthOrNone\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/max-height\"},\"max-inline-size\":{\"syntax\":\"<'max-width'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"inlineSizeOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"sameAsWidthAndHeight\",\"computed\":\"sameAsMaxWidthAndMaxHeight\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/max-inline-size\"},\"max-lines\":{\"syntax\":\"none | <integer>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"integer\",\"percentages\":\"no\",\"groups\":[\"CSS Overflow\"],\"initial\":\"none\",\"appliesto\":\"blockContainersExceptMultiColumnContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"experimental\"},\"max-width\":{\"syntax\":\"none | <length-percentage> | min-content | max-content | fit-content(<length-percentage>)\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Box Model\"],\"initial\":\"none\",\"appliesto\":\"allElementsButNonReplacedAndTableRows\",\"computed\":\"percentageAsSpecifiedAbsoluteLengthOrNone\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/max-width\"},\"min-block-size\":{\"syntax\":\"<'min-width'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"blockSizeOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"sameAsWidthAndHeight\",\"computed\":\"sameAsMinWidthAndMinHeight\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/min-block-size\"},\"min-height\":{\"syntax\":\"auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"regardingHeightOfGeneratedBoxContainingBlockPercentages0\",\"groups\":[\"CSS Box Model\"],\"initial\":\"auto\",\"appliesto\":\"allElementsButNonReplacedAndTableColumns\",\"computed\":\"percentageAsSpecifiedOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/min-height\"},\"min-inline-size\":{\"syntax\":\"<'min-width'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"inlineSizeOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"sameAsWidthAndHeight\",\"computed\":\"sameAsMinWidthAndMinHeight\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/min-inline-size\"},\"min-width\":{\"syntax\":\"auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Box Model\"],\"initial\":\"auto\",\"appliesto\":\"allElementsButNonReplacedAndTableRows\",\"computed\":\"percentageAsSpecifiedOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/min-width\"},\"mix-blend-mode\":{\"syntax\":\"<blend-mode>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Compositing and Blending\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"stacking\":true,\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode\"},\"object-fit\":{\"syntax\":\"fill | contain | cover | none | scale-down\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Images\"],\"initial\":\"fill\",\"appliesto\":\"replacedElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/object-fit\"},\"object-position\":{\"syntax\":\"<position>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"repeatableListOfSimpleListOfLpc\",\"percentages\":\"referToWidthAndHeightOfElement\",\"groups\":[\"CSS Images\"],\"initial\":\"50% 50%\",\"appliesto\":\"replacedElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/object-position\"},\"offset\":{\"syntax\":\"[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"offset-position\",\"offset-path\",\"offset-distance\",\"offset-anchor\",\"offset-rotate\"],\"percentages\":[\"offset-position\",\"offset-distance\",\"offset-anchor\"],\"groups\":[\"CSS Motion Path\"],\"initial\":[\"offset-position\",\"offset-path\",\"offset-distance\",\"offset-anchor\",\"offset-rotate\"],\"appliesto\":\"transformableElements\",\"computed\":[\"offset-position\",\"offset-path\",\"offset-distance\",\"offset-anchor\",\"offset-rotate\"],\"order\":\"perGrammar\",\"stacking\":true,\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/offset\"},\"offset-anchor\":{\"syntax\":\"auto | <position>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"position\",\"percentages\":\"relativeToWidthAndHeight\",\"groups\":[\"CSS Motion Path\"],\"initial\":\"auto\",\"appliesto\":\"transformableElements\",\"computed\":\"forLengthAbsoluteValueOtherwisePercentage\",\"order\":\"perGrammar\",\"status\":\"standard\"},\"offset-distance\":{\"syntax\":\"<length-percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToTotalPathLength\",\"groups\":[\"CSS Motion Path\"],\"initial\":\"0\",\"appliesto\":\"transformableElements\",\"computed\":\"forLengthAbsoluteValueOtherwisePercentage\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/offset-distance\"},\"offset-path\":{\"syntax\":\"none | ray( [ <angle> && <size> && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"angleOrBasicShapeOrPath\",\"percentages\":\"no\",\"groups\":[\"CSS Motion Path\"],\"initial\":\"none\",\"appliesto\":\"transformableElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"stacking\":true,\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/offset-path\"},\"offset-position\":{\"syntax\":\"auto | <position>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"position\",\"percentages\":\"referToSizeOfContainingBlock\",\"groups\":[\"CSS Motion Path\"],\"initial\":\"auto\",\"appliesto\":\"transformableElements\",\"computed\":\"forLengthAbsoluteValueOtherwisePercentage\",\"order\":\"perGrammar\",\"status\":\"experimental\"},\"offset-rotate\":{\"syntax\":\"[ auto | reverse ] || <angle>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"angleOrBasicShapeOrPath\",\"percentages\":\"no\",\"groups\":[\"CSS Motion Path\"],\"initial\":\"auto\",\"appliesto\":\"transformableElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/offset-rotate\"},\"opacity\":{\"syntax\":\"<alpha-value>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"number\",\"percentages\":\"no\",\"groups\":[\"CSS Color\"],\"initial\":\"1.0\",\"appliesto\":\"allElements\",\"computed\":\"specifiedValueClipped0To1\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/opacity\"},\"order\":{\"syntax\":\"<integer>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"integer\",\"percentages\":\"no\",\"groups\":[\"CSS Flexible Box Layout\"],\"initial\":\"0\",\"appliesto\":\"flexItemsGridItemsAbsolutelyPositionedContainerChildren\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/order\"},\"orphans\":{\"syntax\":\"<integer>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fragmentation\"],\"initial\":\"2\",\"appliesto\":\"blockContainerElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/orphans\"},\"outline\":{\"syntax\":\"[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]\",\"media\":[\"visual\",\"interactive\"],\"inherited\":false,\"animationType\":[\"outline-color\",\"outline-width\",\"outline-style\"],\"percentages\":\"no\",\"groups\":[\"CSS Basic User Interface\"],\"initial\":[\"outline-color\",\"outline-style\",\"outline-width\"],\"appliesto\":\"allElements\",\"computed\":[\"outline-color\",\"outline-width\",\"outline-style\"],\"order\":\"orderOfAppearance\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/outline\"},\"outline-color\":{\"syntax\":\"<color> | invert\",\"media\":[\"visual\",\"interactive\"],\"inherited\":false,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Basic User Interface\"],\"initial\":\"invertOrCurrentColor\",\"appliesto\":\"allElements\",\"computed\":\"invertForTranslucentColorRGBAOtherwiseRGB\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/outline-color\"},\"outline-offset\":{\"syntax\":\"<length>\",\"media\":[\"visual\",\"interactive\"],\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"no\",\"groups\":[\"CSS Basic User Interface\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/outline-offset\"},\"outline-style\":{\"syntax\":\"auto | <'border-style'>\",\"media\":[\"visual\",\"interactive\"],\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Basic User Interface\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/outline-style\"},\"outline-width\":{\"syntax\":\"<line-width>\",\"media\":[\"visual\",\"interactive\"],\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"no\",\"groups\":[\"CSS Basic User Interface\"],\"initial\":\"medium\",\"appliesto\":\"allElements\",\"computed\":\"absoluteLength0ForNone\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/outline-width\"},\"overflow\":{\"syntax\":\"[ visible | hidden | clip | scroll | auto ]{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Overflow\"],\"initial\":\"visible\",\"appliesto\":\"blockContainersFlexContainersGridContainers\",\"computed\":[\"overflow-x\",\"overflow-y\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/overflow\"},\"overflow-anchor\":{\"syntax\":\"auto | none\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Anchoring\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\"},\"overflow-block\":{\"syntax\":\"visible | hidden | clip | scroll | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Overflow\"],\"initial\":\"auto\",\"appliesto\":\"blockContainersFlexContainersGridContainers\",\"computed\":\"asSpecifiedButVisibleOrClipReplacedToAutoOrHiddenIfOtherValueDifferent\",\"order\":\"perGrammar\",\"status\":\"standard\"},\"overflow-clip-box\":{\"syntax\":\"padding-box | content-box\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Mozilla Extensions\"],\"initial\":\"padding-box\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Mozilla/CSS/overflow-clip-box\"},\"overflow-inline\":{\"syntax\":\"visible | hidden | clip | scroll | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Overflow\"],\"initial\":\"auto\",\"appliesto\":\"blockContainersFlexContainersGridContainers\",\"computed\":\"asSpecifiedButVisibleOrClipReplacedToAutoOrHiddenIfOtherValueDifferent\",\"order\":\"perGrammar\",\"status\":\"standard\"},\"overflow-wrap\":{\"syntax\":\"normal | break-word | anywhere\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text\"],\"initial\":\"normal\",\"appliesto\":\"nonReplacedInlineElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\"},\"overflow-x\":{\"syntax\":\"visible | hidden | clip | scroll | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Overflow\"],\"initial\":\"visible\",\"appliesto\":\"blockContainersFlexContainersGridContainers\",\"computed\":\"asSpecifiedButVisibleOrClipReplacedToAutoOrHiddenIfOtherValueDifferent\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/overflow-x\"},\"overflow-y\":{\"syntax\":\"visible | hidden | clip | scroll | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Overflow\"],\"initial\":\"visible\",\"appliesto\":\"blockContainersFlexContainersGridContainers\",\"computed\":\"asSpecifiedButVisibleOrClipReplacedToAutoOrHiddenIfOtherValueDifferent\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/overflow-y\"},\"overscroll-behavior\":{\"syntax\":\"[ contain | none | auto ]{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Model\"],\"initial\":\"auto\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior\"},\"overscroll-behavior-block\":{\"syntax\":\"contain | none | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Model\"],\"initial\":\"auto\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block\"},\"overscroll-behavior-inline\":{\"syntax\":\"contain | none | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Model\"],\"initial\":\"auto\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline\"},\"overscroll-behavior-x\":{\"syntax\":\"contain | none | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Model\"],\"initial\":\"auto\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x\"},\"overscroll-behavior-y\":{\"syntax\":\"contain | none | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Model\"],\"initial\":\"auto\",\"appliesto\":\"nonReplacedBlockAndInlineBlockElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y\"},\"padding\":{\"syntax\":\"[ <length> | <percentage> ]{1,4}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Box Model\"],\"initial\":[\"padding-bottom\",\"padding-left\",\"padding-right\",\"padding-top\"],\"appliesto\":\"allElementsExceptInternalTableDisplayTypes\",\"computed\":[\"padding-bottom\",\"padding-left\",\"padding-right\",\"padding-top\"],\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/padding\"},\"padding-block\":{\"syntax\":\"<'padding-left'>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asLength\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/padding-block\"},\"padding-block-end\":{\"syntax\":\"<'padding-left'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asLength\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/padding-block-end\"},\"padding-block-start\":{\"syntax\":\"<'padding-left'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asLength\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/padding-block-start\"},\"padding-bottom\":{\"syntax\":\"<length> | <percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Box Model\"],\"initial\":\"0\",\"appliesto\":\"allElementsExceptInternalTableDisplayTypes\",\"computed\":\"percentageAsSpecifiedOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/padding-bottom\"},\"padding-inline\":{\"syntax\":\"<'padding-left'>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asLength\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/padding-inline\"},\"padding-inline-end\":{\"syntax\":\"<'padding-left'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asLength\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/padding-inline-end\"},\"padding-inline-start\":{\"syntax\":\"<'padding-left'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"logicalWidthOfContainingBlock\",\"groups\":[\"CSS Logical Properties\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asLength\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/padding-inline-start\"},\"padding-left\":{\"syntax\":\"<length> | <percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Box Model\"],\"initial\":\"0\",\"appliesto\":\"allElementsExceptInternalTableDisplayTypes\",\"computed\":\"percentageAsSpecifiedOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/padding-left\"},\"padding-right\":{\"syntax\":\"<length> | <percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Box Model\"],\"initial\":\"0\",\"appliesto\":\"allElementsExceptInternalTableDisplayTypes\",\"computed\":\"percentageAsSpecifiedOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/padding-right\"},\"padding-top\":{\"syntax\":\"<length> | <percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Box Model\"],\"initial\":\"0\",\"appliesto\":\"allElementsExceptInternalTableDisplayTypes\",\"computed\":\"percentageAsSpecifiedOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/padding-top\"},\"page-break-after\":{\"syntax\":\"auto | always | avoid | left | right | recto | verso\",\"media\":[\"visual\",\"paged\"],\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Pages\"],\"initial\":\"auto\",\"appliesto\":\"blockElementsInNormalFlow\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/page-break-after\"},\"page-break-before\":{\"syntax\":\"auto | always | avoid | left | right | recto | verso\",\"media\":[\"visual\",\"paged\"],\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Pages\"],\"initial\":\"auto\",\"appliesto\":\"blockElementsInNormalFlow\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/page-break-before\"},\"page-break-inside\":{\"syntax\":\"auto | avoid\",\"media\":[\"visual\",\"paged\"],\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Pages\"],\"initial\":\"auto\",\"appliesto\":\"blockElementsInNormalFlow\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/page-break-inside\"},\"paint-order\":{\"syntax\":\"normal | [ fill || stroke || markers ]\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text\"],\"initial\":\"normal\",\"appliesto\":\"textElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/paint-order\"},\"perspective\":{\"syntax\":\"none | <length>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"no\",\"groups\":[\"CSS Transforms\"],\"initial\":\"none\",\"appliesto\":\"transformableElements\",\"computed\":\"absoluteLengthOrNone\",\"order\":\"uniqueOrder\",\"stacking\":true,\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/perspective\"},\"perspective-origin\":{\"syntax\":\"<position>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"simpleListOfLpc\",\"percentages\":\"referToSizeOfBoundingBox\",\"groups\":[\"CSS Transforms\"],\"initial\":\"50% 50%\",\"appliesto\":\"transformableElements\",\"computed\":\"forLengthAbsoluteValueOtherwisePercentage\",\"order\":\"oneOrTwoValuesLengthAbsoluteKeywordsPercentages\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/perspective-origin\"},\"place-content\":{\"syntax\":\"<'align-content'> <'justify-content'>?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Alignment\"],\"initial\":\"normal\",\"appliesto\":\"multilineFlexContainers\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/place-content\"},\"place-items\":{\"syntax\":\"<'align-items'> <'justify-items'>?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Alignment\"],\"initial\":[\"align-items\",\"justify-items\"],\"appliesto\":\"allElements\",\"computed\":[\"align-items\",\"justify-items\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/place-items\"},\"place-self\":{\"syntax\":\"<'align-self'> <'justify-self'>?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Box Alignment\"],\"initial\":[\"align-self\",\"justify-self\"],\"appliesto\":\"blockLevelBoxesAndAbsolutelyPositionedBoxesAndGridItems\",\"computed\":[\"align-self\",\"justify-self\"],\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/place-self\"},\"pointer-events\":{\"syntax\":\"auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Pointer Events\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/pointer-events\"},\"position\":{\"syntax\":\"static | relative | absolute | sticky | fixed\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Positioning\"],\"initial\":\"static\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"stacking\":true,\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/position\"},\"quotes\":{\"syntax\":\"none | auto | [ <string> <string> ]+\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Generated Content\"],\"initial\":\"dependsOnUserAgent\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/quotes\"},\"resize\":{\"syntax\":\"none | both | horizontal | vertical | block | inline\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Basic User Interface\"],\"initial\":\"none\",\"appliesto\":\"elementsWithOverflowNotVisibleAndReplacedElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/resize\"},\"right\":{\"syntax\":\"<length> | <percentage> | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Positioning\"],\"initial\":\"auto\",\"appliesto\":\"positionedElements\",\"computed\":\"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/right\"},\"rotate\":{\"syntax\":\"none | <angle> | [ x | y | z | <number>{3} ] && <angle>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"transform\",\"percentages\":\"no\",\"groups\":[\"CSS Transforms\"],\"initial\":\"none\",\"appliesto\":\"transformableElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"stacking\":true,\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/rotate\"},\"row-gap\":{\"syntax\":\"normal | <length-percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToDimensionOfContentArea\",\"groups\":[\"CSS Box Alignment\"],\"initial\":\"normal\",\"appliesto\":\"multiColumnElementsFlexContainersGridContainers\",\"computed\":\"asSpecifiedWithLengthsAbsoluteAndNormalComputingToZeroExceptMultiColumn\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/row-gap\"},\"ruby-align\":{\"syntax\":\"start | center | space-between | space-around\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Ruby\"],\"initial\":\"space-around\",\"appliesto\":\"rubyBasesAnnotationsBaseAnnotationContainers\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/ruby-align\"},\"ruby-merge\":{\"syntax\":\"separate | collapse | auto\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Ruby\"],\"initial\":\"separate\",\"appliesto\":\"rubyAnnotationsContainers\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"experimental\"},\"ruby-position\":{\"syntax\":\"over | under | inter-character\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Ruby\"],\"initial\":\"over\",\"appliesto\":\"rubyAnnotationsContainers\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/ruby-position\"},\"scale\":{\"syntax\":\"none | <number>{1,3}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"transform\",\"percentages\":\"no\",\"groups\":[\"CSS Transforms\"],\"initial\":\"none\",\"appliesto\":\"transformableElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"stacking\":true,\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scale\"},\"scrollbar-color\":{\"syntax\":\"auto | dark | light | <color>{2}\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Scrollbars\"],\"initial\":\"auto\",\"appliesto\":\"scrollingBoxes\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scrollbar-color\"},\"scrollbar-gutter\":{\"syntax\":\"auto | [ stable | always ] && both? && force?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Overflow\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter\"},\"scrollbar-width\":{\"syntax\":\"auto | thin | none\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Scrollbars\"],\"initial\":\"auto\",\"appliesto\":\"scrollingBoxes\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scrollbar-width\"},\"scroll-behavior\":{\"syntax\":\"auto | smooth\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSSOM View\"],\"initial\":\"auto\",\"appliesto\":\"scrollingBoxes\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-behavior\"},\"scroll-margin\":{\"syntax\":\"<length>{1,4}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-margin\"},\"scroll-margin-block\":{\"syntax\":\"<length>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block\"},\"scroll-margin-block-start\":{\"syntax\":\"<length>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start\"},\"scroll-margin-block-end\":{\"syntax\":\"<length>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end\"},\"scroll-margin-bottom\":{\"syntax\":\"<length>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\"},\"scroll-margin-inline\":{\"syntax\":\"<length>{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline\"},\"scroll-margin-inline-start\":{\"syntax\":\"<length>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start\"},\"scroll-margin-inline-end\":{\"syntax\":\"<length>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end\"},\"scroll-margin-left\":{\"syntax\":\"<length>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\"},\"scroll-margin-right\":{\"syntax\":\"<length>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\"},\"scroll-margin-top\":{\"syntax\":\"<length>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"0\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\"},\"scroll-padding\":{\"syntax\":\"[ auto | <length-percentage> ]{1,4}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"relativeToTheScrollContainersScrollport\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"auto\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-padding\"},\"scroll-padding-block\":{\"syntax\":\"[ auto | <length-percentage> ]{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"relativeToTheScrollContainersScrollport\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"auto\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block\"},\"scroll-padding-block-start\":{\"syntax\":\"auto | <length-percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"relativeToTheScrollContainersScrollport\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"auto\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start\"},\"scroll-padding-block-end\":{\"syntax\":\"auto | <length-percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"relativeToTheScrollContainersScrollport\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"auto\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end\"},\"scroll-padding-bottom\":{\"syntax\":\"auto | <length-percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"relativeToTheScrollContainersScrollport\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"auto\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom\"},\"scroll-padding-inline\":{\"syntax\":\"[ auto | <length-percentage> ]{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"relativeToTheScrollContainersScrollport\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"auto\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline\"},\"scroll-padding-inline-start\":{\"syntax\":\"auto | <length-percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"relativeToTheScrollContainersScrollport\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"auto\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start\"},\"scroll-padding-inline-end\":{\"syntax\":\"auto | <length-percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"relativeToTheScrollContainersScrollport\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"auto\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end\"},\"scroll-padding-left\":{\"syntax\":\"auto | <length-percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"relativeToTheScrollContainersScrollport\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"auto\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left\"},\"scroll-padding-right\":{\"syntax\":\"auto | <length-percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"relativeToTheScrollContainersScrollport\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"auto\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right\"},\"scroll-padding-top\":{\"syntax\":\"auto | <length-percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"relativeToTheScrollContainersScrollport\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"auto\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top\"},\"scroll-snap-align\":{\"syntax\":\"[ none | start | end | center ]{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align\"},\"scroll-snap-coordinate\":{\"syntax\":\"none | <position>#\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"position\",\"percentages\":\"referToBorderBox\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"status\":\"obsolete\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-coordinate\"},\"scroll-snap-destination\":{\"syntax\":\"<position>\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"position\",\"percentages\":\"relativeToScrollContainerPaddingBoxAxis\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"0px 0px\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"status\":\"obsolete\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-destination\"},\"scroll-snap-points-x\":{\"syntax\":\"none | repeat( <length-percentage> )\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"relativeToScrollContainerPaddingBoxAxis\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"none\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"status\":\"obsolete\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-points-x\"},\"scroll-snap-points-y\":{\"syntax\":\"none | repeat( <length-percentage> )\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"relativeToScrollContainerPaddingBoxAxis\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"none\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"status\":\"obsolete\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-points-y\"},\"scroll-snap-stop\":{\"syntax\":\"normal | always\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop\"},\"scroll-snap-type\":{\"syntax\":\"none | [ x | y | block | inline | both ] [ mandatory | proximity ]?\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type\"},\"scroll-snap-type-x\":{\"syntax\":\"none | mandatory | proximity\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"none\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"obsolete\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type-x\"},\"scroll-snap-type-y\":{\"syntax\":\"none | mandatory | proximity\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Scroll Snap\"],\"initial\":\"none\",\"appliesto\":\"scrollContainers\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"obsolete\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type-y\"},\"shape-image-threshold\":{\"syntax\":\"<alpha-value>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"number\",\"percentages\":\"no\",\"groups\":[\"CSS Shapes\"],\"initial\":\"0.0\",\"appliesto\":\"floats\",\"computed\":\"specifiedValueNumberClipped0To1\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold\"},\"shape-margin\":{\"syntax\":\"<length-percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Shapes\"],\"initial\":\"0\",\"appliesto\":\"floats\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/shape-margin\"},\"shape-outside\":{\"syntax\":\"none | <shape-box> || <basic-shape> | <image>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"basicShapeOtherwiseNo\",\"percentages\":\"no\",\"groups\":[\"CSS Shapes\"],\"initial\":\"none\",\"appliesto\":\"floats\",\"computed\":\"asDefinedForBasicShapeWithAbsoluteURIOtherwiseAsSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/shape-outside\"},\"tab-size\":{\"syntax\":\"<integer> | <length>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"length\",\"percentages\":\"no\",\"groups\":[\"CSS Text\"],\"initial\":\"8\",\"appliesto\":\"blockContainers\",\"computed\":\"specifiedIntegerOrAbsoluteLength\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/tab-size\"},\"table-layout\":{\"syntax\":\"auto | fixed\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Table\"],\"initial\":\"auto\",\"appliesto\":\"tableElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/table-layout\"},\"text-align\":{\"syntax\":\"start | end | left | right | center | justify | match-parent\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text\"],\"initial\":\"startOrNamelessValueIfLTRRightIfRTL\",\"appliesto\":\"blockContainers\",\"computed\":\"asSpecifiedExceptMatchParent\",\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-align\"},\"text-align-last\":{\"syntax\":\"auto | start | end | left | right | center | justify\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text\"],\"initial\":\"auto\",\"appliesto\":\"blockContainers\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-align-last\"},\"text-combine-upright\":{\"syntax\":\"none | all | [ digits <integer>? ]\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"notAnimatable\",\"percentages\":\"no\",\"groups\":[\"CSS Writing Modes\"],\"initial\":\"none\",\"appliesto\":\"nonReplacedInlineElements\",\"computed\":\"keywordPlusIntegerIfDigits\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-combine-upright\"},\"text-decoration\":{\"syntax\":\"<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"text-decoration-color\",\"text-decoration-style\",\"text-decoration-line\",\"text-decoration-thickness\"],\"percentages\":\"no\",\"groups\":[\"CSS Text Decoration\"],\"initial\":[\"text-decoration-color\",\"text-decoration-style\",\"text-decoration-line\"],\"appliesto\":\"allElements\",\"computed\":[\"text-decoration-line\",\"text-decoration-style\",\"text-decoration-color\",\"text-decoration-thickness\"],\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-decoration\"},\"text-decoration-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Text Decoration\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-decoration-color\"},\"text-decoration-line\":{\"syntax\":\"none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text Decoration\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-decoration-line\"},\"text-decoration-skip\":{\"syntax\":\"none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text Decoration\"],\"initial\":\"objects\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip\"},\"text-decoration-skip-ink\":{\"syntax\":\"auto | all | none\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text Decoration\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink\"},\"text-decoration-style\":{\"syntax\":\"solid | double | dotted | dashed | wavy\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text Decoration\"],\"initial\":\"solid\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-decoration-style\"},\"text-decoration-thickness\":{\"syntax\":\"auto | from-font | <length> | <percentage> \",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"byComputedValueType\",\"percentages\":\"referToElementFontSize\",\"groups\":[\"CSS Text Decoration\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\"},\"text-emphasis\":{\"syntax\":\"<'text-emphasis-style'> || <'text-emphasis-color'>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":[\"text-emphasis-color\",\"text-emphasis-style\"],\"percentages\":\"no\",\"groups\":[\"CSS Text Decoration\"],\"initial\":[\"text-emphasis-style\",\"text-emphasis-color\"],\"appliesto\":\"allElements\",\"computed\":[\"text-emphasis-style\",\"text-emphasis-color\"],\"order\":\"orderOfAppearance\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-emphasis\"},\"text-emphasis-color\":{\"syntax\":\"<color>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"color\",\"percentages\":\"no\",\"groups\":[\"CSS Text Decoration\"],\"initial\":\"currentcolor\",\"appliesto\":\"allElements\",\"computed\":\"computedColor\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color\"},\"text-emphasis-position\":{\"syntax\":\"[ over | under ] && [ right | left ]\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text Decoration\"],\"initial\":\"over right\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position\"},\"text-emphasis-style\":{\"syntax\":\"none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text Decoration\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style\"},\"text-indent\":{\"syntax\":\"<length-percentage> && hanging? && each-line?\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"lpc\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Text\"],\"initial\":\"0\",\"appliesto\":\"blockContainers\",\"computed\":\"percentageOrAbsoluteLengthPlusKeywords\",\"order\":\"lengthOrPercentageBeforeKeywords\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-indent\"},\"text-justify\":{\"syntax\":\"auto | inter-character | inter-word | none\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text\"],\"initial\":\"auto\",\"appliesto\":\"inlineLevelAndTableCellElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-justify\"},\"text-orientation\":{\"syntax\":\"mixed | upright | sideways\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Writing Modes\"],\"initial\":\"mixed\",\"appliesto\":\"allElementsExceptTableRowGroupsRowsColumnGroupsAndColumns\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-orientation\"},\"text-overflow\":{\"syntax\":\"[ clip | ellipsis | <string> ]{1,2}\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Basic User Interface\"],\"initial\":\"clip\",\"appliesto\":\"blockContainerElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-overflow\"},\"text-rendering\":{\"syntax\":\"auto | optimizeSpeed | optimizeLegibility | geometricPrecision\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Miscellaneous\"],\"initial\":\"auto\",\"appliesto\":\"textElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-rendering\"},\"text-shadow\":{\"syntax\":\"none | <shadow-t>#\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"shadowList\",\"percentages\":\"no\",\"groups\":[\"CSS Text Decoration\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"colorPlusThreeAbsoluteLengths\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-shadow\"},\"text-size-adjust\":{\"syntax\":\"none | auto | <percentage>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"referToSizeOfFont\",\"groups\":[\"CSS Text\"],\"initial\":\"autoForSmartphoneBrowsersSupportingInflation\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"experimental\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-size-adjust\"},\"text-transform\":{\"syntax\":\"none | capitalize | uppercase | lowercase | full-width | full-size-kana\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text\"],\"initial\":\"none\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-transform\"},\"text-underline-offset\":{\"syntax\":\"auto | <length> | <percentage> \",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"byComputedValueType\",\"percentages\":\"referToElementFontSize\",\"groups\":[\"CSS Text Decoration\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-underline-offset\"},\"text-underline-position\":{\"syntax\":\"auto | from-font | [ under || [ left | right ] ]\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text Decoration\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"orderOfAppearance\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/text-underline-position\"},\"top\":{\"syntax\":\"<length> | <percentage> | auto\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToContainingBlockHeight\",\"groups\":[\"CSS Positioning\"],\"initial\":\"auto\",\"appliesto\":\"positionedElements\",\"computed\":\"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/top\"},\"touch-action\":{\"syntax\":\"auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"Pointer Events\"],\"initial\":\"auto\",\"appliesto\":\"allElementsExceptNonReplacedInlineElementsTableRowsColumnsRowColumnGroups\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/touch-action\"},\"transform\":{\"syntax\":\"none | <transform-list>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"transform\",\"percentages\":\"referToSizeOfBoundingBox\",\"groups\":[\"CSS Transforms\"],\"initial\":\"none\",\"appliesto\":\"transformableElements\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"uniqueOrder\",\"stacking\":true,\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/transform\"},\"transform-box\":{\"syntax\":\"content-box | border-box | fill-box | stroke-box | view-box\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Transforms\"],\"initial\":\"view-box\",\"appliesto\":\"transformableElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/transform-box\"},\"transform-origin\":{\"syntax\":\"[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"simpleListOfLpc\",\"percentages\":\"referToSizeOfBoundingBox\",\"groups\":[\"CSS Transforms\"],\"initial\":\"50% 50% 0\",\"appliesto\":\"transformableElements\",\"computed\":\"forLengthAbsoluteValueOtherwisePercentage\",\"order\":\"oneOrTwoValuesLengthAbsoluteKeywordsPercentages\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/transform-origin\"},\"transform-style\":{\"syntax\":\"flat | preserve-3d\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Transforms\"],\"initial\":\"flat\",\"appliesto\":\"transformableElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"stacking\":true,\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/transform-style\"},\"transition\":{\"syntax\":\"<single-transition>#\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Transitions\"],\"initial\":[\"transition-delay\",\"transition-duration\",\"transition-property\",\"transition-timing-function\"],\"appliesto\":\"allElementsAndPseudos\",\"computed\":[\"transition-delay\",\"transition-duration\",\"transition-property\",\"transition-timing-function\"],\"order\":\"orderOfAppearance\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/transition\"},\"transition-delay\":{\"syntax\":\"<time>#\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Transitions\"],\"initial\":\"0s\",\"appliesto\":\"allElementsAndPseudos\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/transition-delay\"},\"transition-duration\":{\"syntax\":\"<time>#\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Transitions\"],\"initial\":\"0s\",\"appliesto\":\"allElementsAndPseudos\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/transition-duration\"},\"transition-property\":{\"syntax\":\"none | <single-transition-property>#\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Transitions\"],\"initial\":\"all\",\"appliesto\":\"allElementsAndPseudos\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/transition-property\"},\"transition-timing-function\":{\"syntax\":\"<timing-function>#\",\"media\":\"interactive\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Transitions\"],\"initial\":\"ease\",\"appliesto\":\"allElementsAndPseudos\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/transition-timing-function\"},\"translate\":{\"syntax\":\"none | <length-percentage> [ <length-percentage> <length>? ]?\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"transform\",\"percentages\":\"referToSizeOfBoundingBox\",\"groups\":[\"CSS Transforms\"],\"initial\":\"none\",\"appliesto\":\"transformableElements\",\"computed\":\"asSpecifiedRelativeToAbsoluteLengths\",\"order\":\"perGrammar\",\"stacking\":true,\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/translate\"},\"unicode-bidi\":{\"syntax\":\"normal | embed | isolate | bidi-override | isolate-override | plaintext\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Writing Modes\"],\"initial\":\"normal\",\"appliesto\":\"allElementsSomeValuesNoEffectOnNonInlineElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/unicode-bidi\"},\"user-select\":{\"syntax\":\"auto | text | none | contain | all\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Basic User Interface\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/user-select\"},\"vertical-align\":{\"syntax\":\"baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"length\",\"percentages\":\"referToLineHeight\",\"groups\":[\"CSS Table\"],\"initial\":\"baseline\",\"appliesto\":\"inlineLevelAndTableCellElements\",\"computed\":\"absoluteLengthOrKeyword\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/vertical-align\"},\"visibility\":{\"syntax\":\"visible | hidden | collapse\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"visibility\",\"percentages\":\"no\",\"groups\":[\"CSS Box Model\"],\"initial\":\"visible\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/visibility\"},\"white-space\":{\"syntax\":\"normal | pre | nowrap | pre-wrap | pre-line | break-spaces\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/white-space\"},\"widows\":{\"syntax\":\"<integer>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Fragmentation\"],\"initial\":\"2\",\"appliesto\":\"blockContainerElements\",\"computed\":\"asSpecified\",\"order\":\"perGrammar\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/widows\"},\"width\":{\"syntax\":\"auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"lpc\",\"percentages\":\"referToWidthOfContainingBlock\",\"groups\":[\"CSS Box Model\"],\"initial\":\"auto\",\"appliesto\":\"allElementsButNonReplacedAndTableRows\",\"computed\":\"percentageAutoOrAbsoluteLength\",\"order\":\"lengthOrPercentageBeforeKeywordIfBothPresent\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/width\"},\"will-change\":{\"syntax\":\"auto | <animateable-feature>#\",\"media\":\"all\",\"inherited\":false,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Will Change\"],\"initial\":\"auto\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/will-change\"},\"word-break\":{\"syntax\":\"normal | break-all | keep-all | break-word\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/word-break\"},\"word-spacing\":{\"syntax\":\"normal | <length-percentage>\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"length\",\"percentages\":\"referToWidthOfAffectedGlyph\",\"groups\":[\"CSS Text\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"optimumMinAndMaxValueOfAbsoluteLengthPercentageOrNormal\",\"order\":\"uniqueOrder\",\"alsoAppliesTo\":[\"::first-letter\",\"::first-line\",\"::placeholder\"],\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/word-spacing\"},\"word-wrap\":{\"syntax\":\"normal | break-word\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Text\"],\"initial\":\"normal\",\"appliesto\":\"nonReplacedInlineElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\"},\"writing-mode\":{\"syntax\":\"horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr\",\"media\":\"visual\",\"inherited\":true,\"animationType\":\"discrete\",\"percentages\":\"no\",\"groups\":[\"CSS Writing Modes\"],\"initial\":\"horizontal-tb\",\"appliesto\":\"allElementsExceptTableRowColumnGroupsTableRowsColumns\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/writing-mode\"},\"z-index\":{\"syntax\":\"auto | <integer>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"integer\",\"percentages\":\"no\",\"groups\":[\"CSS Positioning\"],\"initial\":\"auto\",\"appliesto\":\"positionedElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"stacking\":true,\"status\":\"standard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/z-index\"},\"zoom\":{\"syntax\":\"normal | reset | <number> | <percentage>\",\"media\":\"visual\",\"inherited\":false,\"animationType\":\"integer\",\"percentages\":\"no\",\"groups\":[\"Microsoft Extensions\"],\"initial\":\"normal\",\"appliesto\":\"allElements\",\"computed\":\"asSpecified\",\"order\":\"uniqueOrder\",\"status\":\"nonstandard\",\"mdn_url\":\"https://developer.mozilla.org/docs/Web/CSS/zoom\"}}");

/***/ }),

/***/ "./node_modules/mdn-data/css/syntaxes.json":
/*!*************************************************!*\
  !*** ./node_modules/mdn-data/css/syntaxes.json ***!
  \*************************************************/
/*! exports provided: absolute-size, alpha-value, angle-percentage, angular-color-hint, angular-color-stop, angular-color-stop-list, animateable-feature, attachment, attr(), attr-matcher, attr-modifier, attribute-selector, auto-repeat, auto-track-list, baseline-position, basic-shape, bg-image, bg-layer, bg-position, bg-size, blur(), blend-mode, box, brightness(), calc(), calc-sum, calc-product, calc-value, cf-final-image, cf-mixing-image, circle(), clamp(), class-selector, clip-source, color, color-stop, color-stop-angle, color-stop-length, color-stop-list, combinator, common-lig-values, compat-auto, composite-style, compositing-operator, compound-selector, compound-selector-list, complex-selector, complex-selector-list, conic-gradient(), contextual-alt-values, content-distribution, content-list, content-position, content-replacement, contrast(), counter(), counter-style, counter-style-name, counters(), cross-fade(), cubic-bezier-timing-function, deprecated-system-color, discretionary-lig-values, display-box, display-inside, display-internal, display-legacy, display-listitem, display-outside, drop-shadow(), east-asian-variant-values, east-asian-width-values, element(), ellipse(), ending-shape, env(), explicit-track-list, family-name, feature-tag-value, feature-type, feature-value-block, feature-value-block-list, feature-value-declaration, feature-value-declaration-list, feature-value-name, fill-rule, filter-function, filter-function-list, final-bg-layer, fit-content(), fixed-breadth, fixed-repeat, fixed-size, font-stretch-absolute, font-variant-css21, font-weight-absolute, frequency-percentage, general-enclosed, generic-family, generic-name, geometry-box, gradient, grayscale(), grid-line, historical-lig-values, hsl(), hsla(), hue, hue-rotate(), id-selector, image, image(), image-set(), image-set-option, image-src, image-tags, inflexible-breadth, inset(), invert(), keyframes-name, keyframe-block, keyframe-block-list, keyframe-selector, leader(), leader-type, length-percentage, line-names, line-name-list, line-style, line-width, linear-color-hint, linear-color-stop, linear-gradient(), mask-layer, mask-position, mask-reference, mask-source, masking-mode, matrix(), matrix3d(), max(), media-and, media-condition, media-condition-without-or, media-feature, media-in-parens, media-not, media-or, media-query, media-query-list, media-type, mf-boolean, mf-name, mf-plain, mf-range, mf-value, min(), minmax(), named-color, namespace-prefix, ns-prefix, number-percentage, numeric-figure-values, numeric-fraction-values, numeric-spacing-values, nth, opacity(), overflow-position, outline-radius, page-body, page-margin-box, page-margin-box-type, page-selector-list, page-selector, path(), paint(), perspective(), polygon(), position, pseudo-class-selector, pseudo-element-selector, pseudo-page, quote, radial-gradient(), relative-selector, relative-selector-list, relative-size, repeat-style, repeating-linear-gradient(), repeating-radial-gradient(), rgb(), rgba(), rotate(), rotate3d(), rotateX(), rotateY(), rotateZ(), saturate(), scale(), scale3d(), scaleX(), scaleY(), scaleZ(), self-position, shape-radius, skew(), skewX(), skewY(), sepia(), shadow, shadow-t, shape, shape-box, side-or-corner, single-animation, single-animation-direction, single-animation-fill-mode, single-animation-iteration-count, single-animation-play-state, single-transition, single-transition-property, size, step-position, step-timing-function, subclass-selector, supports-condition, supports-in-parens, supports-feature, supports-decl, supports-selector-fn, symbol, target, target-counter(), target-counters(), target-text(), time-percentage, timing-function, track-breadth, track-list, track-repeat, track-size, transform-function, transform-list, translate(), translate3d(), translateX(), translateY(), translateZ(), type-or-unit, type-selector, var(), viewport-length, wq-name, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"absolute-size\":{\"syntax\":\"xx-small | x-small | small | medium | large | x-large | xx-large | xxx-large\"},\"alpha-value\":{\"syntax\":\"<number> | <percentage>\"},\"angle-percentage\":{\"syntax\":\"<angle> | <percentage>\"},\"angular-color-hint\":{\"syntax\":\"<angle-percentage>\"},\"angular-color-stop\":{\"syntax\":\"<color> && <color-stop-angle>?\"},\"angular-color-stop-list\":{\"syntax\":\"[ <angular-color-stop> [, <angular-color-hint>]? ]# , <angular-color-stop>\"},\"animateable-feature\":{\"syntax\":\"scroll-position | contents | <custom-ident>\"},\"attachment\":{\"syntax\":\"scroll | fixed | local\"},\"attr()\":{\"syntax\":\"attr( <attr-name> <type-or-unit>? [, <attr-fallback> ]? )\"},\"attr-matcher\":{\"syntax\":\"[ '~' | '|' | '^' | '$' | '*' ]? '='\"},\"attr-modifier\":{\"syntax\":\"i | s\"},\"attribute-selector\":{\"syntax\":\"'[' <wq-name> ']' | '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'\"},\"auto-repeat\":{\"syntax\":\"repeat( [ auto-fill | auto-fit ] , [ <line-names>? <fixed-size> ]+ <line-names>? )\"},\"auto-track-list\":{\"syntax\":\"[ <line-names>? [ <fixed-size> | <fixed-repeat> ] ]* <line-names>? <auto-repeat>\\n[ <line-names>? [ <fixed-size> | <fixed-repeat> ] ]* <line-names>?\"},\"baseline-position\":{\"syntax\":\"[ first | last ]? baseline\"},\"basic-shape\":{\"syntax\":\"<inset()> | <circle()> | <ellipse()> | <polygon()> | <path()>\"},\"bg-image\":{\"syntax\":\"none | <image>\"},\"bg-layer\":{\"syntax\":\"<bg-image> || <bg-position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box> || <box>\"},\"bg-position\":{\"syntax\":\"[ [ left | center | right | top | bottom | <length-percentage> ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ] | [ center | [ left | right ] <length-percentage>? ] && [ center | [ top | bottom ] <length-percentage>? ] ]\"},\"bg-size\":{\"syntax\":\"[ <length-percentage> | auto ]{1,2} | cover | contain\"},\"blur()\":{\"syntax\":\"blur( <length> )\"},\"blend-mode\":{\"syntax\":\"normal | multiply | screen | overlay | darken | lighten | color-dodge | color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity\"},\"box\":{\"syntax\":\"border-box | padding-box | content-box\"},\"brightness()\":{\"syntax\":\"brightness( <number-percentage> )\"},\"calc()\":{\"syntax\":\"calc( <calc-sum> )\"},\"calc-sum\":{\"syntax\":\"<calc-product> [ [ '+' | '-' ] <calc-product> ]*\"},\"calc-product\":{\"syntax\":\"<calc-value> [ '*' <calc-value> | '/' <number> ]*\"},\"calc-value\":{\"syntax\":\"<number> | <dimension> | <percentage> | ( <calc-sum> )\"},\"cf-final-image\":{\"syntax\":\"<image> | <color>\"},\"cf-mixing-image\":{\"syntax\":\"<percentage>? && <image>\"},\"circle()\":{\"syntax\":\"circle( [ <shape-radius> ]? [ at <position> ]? )\"},\"clamp()\":{\"syntax\":\"clamp( <calc-sum>#{3} )\"},\"class-selector\":{\"syntax\":\"'.' <ident-token>\"},\"clip-source\":{\"syntax\":\"<url>\"},\"color\":{\"syntax\":\"<rgb()> | <rgba()> | <hsl()> | <hsla()> | <hex-color> | <named-color> | currentcolor | <deprecated-system-color>\"},\"color-stop\":{\"syntax\":\"<color-stop-length> | <color-stop-angle>\"},\"color-stop-angle\":{\"syntax\":\"<angle-percentage>{1,2}\"},\"color-stop-length\":{\"syntax\":\"<length-percentage>{1,2}\"},\"color-stop-list\":{\"syntax\":\"[ <linear-color-stop> [, <linear-color-hint>]? ]# , <linear-color-stop>\"},\"combinator\":{\"syntax\":\"'>' | '+' | '~' | [ '||' ]\"},\"common-lig-values\":{\"syntax\":\"[ common-ligatures | no-common-ligatures ]\"},\"compat-auto\":{\"syntax\":\"searchfield | textarea | push-button | slider-horizontal | checkbox | radio | square-button | menulist | listbox | meter | progress-bar | button\"},\"composite-style\":{\"syntax\":\"clear | copy | source-over | source-in | source-out | source-atop | destination-over | destination-in | destination-out | destination-atop | xor\"},\"compositing-operator\":{\"syntax\":\"add | subtract | intersect | exclude\"},\"compound-selector\":{\"syntax\":\"[ <type-selector>? <subclass-selector>* [ <pseudo-element-selector> <pseudo-class-selector>* ]* ]!\"},\"compound-selector-list\":{\"syntax\":\"<compound-selector>#\"},\"complex-selector\":{\"syntax\":\"<compound-selector> [ <combinator>? <compound-selector> ]*\"},\"complex-selector-list\":{\"syntax\":\"<complex-selector>#\"},\"conic-gradient()\":{\"syntax\":\"conic-gradient( [ from <angle> ]? [ at <position> ]?, <angular-color-stop-list> )\"},\"contextual-alt-values\":{\"syntax\":\"[ contextual | no-contextual ]\"},\"content-distribution\":{\"syntax\":\"space-between | space-around | space-evenly | stretch\"},\"content-list\":{\"syntax\":\"[ <string> | contents | <image> | <quote> | <target> | <leader()> ]+\"},\"content-position\":{\"syntax\":\"center | start | end | flex-start | flex-end\"},\"content-replacement\":{\"syntax\":\"<image>\"},\"contrast()\":{\"syntax\":\"contrast( [ <number-percentage> ] )\"},\"counter()\":{\"syntax\":\"counter( <custom-ident>, <counter-style>? )\"},\"counter-style\":{\"syntax\":\"<counter-style-name> | symbols()\"},\"counter-style-name\":{\"syntax\":\"<custom-ident>\"},\"counters()\":{\"syntax\":\"counters( <custom-ident>, <string>, <counter-style>? )\"},\"cross-fade()\":{\"syntax\":\"cross-fade( <cf-mixing-image> , <cf-final-image>? )\"},\"cubic-bezier-timing-function\":{\"syntax\":\"ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number [0,1]>, <number>, <number [0,1]>, <number>)\"},\"deprecated-system-color\":{\"syntax\":\"ActiveBorder | ActiveCaption | AppWorkspace | Background | ButtonFace | ButtonHighlight | ButtonShadow | ButtonText | CaptionText | GrayText | Highlight | HighlightText | InactiveBorder | InactiveCaption | InactiveCaptionText | InfoBackground | InfoText | Menu | MenuText | Scrollbar | ThreeDDarkShadow | ThreeDFace | ThreeDHighlight | ThreeDLightShadow | ThreeDShadow | Window | WindowFrame | WindowText\"},\"discretionary-lig-values\":{\"syntax\":\"[ discretionary-ligatures | no-discretionary-ligatures ]\"},\"display-box\":{\"syntax\":\"contents | none\"},\"display-inside\":{\"syntax\":\"flow | flow-root | table | flex | grid | ruby\"},\"display-internal\":{\"syntax\":\"table-row-group | table-header-group | table-footer-group | table-row | table-cell | table-column-group | table-column | table-caption | ruby-base | ruby-text | ruby-base-container | ruby-text-container\"},\"display-legacy\":{\"syntax\":\"inline-block | inline-list-item | inline-table | inline-flex | inline-grid\"},\"display-listitem\":{\"syntax\":\"<display-outside>? && [ flow | flow-root ]? && list-item\"},\"display-outside\":{\"syntax\":\"block | inline | run-in\"},\"drop-shadow()\":{\"syntax\":\"drop-shadow( <length>{2,3} <color>? )\"},\"east-asian-variant-values\":{\"syntax\":\"[ jis78 | jis83 | jis90 | jis04 | simplified | traditional ]\"},\"east-asian-width-values\":{\"syntax\":\"[ full-width | proportional-width ]\"},\"element()\":{\"syntax\":\"element( <id-selector> )\"},\"ellipse()\":{\"syntax\":\"ellipse( [ <shape-radius>{2} ]? [ at <position> ]? )\"},\"ending-shape\":{\"syntax\":\"circle | ellipse\"},\"env()\":{\"syntax\":\"env( <custom-ident> , <declaration-value>? )\"},\"explicit-track-list\":{\"syntax\":\"[ <line-names>? <track-size> ]+ <line-names>?\"},\"family-name\":{\"syntax\":\"<string> | <custom-ident>+\"},\"feature-tag-value\":{\"syntax\":\"<string> [ <integer> | on | off ]?\"},\"feature-type\":{\"syntax\":\"@stylistic | @historical-forms | @styleset | @character-variant | @swash | @ornaments | @annotation\"},\"feature-value-block\":{\"syntax\":\"<feature-type> '{' <feature-value-declaration-list> '}'\"},\"feature-value-block-list\":{\"syntax\":\"<feature-value-block>+\"},\"feature-value-declaration\":{\"syntax\":\"<custom-ident>: <integer>+;\"},\"feature-value-declaration-list\":{\"syntax\":\"<feature-value-declaration>\"},\"feature-value-name\":{\"syntax\":\"<custom-ident>\"},\"fill-rule\":{\"syntax\":\"nonzero | evenodd\"},\"filter-function\":{\"syntax\":\"<blur()> | <brightness()> | <contrast()> | <drop-shadow()> | <grayscale()> | <hue-rotate()> | <invert()> | <opacity()> | <saturate()> | <sepia()>\"},\"filter-function-list\":{\"syntax\":\"[ <filter-function> | <url> ]+\"},\"final-bg-layer\":{\"syntax\":\"<'background-color'> || <bg-image> || <bg-position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box> || <box>\"},\"fit-content()\":{\"syntax\":\"fit-content( [ <length> | <percentage> ] )\"},\"fixed-breadth\":{\"syntax\":\"<length-percentage>\"},\"fixed-repeat\":{\"syntax\":\"repeat( [ <positive-integer> ] , [ <line-names>? <fixed-size> ]+ <line-names>? )\"},\"fixed-size\":{\"syntax\":\"<fixed-breadth> | minmax( <fixed-breadth> , <track-breadth> ) | minmax( <inflexible-breadth> , <fixed-breadth> )\"},\"font-stretch-absolute\":{\"syntax\":\"normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | <percentage>\"},\"font-variant-css21\":{\"syntax\":\"[ normal | small-caps ]\"},\"font-weight-absolute\":{\"syntax\":\"normal | bold | <number [1,1000]>\"},\"frequency-percentage\":{\"syntax\":\"<frequency> | <percentage>\"},\"general-enclosed\":{\"syntax\":\"[ <function-token> <any-value> ) ] | ( <ident> <any-value> )\"},\"generic-family\":{\"syntax\":\"serif | sans-serif | cursive | fantasy | monospace\"},\"generic-name\":{\"syntax\":\"serif | sans-serif | cursive | fantasy | monospace\"},\"geometry-box\":{\"syntax\":\"<shape-box> | fill-box | stroke-box | view-box\"},\"gradient\":{\"syntax\":\"<linear-gradient()> | <repeating-linear-gradient()> | <radial-gradient()> | <repeating-radial-gradient()> | <conic-gradient()>\"},\"grayscale()\":{\"syntax\":\"grayscale( <number-percentage> )\"},\"grid-line\":{\"syntax\":\"auto | <custom-ident> | [ <integer> && <custom-ident>? ] | [ span && [ <integer> || <custom-ident> ] ]\"},\"historical-lig-values\":{\"syntax\":\"[ historical-ligatures | no-historical-ligatures ]\"},\"hsl()\":{\"syntax\":\"hsl( <hue> <percentage> <percentage> [ / <alpha-value> ]? ) | hsl( <hue>, <percentage>, <percentage>, <alpha-value>? )\"},\"hsla()\":{\"syntax\":\"hsla( <hue> <percentage> <percentage> [ / <alpha-value> ]? ) | hsla( <hue>, <percentage>, <percentage>, <alpha-value>? )\"},\"hue\":{\"syntax\":\"<number> | <angle>\"},\"hue-rotate()\":{\"syntax\":\"hue-rotate( <angle> )\"},\"id-selector\":{\"syntax\":\"<hash-token>\"},\"image\":{\"syntax\":\"<url> | <image()> | <image-set()> | <element()> | <paint()> | <cross-fade()> | <gradient>\"},\"image()\":{\"syntax\":\"image( <image-tags>? [ <image-src>? , <color>? ]! )\"},\"image-set()\":{\"syntax\":\"image-set( <image-set-option># )\"},\"image-set-option\":{\"syntax\":\"[ <image> | <string> ] <resolution>\"},\"image-src\":{\"syntax\":\"<url> | <string>\"},\"image-tags\":{\"syntax\":\"ltr | rtl\"},\"inflexible-breadth\":{\"syntax\":\"<length> | <percentage> | min-content | max-content | auto\"},\"inset()\":{\"syntax\":\"inset( <length-percentage>{1,4} [ round <'border-radius'> ]? )\"},\"invert()\":{\"syntax\":\"invert( <number-percentage> )\"},\"keyframes-name\":{\"syntax\":\"<custom-ident> | <string>\"},\"keyframe-block\":{\"syntax\":\"<keyframe-selector># {\\n  <declaration-list>\\n}\"},\"keyframe-block-list\":{\"syntax\":\"<keyframe-block>+\"},\"keyframe-selector\":{\"syntax\":\"from | to | <percentage>\"},\"leader()\":{\"syntax\":\"leader( <leader-type> )\"},\"leader-type\":{\"syntax\":\"dotted | solid | space | <string>\"},\"length-percentage\":{\"syntax\":\"<length> | <percentage>\"},\"line-names\":{\"syntax\":\"'[' <custom-ident>* ']'\"},\"line-name-list\":{\"syntax\":\"[ <line-names> | <name-repeat> ]+\"},\"line-style\":{\"syntax\":\"none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\"},\"line-width\":{\"syntax\":\"<length> | thin | medium | thick\"},\"linear-color-hint\":{\"syntax\":\"<length-percentage>\"},\"linear-color-stop\":{\"syntax\":\"<color> <color-stop-length>?\"},\"linear-gradient()\":{\"syntax\":\"linear-gradient( [ <angle> | to <side-or-corner> ]? , <color-stop-list> )\"},\"mask-layer\":{\"syntax\":\"<mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || <geometry-box> || [ <geometry-box> | no-clip ] || <compositing-operator> || <masking-mode>\"},\"mask-position\":{\"syntax\":\"[ <length-percentage> | left | center | right ] [ <length-percentage> | top | center | bottom ]?\"},\"mask-reference\":{\"syntax\":\"none | <image> | <mask-source>\"},\"mask-source\":{\"syntax\":\"<url>\"},\"masking-mode\":{\"syntax\":\"alpha | luminance | match-source\"},\"matrix()\":{\"syntax\":\"matrix( <number>#{6} )\"},\"matrix3d()\":{\"syntax\":\"matrix3d( <number>#{16} )\"},\"max()\":{\"syntax\":\"max( <calc-sum># )\"},\"media-and\":{\"syntax\":\"<media-in-parens> [ and <media-in-parens> ]+\"},\"media-condition\":{\"syntax\":\"<media-not> | <media-and> | <media-or> | <media-in-parens>\"},\"media-condition-without-or\":{\"syntax\":\"<media-not> | <media-and> | <media-in-parens>\"},\"media-feature\":{\"syntax\":\"( [ <mf-plain> | <mf-boolean> | <mf-range> ] )\"},\"media-in-parens\":{\"syntax\":\"( <media-condition> ) | <media-feature> | <general-enclosed>\"},\"media-not\":{\"syntax\":\"not <media-in-parens>\"},\"media-or\":{\"syntax\":\"<media-in-parens> [ or <media-in-parens> ]+\"},\"media-query\":{\"syntax\":\"<media-condition> | [ not | only ]? <media-type> [ and <media-condition-without-or> ]?\"},\"media-query-list\":{\"syntax\":\"<media-query>#\"},\"media-type\":{\"syntax\":\"<ident>\"},\"mf-boolean\":{\"syntax\":\"<mf-name>\"},\"mf-name\":{\"syntax\":\"<ident>\"},\"mf-plain\":{\"syntax\":\"<mf-name> : <mf-value>\"},\"mf-range\":{\"syntax\":\"<mf-name> [ '<' | '>' ]? '='? <mf-value>\\n| <mf-value> [ '<' | '>' ]? '='? <mf-name>\\n| <mf-value> '<' '='? <mf-name> '<' '='? <mf-value>\\n| <mf-value> '>' '='? <mf-name> '>' '='? <mf-value>\"},\"mf-value\":{\"syntax\":\"<number> | <dimension> | <ident> | <ratio>\"},\"min()\":{\"syntax\":\"min( <calc-sum># )\"},\"minmax()\":{\"syntax\":\"minmax( [ <length> | <percentage> | min-content | max-content | auto ] , [ <length> | <percentage> | <flex> | min-content | max-content | auto ] )\"},\"named-color\":{\"syntax\":\"transparent | aliceblue | antiquewhite | aqua | aquamarine | azure | beige | bisque | black | blanchedalmond | blue | blueviolet | brown | burlywood | cadetblue | chartreuse | chocolate | coral | cornflowerblue | cornsilk | crimson | cyan | darkblue | darkcyan | darkgoldenrod | darkgray | darkgreen | darkgrey | darkkhaki | darkmagenta | darkolivegreen | darkorange | darkorchid | darkred | darksalmon | darkseagreen | darkslateblue | darkslategray | darkslategrey | darkturquoise | darkviolet | deeppink | deepskyblue | dimgray | dimgrey | dodgerblue | firebrick | floralwhite | forestgreen | fuchsia | gainsboro | ghostwhite | gold | goldenrod | gray | green | greenyellow | grey | honeydew | hotpink | indianred | indigo | ivory | khaki | lavender | lavenderblush | lawngreen | lemonchiffon | lightblue | lightcoral | lightcyan | lightgoldenrodyellow | lightgray | lightgreen | lightgrey | lightpink | lightsalmon | lightseagreen | lightskyblue | lightslategray | lightslategrey | lightsteelblue | lightyellow | lime | limegreen | linen | magenta | maroon | mediumaquamarine | mediumblue | mediumorchid | mediumpurple | mediumseagreen | mediumslateblue | mediumspringgreen | mediumturquoise | mediumvioletred | midnightblue | mintcream | mistyrose | moccasin | navajowhite | navy | oldlace | olive | olivedrab | orange | orangered | orchid | palegoldenrod | palegreen | paleturquoise | palevioletred | papayawhip | peachpuff | peru | pink | plum | powderblue | purple | rebeccapurple | red | rosybrown | royalblue | saddlebrown | salmon | sandybrown | seagreen | seashell | sienna | silver | skyblue | slateblue | slategray | slategrey | snow | springgreen | steelblue | tan | teal | thistle | tomato | turquoise | violet | wheat | white | whitesmoke | yellow | yellowgreen\"},\"namespace-prefix\":{\"syntax\":\"<ident>\"},\"ns-prefix\":{\"syntax\":\"[ <ident-token> | '*' ]? '|'\"},\"number-percentage\":{\"syntax\":\"<number> | <percentage>\"},\"numeric-figure-values\":{\"syntax\":\"[ lining-nums | oldstyle-nums ]\"},\"numeric-fraction-values\":{\"syntax\":\"[ diagonal-fractions | stacked-fractions ]\"},\"numeric-spacing-values\":{\"syntax\":\"[ proportional-nums | tabular-nums ]\"},\"nth\":{\"syntax\":\"<an-plus-b> | even | odd\"},\"opacity()\":{\"syntax\":\"opacity( [ <number-percentage> ] )\"},\"overflow-position\":{\"syntax\":\"unsafe | safe\"},\"outline-radius\":{\"syntax\":\"<length> | <percentage>\"},\"page-body\":{\"syntax\":\"<declaration>? [ ; <page-body> ]? | <page-margin-box> <page-body>\"},\"page-margin-box\":{\"syntax\":\"<page-margin-box-type> '{' <declaration-list> '}'\"},\"page-margin-box-type\":{\"syntax\":\"@top-left-corner | @top-left | @top-center | @top-right | @top-right-corner | @bottom-left-corner | @bottom-left | @bottom-center | @bottom-right | @bottom-right-corner | @left-top | @left-middle | @left-bottom | @right-top | @right-middle | @right-bottom\"},\"page-selector-list\":{\"syntax\":\"[ <page-selector># ]?\"},\"page-selector\":{\"syntax\":\"<pseudo-page>+ | <ident> <pseudo-page>*\"},\"path()\":{\"syntax\":\"path( [ <fill-rule>, ]? <string> )\"},\"paint()\":{\"syntax\":\"paint( <ident>, <declaration-value>? )\"},\"perspective()\":{\"syntax\":\"perspective( <length> )\"},\"polygon()\":{\"syntax\":\"polygon( <fill-rule>? , [ <length-percentage> <length-percentage> ]# )\"},\"position\":{\"syntax\":\"[ [ left | center | right ] || [ top | center | bottom ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ]? | [ [ left | right ] <length-percentage> ] && [ [ top | bottom ] <length-percentage> ] ]\"},\"pseudo-class-selector\":{\"syntax\":\"':' <ident-token> | ':' <function-token> <any-value> ')'\"},\"pseudo-element-selector\":{\"syntax\":\"':' <pseudo-class-selector>\"},\"pseudo-page\":{\"syntax\":\": [ left | right | first | blank ]\"},\"quote\":{\"syntax\":\"open-quote | close-quote | no-open-quote | no-close-quote\"},\"radial-gradient()\":{\"syntax\":\"radial-gradient( [ <ending-shape> || <size> ]? [ at <position> ]? , <color-stop-list> )\"},\"relative-selector\":{\"syntax\":\"<combinator>? <complex-selector>\"},\"relative-selector-list\":{\"syntax\":\"<relative-selector>#\"},\"relative-size\":{\"syntax\":\"larger | smaller\"},\"repeat-style\":{\"syntax\":\"repeat-x | repeat-y | [ repeat | space | round | no-repeat ]{1,2}\"},\"repeating-linear-gradient()\":{\"syntax\":\"repeating-linear-gradient( [ <angle> | to <side-or-corner> ]? , <color-stop-list> )\"},\"repeating-radial-gradient()\":{\"syntax\":\"repeating-radial-gradient( [ <ending-shape> || <size> ]? [ at <position> ]? , <color-stop-list> )\"},\"rgb()\":{\"syntax\":\"rgb( <percentage>{3} [ / <alpha-value> ]? ) | rgb( <number>{3} [ / <alpha-value> ]? ) | rgb( <percentage>#{3} , <alpha-value>? ) | rgb( <number>#{3} , <alpha-value>? )\"},\"rgba()\":{\"syntax\":\"rgba( <percentage>{3} [ / <alpha-value> ]? ) | rgba( <number>{3} [ / <alpha-value> ]? ) | rgba( <percentage>#{3} , <alpha-value>? ) | rgba( <number>#{3} , <alpha-value>? )\"},\"rotate()\":{\"syntax\":\"rotate( [ <angle> | <zero> ] )\"},\"rotate3d()\":{\"syntax\":\"rotate3d( <number> , <number> , <number> , [ <angle> | <zero> ] )\"},\"rotateX()\":{\"syntax\":\"rotateX( [ <angle> | <zero> ] )\"},\"rotateY()\":{\"syntax\":\"rotateY( [ <angle> | <zero> ] )\"},\"rotateZ()\":{\"syntax\":\"rotateZ( [ <angle> | <zero> ] )\"},\"saturate()\":{\"syntax\":\"saturate( <number-percentage> )\"},\"scale()\":{\"syntax\":\"scale( <number> , <number>? )\"},\"scale3d()\":{\"syntax\":\"scale3d( <number> , <number> , <number> )\"},\"scaleX()\":{\"syntax\":\"scaleX( <number> )\"},\"scaleY()\":{\"syntax\":\"scaleY( <number> )\"},\"scaleZ()\":{\"syntax\":\"scaleZ( <number> )\"},\"self-position\":{\"syntax\":\"center | start | end | self-start | self-end | flex-start | flex-end\"},\"shape-radius\":{\"syntax\":\"<length-percentage> | closest-side | farthest-side\"},\"skew()\":{\"syntax\":\"skew( [ <angle> | <zero> ] , [ <angle> | <zero> ]? )\"},\"skewX()\":{\"syntax\":\"skewX( [ <angle> | <zero> ] )\"},\"skewY()\":{\"syntax\":\"skewY( [ <angle> | <zero> ] )\"},\"sepia()\":{\"syntax\":\"sepia( <number-percentage> )\"},\"shadow\":{\"syntax\":\"inset? && <length>{2,4} && <color>?\"},\"shadow-t\":{\"syntax\":\"[ <length>{2,3} && <color>? ]\"},\"shape\":{\"syntax\":\"rect(<top>, <right>, <bottom>, <left>)\"},\"shape-box\":{\"syntax\":\"<box> | margin-box\"},\"side-or-corner\":{\"syntax\":\"[ left | right ] || [ top | bottom ]\"},\"single-animation\":{\"syntax\":\"<time> || <timing-function> || <time> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode> || <single-animation-play-state> || [ none | <keyframes-name> ]\"},\"single-animation-direction\":{\"syntax\":\"normal | reverse | alternate | alternate-reverse\"},\"single-animation-fill-mode\":{\"syntax\":\"none | forwards | backwards | both\"},\"single-animation-iteration-count\":{\"syntax\":\"infinite | <number>\"},\"single-animation-play-state\":{\"syntax\":\"running | paused\"},\"single-transition\":{\"syntax\":\"[ none | <single-transition-property> ] || <time> || <timing-function> || <time>\"},\"single-transition-property\":{\"syntax\":\"all | <custom-ident>\"},\"size\":{\"syntax\":\"closest-side | farthest-side | closest-corner | farthest-corner | <length> | <length-percentage>{2}\"},\"step-position\":{\"syntax\":\"jump-start | jump-end | jump-none | jump-both | start | end\"},\"step-timing-function\":{\"syntax\":\"step-start | step-end | steps(<integer>[, <step-position>]?)\"},\"subclass-selector\":{\"syntax\":\"<id-selector> | <class-selector> | <attribute-selector> | <pseudo-class-selector>\"},\"supports-condition\":{\"syntax\":\"not <supports-in-parens> | <supports-in-parens> [ and <supports-in-parens> ]* | <supports-in-parens> [ or <supports-in-parens> ]*\"},\"supports-in-parens\":{\"syntax\":\"( <supports-condition> ) | <supports-feature> | <general-enclosed>\"},\"supports-feature\":{\"syntax\":\"<supports-decl> | <supports-selector-fn>\"},\"supports-decl\":{\"syntax\":\"( <declaration> )\"},\"supports-selector-fn\":{\"syntax\":\"selector( <complex-selector> )\"},\"symbol\":{\"syntax\":\"<string> | <image> | <custom-ident>\"},\"target\":{\"syntax\":\"<target-counter()> | <target-counters()> | <target-text()>\"},\"target-counter()\":{\"syntax\":\"target-counter( [ <string> | <url> ] , <custom-ident> , <counter-style>? )\"},\"target-counters()\":{\"syntax\":\"target-counters( [ <string> | <url> ] , <custom-ident> , <string> , <counter-style>? )\"},\"target-text()\":{\"syntax\":\"target-text( [ <string> | <url> ] , [ content | before | after | first-letter ]? )\"},\"time-percentage\":{\"syntax\":\"<time> | <percentage>\"},\"timing-function\":{\"syntax\":\"linear | <cubic-bezier-timing-function> | <step-timing-function>\"},\"track-breadth\":{\"syntax\":\"<length-percentage> | <flex> | min-content | max-content | auto\"},\"track-list\":{\"syntax\":\"[ <line-names>? [ <track-size> | <track-repeat> ] ]+ <line-names>?\"},\"track-repeat\":{\"syntax\":\"repeat( [ <positive-integer> ] , [ <line-names>? <track-size> ]+ <line-names>? )\"},\"track-size\":{\"syntax\":\"<track-breadth> | minmax( <inflexible-breadth> , <track-breadth> ) | fit-content( [ <length> | <percentage> ] )\"},\"transform-function\":{\"syntax\":\"<matrix()> | <translate()> | <translateX()> | <translateY()> | <scale()> | <scaleX()> | <scaleY()> | <rotate()> | <skew()> | <skewX()> | <skewY()> | <matrix3d()> | <translate3d()> | <translateZ()> | <scale3d()> | <scaleZ()> | <rotate3d()> | <rotateX()> | <rotateY()> | <rotateZ()> | <perspective()>\"},\"transform-list\":{\"syntax\":\"<transform-function>+\"},\"translate()\":{\"syntax\":\"translate( <length-percentage> , <length-percentage>? )\"},\"translate3d()\":{\"syntax\":\"translate3d( <length-percentage> , <length-percentage> , <length> )\"},\"translateX()\":{\"syntax\":\"translateX( <length-percentage> )\"},\"translateY()\":{\"syntax\":\"translateY( <length-percentage> )\"},\"translateZ()\":{\"syntax\":\"translateZ( <length> )\"},\"type-or-unit\":{\"syntax\":\"string | color | url | integer | number | length | angle | time | frequency | cap | ch | em | ex | ic | lh | rlh | rem | vb | vi | vw | vh | vmin | vmax | mm | Q | cm | in | pt | pc | px | deg | grad | rad | turn | ms | s | Hz | kHz | %\"},\"type-selector\":{\"syntax\":\"<wq-name> | <ns-prefix>? '*'\"},\"var()\":{\"syntax\":\"var( <custom-property-name> , <declaration-value>? )\"},\"viewport-length\":{\"syntax\":\"auto | <length-percentage>\"},\"wq-name\":{\"syntax\":\"<ns-prefix>? <ident-token>\"}}");

/***/ }),

/***/ "./node_modules/microee/index.js":
/*!***************************************!*\
  !*** ./node_modules/microee/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function M() { this._events = {}; }
M.prototype = {
  on: function(ev, cb) {
    this._events || (this._events = {});
    var e = this._events;
    (e[ev] || (e[ev] = [])).push(cb);
    return this;
  },
  removeListener: function(ev, cb) {
    var e = this._events[ev] || [], i;
    for(i = e.length-1; i >= 0 && e[i]; i--){
      if(e[i] === cb || e[i].cb === cb) { e.splice(i, 1); }
    }
  },
  removeAllListeners: function(ev) {
    if(!ev) { this._events = {}; }
    else { this._events[ev] && (this._events[ev] = []); }
  },
  listeners: function(ev) {
    return (this._events ? this._events[ev] || [] : []);
  },
  emit: function(ev) {
    this._events || (this._events = {});
    var args = Array.prototype.slice.call(arguments, 1), i, e = this._events[ev] || [];
    for(i = e.length-1; i >= 0 && e[i]; i--){
      e[i].apply(this, args);
    }
    return this;
  },
  when: function(ev, cb) {
    return this.once(ev, cb, true);
  },
  once: function(ev, cb, when) {
    if(!cb) return this;
    function c() {
      if(!when) this.removeListener(ev, c);
      if(cb.apply(this, arguments) && when) this.removeListener(ev, c);
    }
    c.cb = cb;
    this.on(ev, c);
    return this;
  }
};
M.mixin = function(dest) {
  var o = M.prototype, k;
  for (k in o) {
    o.hasOwnProperty(k) && (dest.prototype[k] = o[k]);
  }
};
module.exports = M;


/***/ }),

/***/ "./node_modules/minilog/lib/common/filter.js":
/*!***************************************************!*\
  !*** ./node_modules/minilog/lib/common/filter.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// default filter
var Transform = __webpack_require__(/*! ./transform.js */ "./node_modules/minilog/lib/common/transform.js");

var levelMap = { debug: 1, info: 2, warn: 3, error: 4 };

function Filter() {
  this.enabled = true;
  this.defaultResult = true;
  this.clear();
}

Transform.mixin(Filter);

// allow all matching, with level >= given level
Filter.prototype.allow = function(name, level) {
  this._white.push({ n: name, l: levelMap[level] });
  return this;
};

// deny all matching, with level <= given level
Filter.prototype.deny = function(name, level) {
  this._black.push({ n: name, l: levelMap[level] });
  return this;
};

Filter.prototype.clear = function() {
  this._white = [];
  this._black = [];
  return this;
};

function test(rule, name) {
  // use .test for RegExps
  return (rule.n.test ? rule.n.test(name) : rule.n == name);
};

Filter.prototype.test = function(name, level) {
  var i, len = Math.max(this._white.length, this._black.length);
  for(i = 0; i < len; i++) {
    if(this._white[i] && test(this._white[i], name) && levelMap[level] >= this._white[i].l) {
      return true;
    }
    if(this._black[i] && test(this._black[i], name) && levelMap[level] <= this._black[i].l) {
      return false;
    }
  }
  return this.defaultResult;
};

Filter.prototype.write = function(name, level, args) {
  if(!this.enabled || this.test(name, level)) {
    return this.emit('item', name, level, args);
  }
};

module.exports = Filter;


/***/ }),

/***/ "./node_modules/minilog/lib/common/minilog.js":
/*!****************************************************!*\
  !*** ./node_modules/minilog/lib/common/minilog.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Transform = __webpack_require__(/*! ./transform.js */ "./node_modules/minilog/lib/common/transform.js"),
    Filter = __webpack_require__(/*! ./filter.js */ "./node_modules/minilog/lib/common/filter.js");

var log = new Transform(),
    slice = Array.prototype.slice;

exports = module.exports = function create(name) {
  var o   = function() { log.write(name, undefined, slice.call(arguments)); return o; };
  o.debug = function() { log.write(name, 'debug', slice.call(arguments)); return o; };
  o.info  = function() { log.write(name, 'info',  slice.call(arguments)); return o; };
  o.warn  = function() { log.write(name, 'warn',  slice.call(arguments)); return o; };
  o.error = function() { log.write(name, 'error', slice.call(arguments)); return o; };
  o.log   = o.debug; // for interface compliance with Node and browser consoles
  o.suggest = exports.suggest;
  o.format = log.format;
  return o;
};

// filled in separately
exports.defaultBackend = exports.defaultFormatter = null;

exports.pipe = function(dest) {
  return log.pipe(dest);
};

exports.end = exports.unpipe = exports.disable = function(from) {
  return log.unpipe(from);
};

exports.Transform = Transform;
exports.Filter = Filter;
// this is the default filter that's applied when .enable() is called normally
// you can bypass it completely and set up your own pipes
exports.suggest = new Filter();

exports.enable = function() {
  if(exports.defaultFormatter) {
    return log.pipe(exports.suggest) // filter
              .pipe(exports.defaultFormatter) // formatter
              .pipe(exports.defaultBackend); // backend
  }
  return log.pipe(exports.suggest) // filter
            .pipe(exports.defaultBackend); // formatter
};



/***/ }),

/***/ "./node_modules/minilog/lib/common/transform.js":
/*!******************************************************!*\
  !*** ./node_modules/minilog/lib/common/transform.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var microee = __webpack_require__(/*! microee */ "./node_modules/microee/index.js");

// Implements a subset of Node's stream.Transform - in a cross-platform manner.
function Transform() {}

microee.mixin(Transform);

// The write() signature is different from Node's
// --> makes it much easier to work with objects in logs.
// One of the lessons from v1 was that it's better to target
// a good browser rather than the lowest common denominator
// internally.
// If you want to use external streams, pipe() to ./stringify.js first.
Transform.prototype.write = function(name, level, args) {
  this.emit('item', name, level, args);
};

Transform.prototype.end = function() {
  this.emit('end');
  this.removeAllListeners();
};

Transform.prototype.pipe = function(dest) {
  var s = this;
  // prevent double piping
  s.emit('unpipe', dest);
  // tell the dest that it's being piped to
  dest.emit('pipe', s);

  function onItem() {
    dest.write.apply(dest, Array.prototype.slice.call(arguments));
  }
  function onEnd() { !dest._isStdio && dest.end(); }

  s.on('item', onItem);
  s.on('end', onEnd);

  s.when('unpipe', function(from) {
    var match = (from === dest) || typeof from == 'undefined';
    if(match) {
      s.removeListener('item', onItem);
      s.removeListener('end', onEnd);
      dest.emit('unpipe');
    }
    return match;
  });

  return dest;
};

Transform.prototype.unpipe = function(from) {
  this.emit('unpipe', from);
  return this;
};

Transform.prototype.format = function(dest) {
  throw new Error([
    'Warning: .format() is deprecated in Minilog v2! Use .pipe() instead. For example:',
    'var Minilog = require(\'minilog\');',
    'Minilog',
    '  .pipe(Minilog.backends.console.formatClean)',
    '  .pipe(Minilog.backends.console);'].join('\n'));
};

Transform.mixin = function(dest) {
  var o = Transform.prototype, k;
  for (k in o) {
    o.hasOwnProperty(k) && (dest.prototype[k] = o[k]);
  }
};

module.exports = Transform;


/***/ }),

/***/ "./node_modules/minilog/lib/web/array.js":
/*!***********************************************!*\
  !*** ./node_modules/minilog/lib/web/array.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Transform = __webpack_require__(/*! ../common/transform.js */ "./node_modules/minilog/lib/common/transform.js"),
    cache = [ ];

var logger = new Transform();

logger.write = function(name, level, args) {
  cache.push([ name, level, args ]);
};

// utility functions
logger.get = function() { return cache; };
logger.empty = function() { cache = []; };

module.exports = logger;


/***/ }),

/***/ "./node_modules/minilog/lib/web/console.js":
/*!*************************************************!*\
  !*** ./node_modules/minilog/lib/web/console.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Transform = __webpack_require__(/*! ../common/transform.js */ "./node_modules/minilog/lib/common/transform.js");

var newlines = /\n+$/,
    logger = new Transform();

logger.write = function(name, level, args) {
  var i = args.length-1;
  if (typeof console === 'undefined' || !console.log) {
    return;
  }
  if(console.log.apply) {
    return console.log.apply(console, [name, level].concat(args));
  } else if(JSON && JSON.stringify) {
    // console.log.apply is undefined in IE8 and IE9
    // for IE8/9: make console.log at least a bit less awful
    if(args[i] && typeof args[i] == 'string') {
      args[i] = args[i].replace(newlines, '');
    }
    try {
      for(i = 0; i < args.length; i++) {
        args[i] = JSON.stringify(args[i]);
      }
    } catch(e) {}
    console.log(args.join(' '));
  }
};

logger.formatters = ['color', 'minilog'];
logger.color = __webpack_require__(/*! ./formatters/color.js */ "./node_modules/minilog/lib/web/formatters/color.js");
logger.minilog = __webpack_require__(/*! ./formatters/minilog.js */ "./node_modules/minilog/lib/web/formatters/minilog.js");

module.exports = logger;


/***/ }),

/***/ "./node_modules/minilog/lib/web/formatters/color.js":
/*!**********************************************************!*\
  !*** ./node_modules/minilog/lib/web/formatters/color.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Transform = __webpack_require__(/*! ../../common/transform.js */ "./node_modules/minilog/lib/common/transform.js"),
    color = __webpack_require__(/*! ./util.js */ "./node_modules/minilog/lib/web/formatters/util.js");

var colors = { debug: ['cyan'], info: ['purple' ], warn: [ 'yellow', true ], error: [ 'red', true ] },
    logger = new Transform();

logger.write = function(name, level, args) {
  var fn = console.log;
  if(console[level] && console[level].apply) {
    fn = console[level];
    fn.apply(console, [ '%c'+name+' %c'+level, color('gray'), color.apply(color, colors[level])].concat(args));
  }
};

// NOP, because piping the formatted logs can only cause trouble.
logger.pipe = function() { };

module.exports = logger;


/***/ }),

/***/ "./node_modules/minilog/lib/web/formatters/minilog.js":
/*!************************************************************!*\
  !*** ./node_modules/minilog/lib/web/formatters/minilog.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Transform = __webpack_require__(/*! ../../common/transform.js */ "./node_modules/minilog/lib/common/transform.js"),
    color = __webpack_require__(/*! ./util.js */ "./node_modules/minilog/lib/web/formatters/util.js"),
    colors = { debug: ['gray'], info: ['purple' ], warn: [ 'yellow', true ], error: [ 'red', true ] },
    logger = new Transform();

logger.write = function(name, level, args) {
  var fn = console.log;
  if(level != 'debug' && console[level]) {
    fn = console[level];
  }

  var subset = [], i = 0;
  if(level != 'info') {
    for(; i < args.length; i++) {
      if(typeof args[i] != 'string') break;
    }
    fn.apply(console, [ '%c'+name +' '+ args.slice(0, i).join(' '), color.apply(color, colors[level]) ].concat(args.slice(i)));
  } else {
    fn.apply(console, [ '%c'+name, color.apply(color, colors[level]) ].concat(args));
  }
};

// NOP, because piping the formatted logs can only cause trouble.
logger.pipe = function() { };

module.exports = logger;


/***/ }),

/***/ "./node_modules/minilog/lib/web/formatters/util.js":
/*!*********************************************************!*\
  !*** ./node_modules/minilog/lib/web/formatters/util.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hex = {
  black: '#000',
  red: '#c23621',
  green: '#25bc26',
  yellow: '#bbbb00',
  blue:  '#492ee1',
  magenta: '#d338d3',
  cyan: '#33bbc8',
  gray: '#808080',
  purple: '#708'
};
function color(fg, isInverse) {
  if(isInverse) {
    return 'color: #fff; background: '+hex[fg]+';';
  } else {
    return 'color: '+hex[fg]+';';
  }
}

module.exports = color;


/***/ }),

/***/ "./node_modules/minilog/lib/web/index.js":
/*!***********************************************!*\
  !*** ./node_modules/minilog/lib/web/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Minilog = __webpack_require__(/*! ../common/minilog.js */ "./node_modules/minilog/lib/common/minilog.js");

var oldEnable = Minilog.enable,
    oldDisable = Minilog.disable,
    isChrome = (typeof navigator != 'undefined' && /chrome/i.test(navigator.userAgent)),
    console = __webpack_require__(/*! ./console.js */ "./node_modules/minilog/lib/web/console.js");

// Use a more capable logging backend if on Chrome
Minilog.defaultBackend = (isChrome ? console.minilog : console);

// apply enable inputs from localStorage and from the URL
if(typeof window != 'undefined') {
  try {
    Minilog.enable(JSON.parse(window.localStorage['minilogSettings']));
  } catch(e) {}
  if(window.location && window.location.search) {
    var match = RegExp('[?&]minilog=([^&]*)').exec(window.location.search);
    match && Minilog.enable(decodeURIComponent(match[1]));
  }
}

// Make enable also add to localStorage
Minilog.enable = function() {
  oldEnable.call(Minilog, true);
  try { window.localStorage['minilogSettings'] = JSON.stringify(true); } catch(e) {}
  return this;
};

Minilog.disable = function() {
  oldDisable.call(Minilog);
  try { delete window.localStorage.minilogSettings; } catch(e) {}
  return this;
};

exports = module.exports = Minilog;

exports.backends = {
  array: __webpack_require__(/*! ./array.js */ "./node_modules/minilog/lib/web/array.js"),
  browser: Minilog.defaultBackend,
  localStorage: __webpack_require__(/*! ./localstorage.js */ "./node_modules/minilog/lib/web/localstorage.js"),
  jQuery: __webpack_require__(/*! ./jquery_simple.js */ "./node_modules/minilog/lib/web/jquery_simple.js")
};


/***/ }),

/***/ "./node_modules/minilog/lib/web/jquery_simple.js":
/*!*******************************************************!*\
  !*** ./node_modules/minilog/lib/web/jquery_simple.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Transform = __webpack_require__(/*! ../common/transform.js */ "./node_modules/minilog/lib/common/transform.js");

var cid = new Date().valueOf().toString(36);

function AjaxLogger(options) {
  this.url = options.url || '';
  this.cache = [];
  this.timer = null;
  this.interval = options.interval || 30*1000;
  this.enabled = true;
  this.jQuery = window.jQuery;
  this.extras = {};
}

Transform.mixin(AjaxLogger);

AjaxLogger.prototype.write = function(name, level, args) {
  if(!this.timer) { this.init(); }
  this.cache.push([name, level].concat(args));
};

AjaxLogger.prototype.init = function() {
  if(!this.enabled || !this.jQuery) return;
  var self = this;
  this.timer = setTimeout(function() {
    var i, logs = [], ajaxData, url = self.url;
    if(self.cache.length == 0) return self.init();
    // Test each log line and only log the ones that are valid (e.g. don't have circular references).
    // Slight performance hit but benefit is we log all valid lines.
    for(i = 0; i < self.cache.length; i++) {
      try {
        JSON.stringify(self.cache[i]);
        logs.push(self.cache[i]);
      } catch(e) { }
    }
    if(self.jQuery.isEmptyObject(self.extras)) {
        ajaxData = JSON.stringify({ logs: logs });
        url = self.url + '?client_id=' + cid;
    } else {
        ajaxData = JSON.stringify(self.jQuery.extend({logs: logs}, self.extras));
    }

    self.jQuery.ajax(url, {
      type: 'POST',
      cache: false,
      processData: false,
      data: ajaxData,
      contentType: 'application/json',
      timeout: 10000
    }).success(function(data, status, jqxhr) {
      if(data.interval) {
        self.interval = Math.max(1000, data.interval);
      }
    }).error(function() {
      self.interval = 30000;
    }).always(function() {
      self.init();
    });
    self.cache = [];
  }, this.interval);
};

AjaxLogger.prototype.end = function() {};

// wait until jQuery is defined. Useful if you don't control the load order.
AjaxLogger.jQueryWait = function(onDone) {
  if(typeof window !== 'undefined' && (window.jQuery || window.$)) {
    return onDone(window.jQuery || window.$);
  } else if (typeof window !== 'undefined') {
    setTimeout(function() { AjaxLogger.jQueryWait(onDone); }, 200);
  }
};

module.exports = AjaxLogger;


/***/ }),

/***/ "./node_modules/minilog/lib/web/localstorage.js":
/*!******************************************************!*\
  !*** ./node_modules/minilog/lib/web/localstorage.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Transform = __webpack_require__(/*! ../common/transform.js */ "./node_modules/minilog/lib/common/transform.js"),
    cache = false;

var logger = new Transform();

logger.write = function(name, level, args) {
  if(typeof window == 'undefined' || typeof JSON == 'undefined' || !JSON.stringify || !JSON.parse) return;
  try {
    if(!cache) { cache = (window.localStorage.minilog ? JSON.parse(window.localStorage.minilog) : []); }
    cache.push([ new Date().toString(), name, level, args ]);
    window.localStorage.minilog = JSON.stringify(cache);
  } catch(e) {}
};

module.exports = logger;

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/renderer.css":
/*!****************************************************!*\
  !*** ./node_modules/raw-loader!./src/renderer.css ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".scratch-render-overlays {\n    position: absolute;\n    top: 0;\n    left: 0;\n    pointer-events: none;\n    overflow: hidden;\n}\n.scratch-render-overlays > * {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/shaders/sprite.frag.glsl":
/*!****************************************************************!*\
  !*** ./node_modules/raw-loader!./src/shaders/sprite.frag.glsl ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "precision mediump float;\n\n#ifdef DRAW_MODE_silhouette\nuniform vec4 u_silhouetteColor;\n#else // DRAW_MODE_silhouette\n# ifdef ENABLE_color\nuniform float u_color;\n# endif // ENABLE_color\n# ifdef ENABLE_brightness\nuniform float u_brightness;\n# endif // ENABLE_brightness\n#endif // DRAW_MODE_silhouette\n\n#ifdef DRAW_MODE_colorMask\nuniform vec3 u_colorMask;\nuniform float u_colorMaskTolerance;\n#endif // DRAW_MODE_colorMask\n\n#ifdef ENABLE_fisheye\nuniform float u_fisheye;\n#endif // ENABLE_fisheye\n#ifdef ENABLE_whirl\nuniform float u_whirl;\n#endif // ENABLE_whirl\n#ifdef ENABLE_pixelate\nuniform float u_pixelate;\nuniform vec2 u_skinSize;\n#endif // ENABLE_pixelate\n#ifdef ENABLE_mosaic\nuniform float u_mosaic;\n#endif // ENABLE_mosaic\n#ifdef ENABLE_ghost\nuniform float u_ghost;\n#endif // ENABLE_ghost\n#ifdef ENABLE_red\nuniform float u_red;\n#endif // ENABLE_red\n#ifdef ENABLE_green\nuniform float u_green;\n#endif // ENABLE_green\n#ifdef ENABLE_blue\nuniform float u_blue;\n#endif // ENABLE_blue\n#ifdef ENABLE_opaque\nuniform float u_opaque;\n#endif // ENABLE_opaque\n#ifdef ENABLE_saturation\nuniform float u_saturation;\n#endif // ENABLE_saturation\n#ifdef ENABLE_tintColor\nuniform highp float u_tintColor;\n#endif // ENABLE_tintColor\n\n#ifdef DRAW_MODE_line\nvarying vec4 v_lineColor;\nvarying float v_lineThickness;\nvarying float v_lineLength;\n#endif // DRAW_MODE_line\n\n#ifdef DRAW_MODE_background\nuniform vec4 u_backgroundColor;\n#endif // DRAW_MODE_background\n\nuniform sampler2D u_skin;\n\n#ifndef DRAW_MODE_background\nvarying vec2 v_texCoord;\n#endif\n\n// Add this to divisors to prevent division by 0, which results in NaNs propagating through calculations.\n// Smaller values can cause problems on some mobile devices.\nconst float epsilon = 1e-3;\n\n#if !defined(DRAW_MODE_silhouette) && (defined(ENABLE_color) || defined(ENABLE_saturation) || defined(ENABLE_tintColor))\n// Branchless color conversions based on code from:\n// http://www.chilliant.com/rgb2hsv.html by Ian Taylor\n// Based in part on work by Sam Hocevar and Emil Persson\n// See also: https://en.wikipedia.org/wiki/HSL_and_HSV#Formal_derivation\n\n\n// Convert an RGB color to Hue, Saturation, and Value.\n// All components of input and output are expected to be in the [0,1] range.\nvec3 convertRGB2HSV(vec3 rgb)\n{\n\t// Hue calculation has 3 cases, depending on which RGB component is largest, and one of those cases involves a \"mod\"\n\t// operation. In order to avoid that \"mod\" we split the M==R case in two: one for G<B and one for B>G. The B>G case\n\t// will be calculated in the negative and fed through abs() in the hue calculation at the end.\n\t// See also: https://en.wikipedia.org/wiki/HSL_and_HSV#Hue_and_chroma\n\tconst vec4 hueOffsets = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\n\t// temp1.xy = sort B & G (largest first)\n\t// temp1.z = the hue offset we'll use if it turns out that R is the largest component (M==R)\n\t// temp1.w = the hue offset we'll use if it turns out that R is not the largest component (M==G or M==B)\n\tvec4 temp1 = rgb.b > rgb.g ? vec4(rgb.bg, hueOffsets.wz) : vec4(rgb.gb, hueOffsets.xy);\n\n\t// temp2.x = the largest component of RGB (\"M\" / \"Max\")\n\t// temp2.yw = the smaller components of RGB, ordered for the hue calculation (not necessarily sorted by magnitude!)\n\t// temp2.z = the hue offset we'll use in the hue calculation\n\tvec4 temp2 = rgb.r > temp1.x ? vec4(rgb.r, temp1.yzx) : vec4(temp1.xyw, rgb.r);\n\n\t// m = the smallest component of RGB (\"min\")\n\tfloat m = min(temp2.y, temp2.w);\n\n\t// Chroma = M - m\n\tfloat C = temp2.x - m;\n\n\t// Value = M\n\tfloat V = temp2.x;\n\n\treturn vec3(\n\t\tabs(temp2.z + (temp2.w - temp2.y) / (6.0 * C + epsilon)), // Hue\n\t\tC / (temp2.x + epsilon), // Saturation\n\t\tV); // Value\n}\n\nvec3 convertHue2RGB(float hue)\n{\n\tfloat r = abs(hue * 6.0 - 3.0) - 1.0;\n\tfloat g = 2.0 - abs(hue * 6.0 - 2.0);\n\tfloat b = 2.0 - abs(hue * 6.0 - 4.0);\n\treturn clamp(vec3(r, g, b), 0.0, 1.0);\n}\n\nvec3 convertHSV2RGB(vec3 hsv)\n{\n\tvec3 rgb = convertHue2RGB(hsv.x);\n\tfloat c = hsv.z * hsv.y;\n\treturn rgb * c + hsv.z - c;\n}\n\nvec3 decimalToRGB(highp float decimalColor) {\n\thighp float blue = mod(decimalColor, 256.0) / 255.0;\n\thighp float green = mod(floor(decimalColor / 256.0), 256.0) / 255.0;\n\thighp float red = mod(floor(decimalColor / 65536.0), 256.0) / 255.0;\n\n\treturn vec3(red, green, blue);\n}\n#endif // !defined(DRAW_MODE_silhouette) && (defined(ENABLE_color) || defined(ENABLE_saturation) || defined(ENABLE_tintColor))\n\nconst vec2 kCenter = vec2(0.5, 0.5);\n\nvoid main()\n{\n\t#if !(defined(DRAW_MODE_line) || defined(DRAW_MODE_background))\n\tvec2 texcoord0 = v_texCoord;\n\n\t#ifdef ENABLE_mosaic\n\ttexcoord0 = fract(u_mosaic * texcoord0);\n\t#endif // ENABLE_mosaic\n\n\t#ifdef ENABLE_pixelate\n\t{\n\t\t// TODO: clean up \"pixel\" edges\n\t\tvec2 pixelTexelSize = u_skinSize / u_pixelate;\n\t\ttexcoord0 = (floor(texcoord0 * pixelTexelSize) + kCenter) / pixelTexelSize;\n\t}\n\t#endif // ENABLE_pixelate\n\n\t#ifdef ENABLE_whirl\n\t{\n\t\tconst float kRadius = 0.5;\n\t\tvec2 offset = texcoord0 - kCenter;\n\t\tfloat offsetMagnitude = length(offset);\n\t\tfloat whirlFactor = max(1.0 - (offsetMagnitude / kRadius), 0.0);\n\t\tfloat whirlActual = u_whirl * whirlFactor * whirlFactor;\n\t\tfloat sinWhirl = sin(whirlActual);\n\t\tfloat cosWhirl = cos(whirlActual);\n\t\tmat2 rotationMatrix = mat2(\n\t\t\tcosWhirl, -sinWhirl,\n\t\t\tsinWhirl, cosWhirl\n\t\t);\n\n\t\ttexcoord0 = rotationMatrix * offset + kCenter;\n\t}\n\t#endif // ENABLE_whirl\n\n\t#ifdef ENABLE_fisheye\n\t{\n\t\tvec2 vec = (texcoord0 - kCenter) / kCenter;\n\t\tfloat vecLength = length(vec);\n\t\tfloat r = pow(min(vecLength, 1.0), u_fisheye) * max(1.0, vecLength);\n\t\tvec2 unit = vec / vecLength;\n\n\t\ttexcoord0 = kCenter + r * unit * kCenter;\n\t}\n\t#endif // ENABLE_fisheye\n\n\tgl_FragColor = texture2D(u_skin, texcoord0);\n\n\t#if defined(ENABLE_color) || defined(ENABLE_brightness) || defined(ENABLE_saturation) || defined(ENABLE_tintColor)\n\t// Divide premultiplied alpha values for proper color processing\n\t// Add epsilon to avoid dividing by 0 for fully transparent pixels\n\tgl_FragColor.rgb = clamp(gl_FragColor.rgb / (gl_FragColor.a + epsilon), 0.0, 1.0);\n\n\t#ifdef ENABLE_color\n\t{\n\t\tvec3 hsv = convertRGB2HSV(gl_FragColor.xyz);\n\n\t\t// this code forces grayscale values to be slightly saturated\n\t\t// so that some slight change of hue will be visible\n\t\t\n\t\t// pm: this usually ends up looking ugly in menus and such, so dont do this actually\n\t\t// \t   this might be reverted to do this again though if it is genuinely better\n\n\t\t// const float minLightness = 0.11 / 2.0;\n\t\t// const float minSaturation = 0.09;\n\t\t// if (hsv.z < minLightness) hsv = vec3(0.0, 1.0, minLightness);\n\t\t// else if (hsv.y < minSaturation) hsv = vec3(0.0, minSaturation, hsv.z);\n\n\t\thsv.x = mod(hsv.x + u_color, 1.0);\n\t\tif (hsv.x < 0.0) hsv.x += 1.0;\n\n\t\tgl_FragColor.rgb = convertHSV2RGB(hsv);\n\t}\n\t#endif // ENABLE_color\n\t\n\t#ifdef ENABLE_saturation\n\t{\n\t\tvec3 hsv = convertRGB2HSV(gl_FragColor.xyz);\n\n\t\thsv.y *= u_saturation;\n\n\t\tgl_FragColor.rgb = convertHSV2RGB(hsv);\n\t}\n\t#endif // ENABLE_saturation\n\t\n\t#ifdef ENABLE_tintColor\n\t{\n\t\tvec3 tintRgb = decimalToRGB(u_tintColor);\n\n\t\tgl_FragColor.rgb *= tintRgb;\n\t}\n\t#endif // ENABLE_tintColor\n\n\t#ifdef ENABLE_brightness\n\tgl_FragColor.rgb = clamp(gl_FragColor.rgb + vec3(u_brightness), vec3(0), vec3(1));\n\t#endif // ENABLE_brightness\n\n\t// Re-multiply color values\n\tgl_FragColor.rgb *= gl_FragColor.a + epsilon;\n\n\t#endif // defined(ENABLE_color) || defined(ENABLE_brightness) || defined(ENABLE_saturation) || defined(ENABLE_tintColor)\n\n\t#ifdef ENABLE_ghost\n\tgl_FragColor *= u_ghost;\n\t#endif // ENABLE_ghost\n\t\n\t#ifdef ENABLE_red\n\tgl_FragColor.r *= u_red;\n\t#endif // ENABLE_red\n\t\n\t#ifdef ENABLE_green\n\tgl_FragColor.g *= u_green;\n\t#endif // ENABLE_green\n\t\n\t#ifdef ENABLE_blue\n\tgl_FragColor.b *= u_blue;\n\t#endif // ENABLE_blue\n\t\n\t#ifdef ENABLE_opaque\n\tgl_FragColor.a *= u_opaque;\n\t#endif // ENABLE_opaque\n\n\t#ifdef DRAW_MODE_silhouette\n\t// Discard fully transparent pixels for stencil test\n\tif (gl_FragColor.a == 0.0) {\n\t\tdiscard;\n\t}\n\t// switch to u_silhouetteColor only AFTER the alpha test\n\tgl_FragColor = u_silhouetteColor;\n\t#else // DRAW_MODE_silhouette\n\n\t#ifdef DRAW_MODE_colorMask\n\tvec3 maskDistance = abs(gl_FragColor.rgb - u_colorMask);\n\tvec3 colorMaskTolerance = vec3(u_colorMaskTolerance, u_colorMaskTolerance, u_colorMaskTolerance);\n\tif (any(greaterThan(maskDistance, colorMaskTolerance)))\n\t{\n\t\tdiscard;\n\t}\n\t#endif // DRAW_MODE_colorMask\n\t#endif // DRAW_MODE_silhouette\n\n\t#ifdef DRAW_MODE_straightAlpha\n\t// Un-premultiply alpha.\n\tgl_FragColor.rgb /= gl_FragColor.a + epsilon;\n\t#endif\n\n\t#endif // !(defined(DRAW_MODE_line) || defined(DRAW_MODE_background))\n\n\t#ifdef DRAW_MODE_line\n\t// Maaaaagic antialiased-line-with-round-caps shader.\n\n\t// \"along-the-lineness\". This increases parallel to the line.\n\t// It goes from negative before the start point, to 0.5 through the start to the end, then ramps up again\n\t// past the end point.\n\tfloat d = ((v_texCoord.x - clamp(v_texCoord.x, 0.0, v_lineLength)) * 0.5) + 0.5;\n\n\t// Distance from (0.5, 0.5) to (d, the perpendicular coordinate). When we're in the middle of the line,\n\t// d will be 0.5, so the distance will be 0 at points close to the line and will grow at points further from it.\n\t// For the \"caps\", d will ramp down/up, giving us rounding.\n\t// See https://www.youtube.com/watch?v=PMltMdi1Wzg for a rough outline of the technique used to round the lines.\n\tfloat line = distance(vec2(0.5), vec2(d, v_texCoord.y)) * 2.0;\n\t// Expand out the line by its thickness.\n\tline -= ((v_lineThickness - 1.0) * 0.5);\n\t// Because \"distance to the center of the line\" decreases the closer we get to the line, but we want more opacity\n\t// the closer we are to the line, invert it.\n\tgl_FragColor = v_lineColor * clamp(1.0 - line, 0.0, 1.0);\n\t#endif // DRAW_MODE_line\n\n\t#ifdef DRAW_MODE_background\n\tgl_FragColor = u_backgroundColor;\n\t#endif\n}\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/shaders/sprite.vert.glsl":
/*!****************************************************************!*\
  !*** ./node_modules/raw-loader!./src/shaders/sprite.vert.glsl ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "precision mediump float;\n\n#ifdef DRAW_MODE_line\nuniform vec2 u_stageSize;\nattribute vec2 a_lineThicknessAndLength;\nattribute vec4 a_penPoints;\nattribute vec4 a_lineColor;\n\nvarying vec4 v_lineColor;\nvarying float v_lineThickness;\nvarying float v_lineLength;\nvarying vec4 v_penPoints;\n\n// Add this to divisors to prevent division by 0, which results in NaNs propagating through calculations.\n// Smaller values can cause problems on some mobile devices.\nconst float epsilon = 1e-3;\n#endif\n\n#if !(defined(DRAW_MODE_line) || defined(DRAW_MODE_background))\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_modelMatrix;\nattribute vec2 a_texCoord;\n#endif\n\nattribute vec2 a_position;\n\nvarying vec2 v_texCoord;\n\nvoid main() {\n\t#ifdef DRAW_MODE_line\n\t// Calculate a rotated (\"tight\") bounding box around the two pen points.\n\t// Yes, we're doing this 6 times (once per vertex), but on actual GPU hardware,\n\t// it's still faster than doing it in JS combined with the cost of uniformMatrix4fv.\n\n\t// Expand line bounds by sqrt(2) / 2 each side-- this ensures that all antialiased pixels\n\t// fall within the quad, even at a 45-degree diagonal\n\tvec2 position = a_position;\n\tfloat expandedRadius = (a_lineThicknessAndLength.x * 0.5) + 1.4142135623730951;\n\n\t// The X coordinate increases along the length of the line. It's 0 at the center of the origin point\n\t// and is in pixel-space (so at n pixels along the line, its value is n).\n\tv_texCoord.x = mix(0.0, a_lineThicknessAndLength.y + (expandedRadius * 2.0), a_position.x) - expandedRadius;\n\t// The Y coordinate is perpendicular to the line. It's also in pixel-space.\n\tv_texCoord.y = ((a_position.y - 0.5) * expandedRadius) + 0.5;\n\n\tposition.x *= a_lineThicknessAndLength.y + (2.0 * expandedRadius);\n\tposition.y *= 2.0 * expandedRadius;\n\n\t// 1. Center around first pen point\n\tposition -= expandedRadius;\n\n\t// 2. Rotate quad to line angle\n\tvec2 pointDiff = a_penPoints.zw;\n\t// Ensure line has a nonzero length so it's rendered properly\n\t// As long as either component is nonzero, the line length will be nonzero\n\t// If the line is zero-length, give it a bit of horizontal length\n\tpointDiff.x = (abs(pointDiff.x) < epsilon && abs(pointDiff.y) < epsilon) ? epsilon : pointDiff.x;\n\t// The `normalized` vector holds rotational values equivalent to sine/cosine\n\t// We're applying the standard rotation matrix formula to the position to rotate the quad to the line angle\n\t// pointDiff can hold large values so we must divide by u_lineLength instead of calling GLSL's normalize function:\n\t// https://asawicki.info/news_1596_watch_out_for_reduced_precision_normalizelength_in_opengl_es\n\tvec2 normalized = pointDiff / max(a_lineThicknessAndLength.y, epsilon);\n\tposition = mat2(normalized.x, normalized.y, -normalized.y, normalized.x) * position;\n\n\t// 3. Translate quad\n\tposition += a_penPoints.xy;\n\n\t// 4. Apply view transform\n\tposition *= 2.0 / u_stageSize;\n\tgl_Position = vec4(position, 0, 1);\n\n\tv_lineColor = a_lineColor;\n\tv_lineThickness = a_lineThicknessAndLength.x;\n\tv_lineLength = a_lineThicknessAndLength.y;\n\tv_penPoints = a_penPoints;\n\t#elif defined(DRAW_MODE_background)\n\tgl_Position = vec4(a_position * 2.0, 0, 1);\n\t#else\n\tgl_Position = u_projectionMatrix * u_modelMatrix * vec4(a_position, 0, 1);\n\tv_texCoord = a_texCoord;\n\t#endif\n}\n"

/***/ }),

/***/ "./node_modules/scratch-render-fonts/src/index.js":
/*!********************************************************!*\
  !*** ./node_modules/scratch-render-fonts/src/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Synchronously load TTF fonts.
// First, have Webpack load their data as Base 64 strings.
let FONTS;

const getFonts = function () {
    if (FONTS) return FONTS;
    /* eslint-disable global-require */
    FONTS = {
        'Sans Serif': __webpack_require__(/*! base64-loader!./NotoSans-Medium.ttf */ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/NotoSans-Medium.ttf"),
        'Serif': __webpack_require__(/*! base64-loader!./SourceSerifPro-Regular.otf */ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/SourceSerifPro-Regular.otf"),
        'Handwriting': __webpack_require__(/*! base64-loader!./handlee-regular.ttf */ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/handlee-regular.ttf"),
        'Marker': __webpack_require__(/*! base64-loader!./Knewave.ttf */ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/Knewave.ttf"),
        'Curly': __webpack_require__(/*! base64-loader!./Griffy-Regular.ttf */ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/Griffy-Regular.ttf"),
        'Pixel': __webpack_require__(/*! base64-loader!./Grand9K-Pixel.ttf */ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/Grand9K-Pixel.ttf"),
        // Xtraflexidisc is saved as Scratch for backwards-compat, this needs visual renaming
        'Scratch': __webpack_require__(/*! base64-loader!./Xtraflexidisc.otf */ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/Xtraflexidisc.otf"),
        'Technological': __webpack_require__(/*! base64-loader!./MonospaceBold.ttf */ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/MonospaceBold.ttf"),
        'Bubbly': __webpack_require__(/*! base64-loader!./QTKooper.otf */ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/QTKooper.otf"),
        'Bits and Bytes': __webpack_require__(/*! base64-loader!./freecam-v2.ttf */ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/freecam-v2.ttf"),
        'Playful': __webpack_require__(/*! base64-loader!./BadComic-Regular.ttf */ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/BadComic-Regular.ttf"),
        'Arcade': __webpack_require__(/*! base64-loader!./PressStart2P.ttf */ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/PressStart2P.ttf"),
        'Archivo': __webpack_require__(/*! base64-loader!./Archivo-Regular.ttf */ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/Archivo-Regular.ttf"),
        'Archivo Black': __webpack_require__(/*! base64-loader!./Archivo-Black.ttf */ "./node_modules/base64-loader/index.js!./node_modules/scratch-render-fonts/src/Archivo-Black.ttf")
    };
    /* eslint-enable global-require */

    // For each Base 64 string,
    // 1. Replace each with a usable @font-face tag that points to a Data URI.
    // 2. Inject the font into a style on `document.body`, so measurements
    //    can be accurately taken in SvgRenderer._transformMeasurements.
    for (const fontName in FONTS) {
        const fontData = FONTS[fontName];
        FONTS[fontName] = '@font-face {' +
            `font-family: "${fontName}";src: url("data:application/x-font-ttf;charset=utf-8;base64,${fontData}");}`;
    }

    if (!document.getElementById('scratch-font-styles')) {
    	const documentStyleTag = document.createElement('style');
    	documentStyleTag.id = 'scratch-font-styles';
    	for (const fontName in FONTS) {
    	    documentStyleTag.textContent += FONTS[fontName];
    	}
    	document.body.insertBefore(documentStyleTag, document.body.firstChild);
    }

    return FONTS;
}

module.exports = getFonts;


/***/ }),

/***/ "./node_modules/scratch-svg-renderer/node_modules/base64-js/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/scratch-svg-renderer/node_modules/base64-js/index.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/scratch-svg-renderer/src/bitmap-adapter.js":
/*!*****************************************************************!*\
  !*** ./node_modules/scratch-svg-renderer/src/bitmap-adapter.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const base64js = __webpack_require__(/*! base64-js */ "./node_modules/scratch-svg-renderer/node_modules/base64-js/index.js");

/**
 * Adapts Scratch 2.0 bitmaps for use in scratch 3.0
 */
class BitmapAdapter {
    /**
     * @param {?function} makeImage HTML image constructor. Tests can provide this.
     * @param {?function} makeCanvas HTML canvas constructor. Tests can provide this.
     */
    constructor (makeImage, makeCanvas) {
        this._makeImage = makeImage ? makeImage : () => new Image();
        this._makeCanvas = makeCanvas ? makeCanvas : () => document.createElement('canvas');
        this.stageWidth = 480;
        this.stageHeight = 360;
    }

    setStageSize (width, height) {
        this.stageWidth = width;
        this.stageHeight = height;
    }

    /**
     * Return a canvas with the resized version of the given image, done using nearest-neighbor interpolation
     * @param {CanvasImageSource} image The image to resize
     * @param {int} newWidth The desired post-resize width of the image
     * @param {int} newHeight The desired post-resize height of the image
     * @returns {HTMLCanvasElement} A canvas with the resized image drawn on it.
     */
    resize (image, newWidth, newHeight) {
        // We want to always resize using nearest-neighbor interpolation. However, canvas implementations are free to
        // use linear interpolation (or other "smooth" interpolation methods) when downscaling:
        // https://bugzilla.mozilla.org/show_bug.cgi?id=1360415
        // It seems we can get around this by resizing in two steps: first width, then height. This will always result
        // in nearest-neighbor interpolation, even when downscaling.
        const stretchWidthCanvas = this._makeCanvas();
        stretchWidthCanvas.width = newWidth;
        stretchWidthCanvas.height = image.height;
        let context = stretchWidthCanvas.getContext('2d');
        context.imageSmoothingEnabled = false;
        context.drawImage(image, 0, 0, stretchWidthCanvas.width, stretchWidthCanvas.height);
        const stretchHeightCanvas = this._makeCanvas();
        stretchHeightCanvas.width = newWidth;
        stretchHeightCanvas.height = newHeight;
        context = stretchHeightCanvas.getContext('2d');
        context.imageSmoothingEnabled = false;
        context.drawImage(stretchWidthCanvas, 0, 0, stretchHeightCanvas.width, stretchHeightCanvas.height);
        return stretchHeightCanvas;
    }

    /**
     * Scratch 2.0 had resolution 1 and 2 bitmaps. All bitmaps in Scratch 3.0 are equivalent
     * to resolution 2 bitmaps. Therefore, converting a resolution 1 bitmap means doubling
     * it in width and height.
     * @param {!string} dataURI Base 64 encoded image data of the bitmap
     * @param {!function} callback Node-style callback that returns updated dataURI if conversion succeeded
     */
    convertResolution1Bitmap (dataURI, callback) {
        const image = this._makeImage();
        image.src = dataURI;
        image.onload = () => {
            callback(null, this.resize(image, image.width * 2, image.height * 2).toDataURL());
        };
        image.onerror = () => {
            callback('Image load failed');
        };
    }

    /**
     * Given width/height of an uploaded item, return width/height the image will be resized
     * to in Scratch 3.0
     * @param {!number} oldWidth original width
     * @param {!number} oldHeight original height
     * @return {object} Array of new width, new height
     */
    getResizedWidthHeight (oldWidth, oldHeight) {
        const STAGE_WIDTH = this.stageWidth;
        const STAGE_HEIGHT = this.stageHeight;
        const STAGE_RATIO = STAGE_WIDTH / STAGE_HEIGHT;

        // If both dimensions are smaller than or equal to corresponding stage dimension,
        // double both dimensions
        if ((oldWidth <= STAGE_WIDTH) && (oldHeight <= STAGE_HEIGHT)) {
            return {width: oldWidth * 2, height: oldHeight * 2};
        }

        // If neither dimension is larger than 2x corresponding stage dimension,
        // this is an in-between image, return it as is
        if ((oldWidth <= STAGE_WIDTH * 2) && (oldHeight <= STAGE_HEIGHT * 2)) {
            return {width: oldWidth, height: oldHeight};
        }

        const imageRatio = oldWidth / oldHeight;
        // Otherwise, figure out how to resize
        if (imageRatio >= STAGE_RATIO) {
            // Wide Image
            return {width: STAGE_WIDTH * 2, height: STAGE_WIDTH * 2 / imageRatio};
        }
        // In this case we have either:
        // - A wide image, but not with as big a ratio between width and height,
        // making it so that fitting the width to double stage size would leave
        // the height too big to fit in double the stage height
        // - A square image that's still larger than the double at least
        // one of the stage dimensions, so pick the smaller of the two dimensions (to fit)
        // - A tall image
        // In any of these cases, resize the image to fit the height to double the stage height
        return {width: STAGE_HEIGHT * 2 * imageRatio, height: STAGE_HEIGHT * 2};
    }

    /**
     * Given bitmap data, resize as necessary.
     * @param {ArrayBuffer | string} fileData Base 64 encoded image data of the bitmap
     * @param {string} fileType The MIME type of this file
     * @returns {Promise} Resolves to resized image data Uint8Array
     */
    importBitmap (fileData, fileType) {
        let dataURI = fileData;
        if (fileData instanceof ArrayBuffer) {
            dataURI = this.convertBinaryToDataURI(fileData, fileType);
        }
        return new Promise((resolve, reject) => {
            const image = this._makeImage();
            image.src = dataURI;
            image.onload = () => {
                const newSize = this.getResizedWidthHeight(image.width, image.height);
                if (newSize.width === image.width && newSize.height === image.height) {
                    // No change
                    resolve(this.convertDataURIToBinary(dataURI));
                } else {
                    const resizedDataURI = this.resize(image, newSize.width, newSize.height).toDataURL();
                    resolve(this.convertDataURIToBinary(resizedDataURI));
                }
            };
            image.onerror = () => {
                // TODO: reject with an Error (breaking API change!)
                // eslint-disable-next-line prefer-promise-reject-errors
                reject('Image load failed');
            };
        });
    }

    // TODO consolidate with scratch-vm/src/util/base64-util.js
    // From https://gist.github.com/borismus/1032746
    convertDataURIToBinary (dataURI) {
        const BASE64_MARKER = ';base64,';
        const base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
        const base64 = dataURI.substring(base64Index);
        const raw = window.atob(base64);
        const rawLength = raw.length;
        const array = new Uint8Array(new ArrayBuffer(rawLength));

        for (let i = 0; i < rawLength; i++) {
            array[i] = raw.charCodeAt(i);
        }
        return array;
    }

    convertBinaryToDataURI (arrayBuffer, contentType) {
        return `data:${contentType};base64,${base64js.fromByteArray(new Uint8Array(arrayBuffer))}`;
    }
}

module.exports = BitmapAdapter;


/***/ }),

/***/ "./node_modules/scratch-svg-renderer/src/fixup-svg-string.js":
/*!*******************************************************************!*\
  !*** ./node_modules/scratch-svg-renderer/src/fixup-svg-string.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Fixup svg string prior to parsing.
 * @param {!string} svgString String of the svg to fix.
 * @returns {!string} fixed svg that should be parseable.
 */
module.exports = function (svgString) {
    // Add root svg namespace if it does not exist.
    const svgAttrs = svgString.match(/<svg [^>]*>/);
    if (svgAttrs && svgAttrs[0].indexOf('xmlns=') === -1) {
        svgString = svgString.replace('<svg ', '<svg xmlns="http://www.w3.org/2000/svg" ');
    }

    // There are some SVGs from Illustrator that use undeclared entities.
    // Just replace those entities with fake namespace references to prevent
    // DOMParser from crashing
    if (svgAttrs && svgAttrs[0].indexOf('&ns_') !== -1 && svgString.indexOf('<!DOCTYPE') === -1) {
        svgString = svgString.replace(svgAttrs[0],
            svgAttrs[0].replace(/&ns_[^;]+;/g, 'http://ns.adobe.com/Extensibility/1.0/'));
    }

    // Some SVGs exported from Photoshop have been found to have an invalid mime type
    // Chrome and Safari won't render these SVGs, so we correct it here
    if (svgString.includes('data:img/png')) {
        svgString = svgString.replace(
            // capture entire image tag with xlink:href=and the quote - dont capture data: bit
            /(<image[^>]+?xlink:href=["'])data:img\/png/g,
            // use the captured <image ..... xlink:href=" then append the right data uri mime type
            ($0, $1) => `${$1}data:image/png`
        );
    }

    // Some SVGs from Inkscape attempt to bind a prefix to a reserved namespace name.
    // This will cause SVG parsing to fail, so replace these with a dummy namespace name.
    // This namespace name is only valid for "xml", and if we bind "xmlns:xml" to the dummy namespace,
    // parsing will fail yet again, so exclude "xmlns:xml" declarations.
    const xmlnsRegex = /(<[^>]+?xmlns:(?!xml=)[^ ]+=)"http:\/\/www.w3.org\/XML\/1998\/namespace"/g;
    if (svgString.match(xmlnsRegex) !== null) {
        svgString = svgString.replace(
            // capture the entire attribute
            xmlnsRegex,
            // use the captured attribute name; replace only the URL
            ($0, $1) => `${$1}"http://dummy.namespace"`
        );
    }

    // Strip `svg:` prefix (sometimes added by Inkscape) from all tags. They interfere with DOMPurify (prefixed tag
    // names are not recognized) and the paint editor.
    // This matches opening and closing tags--the capture group captures the slash if it exists, and it is reinserted
    // in the replacement text.
    svgString = svgString.replace(/<(\/?)\s*svg:/g, '<$1');

    // The <metadata> element is not needed for rendering and sometimes contains
    // unparseable garbage from Illustrator :( Empty out the contents.
    // Note: [\s\S] matches everything including newlines, which .* does not
    svgString = svgString.replace(/<metadata>[\s\S]*<\/metadata>/, '<metadata></metadata>');

    // Empty script tags and javascript executing
    svgString = svgString.replace(/<script[\s\S]*>[\s\S]*<\/script>/, '<script></script>');

    return svgString;
};


/***/ }),

/***/ "./node_modules/scratch-svg-renderer/src/font-converter.js":
/*!*****************************************************************!*\
  !*** ./node_modules/scratch-svg-renderer/src/font-converter.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * @fileOverview Convert 2.0 fonts to 3.0 fonts.
 */

/**
 * Given an SVG, replace Scratch 2.0 fonts with new 3.0 fonts. Add defaults where there are none.
 * @param {SVGElement} svgTag The SVG dom object
 * @return {void}
 */
const convertFonts = function (svgTag) {
    // Collect all text elements into a list.
    const textElements = [];
    const collectText = domElement => {
        if (domElement.localName === 'text') {
            textElements.push(domElement);
        }
        for (let i = 0; i < domElement.childNodes.length; i++) {
            collectText(domElement.childNodes[i]);
        }
    };
    collectText(svgTag);
    // If there's an old font-family, switch to the new one.
    for (const textElement of textElements) {
        // If there's no font-family provided, provide one.
        if (!textElement.getAttribute('font-family') ||
            textElement.getAttribute('font-family') === 'Helvetica') {
            textElement.setAttribute('font-family', 'Sans Serif');
        } else if (textElement.getAttribute('font-family') === 'Mystery') {
            textElement.setAttribute('font-family', 'Curly');
        } else if (textElement.getAttribute('font-family') === 'Gloria') {
            textElement.setAttribute('font-family', 'Handwriting');
        } else if (textElement.getAttribute('font-family') === 'Donegal') {
            textElement.setAttribute('font-family', 'Serif');
        }
    }
};

module.exports = convertFonts;


/***/ }),

/***/ "./node_modules/scratch-svg-renderer/src/font-inliner.js":
/*!***************************************************************!*\
  !*** ./node_modules/scratch-svg-renderer/src/font-inliner.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview Import bitmap data into Scratch 3.0, resizing image as necessary.
 */
const getFonts = __webpack_require__(/*! scratch-render-fonts */ "./node_modules/scratch-render-fonts/src/index.js");

const xmlEscape = str => str.replace(/[<>&'"]/g, c => {
    switch (c) {
    case '<': return '&lt;';
    case '>': return '&gt;';
    case '&': return '&amp;';
    case '\'': return '&apos;';
    case '"': return '&quot;';
    }
});

/**
 * Given SVG data, inline the fonts. This allows them to be rendered correctly when set
 * as the source of an HTMLImageElement. Here is a note from tmickel:
 *   // Inject fonts that are needed.
 *   // It would be nice if there were another way to get the SVG-in-canvas
 *   // to render the correct font family, but I couldn't find any other way.
 *   // Other things I tried:
 *   // Just injecting the font-family into the document: no effect.
 *   // External stylesheet linked to by SVG: no effect.
 *   // Using a <link> or <style>@import</style> to link to font-family
 *   // injected into the document: no effect.
 * @param {string} svgString The string representation of the svg to modify
 * @param {object} [customFontFaces] Object mapping custom font families to @font-face statements.
 * @return {string} The svg with any needed fonts inlined
 */
const inlineSvgFonts = function (svgString, customFontFaces = {}) {
    // Make it clear that this function only operates on strings.
    // If we don't explicitly throw this here, the function silently fails.
    if (typeof svgString !== 'string') {
        throw new Error('SVG to be inlined is not a string');
    }

    const FONTS = {};
    if (customFontFaces && typeof customFontFaces === 'object') {
        // The fonts in the document will be XML escaped
        for (const [families, style] of Object.entries(customFontFaces)) {
            FONTS[xmlEscape(families)] = style;
        }
    }
    try {
        // We already know these don't need to be XML escaped
        Object.assign(FONTS, getFonts());
    } catch (e) {
        // getFonts fails in tests because it uses some webpack tricks. This is safe to ignore.
    }

    // Collect fonts that need injection.
    const fontsNeeded = new Set();
    const fontRegex = /font-family="([^"]*)"/g;
    let matches = fontRegex.exec(svgString);
    while (matches) {
        fontsNeeded.add(matches[1]);
        matches = fontRegex.exec(svgString);
    }
    if (fontsNeeded.size > 0) {
        let str = '<defs><style>';
        for (const font of fontsNeeded) {
            if (Object.prototype.hasOwnProperty.call(FONTS, font)) {
                str += `${FONTS[font]}`;
            }
        }
        str += '</style></defs>';
        svgString = svgString.replace(/<svg[^>]*>/, `$&${str}`);
        return svgString;
    }
    return svgString;
};

module.exports = inlineSvgFonts;


/***/ }),

/***/ "./node_modules/scratch-svg-renderer/src/index.js":
/*!********************************************************!*\
  !*** ./node_modules/scratch-svg-renderer/src/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const SVGRenderer = __webpack_require__(/*! ./svg-renderer */ "./node_modules/scratch-svg-renderer/src/svg-renderer.js");
const BitmapAdapter = __webpack_require__(/*! ./bitmap-adapter */ "./node_modules/scratch-svg-renderer/src/bitmap-adapter.js");
const inlineSvgFonts = __webpack_require__(/*! ./font-inliner */ "./node_modules/scratch-svg-renderer/src/font-inliner.js");
const loadSvgString = __webpack_require__(/*! ./load-svg-string */ "./node_modules/scratch-svg-renderer/src/load-svg-string.js");
const sanitizeSvg = __webpack_require__(/*! ./sanitize-svg */ "./node_modules/scratch-svg-renderer/src/sanitize-svg.js");
const serializeSvgToString = __webpack_require__(/*! ./serialize-svg-to-string */ "./node_modules/scratch-svg-renderer/src/serialize-svg-to-string.js");
const SvgElement = __webpack_require__(/*! ./svg-element */ "./node_modules/scratch-svg-renderer/src/svg-element.js");
const convertFonts = __webpack_require__(/*! ./font-converter */ "./node_modules/scratch-svg-renderer/src/font-converter.js");
// /**
//  * Export for NPM & Node.js
//  * @type {RenderWebGL}
//  */
module.exports = {
    BitmapAdapter: BitmapAdapter,
    convertFonts: convertFonts,
    inlineSvgFonts: inlineSvgFonts,
    loadSvgString: loadSvgString,
    sanitizeSvg: sanitizeSvg,
    serializeSvgToString: serializeSvgToString,
    SvgElement: SvgElement,
    SVGRenderer: SVGRenderer
};


/***/ }),

/***/ "./node_modules/scratch-svg-renderer/src/load-svg-string.js":
/*!******************************************************************!*\
  !*** ./node_modules/scratch-svg-renderer/src/load-svg-string.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const DOMPurify = __webpack_require__(/*! dompurify */ "./node_modules/dompurify/dist/purify.js");
const SvgElement = __webpack_require__(/*! ./svg-element */ "./node_modules/scratch-svg-renderer/src/svg-element.js");
const convertFonts = __webpack_require__(/*! ./font-converter */ "./node_modules/scratch-svg-renderer/src/font-converter.js");
const fixupSvgString = __webpack_require__(/*! ./fixup-svg-string */ "./node_modules/scratch-svg-renderer/src/fixup-svg-string.js");
const transformStrokeWidths = __webpack_require__(/*! ./transform-applier */ "./node_modules/scratch-svg-renderer/src/transform-applier.js");

/**
 * @param {SVGElement} svgTag the tag to search within
 * @param {string} [tagName] svg tag to search for (or collect all elements if not given)
 * @return {Array} a list of elements with the given tagname
 */
const collectElements = (svgTag, tagName) => {
    const elts = [];
    const collectElementsInner = domElement => {
        if ((domElement.localName === tagName || typeof tagName === 'undefined') && domElement.getAttribute) {
            elts.push(domElement);
        }
        for (let i = 0; i < domElement.childNodes.length; i++) {
            collectElementsInner(domElement.childNodes[i]);
        }
    };
    collectElementsInner(svgTag);
    return elts;
};

/**
 * Fix SVGs to comply with SVG spec. Scratch 2 defaults to x2 = 0 when x2 is missing, but
 * SVG defaults to x2 = 1 when missing.
 * @param {SVGSVGElement} svgTag the SVG tag to apply the transformation to
 */
const transformGradients = svgTag => {
    const linearGradientElements = collectElements(svgTag, 'linearGradient');

    // For each gradient element, supply x2 if necessary.
    for (const gradientElement of linearGradientElements) {
        if (!gradientElement.getAttribute('x2')) {
            gradientElement.setAttribute('x2', '0');
        }
    }
};

/**
 * Fix SVGs to match appearance in Scratch 2, which used nearest neighbor scaling for bitmaps
 * within SVGs.
 * @param {SVGSVGElement} svgTag the SVG tag to apply the transformation to
 */
const transformImages = svgTag => {
    const imageElements = collectElements(svgTag, 'image');

    // For each image element, set image rendering to pixelated
    const pixelatedImages = 'image-rendering: optimizespeed; image-rendering: pixelated;';
    for (const elt of imageElements) {
        if (elt.getAttribute('style')) {
            elt.setAttribute('style',
                `${pixelatedImages} ${elt.getAttribute('style')}`);
        } else {
            elt.setAttribute('style', pixelatedImages);
        }
    }
};

/**
 * Transforms an SVG's text elements for Scratch 2.0 quirks.
 * These quirks include:
 * 1. `x` and `y` properties are removed/ignored.
 * 2. Alignment is set to `text-before-edge`.
 * 3. Line-breaks are converted to explicit <tspan> elements.
 * 4. Any required fonts are injected.
 * @param {SVGSVGElement} svgTag the SVG tag to apply the transformation to
 */
const transformText = svgTag => {
    // Collect all text elements into a list.
    const textElements = [];
    const collectText = domElement => {
        if (domElement.localName === 'text') {
            textElements.push(domElement);
        }
        for (let i = 0; i < domElement.childNodes.length; i++) {
            collectText(domElement.childNodes[i]);
        }
    };
    collectText(svgTag);
    convertFonts(svgTag);
    // For each text element, apply quirks.
    for (const textElement of textElements) {
        // Remove x and y attributes - they are not used in Scratch.
        textElement.removeAttribute('x');
        textElement.removeAttribute('y');
        // Set text-before-edge alignment:
        // Scratch renders all text like this.
        textElement.setAttribute('alignment-baseline', 'text-before-edge');
        textElement.setAttribute('xml:space', 'preserve');
        // If there's no font size provided, provide one.
        if (!textElement.getAttribute('font-size')) {
            textElement.setAttribute('font-size', '18');
        }
        let text = textElement.textContent;

        // Fix line breaks in text, which are not natively supported by SVG.
        // Only fix if text does not have child tspans.
        // @todo this will not work for font sizes with units such as em, percent
        // However, text made in scratch 2 should only ever export size 22 font.
        const fontSize = parseFloat(textElement.getAttribute('font-size'));
        const tx = 2;
        let ty = 0;
        let spacing = 1.2;
        // Try to match the position and spacing of Scratch 2.0's fonts.
        // Different fonts seem to use different line spacing.
        // Scratch 2 always uses alignment-baseline=text-before-edge
        // However, most SVG readers don't support this attribute
        // or don't support it alongside use of tspan, so the translations
        // here are to make up for that.
        if (textElement.getAttribute('font-family') === 'Handwriting') {
            spacing = 2;
            ty = -11 * fontSize / 22;
        } else if (textElement.getAttribute('font-family') === 'Scratch') {
            spacing = 0.89;
            ty = -3 * fontSize / 22;
        } else if (textElement.getAttribute('font-family') === 'Curly') {
            spacing = 1.38;
            ty = -6 * fontSize / 22;
        } else if (textElement.getAttribute('font-family') === 'Marker') {
            spacing = 1.45;
            ty = -6 * fontSize / 22;
        } else if (textElement.getAttribute('font-family') === 'Sans Serif') {
            spacing = 1.13;
            ty = -3 * fontSize / 22;
        } else if (textElement.getAttribute('font-family') === 'Serif') {
            spacing = 1.25;
            ty = -4 * fontSize / 22;
        }

        if (textElement.transform.baseVal.numberOfItems === 0) {
            const transform = svgTag.createSVGTransform();
            textElement.transform.baseVal.appendItem(transform);
        }

        // Right multiply matrix by a translation of (tx, ty)
        const mtx = textElement.transform.baseVal.getItem(0).matrix;
        mtx.e += (mtx.a * tx) + (mtx.c * ty);
        mtx.f += (mtx.b * tx) + (mtx.d * ty);

        if (text && textElement.childElementCount === 0) {
            textElement.textContent = '';
            const lines = text.split('\n');
            text = '';
            for (const line of lines) {
                const tspanNode = SvgElement.create('tspan');
                tspanNode.setAttribute('x', '0');
                tspanNode.setAttribute('style', 'white-space: pre');
                tspanNode.setAttribute('dy', `${spacing}em`);
                tspanNode.textContent = line ? line : ' ';
                textElement.appendChild(tspanNode);
            }
        }
    }
};

/**
 * Find the largest stroke width in the svg. If a shape has no
 * `stroke` property, it has a stroke-width of 0. If it has a `stroke`,
 * it is by default a stroke-width of 1.
 * This is used to enlarge the computed bounding box, which doesn't take
 * stroke width into account.
 * @param {SVGSVGElement} rootNode The root SVG node to traverse.
 * @return {number} The largest stroke width in the SVG.
 */
const findLargestStrokeWidth = rootNode => {
    let largestStrokeWidth = 0;
    const collectStrokeWidths = domElement => {
        if (domElement.getAttribute) {
            if (domElement.getAttribute('stroke')) {
                largestStrokeWidth = Math.max(largestStrokeWidth, 1);
            }
            if (domElement.getAttribute('stroke-width')) {
                largestStrokeWidth = Math.max(
                    largestStrokeWidth,
                    Number(domElement.getAttribute('stroke-width')) || 0
                );
            }
        }
        for (let i = 0; i < domElement.childNodes.length; i++) {
            collectStrokeWidths(domElement.childNodes[i]);
        }
    };
    collectStrokeWidths(rootNode);
    return largestStrokeWidth;
};

/**
 * Transform the measurements of the SVG.
 * In Scratch 2.0, SVGs are drawn without respect to the width,
 * height, and viewBox attribute on the tag. The exporter
 * does output these properties - but they appear to be incorrect often.
 * To address the incorrect measurements, we append the DOM to the
 * document, and then use SVG's native `getBBox` to find the real
 * drawn dimensions. This ensures things drawn in negative dimensions,
 * outside the given viewBox, etc., are all eventually drawn to the canvas.
 * I tried to do this several other ways: stripping the width/height/viewBox
 * attributes and then drawing (Firefox won't draw anything),
 * or inflating them and then measuring a canvas. But this seems to be
 * a natural and performant way.
 * @param {SVGSVGElement} svgTag the SVG tag to apply the transformation to
 */
const transformMeasurements = svgTag => {
    // Append the SVG dom to the document.
    // This allows us to use `getBBox` on the page,
    // which returns the full bounding-box of all drawn SVG
    // elements, similar to how Scratch 2.0 did measurement.
    const svgSpot = document.createElement('span');
    // Since we're adding user-provided SVG to document.body,
    // sanitizing is required. This should not affect bounding box calculation.
    // outerHTML is attribute of Element (and not HTMLElement), so use it instead of
    // calling serializer or toString()
    // NOTE: svgTag remains untouched!
    const rawValue = svgTag.outerHTML;
    const sanitizedValue = DOMPurify.sanitize(rawValue, {
        // Use SVG profile (no HTML elements)
        USE_PROFILES: {svg: true},
        // Remove some tags that Scratch does not use.
        FORBID_TAGS: ['a', 'audio', 'canvas', 'video'],
        // Allow data URI in image tags (e.g. SVGs converted from bitmap)
        ADD_DATA_URI_TAGS: ['image']
    });
    let bbox;
    try {
        // Insert sanitized value.
        svgSpot.innerHTML = sanitizedValue;
        document.body.appendChild(svgSpot);
        // Take the bounding box. We have to get elements via svgSpot
        // because we added it via innerHTML.
        bbox = svgSpot.children[0].getBBox();
    } finally {
        // Always destroy the element, even if, for example, getBBox throws.
        document.body.removeChild(svgSpot);
    }

    // Enlarge the bbox from the largest found stroke width
    // This may have false-positives, but at least the bbox will always
    // contain the full graphic including strokes.
    // If the width or height is zero however, don't enlarge since
    // they won't have a stroke width that needs to be enlarged.
    let halfStrokeWidth;
    if (bbox.width === 0 || bbox.height === 0) {
        halfStrokeWidth = 0;
    } else {
        halfStrokeWidth = findLargestStrokeWidth(svgTag) / 2;
    }
    const width = bbox.width + (halfStrokeWidth * 2);
    const height = bbox.height + (halfStrokeWidth * 2);
    const x = bbox.x - halfStrokeWidth;
    const y = bbox.y - halfStrokeWidth;

    // Set the correct measurements on the SVG tag
    svgTag.setAttribute('width', width);
    svgTag.setAttribute('height', height);
    svgTag.setAttribute('viewBox',
        `${x} ${y} ${width} ${height}`);
};

/**
 * Find all instances of a URL-referenced `stroke` in the svg. In 2.0, all gradient strokes
 * have a round `stroke-linejoin` and `stroke-linecap`... for some reason.
 * @param {SVGSVGElement} svgTag the SVG tag to apply the transformation to
 */
const setGradientStrokeRoundedness = svgTag => {
    const elements = collectElements(svgTag);

    for (const elt of elements) {
        if (!elt.style) continue;
        const stroke = elt.style.stroke || elt.getAttribute('stroke');
        if (stroke && stroke.match(/^url\(#.*\)$/)) {
            elt.style['stroke-linejoin'] = 'round';
            elt.style['stroke-linecap'] = 'round';
        }
    }
};

/**
 * In-place, convert passed SVG to something consistent that will be rendered the way we want them to be.
 * @param {SVGSvgElement} svgTag root SVG node to operate upon
 * @param {boolean} [fromVersion2] True if we should perform conversion from version 2 to version 3 svg.
 */
const normalizeSvg = (svgTag, fromVersion2) => {
    if (fromVersion2) {
        // Fix gradients. Scratch 2 exports no x2 when x2 = 0, but
        // SVG default is that x2 is 1. This must be done before
        // transformStrokeWidths since transformStrokeWidths affects
        // gradients.
        transformGradients(svgTag);
    }
    transformStrokeWidths(svgTag, window);
    transformImages(svgTag);
    if (fromVersion2) {
        // Transform all text elements.
        transformText(svgTag);
        // Transform measurements.
        transformMeasurements(svgTag);
        // Fix stroke roundedness.
        setGradientStrokeRoundedness(svgTag);
    } else if (!svgTag.getAttribute('viewBox')) {
        // Renderer expects a view box.
        transformMeasurements(svgTag);
    } else if (!svgTag.getAttribute('width') || !svgTag.getAttribute('height')) {
        svgTag.setAttribute('width', svgTag.viewBox.baseVal.width);
        svgTag.setAttribute('height', svgTag.viewBox.baseVal.height);
    }
};

/**
 * Load an SVG string and normalize it. All the steps before drawing/measuring.
 * Currently, this will normalize stroke widths (see transform-applier.js) and render all embedded images pixelated.
 * The returned SVG will be guaranteed to always have a `width`, `height` and `viewBox`.
 * In addition, if the `fromVersion2` parameter is `true`, several "quirks-mode" transformations will be applied which
 * mimic Scratch 2.0's SVG rendering.
 * @param {!string} svgString String of SVG data to draw in quirks-mode.
 * @param {boolean} [fromVersion2] True if we should perform conversion from version 2 to version 3 svg.
 * @return {SVGSVGElement} The normalized SVG element.
 */
const loadSvgString = (svgString, fromVersion2) => {
    // Parse string into SVG XML.
    const parser = new DOMParser();
    svgString = fixupSvgString(svgString);
    const svgDom = parser.parseFromString(svgString, 'text/xml');
    if (svgDom.childNodes.length < 1 ||
        svgDom.documentElement.localName !== 'svg') {
        throw new Error('Document does not appear to be SVG.');
    }
    const svgTag = svgDom.documentElement;
    normalizeSvg(svgTag, fromVersion2);
    return svgTag;
};

module.exports = loadSvgString;


/***/ }),

/***/ "./node_modules/scratch-svg-renderer/src/sanitize-svg.js":
/*!***************************************************************!*\
  !*** ./node_modules/scratch-svg-renderer/src/sanitize-svg.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview Sanitize the content of an SVG aggressively, to make it as safe
 * as possible
 */
const fixupSvgString = __webpack_require__(/*! ./fixup-svg-string */ "./node_modules/scratch-svg-renderer/src/fixup-svg-string.js");
const {generate, parse, walk} = __webpack_require__(/*! css-tree */ "./node_modules/css-tree/lib/index.js");
const DOMPurify = __webpack_require__(/*! dompurify */ "./node_modules/dompurify/dist/purify.js");

const sanitizeSvg = {};

// addHook() is undefined when running in an unsupported environment (eg. Node)
if (DOMPurify.isSupported) {
    DOMPurify.addHook(
        'beforeSanitizeAttributes',
        currentNode => {
    
            if (currentNode && currentNode.href && currentNode.href.baseVal) {
                const href = currentNode.href.baseVal.replace(/\s/g, '');
                // "data:" and "#" are valid hrefs
                if ((href.slice(0, 5) !== 'data:') && (href.slice(0, 1) !== '#')) {
    
                    if (currentNode.attributes.getNamedItem('xlink:href')) {
                        currentNode.attributes.removeNamedItem('xlink:href');
                        delete currentNode['xlink:href'];
                    }
                    if (currentNode.attributes.getNamedItem('href')) {
                        currentNode.attributes.removeNamedItem('href');
                        delete currentNode.href;
                    }
                }
            }
            return currentNode;
        }
    );

    DOMPurify.addHook(
        'uponSanitizeElement',
        (node, data) => {
            if (data.tagName === 'style') {
                const ast = parse(node.textContent);
                let isModified = false;
                // Remove any @import rules as it could leak HTTP requests
                walk(ast, (astNode, item, list) => {
                    if (astNode.type === 'Atrule' && astNode.name === 'import') {
                        list.remove(item);
                        isModified = true;
                    }
                });
                if (isModified) {
                    node.textContent = generate(ast);
                }
            }
        }
    );
}

// Use JS implemented TextDecoder and TextEncoder if it is not provided by the
// browser.
let _TextDecoder;
let _TextEncoder;
if (typeof TextDecoder === 'undefined' || typeof TextEncoder === 'undefined') {
    // Wait to require the text encoding polyfill until we know it's needed.
    // eslint-disable-next-line global-require
    const encoding = __webpack_require__(/*! fastestsmallesttextencoderdecoder */ "./node_modules/fastestsmallesttextencoderdecoder/EncoderDecoderTogether.min.js");
    _TextDecoder = encoding.TextDecoder;
    _TextEncoder = encoding.TextEncoder;
} else {
    _TextDecoder = TextDecoder;
    _TextEncoder = TextEncoder;
}

/**
 * Load an SVG Uint8Array of bytes and "sanitize" it
 * @param {!Uint8Array} rawData unsanitized SVG daata
 * @return {Uint8Array} sanitized SVG data
 */
sanitizeSvg.sanitizeByteStream = function (rawData) {
    const decoder = new _TextDecoder();
    const encoder = new _TextEncoder();
    const sanitizedText = sanitizeSvg.sanitizeSvgText(decoder.decode(rawData));
    return encoder.encode(sanitizedText);
};

// TW: Don't remove extra metadata tag: <!--rotationCenter:10,10-->
// Using literal HTML comments tokens will cause this script to be very hard to inline in
// a <script> element, so we'll instead do this terrible hack which the minifier probably
// won't be able to optimize away.
const HTML_COMMENT_START = `<!${'-'.repeat(2)}`;
const HTML_COMMENT_END = `${'-'.repeat(2)}>`;
const extraMetadataRegex = new RegExp(
    `${HTML_COMMENT_START}rotationCenter:(-?[\\d\\.]+):(-?[\\d\\.]+)${HTML_COMMENT_END}$`
);

/**
 * Load an SVG string and "sanitize" it. This is more aggressive than the handling in
 * fixup-svg-string.js, and thus more risky; there are known examples of SVGs that
 * it will clobber. We use DOMPurify's svg profile, which restricts many types of tag.
 * @param {!string} rawSvgText unsanitized SVG string
 * @return {string} sanitized SVG text
 */
sanitizeSvg.sanitizeSvgText = function (rawSvgText) {
    let sanitizedText = DOMPurify.sanitize(rawSvgText, {
        USE_PROFILES: {svg: true}
    });

    // Remove partial XML comment that is sometimes left in the HTML
    const badTag = sanitizedText.indexOf(']&gt;');
    if (badTag >= 0) {
        sanitizedText = sanitizedText.substring(5, sanitizedText.length);
    }

    // also use our custom fixup rules
    sanitizedText = fixupSvgString(sanitizedText);

    // TW: don't remove extra metadata comment
    const extraMetadataMatch = rawSvgText.match(extraMetadataRegex);
    if (extraMetadataMatch) {
        sanitizedText += extraMetadataMatch[0];
    }

    return sanitizedText;
};

module.exports = sanitizeSvg;


/***/ }),

/***/ "./node_modules/scratch-svg-renderer/src/serialize-svg-to-string.js":
/*!**************************************************************************!*\
  !*** ./node_modules/scratch-svg-renderer/src/serialize-svg-to-string.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const inlineSvgFonts = __webpack_require__(/*! ./font-inliner */ "./node_modules/scratch-svg-renderer/src/font-inliner.js");

/**
 * Serialize a given SVG DOM to a string.
 * @param {SVGSVGElement} svgTag The SVG element to serialize.
 * @param {boolean|object} [injectFonts] True if fonts should be included in the SVG as
 *     base64 data. Use an object to specify custom fonts.
 * @returns {string} String representing current SVG data.
 */
const serializeSvgToString = (svgTag, injectFonts) => {
    const serializer = new XMLSerializer();
    let string = serializer.serializeToString(svgTag);
    if (injectFonts) {
        string = inlineSvgFonts(string, injectFonts);
    }
    return string;
};

module.exports = serializeSvgToString;


/***/ }),

/***/ "./node_modules/scratch-svg-renderer/src/svg-element.js":
/*!**************************************************************!*\
  !*** ./node_modules/scratch-svg-renderer/src/svg-element.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Adapted from
 * Paper.js - The Swiss Army Knife of Vector Graphics Scripting.
 * http://paperjs.org/
 *
 * Copyright (c) 2011 - 2016, Juerg Lehni & Jonathan Puckey
 * http://scratchdisk.com/ & http://jonathanpuckey.com/
 *
 * Distributed under the MIT license. See LICENSE file for details.
 *
 * All rights reserved.
 */

/**
 * @name SvgElement
 * @namespace
 * @private
 */
class SvgElement {
    // SVG related namespaces
    static get svg () {
        return 'http://www.w3.org/2000/svg';
    }
    static get xmlns () {
        return 'http://www.w3.org/2000/xmlns';
    }
    static get xlink () {
        return 'http://www.w3.org/1999/xlink';
    }

    // Mapping of attribute names to required namespaces:
    static attributeNamespace () {
        return {
            'href': SvgElement.xlink,
            'xlink': SvgElement.xmlns,
            // Only the xmlns attribute needs the trailing slash. See #984
            'xmlns': `${SvgElement.xmlns}/`,
            // IE needs the xmlns namespace when setting 'xmlns:xlink'. See #984
            'xmlns:xlink': `${SvgElement.xmlns}/`
        };
    }

    static create (tag, attributes, formatter) {
        return SvgElement.set(document.createElementNS(SvgElement.svg, tag), attributes, formatter);
    }

    static get (node, name) {
        const namespace = SvgElement.attributeNamespace[name];
        const value = namespace ?
            node.getAttributeNS(namespace, name) :
            node.getAttribute(name);
        return value === 'null' ? null : value;
    }

    static set (node, attributes, formatter) {
        for (const name in attributes) {
            let value = attributes[name];
            const namespace = SvgElement.attributeNamespace[name];
            if (typeof value === 'number' && formatter) {
                value = formatter.number(value);
            }
            if (namespace) {
                node.setAttributeNS(namespace, name, value);
            } else {
                node.setAttribute(name, value);
            }
        }
        return node;
    }
}

module.exports = SvgElement;


/***/ }),

/***/ "./node_modules/scratch-svg-renderer/src/svg-renderer.js":
/*!***************************************************************!*\
  !*** ./node_modules/scratch-svg-renderer/src/svg-renderer.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const loadSvgString = __webpack_require__(/*! ./load-svg-string */ "./node_modules/scratch-svg-renderer/src/load-svg-string.js");
const serializeSvgToString = __webpack_require__(/*! ./serialize-svg-to-string */ "./node_modules/scratch-svg-renderer/src/serialize-svg-to-string.js");

/**
 * Main quirks-mode SVG rendering code.
 * @deprecated Call into individual methods exported from this library instead.
 */
class SvgRenderer {
    /**
     * Create a quirks-mode SVG renderer for a particular canvas.
     * @param {HTMLCanvasElement} [canvas] An optional canvas element to draw to. If this is not provided, the renderer
     * will create a new canvas.
     * @constructor
     */
    constructor (canvas) {
        /**
         * The canvas that this SVG renderer will render to.
         * @type {HTMLCanvasElement}
         * @private
         */
        this._canvas = canvas || document.createElement('canvas');
        this._context = this._canvas.getContext('2d');

        /**
         * A measured SVG "viewbox"
         * @typedef {object} SvgRenderer#SvgMeasurements
         * @property {number} x - The left edge of the SVG viewbox.
         * @property {number} y - The top edge of the SVG viewbox.
         * @property {number} width - The width of the SVG viewbox.
         * @property {number} height - The height of the SVG viewbox.
         */

        /**
         * The measurement box of the currently loaded SVG.
         * @type {SvgRenderer#SvgMeasurements}
         * @private
         */
        this._measurements = {x: 0, y: 0, width: 0, height: 0};

        /**
         * The `<img>` element with the contents of the currently loaded SVG.
         * @type {?HTMLImageElement}
         * @private
         */
        this._cachedImage = null;

        /**
         * True if this renderer's current SVG is loaded and can be rendered to the canvas.
         * @type {boolean}
         */
        this.loaded = false;
    }

    /**
     * @returns {!HTMLCanvasElement} this renderer's target canvas.
     */
    get canvas () {
        return this._canvas;
    }

    /**
     * @return {Array<number>} the natural size, in Scratch units, of this SVG.
     */
    get size () {
        return [this._measurements.width, this._measurements.height];
    }

    /**
     * @return {Array<number>} the offset (upper left corner) of the SVG's view box.
     */
    get viewOffset () {
        return [this._measurements.x, this._measurements.y];
    }

    /**
     * Load an SVG string and normalize it. All the steps before drawing/measuring.
     * @param {!string} svgString String of SVG data to draw in quirks-mode.
     * @param {?boolean} fromVersion2 True if we should perform conversion from
     *     version 2 to version 3 svg.
     */
    loadString (svgString, fromVersion2) {
        // New svg string invalidates the cached image
        this._cachedImage = null;
        const svgTag = loadSvgString(svgString, fromVersion2);

        this._svgTag = svgTag;
        this._measurements = {
            width: svgTag.viewBox.baseVal.width,
            height: svgTag.viewBox.baseVal.height,
            x: svgTag.viewBox.baseVal.x,
            y: svgTag.viewBox.baseVal.y
        };
    }

    /**
     * Load an SVG string, normalize it, and prepare it for (synchronous) rendering.
     * @param {!string} svgString String of SVG data to draw in quirks-mode.
     * @param {?boolean} fromVersion2 True if we should perform conversion from version 2 to version 3 svg.
     * @param {Function} [onFinish] - An optional callback to call when the SVG is loaded and can be rendered.
     */
    loadSVG (svgString, fromVersion2, onFinish) {
        this.loadString(svgString, fromVersion2);
        this._createSVGImage(onFinish);
    }

    /**
     * Creates an <img> element for the currently loaded SVG string, then calls the callback once it's loaded.
     * @param {Function} [onFinish] - An optional callback to call when the <img> has loaded.
     */
    _createSVGImage (onFinish) {
        if (this._cachedImage === null) this._cachedImage = new Image();
        const img = this._cachedImage;

        img.onload = () => {
            this.loaded = true;
            if (onFinish) onFinish();
        };
        const svgText = this.toString(true /* shouldInjectFonts */);
        img.src = `data:image/svg+xml;utf8,${encodeURIComponent(svgText)}`;
        this.loaded = false;
    }

    /**
     * Serialize the active SVG DOM to a string.
     * @param {?boolean} shouldInjectFonts True if fonts should be included in the SVG as
     *     base64 data.
     * @returns {string} String representing current SVG data.
     * @deprecated Use the standalone `serializeSvgToString` export instead.
     */
    toString (shouldInjectFonts) {
        return serializeSvgToString(this._svgTag, shouldInjectFonts);
    }

    /**
     * Synchronously draw the loaded SVG to this renderer's `canvas`.
     * @param {number} [scale] - Optionally, also scale the image by this factor.
     */
    draw (scale) {
        if (!this.loaded) throw new Error('SVG image has not finished loading');
        this._drawFromImage(scale);
    }

    /**
     * Draw to the canvas from a loaded image element.
     * @param {number} [scale] - Optionally, also scale the image by this factor.
     **/
    _drawFromImage (scale) {
        if (this._cachedImage === null) return;

        const ratio = Number.isFinite(scale) ? scale : 1;
        const bbox = this._measurements;
        this._canvas.width = bbox.width * ratio;
        this._canvas.height = bbox.height * ratio;
        // Even if the canvas at the current scale has a nonzero size, the image's dimensions are floored pre-scaling.
        // e.g. if an image has a width of 0.4 and is being rendered at 3x scale, the canvas will have a width of 1, but
        // the image's width will be rounded down to 0 on some browsers (Firefox) prior to being drawn at that scale.
        if (
            this._canvas.width <= 0 ||
            this._canvas.height <= 0 ||
            this._cachedImage.naturalWidth <= 0 ||
            this._cachedImage.naturalHeight <= 0
        ) return;
        this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);
        this._context.setTransform(ratio, 0, 0, ratio, 0, 0);
        this._context.drawImage(this._cachedImage, 0, 0);
    }
}

module.exports = SvgRenderer;


/***/ }),

/***/ "./node_modules/scratch-svg-renderer/src/transform-applier.js":
/*!********************************************************************!*\
  !*** ./node_modules/scratch-svg-renderer/src/transform-applier.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const Matrix = __webpack_require__(/*! transformation-matrix */ "./node_modules/transformation-matrix/build-umd/transformation-matrix.min.js");
const SvgElement = __webpack_require__(/*! ./svg-element */ "./node_modules/scratch-svg-renderer/src/svg-element.js");
const log = __webpack_require__(/*! ./util/log */ "./node_modules/scratch-svg-renderer/src/util/log.js");

/**
 * @fileOverview Apply transforms to match stroke width appearance in 2.0 and 3.0
 */

// Adapted from paper.js's Path.applyTransform
const _parseTransform = function (domElement) {
    let matrix = Matrix.identity();
    const string = domElement.attributes && domElement.attributes.transform && domElement.attributes.transform.value;
    if (!string) return matrix;
    // https://www.w3.org/TR/SVG/types.html#DataTypeTransformList
    // Parse SVG transform string. First we split at /)\s*/, to separate
    // commands
    const transforms = string.split(/\)\s*/g);
    for (const transform of transforms) {
        if (!transform) break;
        // Command come before the '(', values after
        const parts = transform.split(/\(\s*/);
        const command = parts[0].trim();
        const v = parts[1].split(/[\s,]+/g);
        // Convert values to floats
        for (let j = 0; j < v.length; j++) {
            v[j] = parseFloat(v[j]);
        }
        switch (command) {
        case 'matrix':
            matrix = Matrix.compose(matrix, {a: v[0], b: v[1], c: v[2], d: v[3], e: v[4], f: v[5]});
            break;
        case 'rotate':
            matrix = Matrix.compose(matrix, Matrix.rotateDEG(v[0], v[1] || 0, v[2] || 0));
            break;
        case 'translate':
            matrix = Matrix.compose(matrix, Matrix.translate(v[0], v[1] || 0));
            break;
        case 'scale':
            matrix = Matrix.compose(matrix, Matrix.scale(v[0], v[1] || v[0]));
            break;
        case 'skewX':
            matrix = Matrix.compose(matrix, Matrix.skewDEG(v[0], 0));
            break;
        case 'skewY':
            matrix = Matrix.compose(matrix, Matrix.skewDEG(0, v[0]));
            break;
        default:
            log.error(`Couldn't parse: ${command}`);
        }
    }
    return matrix;
};

// Adapted from paper.js's Matrix.decompose
// Given a matrix, return the x and y scale factors of the matrix
const _getScaleFactor = function (matrix) {
    const a = matrix.a;
    const b = matrix.b;
    const c = matrix.c;
    const d = matrix.d;
    const det = (a * d) - (b * c);

    if (a !== 0 || b !== 0) {
        const r = Math.sqrt((a * a) + (b * b));
        return {x: r, y: det / r};
    }
    if (c !== 0 || d !== 0) {
        const s = Math.sqrt((c * c) + (d * d));
        return {x: det / s, y: s};
    }
    // a = b = c = d = 0
    return {x: 0, y: 0};
};

// Returns null if matrix is not invertible. Otherwise returns given ellipse
// transformed by transform, an object {radiusX, radiusY, rotation}.
const _calculateTransformedEllipse = function (radiusX, radiusY, theta, transform) {
    theta = -theta * Math.PI / 180;
    const a = transform.a;
    const b = -transform.c;
    const c = -transform.b;
    const d = transform.d;
    // Since other parameters determine the translation of the ellipse in SVG, we do not need to worry
    // about what e and f are.
    const det = (a * d) - (b * c);
    // Non-invertible matrix
    if (det === 0) return null;

    // rotA, rotB, and rotC represent Ax^2 + Bxy + Cy^2 = 1 coefficients for a rotated ellipse formula
    const sinT = Math.sin(theta);
    const cosT = Math.cos(theta);
    const sin2T = Math.sin(2 * theta);
    const rotA = (cosT * cosT / radiusX / radiusX) + (sinT * sinT / radiusY / radiusY);
    const rotB = (sin2T / radiusX / radiusX) - (sin2T / radiusY / radiusY);
    const rotC = (sinT * sinT / radiusX / radiusX) + (cosT * cosT / radiusY / radiusY);

    // Calculate the ellipse formula of the transformed ellipse
    // A, B, and C represent Ax^2 + Bxy + Cy^2 = 1 / det / det coefficients in a transformed ellipse formula
    // scaled by inverse det squared (to preserve accuracy)
    const A = ((rotA * d * d) - (rotB * d * c) + (rotC * c * c));
    const B = ((-2 * rotA * b * d) + (rotB * a * d) + (rotB * b * c) - (2 * rotC * a * c));
    const C = ((rotA * b * b) - (rotB * a * b) + (rotC * a * a));

    // Derive new radii and theta from the transformed ellipse formula
    const newRadiusXOverDet = Math.sqrt(2) *
        Math.sqrt(
            (A + C - Math.sqrt((A * A) + (B * B) - (2 * A * C) + (C * C))) /
            ((-B * B) + (4 * A * C))
        );
    const newRadiusYOverDet = 1 / Math.sqrt(A + C - (1 / newRadiusXOverDet / newRadiusXOverDet));
    let temp = (A - (1 / newRadiusXOverDet / newRadiusXOverDet)) /
        ((1 / newRadiusYOverDet / newRadiusYOverDet) - (1 / newRadiusXOverDet / newRadiusXOverDet));
    if (temp < 0 && Math.abs(temp) < 1e-8) temp = 0; // Fix floating point issue
    temp = Math.sqrt(temp);
    if (Math.abs(1 - temp) < 1e-8) temp = 1; // Fix floating point issue
    // Solve for which of the two possible thetas is correct
    let newTheta = Math.asin(temp);
    temp = (B / (
        (1 / newRadiusXOverDet / newRadiusXOverDet) -
        (1 / newRadiusYOverDet / newRadiusYOverDet)));
    const newTheta2 = -newTheta;
    if (Math.abs(Math.sin(2 * newTheta2) - temp) <
        Math.abs(Math.sin(2 * newTheta) - temp)) {
        newTheta = newTheta2;
    }

    return {
        radiusX: newRadiusXOverDet * det,
        radiusY: newRadiusYOverDet * det,
        rotation: -newTheta * 180 / Math.PI
    };
};

// Adapted from paper.js's PathItem.setPathData
const _transformPath = function (pathString, transform) {
    if (!transform || Matrix.toString(transform) === Matrix.toString(Matrix.identity())) return pathString;
    // First split the path data into parts of command-coordinates pairs
    // Commands are any of these characters: mzlhvcsqta
    const parts = pathString && pathString.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/ig);
    let coords;
    let relative = false;
    let previous;
    let control;
    let current = {x: 0, y: 0};
    let start = {x: 0, y: 0};
    let result = '';

    const getCoord = function (index, coord) {
        let val = +coords[index];
        if (relative) {
            val += current[coord];
        }
        return val;
    };

    const getPoint = function (index) {
        return {x: getCoord(index, 'x'), y: getCoord(index + 1, 'y')};
    };

    const roundTo4Places = function (num) {
        return Math.round(num * 1e4) / 1e4;
    };

    // Returns the transformed point as a string
    const getString = function (point) {
        const transformed = Matrix.applyToPoint(transform, point);
        return `${roundTo4Places(transformed.x)} ${roundTo4Places(transformed.y)} `;
    };

    for (let i = 0, l = parts && parts.length; i < l; i++) {
        const part = parts[i];
        const command = part[0];
        const lower = command.toLowerCase();
        // Match all coordinate values
        coords = part.match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g);
        const length = coords && coords.length;
        relative = command === lower;
        // Fix issues with z in the middle of SVG path data, not followed by
        // a m command, see paper.js#413:
        if (previous === 'z' && !/[mz]/.test(lower)) {
            result += `M ${current.x} ${current.y} `;
        }
        switch (lower) {
        case 'm': // Move to
        case 'l': // Line to
        {
            let move = lower === 'm';
            for (let j = 0; j < length; j += 2) {
                result += move ? 'M ' : 'L ';
                current = getPoint(j);
                result += getString(current);
                if (move) {
                    start = current;
                    move = false;
                }
            }
            control = current;
            break;
        }
        case 'h': // Horizontal line
        case 'v': // Vertical line
        {
            const coord = lower === 'h' ? 'x' : 'y';
            current = {x: current.x, y: current.y}; // Clone as we're going to modify it.
            for (let j = 0; j < length; j++) {
                current[coord] = getCoord(j, coord);
                result += `L ${getString(current)}`;
            }
            control = current;
            break;
        }
        case 'c':
            // Cubic Bezier curve
            for (let j = 0; j < length; j += 6) {
                const handle1 = getPoint(j);
                control = getPoint(j + 2);
                current = getPoint(j + 4);
                result += `C ${getString(handle1)}${getString(control)}${getString(current)}`;
            }
            break;
        case 's':
            // Smooth cubic Bezier curve
            for (let j = 0; j < length; j += 4) {
                const handle1 = /[cs]/.test(previous) ?
                    {x: (current.x * 2) - control.x, y: (current.y * 2) - control.y} :
                    current;
                control = getPoint(j);
                current = getPoint(j + 2);

                result += `C ${getString(handle1)}${getString(control)}${getString(current)}`;
                previous = lower;
            }
            break;
        case 'q':
            // Quadratic Bezier curve
            for (let j = 0; j < length; j += 4) {
                control = getPoint(j);
                current = getPoint(j + 2);
                result += `Q ${getString(control)}${getString(current)}`;
            }
            break;
        case 't':
            // Smooth quadratic Bezier curve
            for (let j = 0; j < length; j += 2) {
                control = /[qt]/.test(previous) ?
                    {x: (current.x * 2) - control.x, y: (current.y * 2) - control.y} :
                    current;
                current = getPoint(j);

                result += `Q ${getString(control)}${getString(current)}`;
                previous = lower;
            }
            break;
        case 'a':
            // Elliptical arc curve
            for (let j = 0; j < length; j += 7) {
                current = getPoint(j + 5);
                const rx = +coords[j];
                const ry = +coords[j + 1];
                const rotation = +coords[j + 2];
                const largeArcFlag = +coords[j + 3];
                let clockwiseFlag = +coords[j + 4];
                const newEllipse = _calculateTransformedEllipse(rx, ry, rotation, transform);
                const matrixScale = _getScaleFactor(transform);
                if (newEllipse) {
                    if ((matrixScale.x > 0 && matrixScale.y < 0) ||
                        (matrixScale.x < 0 && matrixScale.y > 0)) {
                        clockwiseFlag = clockwiseFlag ^ 1;
                    }
                    result += `A ${roundTo4Places(Math.abs(newEllipse.radiusX))} ` +
                        `${roundTo4Places(Math.abs(newEllipse.radiusY))} ` +
                        `${roundTo4Places(newEllipse.rotation)} ${largeArcFlag} ` +
                        `${clockwiseFlag} ${getString(current)}`;
                } else {
                    result += `L ${getString(current)}`;
                }
            }
            break;
        case 'z':
            // Close path
            result += `Z `;
            // Correctly handle relative m commands, see paper.js#1101:
            current = start;
            break;
        }
        previous = lower;
    }
    return result;
};

const GRAPHICS_ELEMENTS = ['circle', 'ellipse', 'image', 'line', 'path', 'polygon', 'polyline', 'rect', 'text', 'use'];
const CONTAINER_ELEMENTS = ['a', 'defs', 'g', 'marker', 'glyph', 'missing-glyph', 'pattern', 'svg', 'switch', 'symbol'];
const _isContainerElement = function (element) {
    return element.tagName && CONTAINER_ELEMENTS.includes(element.tagName.toLowerCase());
};
const _isGraphicsElement = function (element) {
    return element.tagName && GRAPHICS_ELEMENTS.includes(element.tagName.toLowerCase());
};
const _isPathWithTransformAndStroke = function (element, strokeWidth) {
    if (!element.attributes) return false;
    strokeWidth = element.attributes['stroke-width'] ?
        Number(element.attributes['stroke-width'].value) : Number(strokeWidth);
    return strokeWidth &&
        element.tagName && element.tagName.toLowerCase() === 'path' &&
        element.attributes.d && element.attributes.d.value;
};
const _quadraticMean = function (a, b) {
    return Math.sqrt(((a * a) + (b * b)) / 2);
};

const _createGradient = function (gradientId, svgTag, bbox, matrix) {
    // Adapted from Paper.js's SvgImport.getValue
    const getValue = function (node, name, isString, allowNull, allowPercent, defaultValue) {
        // Interpret value as number. Never return NaN, but 0 instead.
        // If the value is a sequence of numbers, parseFloat will
        // return the first occurring number, which is enough for now.
        let value = SvgElement.get(node, name);
        let res;
        if (value === null) {
            if (defaultValue) {
                res = defaultValue;
                if (/%\s*$/.test(res)) {
                    value = defaultValue;
                    res = parseFloat(value);
                }
            } else if (allowNull) {
                res = null;
            } else if (isString) {
                res = '';
            } else {
                res = 0;
            }
        } else if (isString) {
            res = value;
        } else {
            res = parseFloat(value);
        }
        // Support for dimensions in percentage of the root size. If root-size
        // is not set (e.g. during <defs>), just scale the percentage value to
        // 0..1, as required by gradients with gradientUnits="objectBoundingBox"
        if (/%\s*$/.test(value)) {
            const size = allowPercent ? 1 : bbox[/x|^width/.test(name) ? 'width' : 'height'];
            return res / 100 * size;
        }
        return res;
    };
    const getPoint = function (node, x, y, allowNull, allowPercent, defaultX, defaultY) {
        x = getValue(node, x || 'x', false, allowNull, allowPercent, defaultX);
        y = getValue(node, y || 'y', false, allowNull, allowPercent, defaultY);
        return allowNull && (x === null || y === null) ? null : {x, y};
    };

    let defs = svgTag.getElementsByTagName('defs');
    if (defs.length === 0) {
        defs = SvgElement.create('defs');
        svgTag.appendChild(defs);
    } else {
        defs = defs[0];
    }

    // Clone the old gradient. We'll make a new one, since the gradient might be reused elsewhere
    // with different transform matrix
    const oldGradient = svgTag.getElementById(gradientId);
    if (!oldGradient) return;

    const radial = oldGradient.tagName.toLowerCase() === 'radialgradient';
    const newGradient = svgTag.getElementById(gradientId).cloneNode(true /* deep */);

    // Give the new gradient a new ID
    let matrixString = Matrix.toString(matrix);
    matrixString = matrixString.substring(8, matrixString.length - 1);
    const newGradientId = `${gradientId}-${matrixString}`;
    newGradient.setAttribute('id', newGradientId);

    // This gradient already exists and was transformed before. Just reuse the already-transformed one.
    if (svgTag.getElementById(newGradientId)) {
        // This is the same code as in the end of the function, but I don't feel like wrapping the next 80 lines
        // in an `if (!svgTag.getElementById(newGradientId))` block
        return `url(#${newGradientId})`;
    }

    const scaleToBounds = getValue(newGradient, 'gradientUnits', true) !==
                'userSpaceOnUse';
    let origin;
    let destination;
    let radius;
    let focal;
    if (radial) {
        origin = getPoint(newGradient, 'cx', 'cy', false, scaleToBounds, '50%', '50%');
        radius = getValue(newGradient, 'r', false, false, scaleToBounds, '50%');
        focal = getPoint(newGradient, 'fx', 'fy', true, scaleToBounds);
    } else {
        origin = getPoint(newGradient, 'x1', 'y1', false, scaleToBounds);
        destination = getPoint(newGradient, 'x2', 'y2', false, scaleToBounds, '1');
        if (origin.x === destination.x && origin.y === destination.y) {
            // If it's degenerate, use the color of the last stop, as described by
            // https://www.w3.org/TR/SVG/pservers.html#LinearGradientNotes
            const stops = newGradient.getElementsByTagName('stop');
            if (!stops.length || !stops[stops.length - 1].attributes ||
                    !stops[stops.length - 1].attributes['stop-color']) {
                return null;
            }
            return stops[stops.length - 1].attributes['stop-color'].value;
        }
    }

    // Transform points
    // Emulate SVG's gradientUnits="objectBoundingBox"
    if (scaleToBounds) {
        const boundsMatrix = Matrix.compose(Matrix.translate(bbox.x, bbox.y), Matrix.scale(bbox.width, bbox.height));
        origin = Matrix.applyToPoint(boundsMatrix, origin);
        if (destination) destination = Matrix.applyToPoint(boundsMatrix, destination);
        if (radius) {
            radius = _quadraticMean(bbox.width, bbox.height) * radius;
        }
        if (focal) focal = Matrix.applyToPoint(boundsMatrix, focal);
    }

    if (radial) {
        origin = Matrix.applyToPoint(matrix, origin);
        const matrixScale = _getScaleFactor(matrix);
        radius = _quadraticMean(matrixScale.x, matrixScale.y) * radius;
        if (focal) focal = Matrix.applyToPoint(matrix, focal);
    } else {
        const dot = (a, b) => (a.x * b.x) + (a.y * b.y);
        const multiply = (coefficient, v) => ({x: coefficient * v.x, y: coefficient * v.y});
        const add = (a, b) => ({x: a.x + b.x, y: a.y + b.y});
        const subtract = (a, b) => ({x: a.x - b.x, y: a.y - b.y});

        // The line through origin and gradientPerpendicular is the line at which the gradient starts
        let gradientPerpendicular = Math.abs(origin.x - destination.x) < 1e-8 ?
            add(origin, {x: 1, y: (origin.x - destination.x) / (destination.y - origin.y)}) :
            add(origin, {x: (destination.y - origin.y) / (origin.x - destination.x), y: 1});

        // Transform points
        gradientPerpendicular = Matrix.applyToPoint(matrix, gradientPerpendicular);
        origin = Matrix.applyToPoint(matrix, origin);
        destination = Matrix.applyToPoint(matrix, destination);

        // Calculate the direction that the gradient has changed to
        const originToPerpendicular = subtract(gradientPerpendicular, origin);
        const originToDestination = subtract(destination, origin);
        const gradientDirection = Math.abs(originToPerpendicular.x) < 1e-8 ?
            {x: 1, y: -originToPerpendicular.x / originToPerpendicular.y} :
            {x: -originToPerpendicular.y / originToPerpendicular.x, y: 1};

        // Set the destination so that the gradient moves in the correct direction, by projecting the destination vector
        // onto the gradient direction vector
        const projectionCoeff = dot(originToDestination, gradientDirection) / dot(gradientDirection, gradientDirection);
        const projection = multiply(projectionCoeff, gradientDirection);
        destination = {x: origin.x + projection.x, y: origin.y + projection.y};
    }

    // Put values back into svg
    if (radial) {
        newGradient.setAttribute('cx', Number(origin.x.toFixed(4)));
        newGradient.setAttribute('cy', Number(origin.y.toFixed(4)));
        newGradient.setAttribute('r', Number(radius.toFixed(4)));
        if (focal) {
            newGradient.setAttribute('fx', Number(focal.x.toFixed(4)));
            newGradient.setAttribute('fy', Number(focal.y.toFixed(4)));
        }
    } else {
        newGradient.setAttribute('x1', Number(origin.x.toFixed(4)));
        newGradient.setAttribute('y1', Number(origin.y.toFixed(4)));
        newGradient.setAttribute('x2', Number(destination.x.toFixed(4)));
        newGradient.setAttribute('y2', Number(destination.y.toFixed(4)));
    }
    newGradient.setAttribute('gradientUnits', 'userSpaceOnUse');
    defs.appendChild(newGradient);

    return `url(#${newGradientId})`;
};

// Adapted from paper.js's SvgImport.getDefinition
const _parseUrl = (value, windowRef) => {
    // When url() comes from a style property, '#'' seems to be missing on
    // WebKit. We also get variations of quotes or no quotes, single or
    // double, so handle it all with one regular expression:
    const match = value && value.match(/\((?:["'#]*)([^"')]+)/);
    const name = match && match[1];
    const res = name && windowRef ?
        // This is required by Firefox, which can produce absolute
        // urls for local gradients, see paperjs#1001:
        name.replace(`${windowRef.location.href.split('#')[0]}#`, '') :
        name;
    return res;
};

/**
 * Scratch 2.0 displays stroke widths in a "normalized" way, that is,
 * if a shape with a stroke width has a transform applied, it will be
 * rendered with a stroke that is the same width all the way around,
 * instead of stretched looking.
 *
 * The vector paint editor also prefers to normalize the stroke width,
 * rather than keep track of transforms at the group level, as this
 * simplifies editing (e.g. stroke width 3 always means the same thickness)
 *
 * This function performs that normalization process, pushing transforms
 * on groups down to the leaf level and averaging out the stroke width
 * around the shapes. Note that this doens't just change stroke widths, it
 * changes path data and attributes throughout the SVG.
 *
 * @param {SVGElement} svgTag The SVG dom object
 * @param {Window} windowRef The window to use. Need to pass in for
 *     tests to work, as they get angry at even the mention of window.
 * @param {object} bboxForTesting The bounds to use. Need to pass in for
 *     tests only, because getBBox doesn't work in Node. This should
 *     be the bounds of the svgTag without including stroke width or transforms.
 * @return {void}
 */
const transformStrokeWidths = function (svgTag, windowRef, bboxForTesting) {
    const inherited = Matrix.identity();

    const applyTransforms = (element, matrix, strokeWidth, fill, stroke) => {
        if (_isContainerElement(element)) {
            // Push fills and stroke width down to leaves
            if (element.attributes['stroke-width']) {
                strokeWidth = element.attributes['stroke-width'].value;
            }
            if (element.attributes) {
                if (element.attributes.fill) fill = element.attributes.fill.value;
                if (element.attributes.stroke) stroke = element.attributes.stroke.value;
            }

            // If any child nodes don't take attributes, leave the attributes
            // at the parent level.
            for (let i = 0; i < element.childNodes.length; i++) {
                applyTransforms(
                    element.childNodes[i],
                    Matrix.compose(matrix, _parseTransform(element)),
                    strokeWidth,
                    fill,
                    stroke
                );
            }
            element.removeAttribute('transform');
            element.removeAttribute('stroke-width');
            element.removeAttribute('fill');
            element.removeAttribute('stroke');
        } else if (_isPathWithTransformAndStroke(element, strokeWidth)) {
            if (element.attributes['stroke-width']) {
                strokeWidth = element.attributes['stroke-width'].value;
            }
            if (element.attributes.fill) fill = element.attributes.fill.value;
            if (element.attributes.stroke) stroke = element.attributes.stroke.value;
            matrix = Matrix.compose(matrix, _parseTransform(element));
            if (Matrix.toString(matrix) === Matrix.toString(Matrix.identity())) {
                element.removeAttribute('transform');
                element.setAttribute('stroke-width', strokeWidth);
                if (fill) element.setAttribute('fill', fill);
                if (stroke) element.setAttribute('stroke', stroke);
                return;
            }

            // Transform gradient
            const fillGradientId = _parseUrl(fill, windowRef);
            const strokeGradientId = _parseUrl(stroke, windowRef);

            if (fillGradientId || strokeGradientId) {
                const doc = windowRef.document;
                // Need path bounds to transform gradient
                const svgSpot = doc.createElement('span');
                let bbox;
                if (bboxForTesting) {
                    bbox = bboxForTesting;
                } else {
                    try {
                        doc.body.appendChild(svgSpot);
                        const svg = SvgElement.set(doc.createElementNS(SvgElement.svg, 'svg'));
                        const path = SvgElement.set(doc.createElementNS(SvgElement.svg, 'path'));
                        path.setAttribute('d', element.attributes.d.value);
                        svg.appendChild(path);
                        svgSpot.appendChild(svg);
                        // Take the bounding box.
                        bbox = svg.getBBox();
                    } finally {
                        // Always destroy the element, even if, for example, getBBox throws.
                        doc.body.removeChild(svgSpot);
                    }
                }

                if (fillGradientId) {
                    const newFillRef = _createGradient(fillGradientId, svgTag, bbox, matrix);
                    if (newFillRef) fill = newFillRef;
                }

                if (strokeGradientId) {
                    const newStrokeRef = _createGradient(strokeGradientId, svgTag, bbox, matrix);
                    if (newStrokeRef) stroke = newStrokeRef;
                }
            }

            // Transform path data
            element.setAttribute('d', _transformPath(element.attributes.d.value, matrix));
            element.removeAttribute('transform');

            // Transform stroke width
            const matrixScale = _getScaleFactor(matrix);
            element.setAttribute('stroke-width', _quadraticMean(matrixScale.x, matrixScale.y) * strokeWidth);
            if (fill) element.setAttribute('fill', fill);
            if (stroke) element.setAttribute('stroke', stroke);
        } else if (_isGraphicsElement(element)) {
            // Push stroke width, fill, and stroke down to leaves
            if (strokeWidth && !element.attributes['stroke-width']) {
                element.setAttribute('stroke-width', strokeWidth);
            }
            if (fill && !element.attributes.fill) {
                element.setAttribute('fill', fill);
            }
            if (stroke && !element.attributes.stroke) {
                element.setAttribute('stroke', stroke);
            }

            // Push transform down to leaves
            matrix = Matrix.compose(matrix, _parseTransform(element));
            if (Matrix.toString(matrix) === Matrix.toString(Matrix.identity())) {
                element.removeAttribute('transform');
            } else {
                element.setAttribute('transform', Matrix.toString(matrix));
            }
        }
    };
    applyTransforms(svgTag, inherited, 1 /* default SVG stroke width */);
};

module.exports = transformStrokeWidths;


/***/ }),

/***/ "./node_modules/scratch-svg-renderer/src/util/log.js":
/*!***********************************************************!*\
  !*** ./node_modules/scratch-svg-renderer/src/util/log.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const nanolog = __webpack_require__(/*! @turbowarp/nanolog */ "./node_modules/@turbowarp/nanolog/index.js");
nanolog.enable();

module.exports = nanolog('scratch-svg-render');


/***/ }),

/***/ "./node_modules/source-map/lib/array-set.js":
/*!**************************************************!*\
  !*** ./node_modules/source-map/lib/array-set.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(/*! ./util */ "./node_modules/source-map/lib/util.js");
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  }
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
  } else {
    var sStr = util.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }

  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

exports.ArraySet = ArraySet;


/***/ }),

/***/ "./node_modules/source-map/lib/base64-vlq.js":
/*!***************************************************!*\
  !*** ./node_modules/source-map/lib/base64-vlq.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var base64 = __webpack_require__(/*! ./base64 */ "./node_modules/source-map/lib/base64.js");

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
exports.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};


/***/ }),

/***/ "./node_modules/source-map/lib/base64.js":
/*!***********************************************!*\
  !*** ./node_modules/source-map/lib/base64.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
exports.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
exports.decode = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};


/***/ }),

/***/ "./node_modules/source-map/lib/mapping-list.js":
/*!*****************************************************!*\
  !*** ./node_modules/source-map/lib/mapping-list.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(/*! ./util */ "./node_modules/source-map/lib/util.js");

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = {generatedLine: -1, generatedColumn: 0};
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList.prototype.unsortedForEach =
  function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

exports.MappingList = MappingList;


/***/ }),

/***/ "./node_modules/source-map/lib/source-map-generator.js":
/*!*************************************************************!*\
  !*** ./node_modules/source-map/lib/source-map-generator.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ = __webpack_require__(/*! ./base64-vlq */ "./node_modules/source-map/lib/base64-vlq.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/source-map/lib/util.js");
var ArraySet = __webpack_require__(/*! ./array-set */ "./node_modules/source-map/lib/array-set.js").ArraySet;
var MappingList = __webpack_require__(/*! ./mapping-list */ "./node_modules/source-map/lib/mapping-list.js").MappingList;

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, 'file', null);
  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet();
  this._names = new ArraySet();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util.relative(sourceRoot, sourceFile);
      }

      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }

      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source)
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error(
            'original.line and original.column are not numbers -- you probably meant to omit ' +
            'the original mapping entirely and only map the generated position. If so, pass ' +
            'null for the original mapping instead of an object with empty or null values.'
        );
    }

    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = ''

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

exports.SourceMapGenerator = SourceMapGenerator;


/***/ }),

/***/ "./node_modules/source-map/lib/util.js":
/*!*********************************************!*\
  !*** ./node_modules/source-map/lib/util.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 === null) {
    return 1; // aStr2 !== null
  }

  if (aStr2 === null) {
    return -1; // aStr1 !== null
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
function parseSourceMapInput(str) {
  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;

/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
  sourceURL = sourceURL || '';

  if (sourceRoot) {
    // This follows what Chrome does.
    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
      sourceRoot += '/';
    }
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    sourceURL = sourceRoot + sourceURL;
  }

  // Historically, SourceMapConsumer did not take the sourceMapURL as
  // a parameter.  This mode is still somewhat supported, which is why
  // this code block is conditional.  However, it's preferable to pass
  // the source map URL to SourceMapConsumer, so that this function
  // can implement the source URL resolution algorithm as outlined in
  // the spec.  This block is basically the equivalent of:
  //    new URL(sourceURL, sourceMapURL).toString()
  // ... except it avoids using URL, which wasn't available in the
  // older releases of node still supported by this library.
  //
  // The spec says:
  //   If the sources are not absolute URLs after prepending of the
  //   “sourceRoot”, the sources are resolved relative to the
  //   SourceMap (like resolving script src in a html document).
  if (sourceMapURL) {
    var parsed = urlParse(sourceMapURL);
    if (!parsed) {
      throw new Error("sourceMapURL could not be parsed");
    }
    if (parsed.path) {
      // Strip the last path component, but keep the "/".
      var index = parsed.path.lastIndexOf('/');
      if (index >= 0) {
        parsed.path = parsed.path.substring(0, index + 1);
      }
    }
    sourceURL = join(urlGenerate(parsed), sourceURL);
  }

  return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;


/***/ }),

/***/ "./node_modules/tiny-inflate/index.js":
/*!********************************************!*\
  !*** ./node_modules/tiny-inflate/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var TINF_OK = 0;
var TINF_DATA_ERROR = -3;

function Tree() {
  this.table = new Uint16Array(16);   /* table of code length counts */
  this.trans = new Uint16Array(288);  /* code -> symbol translation table */
}

function Data(source, dest) {
  this.source = source;
  this.sourceIndex = 0;
  this.tag = 0;
  this.bitcount = 0;
  
  this.dest = dest;
  this.destLen = 0;
  
  this.ltree = new Tree();  /* dynamic length/symbol tree */
  this.dtree = new Tree();  /* dynamic distance tree */
}

/* --------------------------------------------------- *
 * -- uninitialized global data (static structures) -- *
 * --------------------------------------------------- */

var sltree = new Tree();
var sdtree = new Tree();

/* extra bits and base tables for length codes */
var length_bits = new Uint8Array(30);
var length_base = new Uint16Array(30);

/* extra bits and base tables for distance codes */
var dist_bits = new Uint8Array(30);
var dist_base = new Uint16Array(30);

/* special ordering of code length codes */
var clcidx = new Uint8Array([
  16, 17, 18, 0, 8, 7, 9, 6,
  10, 5, 11, 4, 12, 3, 13, 2,
  14, 1, 15
]);

/* used by tinf_decode_trees, avoids allocations every call */
var code_tree = new Tree();
var lengths = new Uint8Array(288 + 32);

/* ----------------------- *
 * -- utility functions -- *
 * ----------------------- */

/* build extra bits and base tables */
function tinf_build_bits_base(bits, base, delta, first) {
  var i, sum;

  /* build bits table */
  for (i = 0; i < delta; ++i) bits[i] = 0;
  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;

  /* build base table */
  for (sum = first, i = 0; i < 30; ++i) {
    base[i] = sum;
    sum += 1 << bits[i];
  }
}

/* build the fixed huffman trees */
function tinf_build_fixed_trees(lt, dt) {
  var i;

  /* build fixed length tree */
  for (i = 0; i < 7; ++i) lt.table[i] = 0;

  lt.table[7] = 24;
  lt.table[8] = 152;
  lt.table[9] = 112;

  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;
  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;
  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;
  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;

  /* build fixed distance tree */
  for (i = 0; i < 5; ++i) dt.table[i] = 0;

  dt.table[5] = 32;

  for (i = 0; i < 32; ++i) dt.trans[i] = i;
}

/* given an array of code lengths, build a tree */
var offs = new Uint16Array(16);

function tinf_build_tree(t, lengths, off, num) {
  var i, sum;

  /* clear code length count table */
  for (i = 0; i < 16; ++i) t.table[i] = 0;

  /* scan symbol lengths, and sum code length counts */
  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;

  t.table[0] = 0;

  /* compute offset table for distribution sort */
  for (sum = 0, i = 0; i < 16; ++i) {
    offs[i] = sum;
    sum += t.table[i];
  }

  /* create code->symbol translation table (symbols sorted by code) */
  for (i = 0; i < num; ++i) {
    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;
  }
}

/* ---------------------- *
 * -- decode functions -- *
 * ---------------------- */

/* get one bit from source stream */
function tinf_getbit(d) {
  /* check if tag is empty */
  if (!d.bitcount--) {
    /* load next tag */
    d.tag = d.source[d.sourceIndex++];
    d.bitcount = 7;
  }

  /* shift bit out of tag */
  var bit = d.tag & 1;
  d.tag >>>= 1;

  return bit;
}

/* read a num bit value from a stream and add base */
function tinf_read_bits(d, num, base) {
  if (!num)
    return base;

  while (d.bitcount < 24) {
    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
    d.bitcount += 8;
  }

  var val = d.tag & (0xffff >>> (16 - num));
  d.tag >>>= num;
  d.bitcount -= num;
  return val + base;
}

/* given a data stream and a tree, decode a symbol */
function tinf_decode_symbol(d, t) {
  while (d.bitcount < 24) {
    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
    d.bitcount += 8;
  }
  
  var sum = 0, cur = 0, len = 0;
  var tag = d.tag;

  /* get more bits while code value is above sum */
  do {
    cur = 2 * cur + (tag & 1);
    tag >>>= 1;
    ++len;

    sum += t.table[len];
    cur -= t.table[len];
  } while (cur >= 0);
  
  d.tag = tag;
  d.bitcount -= len;

  return t.trans[sum + cur];
}

/* given a data stream, decode dynamic trees from it */
function tinf_decode_trees(d, lt, dt) {
  var hlit, hdist, hclen;
  var i, num, length;

  /* get 5 bits HLIT (257-286) */
  hlit = tinf_read_bits(d, 5, 257);

  /* get 5 bits HDIST (1-32) */
  hdist = tinf_read_bits(d, 5, 1);

  /* get 4 bits HCLEN (4-19) */
  hclen = tinf_read_bits(d, 4, 4);

  for (i = 0; i < 19; ++i) lengths[i] = 0;

  /* read code lengths for code length alphabet */
  for (i = 0; i < hclen; ++i) {
    /* get 3 bits code length (0-7) */
    var clen = tinf_read_bits(d, 3, 0);
    lengths[clcidx[i]] = clen;
  }

  /* build code length tree */
  tinf_build_tree(code_tree, lengths, 0, 19);

  /* decode code lengths for the dynamic trees */
  for (num = 0; num < hlit + hdist;) {
    var sym = tinf_decode_symbol(d, code_tree);

    switch (sym) {
      case 16:
        /* copy previous code length 3-6 times (read 2 bits) */
        var prev = lengths[num - 1];
        for (length = tinf_read_bits(d, 2, 3); length; --length) {
          lengths[num++] = prev;
        }
        break;
      case 17:
        /* repeat code length 0 for 3-10 times (read 3 bits) */
        for (length = tinf_read_bits(d, 3, 3); length; --length) {
          lengths[num++] = 0;
        }
        break;
      case 18:
        /* repeat code length 0 for 11-138 times (read 7 bits) */
        for (length = tinf_read_bits(d, 7, 11); length; --length) {
          lengths[num++] = 0;
        }
        break;
      default:
        /* values 0-15 represent the actual code lengths */
        lengths[num++] = sym;
        break;
    }
  }

  /* build dynamic trees */
  tinf_build_tree(lt, lengths, 0, hlit);
  tinf_build_tree(dt, lengths, hlit, hdist);
}

/* ----------------------------- *
 * -- block inflate functions -- *
 * ----------------------------- */

/* given a stream and two trees, inflate a block of data */
function tinf_inflate_block_data(d, lt, dt) {
  while (1) {
    var sym = tinf_decode_symbol(d, lt);

    /* check for end of block */
    if (sym === 256) {
      return TINF_OK;
    }

    if (sym < 256) {
      d.dest[d.destLen++] = sym;
    } else {
      var length, dist, offs;
      var i;

      sym -= 257;

      /* possibly get more bits from length code */
      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);

      dist = tinf_decode_symbol(d, dt);

      /* possibly get more bits from distance code */
      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);

      /* copy match */
      for (i = offs; i < offs + length; ++i) {
        d.dest[d.destLen++] = d.dest[i];
      }
    }
  }
}

/* inflate an uncompressed block of data */
function tinf_inflate_uncompressed_block(d) {
  var length, invlength;
  var i;
  
  /* unread from bitbuffer */
  while (d.bitcount > 8) {
    d.sourceIndex--;
    d.bitcount -= 8;
  }

  /* get length */
  length = d.source[d.sourceIndex + 1];
  length = 256 * length + d.source[d.sourceIndex];

  /* get one's complement of length */
  invlength = d.source[d.sourceIndex + 3];
  invlength = 256 * invlength + d.source[d.sourceIndex + 2];

  /* check length */
  if (length !== (~invlength & 0x0000ffff))
    return TINF_DATA_ERROR;

  d.sourceIndex += 4;

  /* copy block */
  for (i = length; i; --i)
    d.dest[d.destLen++] = d.source[d.sourceIndex++];

  /* make sure we start next block on a byte boundary */
  d.bitcount = 0;

  return TINF_OK;
}

/* inflate stream from source to dest */
function tinf_uncompress(source, dest) {
  var d = new Data(source, dest);
  var bfinal, btype, res;

  do {
    /* read final block flag */
    bfinal = tinf_getbit(d);

    /* read block type (2 bits) */
    btype = tinf_read_bits(d, 2, 0);

    /* decompress block */
    switch (btype) {
      case 0:
        /* decompress uncompressed block */
        res = tinf_inflate_uncompressed_block(d);
        break;
      case 1:
        /* decompress block with fixed huffman trees */
        res = tinf_inflate_block_data(d, sltree, sdtree);
        break;
      case 2:
        /* decompress block with dynamic huffman trees */
        tinf_decode_trees(d, d.ltree, d.dtree);
        res = tinf_inflate_block_data(d, d.ltree, d.dtree);
        break;
      default:
        res = TINF_DATA_ERROR;
    }

    if (res !== TINF_OK)
      throw new Error('Data error');

  } while (!bfinal);

  if (d.destLen < d.dest.length) {
    if (typeof d.dest.slice === 'function')
      return d.dest.slice(0, d.destLen);
    else
      return d.dest.subarray(0, d.destLen);
  }
  
  return d.dest;
}

/* -------------------- *
 * -- initialization -- *
 * -------------------- */

/* build fixed huffman trees */
tinf_build_fixed_trees(sltree, sdtree);

/* build extra bits and base tables */
tinf_build_bits_base(length_bits, length_base, 4, 3);
tinf_build_bits_base(dist_bits, dist_base, 2, 1);

/* fix a special case */
length_bits[28] = 0;
length_base[28] = 258;

module.exports = tinf_uncompress;


/***/ }),

/***/ "./node_modules/transformation-matrix/build-umd/transformation-matrix.min.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/transformation-matrix/build-umd/transformation-matrix.min.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(r,n){ true?module.exports=n():undefined}(window,function(){return function(r){var n={};function t(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return r[e].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=r,t.c=n,t.d=function(r,n,e){t.o(r,n)||Object.defineProperty(r,n,{enumerable:!0,get:e})},t.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},t.t=function(r,n){if(1&n&&(r=t(r)),8&n)return r;if(4&n&&"object"==typeof r&&r&&r.__esModule)return r;var e=Object.create(null);if(t.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:r}),2&n&&"string"!=typeof r)for(var o in r)t.d(e,o,function(n){return r[n]}.bind(null,o));return e},t.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return t.d(n,"a",n),n},t.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},t.p="",t(t.s=0)}([function(r,n,t){"use strict";function e(r,n){return Array.isArray(n)?[r.a*n[0]+r.c*n[1]+r.e,r.b*n[0]+r.d*n[1]+r.f]:{x:r.a*n.x+r.c*n.y+r.e,y:r.b*n.x+r.d*n.y+r.f}}function o(r,n){return n.map(function(n){return e(r,n)})}function u(r){return{a:parseFloat(r.a),b:parseFloat(r.b),c:parseFloat(r.c),d:parseFloat(r.d),e:parseFloat(r.e),f:parseFloat(r.f)}}t.r(n);var a=/^matrix\(\s*([0-9_+-.e]+)\s*,\s*([0-9_+-.e]+)\s*,\s*([0-9_+-.e]+)\s*,\s*([0-9_+-.e]+)\s*,\s*([0-9_+-.e]+)\s*,\s*([0-9_+-.e]+)\s*\)$/i;function i(r){var n=r.match(a);if(null===n||n.length<7)throw new Error("'"+r+"' is not a matrix");return{a:parseFloat(n[1]),b:parseFloat(n[2]),c:parseFloat(n[3]),d:parseFloat(n[4]),e:parseFloat(n[5]),f:parseFloat(n[6])}}function f(){return{a:1,c:0,e:0,b:0,d:1,f:0}}function c(r){var n=r.a,t=r.b,e=r.c,o=r.d,u=r.e,a=r.f,i=n*o-t*e;return{a:o/i,b:t/-i,c:e/-i,d:n/i,e:(o*u-e*a)/-i,f:(t*u-n*a)/i}}var d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},s=function(r){return"number"==typeof r&&!isNaN(r)&&isFinite(r)},l=function(r){return null!=r&&"object"===(void 0===r?"undefined":d(r))};function p(r){return l(r)&&r.hasOwnProperty("a")&&s(r.a)&&r.hasOwnProperty("b")&&s(r.b)&&r.hasOwnProperty("c")&&s(r.c)&&r.hasOwnProperty("d")&&s(r.d)&&r.hasOwnProperty("e")&&s(r.e)&&r.hasOwnProperty("f")&&s(r.f)}function y(r){return void 0===r}function b(r){return{a:1,c:0,e:r,b:0,d:1,f:arguments.length>1&&void 0!==arguments[1]?arguments[1]:0}}function v(){for(var r=arguments.length,n=Array(r),t=0;t<r;t++)n[t]=arguments[t];var e=function(r,n){return{a:r.a*n.a+r.c*n.b,c:r.a*n.c+r.c*n.d,e:r.a*n.e+r.c*n.f+r.e,b:r.b*n.a+r.d*n.b,d:r.b*n.c+r.d*n.d,f:r.b*n.e+r.d*n.f+r.f}};switch((n=Array.isArray(n[0])?n[0]:n).length){case 0:throw new Error("no matrices provided");case 1:return n[0];case 2:return e(n[0],n[1]);default:var o=function(r){return Array.isArray(r)?r:Array.from(r)}(n),u=o[0],a=o[1],i=o.slice(2),f=e(u,a);return v.apply(void 0,[f].concat(function(r){if(Array.isArray(r)){for(var n=0,t=Array(r.length);n<r.length;n++)t[n]=r[n];return t}return Array.from(r)}(i)))}}function m(){return v.apply(void 0,arguments)}var h=Math.cos,x=Math.sin,g=Math.PI;function w(r,n,t){var e=h(r),o=x(r),u={a:e,c:-o,e:0,b:o,d:e,f:0};return y(n)||y(t)?u:v([b(n,t),u,b(-n,-t)])}function P(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;return w(r*g/180,n,t)}function S(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;return y(n)&&(n=r),{a:r,c:0,e:0,b:0,d:n,f:0}}function O(r,n){return{a:1,c:r,e:0,b:n,d:1,f:0}}var A=Math.tan;function F(r,n){return{a:1,c:A(r),e:0,b:A(n),d:1,f:0}}function M(r,n){return F(r*Math.PI/180,n*Math.PI/180)}function j(r){return T(r)}function _(r){return T(r)}function T(r){return"matrix("+r.a+","+r.b+","+r.c+","+r.d+","+r.e+","+r.f+")"}t.d(n,"applyToPoint",function(){return e}),t.d(n,"applyToPoints",function(){return o}),t.d(n,"fromObject",function(){return u}),t.d(n,"fromString",function(){return i}),t.d(n,"identity",function(){return f}),t.d(n,"inverse",function(){return c}),t.d(n,"isAffineMatrix",function(){return p}),t.d(n,"rotate",function(){return w}),t.d(n,"rotateDEG",function(){return P}),t.d(n,"scale",function(){return S}),t.d(n,"shear",function(){return O}),t.d(n,"skew",function(){return F}),t.d(n,"skewDEG",function(){return M}),t.d(n,"toCSS",function(){return j}),t.d(n,"toSVG",function(){return _}),t.d(n,"toString",function(){return T}),t.d(n,"transform",function(){return v}),t.d(n,"compose",function(){return m}),t.d(n,"translate",function(){return b})}])});
//# sourceMappingURL=transformation-matrix.min.js.map

/***/ }),

/***/ "./node_modules/twgl.js/dist/4.x/twgl-full.js":
/*!****************************************************!*\
  !*** ./node_modules/twgl.js/dist/4.x/twgl-full.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * @license twgl.js 4.4.0 Copyright (c) 2015, Gregg Tavares All Rights Reserved.
 * Available via the MIT license.
 * see: http://github.com/greggman/twgl.js for details
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.copyExistingProperties = copyExistingProperties;
exports.copyNamedProperties = copyNamedProperties;
exports.isBuffer = isBuffer;
exports.isRenderbuffer = isRenderbuffer;
exports.isShader = isShader;
exports.isTexture = isTexture;
exports.isSampler = isSampler;
exports.warn = exports.error = void 0;

var _globalObject = _interopRequireDefault(__webpack_require__(2));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2015, Gregg Tavares.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Gregg Tavares. nor the names of his
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Copy named properties
 *
 * @param {string[]} names names of properties to copy
 * @param {object} src object to copy properties from
 * @param {object} dst object to copy properties to
 */
function copyNamedProperties(names, src, dst) {
  names.forEach(function (name) {
    var value = src[name];

    if (value !== undefined) {
      dst[name] = value;
    }
  });
}
/**
 * Copies properties from source to dest only if a matching key is in dest
 *
 * @param {Object.<string, ?>} src the source
 * @param {Object.<string, ?>} dst the dest
 */


function copyExistingProperties(src, dst) {
  Object.keys(dst).forEach(function (key) {
    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {
      dst[key] = src[key];
    }
  });
}

var error = _globalObject.default.console && _globalObject.default.console.error && typeof _globalObject.default.console.error === "function" ? _globalObject.default.console.error.bind(_globalObject.default.console) : function () {};
exports.error = error;
var warn = _globalObject.default.console && _globalObject.default.console.warn && typeof _globalObject.default.console.warn === "function" ? _globalObject.default.console.warn.bind(_globalObject.default.console) : function () {};
exports.warn = warn;
var repBuffer;

function isBuffer(gl, t) {
  if (!repBuffer) {
    repBuffer = gl.createBuffer();
  }

  return t instanceof repBuffer.constructor;
}

var repRenderbuffer;

function isRenderbuffer(gl, t) {
  if (!repRenderbuffer) {
    repRenderbuffer = gl.createRenderbuffer();
  }

  return t instanceof repRenderbuffer.constructor;
}

var repShader;

function isShader(gl, t) {
  if (!repShader) {
    repShader = gl.createShader(gl.VERTEX_SHADER);
  }

  return t instanceof repShader.constructor;
}

var repTexture;

function isTexture(gl, t) {
  if (!repTexture) {
    repTexture = gl.createTexture();
  }

  return t instanceof repTexture.constructor;
}

var repSampler;

function isSampler(gl, t) {
  if (!repSampler) {
    if (gl.createSampler) {
      repSampler = gl.createSampler();
    } else {
      return false; // it can't be a sampler if this is not WebGL2
    }
  }

  return t instanceof repSampler.constructor;
}

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getGLTypeForTypedArray = getGLTypeForTypedArray;
exports.getGLTypeForTypedArrayType = getGLTypeForTypedArrayType;
exports.getTypedArrayTypeForGLType = getTypedArrayTypeForGLType;
exports.isArrayBuffer = void 0;

var _globalObject = _interopRequireDefault(__webpack_require__(2));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2015, Gregg Tavares.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Gregg Tavares. nor the names of his
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Low level shader typed array related functions
 *
 * You should generally not need to use these functions. They are provided
 * for those cases where you're doing something out of the ordinary
 * and you need lower level access.
 *
 * For backward compatibily they are available at both `twgl.typedArray` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/typedArray
 */
// make sure we don't see a global gl
var gl = undefined; // eslint-disable-line

/* DataType */

var BYTE = 0x1400;
var UNSIGNED_BYTE = 0x1401;
var SHORT = 0x1402;
var UNSIGNED_SHORT = 0x1403;
var INT = 0x1404;
var UNSIGNED_INT = 0x1405;
var FLOAT = 0x1406;
var UNSIGNED_SHORT_4_4_4_4 = 0x8033;
var UNSIGNED_SHORT_5_5_5_1 = 0x8034;
var UNSIGNED_SHORT_5_6_5 = 0x8363;
var HALF_FLOAT = 0x140B;
var UNSIGNED_INT_2_10_10_10_REV = 0x8368;
var UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
var UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
var FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
var UNSIGNED_INT_24_8 = 0x84FA;
var glTypeToTypedArray = {};
{
  var tt = glTypeToTypedArray;
  tt[BYTE] = Int8Array;
  tt[UNSIGNED_BYTE] = Uint8Array;
  tt[SHORT] = Int16Array;
  tt[UNSIGNED_SHORT] = Uint16Array;
  tt[INT] = Int32Array;
  tt[UNSIGNED_INT] = Uint32Array;
  tt[FLOAT] = Float32Array;
  tt[UNSIGNED_SHORT_4_4_4_4] = Uint16Array;
  tt[UNSIGNED_SHORT_5_5_5_1] = Uint16Array;
  tt[UNSIGNED_SHORT_5_6_5] = Uint16Array;
  tt[HALF_FLOAT] = Uint16Array;
  tt[UNSIGNED_INT_2_10_10_10_REV] = Uint32Array;
  tt[UNSIGNED_INT_10F_11F_11F_REV] = Uint32Array;
  tt[UNSIGNED_INT_5_9_9_9_REV] = Uint32Array;
  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;
  tt[UNSIGNED_INT_24_8] = Uint32Array;
}
/**
 * Get the GL type for a typedArray
 * @param {ArrayBuffer|ArrayBufferView} typedArray a typedArray
 * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will
 *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned
 * @memberOf module:twgl/typedArray
 */

function getGLTypeForTypedArray(typedArray) {
  if (typedArray instanceof Int8Array) {
    return BYTE;
  } // eslint-disable-line


  if (typedArray instanceof Uint8Array) {
    return UNSIGNED_BYTE;
  } // eslint-disable-line


  if (typedArray instanceof Uint8ClampedArray) {
    return UNSIGNED_BYTE;
  } // eslint-disable-line


  if (typedArray instanceof Int16Array) {
    return SHORT;
  } // eslint-disable-line


  if (typedArray instanceof Uint16Array) {
    return UNSIGNED_SHORT;
  } // eslint-disable-line


  if (typedArray instanceof Int32Array) {
    return INT;
  } // eslint-disable-line


  if (typedArray instanceof Uint32Array) {
    return UNSIGNED_INT;
  } // eslint-disable-line


  if (typedArray instanceof Float32Array) {
    return FLOAT;
  } // eslint-disable-line


  throw "unsupported typed array type";
}
/**
 * Get the GL type for a typedArray type
 * @param {ArrayBufferViewType} typedArrayType a typedArray constructor
 * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will
 *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned
 * @memberOf module:twgl/typedArray
 */


function getGLTypeForTypedArrayType(typedArrayType) {
  if (typedArrayType === Int8Array) {
    return BYTE;
  } // eslint-disable-line


  if (typedArrayType === Uint8Array) {
    return UNSIGNED_BYTE;
  } // eslint-disable-line


  if (typedArrayType === Uint8ClampedArray) {
    return UNSIGNED_BYTE;
  } // eslint-disable-line


  if (typedArrayType === Int16Array) {
    return SHORT;
  } // eslint-disable-line


  if (typedArrayType === Uint16Array) {
    return UNSIGNED_SHORT;
  } // eslint-disable-line


  if (typedArrayType === Int32Array) {
    return INT;
  } // eslint-disable-line


  if (typedArrayType === Uint32Array) {
    return UNSIGNED_INT;
  } // eslint-disable-line


  if (typedArrayType === Float32Array) {
    return FLOAT;
  } // eslint-disable-line


  throw "unsupported typed array type";
}
/**
 * Get the typed array constructor for a given GL type
 * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)
 * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).
 * @memberOf module:twgl/typedArray
 */


function getTypedArrayTypeForGLType(type) {
  var CTOR = glTypeToTypedArray[type];

  if (!CTOR) {
    throw "unknown gl type";
  }

  return CTOR;
}

var isArrayBuffer = _globalObject.default.SharedArrayBuffer ? function isArrayBufferOrSharedArrayBuffer(a) {
  return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof _globalObject.default.SharedArrayBuffer);
} : function isArrayBuffer(a) {
  return a && a.buffer && a.buffer instanceof ArrayBuffer;
};
exports.isArrayBuffer = isArrayBuffer;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;
var global = typeof global !== 'undefined' // eslint-disable-line
? global // eslint-disable-line
: typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {};
exports.default = global;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.add = add;
exports.copy = copy;
exports.create = create;
exports.cross = cross;
exports.distance = distance;
exports.distanceSq = distanceSq;
exports.divide = divide;
exports.divScalar = divScalar;
exports.dot = dot;
exports.lerp = lerp;
exports.length = length;
exports.lengthSq = lengthSq;
exports.mulScalar = mulScalar;
exports.multiply = multiply;
exports.negate = negate;
exports.normalize = normalize;
exports.setDefaultType = setDefaultType;
exports.subtract = subtract;

/*
 * Copyright 2015, Gregg Tavares.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Gregg Tavares. nor the names of his
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 *
 * Vec3 math math functions.
 *
 * Almost all functions take an optional `dst` argument. If it is not passed in the
 * functions will create a new Vec3. In other words you can do this
 *
 *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.
 *
 * or
 *
 *     var v3 = v3.create();
 *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v
 *
 * The first style is often easier but depending on where it's used it generates garbage where
 * as there is almost never allocation with the second style.
 *
 * It is always save to pass any vector as the destination. So for example
 *
 *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1
 *
 * @module twgl/v3
 */
var VecType = Float32Array;
/**
 * A JavaScript array with 3 values or a Float32Array with 3 values.
 * When created by the library will create the default type which is `Float32Array`
 * but can be set by calling {@link module:twgl/v3.setDefaultType}.
 * @typedef {(number[]|Float32Array)} Vec3
 * @memberOf module:twgl/v3
 */

/**
 * Sets the type this library creates for a Vec3
 * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`
 * @return {constructor} previous constructor for Vec3
 */

function setDefaultType(ctor) {
  var oldType = VecType;
  VecType = ctor;
  return oldType;
}
/**
 * Creates a vec3; may be called with x, y, z to set initial values.
 * @return {Vec3} the created vector
 * @memberOf module:twgl/v3
 */


function create(x, y, z) {
  var dst = new VecType(3);

  if (x) {
    dst[0] = x;
  }

  if (y) {
    dst[1] = y;
  }

  if (z) {
    dst[2] = z;
  }

  return dst;
}
/**
 * Adds two vectors; assumes a and b have the same dimension.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
 * @memberOf module:twgl/v3
 */


function add(a, b, dst) {
  dst = dst || new VecType(3);
  dst[0] = a[0] + b[0];
  dst[1] = a[1] + b[1];
  dst[2] = a[2] + b[2];
  return dst;
}
/**
 * Subtracts two vectors.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
 * @memberOf module:twgl/v3
 */


function subtract(a, b, dst) {
  dst = dst || new VecType(3);
  dst[0] = a[0] - b[0];
  dst[1] = a[1] - b[1];
  dst[2] = a[2] - b[2];
  return dst;
}
/**
 * Performs linear interpolation on two vectors.
 * Given vectors a and b and interpolation coefficient t, returns
 * (1 - t) * a + t * b.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {number} t Interpolation coefficient.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
 * @memberOf module:twgl/v3
 */


function lerp(a, b, t, dst) {
  dst = dst || new VecType(3);
  dst[0] = (1 - t) * a[0] + t * b[0];
  dst[1] = (1 - t) * a[1] + t * b[1];
  dst[2] = (1 - t) * a[2] + t * b[2];
  return dst;
}
/**
 * Mutiplies a vector by a scalar.
 * @param {module:twgl/v3.Vec3} v The vector.
 * @param {number} k The scalar.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
 * @return {module:twgl/v3.Vec3} dst.
 * @memberOf module:twgl/v3
 */


function mulScalar(v, k, dst) {
  dst = dst || new VecType(3);
  dst[0] = v[0] * k;
  dst[1] = v[1] * k;
  dst[2] = v[2] * k;
  return dst;
}
/**
 * Divides a vector by a scalar.
 * @param {module:twgl/v3.Vec3} v The vector.
 * @param {number} k The scalar.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
 * @return {module:twgl/v3.Vec3} dst.
 * @memberOf module:twgl/v3
 */


function divScalar(v, k, dst) {
  dst = dst || new VecType(3);
  dst[0] = v[0] / k;
  dst[1] = v[1] / k;
  dst[2] = v[2] / k;
  return dst;
}
/**
 * Computes the cross product of two vectors; assumes both vectors have
 * three entries.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
 * @return {module:twgl/v3.Vec3} The vector a cross b.
 * @memberOf module:twgl/v3
 */


function cross(a, b, dst) {
  dst = dst || new VecType(3);
  var t1 = a[2] * b[0] - a[0] * b[2];
  var t2 = a[0] * b[1] - a[1] * b[0];
  dst[0] = a[1] * b[2] - a[2] * b[1];
  dst[1] = t1;
  dst[2] = t2;
  return dst;
}
/**
 * Computes the dot product of two vectors; assumes both vectors have
 * three entries.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @return {number} dot product
 * @memberOf module:twgl/v3
 */


function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
/**
 * Computes the length of vector
 * @param {module:twgl/v3.Vec3} v vector.
 * @return {number} length of vector.
 * @memberOf module:twgl/v3
 */


function length(v) {
  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
}
/**
 * Computes the square of the length of vector
 * @param {module:twgl/v3.Vec3} v vector.
 * @return {number} square of the length of vector.
 * @memberOf module:twgl/v3
 */


function lengthSq(v) {
  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
}
/**
 * Computes the distance between 2 points
 * @param {module:twgl/v3.Vec3} a vector.
 * @param {module:twgl/v3.Vec3} b vector.
 * @return {number} distance between a and b
 * @memberOf module:twgl/v3
 */


function distance(a, b) {
  var dx = a[0] - b[0];
  var dy = a[1] - b[1];
  var dz = a[2] - b[2];
  return Math.sqrt(dx * dx + dy * dy + dz * dz);
}
/**
 * Computes the square of the distance between 2 points
 * @param {module:twgl/v3.Vec3} a vector.
 * @param {module:twgl/v3.Vec3} b vector.
 * @return {number} square of the distance between a and b
 * @memberOf module:twgl/v3
 */


function distanceSq(a, b) {
  var dx = a[0] - b[0];
  var dy = a[1] - b[1];
  var dz = a[2] - b[2];
  return dx * dx + dy * dy + dz * dz;
}
/**
 * Divides a vector by its Euclidean length and returns the quotient.
 * @param {module:twgl/v3.Vec3} a The vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
 * @return {module:twgl/v3.Vec3} The normalized vector.
 * @memberOf module:twgl/v3
 */


function normalize(a, dst) {
  dst = dst || new VecType(3);
  var lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];
  var len = Math.sqrt(lenSq);

  if (len > 0.00001) {
    dst[0] = a[0] / len;
    dst[1] = a[1] / len;
    dst[2] = a[2] / len;
  } else {
    dst[0] = 0;
    dst[1] = 0;
    dst[2] = 0;
  }

  return dst;
}
/**
 * Negates a vector.
 * @param {module:twgl/v3.Vec3} v The vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
 * @return {module:twgl/v3.Vec3} -v.
 * @memberOf module:twgl/v3
 */


function negate(v, dst) {
  dst = dst || new VecType(3);
  dst[0] = -v[0];
  dst[1] = -v[1];
  dst[2] = -v[2];
  return dst;
}
/**
 * Copies a vector.
 * @param {module:twgl/v3.Vec3} v The vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
 * @return {module:twgl/v3.Vec3} A copy of v.
 * @memberOf module:twgl/v3
 */


function copy(v, dst) {
  dst = dst || new VecType(3);
  dst[0] = v[0];
  dst[1] = v[1];
  dst[2] = v[2];
  return dst;
}
/**
 * Multiplies a vector by another vector (component-wise); assumes a and
 * b have the same length.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
 * @return {module:twgl/v3.Vec3} The vector of products of entries of a and
 *     b.
 * @memberOf module:twgl/v3
 */


function multiply(a, b, dst) {
  dst = dst || new VecType(3);
  dst[0] = a[0] * b[0];
  dst[1] = a[1] * b[1];
  dst[2] = a[2] * b[2];
  return dst;
}
/**
 * Divides a vector by another vector (component-wise); assumes a and
 * b have the same length.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
 * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and
 *     b.
 * @memberOf module:twgl/v3
 */


function divide(a, b, dst) {
  dst = dst || new VecType(3);
  dst[0] = a[0] / b[0];
  dst[1] = a[1] / b[1];
  dst[2] = a[2] / b[2];
  return dst;
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.isWebGL1 = isWebGL1;
exports.isWebGL2 = isWebGL2;
exports.glEnumToString = void 0;

/*
 * Copyright 2017, Gregg Tavares.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Gregg Tavares. nor the names of his
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Gets the gl version as a number
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @return {number} version of gl
 */
//function getVersionAsNumber(gl) {
//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));
//}

/**
 * Check if context is WebGL 2.0
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @return {bool} true if it's WebGL 2.0
 * @memberOf module:twgl
 */
function isWebGL2(gl) {
  // This is the correct check but it's slow
  //  return gl.getParameter(gl.VERSION).indexOf("WebGL 2.0") === 0;
  // This might also be the correct check but I'm assuming it's slow-ish
  // return gl instanceof WebGL2RenderingContext;
  return !!gl.texStorage2D;
}
/**
 * Check if context is WebGL 1.0
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @return {bool} true if it's WebGL 1.0
 * @memberOf module:twgl
 */


function isWebGL1(gl) {
  // This is the correct check but it's slow
  // const version = getVersionAsNumber(gl);
  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96
  // This might also be the correct check but I'm assuming it's slow-ish
  // return gl instanceof WebGLRenderingContext;
  return !gl.texStorage2D;
}
/**
 * Gets a string for WebGL enum
 *
 * Note: Several enums are the same. Without more
 * context (which function) it's impossible to always
 * give the correct enum. As it is, for matching values
 * it gives all enums. Checking the WebGL2RenderingContext
 * that means
 *
 *      0     = ZERO | POINT | NONE | NO_ERROR
 *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT
 *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB
 *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING
 *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING
 *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING
 *
 * It's also not useful for bits really unless you pass in individual bits.
 * In other words
 *
 *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;
 *     twgl.glEnumToString(gl, bits);  // not going to work
 *
 * Note that some enums only exist on extensions. If you
 * want them to show up you need to pass the extension at least
 * once. For example
 *
 *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc`);
 *     if (ext) {
 *        twgl.glEnumToString(ext, 0);  // just prime the function
 *
 *        ..later..
 *
 *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;
 *        console.log(twgl.glEnumToString(gl, internalFormat));
 *
 * Notice I didn't have to pass the extension the second time. This means
 * you can have place that generically gets an enum for texture formats for example.
 * and as long as you primed the function with the extensions
 *
 * If you're using `twgl.addExtensionsToContext` to enable your extensions
 * then twgl will automatically get the extension's enums.
 *
 * @param {WebGLRenderingContext|Extension} gl A WebGLRenderingContext or any extension object
 * @param {number} value the value of the enum you want to look up.
 * @memberOf module:twgl
 */


var glEnumToString = function () {
  var haveEnumsForType = {};
  var enums = {};

  function addEnums(gl) {
    var type = gl.constructor.name;

    if (!haveEnumsForType[type]) {
      for (var key in gl) {
        if (typeof gl[key] === 'number') {
          var existing = enums[gl[key]];
          enums[gl[key]] = existing ? "".concat(existing, " | ").concat(key) : key;
        }
      }

      haveEnumsForType[type] = true;
    }
  }

  return function glEnumToString(gl, value) {
    addEnums(gl);
    return enums[value] || "0x" + value.toString(16);
  };
}();

exports.glEnumToString = glEnumToString;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.createAttributeSetters = createAttributeSetters;
exports.createProgram = createProgram;
exports.createProgramFromScripts = createProgramFromScripts;
exports.createProgramFromSources = createProgramFromSources;
exports.createProgramInfo = createProgramInfo;
exports.createProgramInfoFromProgram = createProgramInfoFromProgram;
exports.createUniformSetters = createUniformSetters;
exports.createUniformBlockSpecFromProgram = createUniformBlockSpecFromProgram;
exports.createUniformBlockInfoFromProgram = createUniformBlockInfoFromProgram;
exports.createUniformBlockInfo = createUniformBlockInfo;
exports.createTransformFeedback = createTransformFeedback;
exports.createTransformFeedbackInfo = createTransformFeedbackInfo;
exports.bindTransformFeedbackInfo = bindTransformFeedbackInfo;
exports.setAttributes = setAttributes;
exports.setBuffersAndAttributes = setBuffersAndAttributes;
exports.setUniforms = setUniforms;
exports.setUniformBlock = setUniformBlock;
exports.setBlockUniforms = setBlockUniforms;
exports.bindUniformBlock = bindUniformBlock;

var utils = _interopRequireWildcard(__webpack_require__(4));

var helper = _interopRequireWildcard(__webpack_require__(0));

var _globalObject = _interopRequireDefault(__webpack_require__(2));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/*
 * Copyright 2015, Gregg Tavares.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Gregg Tavares. nor the names of his
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Low level shader program related functions
 *
 * You should generally not need to use these functions. They are provided
 * for those cases where you're doing something out of the ordinary
 * and you need lower level access.
 *
 * For backward compatibily they are available at both `twgl.programs` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/programs
 */
var error = helper.error;
var warn = helper.warn;
var getElementById = _globalObject.default && _globalObject.default.document && _globalObject.default.document.getElementById ? _globalObject.default.document.getElementById.bind(_globalObject.default.document) : function () {
  return null;
};
var FLOAT = 0x1406;
var FLOAT_VEC2 = 0x8B50;
var FLOAT_VEC3 = 0x8B51;
var FLOAT_VEC4 = 0x8B52;
var INT = 0x1404;
var INT_VEC2 = 0x8B53;
var INT_VEC3 = 0x8B54;
var INT_VEC4 = 0x8B55;
var BOOL = 0x8B56;
var BOOL_VEC2 = 0x8B57;
var BOOL_VEC3 = 0x8B58;
var BOOL_VEC4 = 0x8B59;
var FLOAT_MAT2 = 0x8B5A;
var FLOAT_MAT3 = 0x8B5B;
var FLOAT_MAT4 = 0x8B5C;
var SAMPLER_2D = 0x8B5E;
var SAMPLER_CUBE = 0x8B60;
var SAMPLER_3D = 0x8B5F;
var SAMPLER_2D_SHADOW = 0x8B62;
var FLOAT_MAT2x3 = 0x8B65;
var FLOAT_MAT2x4 = 0x8B66;
var FLOAT_MAT3x2 = 0x8B67;
var FLOAT_MAT3x4 = 0x8B68;
var FLOAT_MAT4x2 = 0x8B69;
var FLOAT_MAT4x3 = 0x8B6A;
var SAMPLER_2D_ARRAY = 0x8DC1;
var SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
var SAMPLER_CUBE_SHADOW = 0x8DC5;
var UNSIGNED_INT = 0x1405;
var UNSIGNED_INT_VEC2 = 0x8DC6;
var UNSIGNED_INT_VEC3 = 0x8DC7;
var UNSIGNED_INT_VEC4 = 0x8DC8;
var INT_SAMPLER_2D = 0x8DCA;
var INT_SAMPLER_3D = 0x8DCB;
var INT_SAMPLER_CUBE = 0x8DCC;
var INT_SAMPLER_2D_ARRAY = 0x8DCF;
var UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
var UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
var UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
var UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
var TEXTURE_2D = 0x0DE1;
var TEXTURE_CUBE_MAP = 0x8513;
var TEXTURE_3D = 0x806F;
var TEXTURE_2D_ARRAY = 0x8C1A;
var typeMap = {};
/**
 * Returns the corresponding bind point for a given sampler type
 */

function getBindPointForSamplerType(gl, type) {
  return typeMap[type].bindPoint;
} // This kind of sucks! If you could compose functions as in `var fn = gl[name];`
// this code could be a lot smaller but that is sadly really slow (T_T)


function floatSetter(gl, location) {
  return function (v) {
    gl.uniform1f(location, v);
  };
}

function floatArraySetter(gl, location) {
  return function (v) {
    gl.uniform1fv(location, v);
  };
}

function floatVec2Setter(gl, location) {
  return function (v) {
    gl.uniform2fv(location, v);
  };
}

function floatVec3Setter(gl, location) {
  return function (v) {
    gl.uniform3fv(location, v);
  };
}

function floatVec4Setter(gl, location) {
  return function (v) {
    gl.uniform4fv(location, v);
  };
}

function intSetter(gl, location) {
  return function (v) {
    gl.uniform1i(location, v);
  };
}

function intArraySetter(gl, location) {
  return function (v) {
    gl.uniform1iv(location, v);
  };
}

function intVec2Setter(gl, location) {
  return function (v) {
    gl.uniform2iv(location, v);
  };
}

function intVec3Setter(gl, location) {
  return function (v) {
    gl.uniform3iv(location, v);
  };
}

function intVec4Setter(gl, location) {
  return function (v) {
    gl.uniform4iv(location, v);
  };
}

function uintSetter(gl, location) {
  return function (v) {
    gl.uniform1ui(location, v);
  };
}

function uintArraySetter(gl, location) {
  return function (v) {
    gl.uniform1uiv(location, v);
  };
}

function uintVec2Setter(gl, location) {
  return function (v) {
    gl.uniform2uiv(location, v);
  };
}

function uintVec3Setter(gl, location) {
  return function (v) {
    gl.uniform3uiv(location, v);
  };
}

function uintVec4Setter(gl, location) {
  return function (v) {
    gl.uniform4uiv(location, v);
  };
}

function floatMat2Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix2fv(location, false, v);
  };
}

function floatMat3Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix3fv(location, false, v);
  };
}

function floatMat4Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix4fv(location, false, v);
  };
}

function floatMat23Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix2x3fv(location, false, v);
  };
}

function floatMat32Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix3x2fv(location, false, v);
  };
}

function floatMat24Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix2x4fv(location, false, v);
  };
}

function floatMat42Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix4x2fv(location, false, v);
  };
}

function floatMat34Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix3x4fv(location, false, v);
  };
}

function floatMat43Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix4x3fv(location, false, v);
  };
}

function samplerSetter(gl, type, unit, location) {
  var bindPoint = getBindPointForSamplerType(gl, type);
  return utils.isWebGL2(gl) ? function (textureOrPair) {
    var texture;
    var sampler;

    if (helper.isTexture(gl, textureOrPair)) {
      texture = textureOrPair;
      sampler = null;
    } else {
      texture = textureOrPair.texture;
      sampler = textureOrPair.sampler;
    }

    gl.uniform1i(location, unit);
    gl.activeTexture(gl.TEXTURE0 + unit);
    gl.bindTexture(bindPoint, texture);
    gl.bindSampler(unit, sampler);
  } : function (texture) {
    gl.uniform1i(location, unit);
    gl.activeTexture(gl.TEXTURE0 + unit);
    gl.bindTexture(bindPoint, texture);
  };
}

function samplerArraySetter(gl, type, unit, location, size) {
  var bindPoint = getBindPointForSamplerType(gl, type);
  var units = new Int32Array(size);

  for (var ii = 0; ii < size; ++ii) {
    units[ii] = unit + ii;
  }

  return utils.isWebGL2(gl) ? function (textures) {
    gl.uniform1iv(location, units);
    textures.forEach(function (textureOrPair, index) {
      gl.activeTexture(gl.TEXTURE0 + units[index]);
      var texture;
      var sampler;

      if (helper.isTexture(gl, textureOrPair)) {
        texture = textureOrPair;
        sampler = null;
      } else {
        texture = textureOrPair.texture;
        sampler = textureOrPair.sampler;
      }

      gl.bindSampler(unit, sampler);
      gl.bindTexture(bindPoint, texture);
    });
  } : function (textures) {
    gl.uniform1iv(location, units);
    textures.forEach(function (texture, index) {
      gl.activeTexture(gl.TEXTURE0 + units[index]);
      gl.bindTexture(bindPoint, texture);
    });
  };
}

typeMap[FLOAT] = {
  Type: Float32Array,
  size: 4,
  setter: floatSetter,
  arraySetter: floatArraySetter
};
typeMap[FLOAT_VEC2] = {
  Type: Float32Array,
  size: 8,
  setter: floatVec2Setter
};
typeMap[FLOAT_VEC3] = {
  Type: Float32Array,
  size: 12,
  setter: floatVec3Setter
};
typeMap[FLOAT_VEC4] = {
  Type: Float32Array,
  size: 16,
  setter: floatVec4Setter
};
typeMap[INT] = {
  Type: Int32Array,
  size: 4,
  setter: intSetter,
  arraySetter: intArraySetter
};
typeMap[INT_VEC2] = {
  Type: Int32Array,
  size: 8,
  setter: intVec2Setter
};
typeMap[INT_VEC3] = {
  Type: Int32Array,
  size: 12,
  setter: intVec3Setter
};
typeMap[INT_VEC4] = {
  Type: Int32Array,
  size: 16,
  setter: intVec4Setter
};
typeMap[UNSIGNED_INT] = {
  Type: Uint32Array,
  size: 4,
  setter: uintSetter,
  arraySetter: uintArraySetter
};
typeMap[UNSIGNED_INT_VEC2] = {
  Type: Uint32Array,
  size: 8,
  setter: uintVec2Setter
};
typeMap[UNSIGNED_INT_VEC3] = {
  Type: Uint32Array,
  size: 12,
  setter: uintVec3Setter
};
typeMap[UNSIGNED_INT_VEC4] = {
  Type: Uint32Array,
  size: 16,
  setter: uintVec4Setter
};
typeMap[BOOL] = {
  Type: Uint32Array,
  size: 4,
  setter: intSetter,
  arraySetter: intArraySetter
};
typeMap[BOOL_VEC2] = {
  Type: Uint32Array,
  size: 8,
  setter: intVec2Setter
};
typeMap[BOOL_VEC3] = {
  Type: Uint32Array,
  size: 12,
  setter: intVec3Setter
};
typeMap[BOOL_VEC4] = {
  Type: Uint32Array,
  size: 16,
  setter: intVec4Setter
};
typeMap[FLOAT_MAT2] = {
  Type: Float32Array,
  size: 16,
  setter: floatMat2Setter
};
typeMap[FLOAT_MAT3] = {
  Type: Float32Array,
  size: 36,
  setter: floatMat3Setter
};
typeMap[FLOAT_MAT4] = {
  Type: Float32Array,
  size: 64,
  setter: floatMat4Setter
};
typeMap[FLOAT_MAT2x3] = {
  Type: Float32Array,
  size: 24,
  setter: floatMat23Setter
};
typeMap[FLOAT_MAT2x4] = {
  Type: Float32Array,
  size: 32,
  setter: floatMat24Setter
};
typeMap[FLOAT_MAT3x2] = {
  Type: Float32Array,
  size: 24,
  setter: floatMat32Setter
};
typeMap[FLOAT_MAT3x4] = {
  Type: Float32Array,
  size: 48,
  setter: floatMat34Setter
};
typeMap[FLOAT_MAT4x2] = {
  Type: Float32Array,
  size: 32,
  setter: floatMat42Setter
};
typeMap[FLOAT_MAT4x3] = {
  Type: Float32Array,
  size: 48,
  setter: floatMat43Setter
};
typeMap[SAMPLER_2D] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D
};
typeMap[SAMPLER_CUBE] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_CUBE_MAP
};
typeMap[SAMPLER_3D] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_3D
};
typeMap[SAMPLER_2D_SHADOW] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D
};
typeMap[SAMPLER_2D_ARRAY] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D_ARRAY
};
typeMap[SAMPLER_2D_ARRAY_SHADOW] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D_ARRAY
};
typeMap[SAMPLER_CUBE_SHADOW] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_CUBE_MAP
};
typeMap[INT_SAMPLER_2D] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D
};
typeMap[INT_SAMPLER_3D] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_3D
};
typeMap[INT_SAMPLER_CUBE] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_CUBE_MAP
};
typeMap[INT_SAMPLER_2D_ARRAY] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D_ARRAY
};
typeMap[UNSIGNED_INT_SAMPLER_2D] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D
};
typeMap[UNSIGNED_INT_SAMPLER_3D] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_3D
};
typeMap[UNSIGNED_INT_SAMPLER_CUBE] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_CUBE_MAP
};
typeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D_ARRAY
};

function floatAttribSetter(gl, index) {
  return function (b) {
    gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);
    gl.enableVertexAttribArray(index);
    gl.vertexAttribPointer(index, b.numComponents || b.size, b.type || gl.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);

    if (b.divisor !== undefined) {
      gl.vertexAttribDivisor(index, b.divisor);
    }
  };
}

function intAttribSetter(gl, index) {
  return function (b) {
    gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);
    gl.enableVertexAttribArray(index);
    gl.vertexAttribIPointer(index, b.numComponents || b.size, b.type || gl.INT, b.stride || 0, b.offset || 0);

    if (b.divisor !== undefined) {
      gl.vertexAttribDivisor(index, b.divisor);
    }
  };
}

function matAttribSetter(gl, index, typeInfo) {
  var defaultSize = typeInfo.size;
  var count = typeInfo.count;
  return function (b) {
    gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);
    var numComponents = b.size || b.numComponents || defaultSize;
    var size = numComponents / count;
    var type = b.type || gl.FLOAT;
    var typeInfo = typeMap[type];
    var stride = typeInfo.size * numComponents;
    var normalize = b.normalize || false;
    var offset = b.offset || 0;
    var rowOffset = stride / count;

    for (var i = 0; i < count; ++i) {
      gl.enableVertexAttribArray(index + i);
      gl.vertexAttribPointer(index + i, size, type, normalize, stride, offset + rowOffset * i);

      if (b.divisor !== undefined) {
        gl.vertexAttribDivisor(index + i, b.divisor);
      }
    }
  };
}

var attrTypeMap = {};
attrTypeMap[FLOAT] = {
  size: 4,
  setter: floatAttribSetter
};
attrTypeMap[FLOAT_VEC2] = {
  size: 8,
  setter: floatAttribSetter
};
attrTypeMap[FLOAT_VEC3] = {
  size: 12,
  setter: floatAttribSetter
};
attrTypeMap[FLOAT_VEC4] = {
  size: 16,
  setter: floatAttribSetter
};
attrTypeMap[INT] = {
  size: 4,
  setter: intAttribSetter
};
attrTypeMap[INT_VEC2] = {
  size: 8,
  setter: intAttribSetter
};
attrTypeMap[INT_VEC3] = {
  size: 12,
  setter: intAttribSetter
};
attrTypeMap[INT_VEC4] = {
  size: 16,
  setter: intAttribSetter
};
attrTypeMap[UNSIGNED_INT] = {
  size: 4,
  setter: intAttribSetter
};
attrTypeMap[UNSIGNED_INT_VEC2] = {
  size: 8,
  setter: intAttribSetter
};
attrTypeMap[UNSIGNED_INT_VEC3] = {
  size: 12,
  setter: intAttribSetter
};
attrTypeMap[UNSIGNED_INT_VEC4] = {
  size: 16,
  setter: intAttribSetter
};
attrTypeMap[BOOL] = {
  size: 4,
  setter: intAttribSetter
};
attrTypeMap[BOOL_VEC2] = {
  size: 8,
  setter: intAttribSetter
};
attrTypeMap[BOOL_VEC3] = {
  size: 12,
  setter: intAttribSetter
};
attrTypeMap[BOOL_VEC4] = {
  size: 16,
  setter: intAttribSetter
};
attrTypeMap[FLOAT_MAT2] = {
  size: 4,
  setter: matAttribSetter,
  count: 2
};
attrTypeMap[FLOAT_MAT3] = {
  size: 9,
  setter: matAttribSetter,
  count: 3
};
attrTypeMap[FLOAT_MAT4] = {
  size: 16,
  setter: matAttribSetter,
  count: 4
}; // make sure we don't see a global gl

var gl = undefined; // eslint-disable-line

/**
 * Error Callback
 * @callback ErrorCallback
 * @param {string} msg error message.
 * @param {number} [lineOffset] amount to add to line number
 * @memberOf module:twgl
 */

function addLineNumbers(src, lineOffset) {
  lineOffset = lineOffset || 0;
  ++lineOffset;
  return src.split("\n").map(function (line, ndx) {
    return ndx + lineOffset + ": " + line;
  }).join("\n");
}

var spaceRE = /^[ \t]*\n/;
/**
 * Loads a shader.
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {string} shaderSource The shader source.
 * @param {number} shaderType The type of shader.
 * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.
 * @return {WebGLShader} The created shader.
 */

function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {
  var errFn = opt_errorCallback || error; // Create the shader object

  var shader = gl.createShader(shaderType); // Remove the first end of line because WebGL 2.0 requires
  // #version 300 es
  // as the first line. No whitespace allowed before that line
  // so
  //
  // <script>
  // #version 300 es
  // </script>
  //
  // Has one line before it which is invalid according to GLSL ES 3.00
  //

  var lineOffset = 0;

  if (spaceRE.test(shaderSource)) {
    lineOffset = 1;
    shaderSource = shaderSource.replace(spaceRE, '');
  } // Load the shader source


  gl.shaderSource(shader, shaderSource); // Compile the shader

  gl.compileShader(shader); // Check the compile status

  var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);

  if (!compiled) {
    // Something went wrong during compilation; get the error
    var lastError = gl.getShaderInfoLog(shader);
    errFn(addLineNumbers(shaderSource, lineOffset) + "\n*** Error compiling shader: " + lastError);
    gl.deleteShader(shader);
    return null;
  }

  return shader;
}
/**
 * @typedef {Object} ProgramOptions
 * @property {function(string)} [errorCallback] callback for errors
 * @property {Object.<string,number>} [attribLocations] a attribute name to location map
 * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed
 *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise
 *   you can pass an array of names.
 * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.
 * @memberOf module:twgl
 */

/**
 * Gets the program options based on all these optional arguments
 * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments pased on
 */


function getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {
  var transformFeedbackVaryings;

  if (typeof opt_locations === 'function') {
    opt_errorCallback = opt_locations;
    opt_locations = undefined;
  }

  if (typeof opt_attribs === 'function') {
    opt_errorCallback = opt_attribs;
    opt_attribs = undefined;
  } else if (opt_attribs && !Array.isArray(opt_attribs)) {
    // If we have an errorCallback we can just return this object
    // Otherwise we need to construct one with default errorCallback
    if (opt_attribs.errorCallback) {
      return opt_attribs;
    }

    var opt = opt_attribs;
    opt_errorCallback = opt.errorCallback;
    opt_attribs = opt.attribLocations;
    transformFeedbackVaryings = opt.transformFeedbackVaryings;
  }

  var options = {
    errorCallback: opt_errorCallback || error,
    transformFeedbackVaryings: transformFeedbackVaryings
  };

  if (opt_attribs) {
    var attribLocations = {};

    if (Array.isArray(opt_attribs)) {
      opt_attribs.forEach(function (attrib, ndx) {
        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;
      });
    } else {
      attribLocations = opt_attribs;
    }

    options.attribLocations = attribLocations;
  }

  return options;
}

var defaultShaderType = ["VERTEX_SHADER", "FRAGMENT_SHADER"];

function getShaderTypeFromScriptType(scriptType) {
  if (scriptType.indexOf("frag") >= 0) {
    return gl.FRAGMENT_SHADER;
  } else if (scriptType.indexOf("vert") >= 0) {
    return gl.VERTEX_SHADER;
  }

  return undefined;
}

function deleteShaders(gl, shaders) {
  shaders.forEach(function (shader) {
    gl.deleteShader(shader);
  });
}
/**
 * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the
 * program and calls useProgram.
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgram(gl, [vs, fs], options);
 *     twgl.createProgram(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source
 * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {WebGLProgram?} the created program or null if error.
 * @memberOf module:twgl/programs
 */


function createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {
  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  var realShaders = [];
  var newShaders = [];

  for (var ndx = 0; ndx < shaders.length; ++ndx) {
    var shader = shaders[ndx];

    if (typeof shader === 'string') {
      var elem = getElementById(shader);
      var src = elem ? elem.text : shader;
      var type = gl[defaultShaderType[ndx]];

      if (elem && elem.type) {
        type = getShaderTypeFromScriptType(elem.type) || type;
      }

      shader = loadShader(gl, src, type, progOptions.errorCallback);
      newShaders.push(shader);
    }

    if (helper.isShader(gl, shader)) {
      realShaders.push(shader);
    }
  }

  if (realShaders.length !== shaders.length) {
    progOptions.errorCallback("not enough shaders for program");
    deleteShaders(gl, newShaders);
    return null;
  }

  var program = gl.createProgram();
  realShaders.forEach(function (shader) {
    gl.attachShader(program, shader);
  });

  if (progOptions.attribLocations) {
    Object.keys(progOptions.attribLocations).forEach(function (attrib) {
      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);
    });
  }

  var varyings = progOptions.transformFeedbackVaryings;

  if (varyings) {
    if (varyings.attribs) {
      varyings = varyings.attribs;
    }

    if (!Array.isArray(varyings)) {
      varyings = Object.keys(varyings);
    }

    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || gl.SEPARATE_ATTRIBS);
  }

  gl.linkProgram(program); // Check the link status

  var linked = gl.getProgramParameter(program, gl.LINK_STATUS);

  if (!linked) {
    // something went wrong with the link
    var lastError = gl.getProgramInfoLog(program);
    progOptions.errorCallback("Error in program linking:" + lastError);
    gl.deleteProgram(program);
    deleteShaders(gl, newShaders);
    return null;
  }

  return program;
}
/**
 * Loads a shader from a script tag.
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {string} scriptId The id of the script tag.
 * @param {number} [opt_shaderType] The type of shader. If not passed in it will
 *     be derived from the type of the script tag.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.
 * @return {WebGLShader?} The created shader or null if error.
 */


function createShaderFromScript(gl, scriptId, opt_shaderType, opt_errorCallback) {
  var shaderSource = "";
  var shaderScript = getElementById(scriptId);

  if (!shaderScript) {
    throw "*** Error: unknown script element" + scriptId;
  }

  shaderSource = shaderScript.text;
  var shaderType = opt_shaderType || getShaderTypeFromScriptType(shaderScript.type);

  if (!shaderType) {
    throw "*** Error: unknown shader type";
  }

  return loadShader(gl, shaderSource, shaderType, opt_errorCallback);
}
/**
 * Creates a program from 2 script tags.
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {string[]} shaderScriptIds Array of ids of the script
 *        tags for the shaders. The first is assumed to be the
 *        vertex shader, the second the fragment shader.
 * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.
 * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {WebGLProgram} The created program.
 * @memberOf module:twgl/programs
 */


function createProgramFromScripts(gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {
  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  var shaders = [];

  for (var ii = 0; ii < shaderScriptIds.length; ++ii) {
    var shader = createShaderFromScript(gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);

    if (!shader) {
      return null;
    }

    shaders.push(shader);
  }

  return createProgram(gl, shaders, progOptions);
}
/**
 * Creates a program from 2 sources.
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {string[]} shaderSources Array of sources for the
 *        shaders. The first is assumed to be the vertex shader,
 *        the second the fragment shader.
 * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.
 * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {WebGLProgram} The created program.
 * @memberOf module:twgl/programs
 */


function createProgramFromSources(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {
  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  var shaders = [];

  for (var ii = 0; ii < shaderSources.length; ++ii) {
    var shader = loadShader(gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);

    if (!shader) {
      return null;
    }

    shaders.push(shader);
  }

  return createProgram(gl, shaders, progOptions);
}
/**
 * Returns true if attribute/uniform is a reserved/built in
 *
 * It makes no sense to me why GL returns these because it's
 * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`
 * with names that start with `gl_` (and `webgl_` in WebGL)
 *
 * I can only assume they are there because they might count
 * when computing the number of uniforms/attributes used when you want to
 * know if you are near the limit. That doesn't really make sense
 * to me but the fact that these get returned are in the spec.
 *
 * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or
 *    `gl.getActiveAttrib`.
 * @return {bool} true if it's reserved
 */


function isBuiltIn(info) {
  var name = info.name;
  return name.startsWith("gl_") || name.startsWith("webgl_");
}
/**
 * Creates setter functions for all uniforms of a shader
 * program.
 *
 * @see {@link module:twgl.setUniforms}
 *
 * @param {WebGLProgram} program the program to create setters for.
 * @returns {Object.<string, function>} an object with a setter by name for each uniform
 * @memberOf module:twgl/programs
 */


function createUniformSetters(gl, program) {
  var textureUnit = 0;
  /**
   * Creates a setter for a uniform of the given program with it's
   * location embedded in the setter.
   * @param {WebGLProgram} program
   * @param {WebGLUniformInfo} uniformInfo
   * @returns {function} the created setter.
   */

  function createUniformSetter(program, uniformInfo) {
    var location = gl.getUniformLocation(program, uniformInfo.name);
    var isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === "[0]";
    var type = uniformInfo.type;
    var typeInfo = typeMap[type];

    if (!typeInfo) {
      throw "unknown type: 0x" + type.toString(16); // we should never get here.
    }

    var setter;

    if (typeInfo.bindPoint) {
      // it's a sampler
      var unit = textureUnit;
      textureUnit += uniformInfo.size;

      if (isArray) {
        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);
      } else {
        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);
      }
    } else {
      if (typeInfo.arraySetter && isArray) {
        setter = typeInfo.arraySetter(gl, location);
      } else {
        setter = typeInfo.setter(gl, location);
      }
    }

    setter.location = location;
    return setter;
  }

  var uniformSetters = {};
  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);

  for (var ii = 0; ii < numUniforms; ++ii) {
    var uniformInfo = gl.getActiveUniform(program, ii);

    if (isBuiltIn(uniformInfo)) {
      continue;
    }

    var name = uniformInfo.name; // remove the array suffix.

    if (name.substr(-3) === "[0]") {
      name = name.substr(0, name.length - 3);
    }

    var setter = createUniformSetter(program, uniformInfo);
    uniformSetters[name] = setter;
  }

  return uniformSetters;
}
/**
 * @typedef {Object} TransformFeedbackInfo
 * @property {number} index index of transform feedback
 * @property {number} type GL type
 * @property {number} size 1 - 4
 * @memberOf module:twgl
 */

/**
 * Create TransformFeedbackInfo for passing to bind/unbindTransformFeedbackInfo.
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {WebGLProgram} program an existing WebGLProgram.
 * @return {Object<string, module:twgl.TransformFeedbackInfo>}
 * @memberOf module:twgl
 */


function createTransformFeedbackInfo(gl, program) {
  var info = {};
  var numVaryings = gl.getProgramParameter(program, gl.TRANSFORM_FEEDBACK_VARYINGS);

  for (var ii = 0; ii < numVaryings; ++ii) {
    var varying = gl.getTransformFeedbackVarying(program, ii);
    info[varying.name] = {
      index: ii,
      type: varying.type,
      size: varying.size
    };
  }

  return info;
}
/**
 * Binds buffers for transform feedback.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.
 * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.
 * @memberOf module:twgl
 */


function bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {
  if (transformFeedbackInfo.transformFeedbackInfo) {
    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;
  }

  if (bufferInfo.attribs) {
    bufferInfo = bufferInfo.attribs;
  }

  for (var name in bufferInfo) {
    var varying = transformFeedbackInfo[name];

    if (varying) {
      var buf = bufferInfo[name];

      if (buf.offset) {
        gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);
      } else {
        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);
      }
    }
  }
}
/**
 * Unbinds buffers afetr transform feedback.
 *
 * Buffers can not be bound to 2 bind points so if you try to bind a buffer used
 * in a transform feedback as an ARRAY_BUFFER for an attribute it will fail.
 *
 * This function unbinds all buffers that were bound with {@link module:twgl.bindTransformFeedbackInfo}.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.
 * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.
 */


function unbindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {
  if (transformFeedbackInfo.transformFeedbackInfo) {
    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;
  }

  if (bufferInfo.attribs) {
    bufferInfo = bufferInfo.attribs;
  }

  for (var name in bufferInfo) {
    var varying = transformFeedbackInfo[name];

    if (varying) {
      gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, null);
    }
  }
}
/**
 * Creates a transform feedback and sets the buffers
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}
 * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.
 * @return {WebGLTransformFeedback} the created transform feedback
 * @memberOf module:twgl
 */


function createTransformFeedback(gl, programInfo, bufferInfo) {
  var tf = gl.createTransformFeedback();
  gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);
  gl.useProgram(programInfo.program);
  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);
  gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null); // This is only needed because of a bug in Chrome 56. Will remove
  // when chrome fixes it.

  unbindTransformFeedbackInfo(gl, programInfo, bufferInfo);
  return tf;
}
/**
 * @typedef {Object} UniformData
 * @property {number} type The WebGL type enum for this uniform
 * @property {number} size The number of elements for this uniform
 * @property {number} blockNdx The block index this uniform appears in
 * @property {number} offset The byte offset in the block for this uniform's value
 * @memberOf module:twgl
 */

/**
 * The specification for one UniformBlockObject
 *
 * @typedef {Object} BlockSpec
 * @property {number} index The index of the block.
 * @property {number} size The size in bytes needed for the block
 * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices
 *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.
 * @property {bool} usedByVertexShader Self explanitory
 * @property {bool} usedByFragmentShader Self explanitory
 * @property {bool} used Self explanitory
 * @memberOf module:twgl
 */

/**
 * A `UniformBlockSpec` represents the data needed to create and bind
 * UniformBlockObjects for a given program
 *
 * @typedef {Object} UniformBlockSpec
 * @property {Object.<string, module:twgl.BlockSpec> blockSpecs The BlockSpec for each block by block name
 * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.
 * @memberOf module:twgl
 */

/**
 * Creates a UniformBlockSpec for the given program.
 *
 * A UniformBlockSpec represents the data needed to create and bind
 * UniformBlockObjects
 *
 * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context
 * @param {WebGLProgram} program A WebGLProgram for a successfully linked program
 * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec
 * @memberOf module:twgl/programs
 */


function createUniformBlockSpecFromProgram(gl, program) {
  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
  var uniformData = [];
  var uniformIndices = [];

  for (var ii = 0; ii < numUniforms; ++ii) {
    uniformIndices.push(ii);
    uniformData.push({});
    var uniformInfo = gl.getActiveUniform(program, ii);

    if (isBuiltIn(uniformInfo)) {
      break;
    } // REMOVE [0]?


    uniformData[ii].name = uniformInfo.name;
  }

  [["UNIFORM_TYPE", "type"], ["UNIFORM_SIZE", "size"], // num elements
  ["UNIFORM_BLOCK_INDEX", "blockNdx"], ["UNIFORM_OFFSET", "offset"]].forEach(function (pair) {
    var pname = pair[0];
    var key = pair[1];
    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function (value, ndx) {
      uniformData[ndx][key] = value;
    });
  });
  var blockSpecs = {};
  var numUniformBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);

  for (var _ii = 0; _ii < numUniformBlocks; ++_ii) {
    var name = gl.getActiveUniformBlockName(program, _ii);
    var blockSpec = {
      index: _ii,
      usedByVertexShader: gl.getActiveUniformBlockParameter(program, _ii, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),
      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, _ii, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),
      size: gl.getActiveUniformBlockParameter(program, _ii, gl.UNIFORM_BLOCK_DATA_SIZE),
      uniformIndices: gl.getActiveUniformBlockParameter(program, _ii, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)
    };
    blockSpec.used = blockSpec.usedByVertexSahder || blockSpec.usedByFragmentShader;
    blockSpecs[name] = blockSpec;
  }

  return {
    blockSpecs: blockSpecs,
    uniformData: uniformData
  };
}

var arraySuffixRE = /\[\d+\]\.$/; // better way to check?

/**
 * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values
 * and a corresponding WebGLBuffer to hold those values on the GPU
 *
 * @typedef {Object} UniformBlockInfo
 * @property {string} name The name of the block
 * @property {ArrayBuffer} array The array buffer that contains the uniform values
 * @property {Float32Array} asFloat A float view on the array buffer. This is useful
 *    inspecting the contents of the buffer in the debugger.
 * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.
 * @property {number} [offset] offset into buffer
 * @property {Object.<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.
 *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset
 *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`
 *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an
 *   `Int32Array` view, etc.
 * @memberOf module:twgl
 */

/**
 * Creates a `UniformBlockInfo` for the specified block
 *
 * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy
 * `UniformBlockInfo` is returned**. This is because when debugging GLSL
 * it is common to comment out large portions of a shader or for example set
 * the final output to a constant. When that happens blocks get optimized out.
 * If this function did not create dummy blocks your code would crash when debugging.
 *
 * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext
 * @param {WebGLProgram} program A WebGLProgram
 * @param {module:twgl.UniformBlockSpec} uinformBlockSpec. A UniformBlockSpec as returned
 *     from {@link module:twgl.createUniformBlockSpecFromProgram}.
 * @param {string} blockName The name of the block.
 * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo
 * @memberOf module:twgl/programs
 */

function createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {
  var blockSpecs = uniformBlockSpec.blockSpecs;
  var uniformData = uniformBlockSpec.uniformData;
  var blockSpec = blockSpecs[blockName];

  if (!blockSpec) {
    warn("no uniform block object named:", blockName);
    return {
      name: blockName,
      uniforms: {}
    };
  }

  var array = new ArrayBuffer(blockSpec.size);
  var buffer = gl.createBuffer();
  var uniformBufferIndex = blockSpec.index;
  gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);
  var prefix = blockName + ".";

  if (arraySuffixRE.test(prefix)) {
    prefix = prefix.replace(arraySuffixRE, ".");
  }

  var uniforms = {};
  blockSpec.uniformIndices.forEach(function (uniformNdx) {
    var data = uniformData[uniformNdx];
    var typeInfo = typeMap[data.type];
    var Type = typeInfo.Type;
    var length = data.size * typeInfo.size;
    var name = data.name;

    if (name.substr(0, prefix.length) === prefix) {
      name = name.substr(prefix.length);
    }

    uniforms[name] = new Type(array, data.offset, length / Type.BYTES_PER_ELEMENT);
  });
  return {
    name: blockName,
    array: array,
    asFloat: new Float32Array(array),
    // for debugging
    buffer: buffer,
    uniforms: uniforms
  };
}
/**
 * Creates a `UniformBlockInfo` for the specified block
 *
 * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy
 * `UniformBlockInfo` is returned**. This is because when debugging GLSL
 * it is common to comment out large portions of a shader or for example set
 * the final output to a constant. When that happens blocks get optimized out.
 * If this function did not create dummy blocks your code would crash when debugging.
 *
 * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext
 * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`
 *     as returned from {@link module:twgl.createProgramInfo}
 * @param {string} blockName The name of the block.
 * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo
 * @memberOf module:twgl/programs
 */


function createUniformBlockInfo(gl, programInfo, blockName) {
  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);
}
/**
 * Binds a unform block to the matching uniform block point.
 * Matches by blocks by name so blocks must have the same name not just the same
 * structure.
 *
 * If you have changed any values and you upload the valus into the corresponding WebGLBuffer
 * call {@link module:twgl.setUniformBlock} instead.
 *
 * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.
 * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`
 *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as
 *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.
 * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from
 *     {@link module:twgl.createUniformBlockInfo}.
 * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name
 *     no buffer is bound.
 * @memberOf module:twgl/programs
 */


function bindUniformBlock(gl, programInfo, uniformBlockInfo) {
  var uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;
  var blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];

  if (blockSpec) {
    var bufferBindIndex = blockSpec.index;
    gl.bindBufferRange(gl.UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);
    return true;
  }

  return false;
}
/**
 * Uploads the current uniform values to the corresponding WebGLBuffer
 * and binds that buffer to the program's corresponding bind point for the uniform block object.
 *
 * If you haven't changed any values and you only need to bind the uniform block object
 * call {@link module:twgl.bindUniformBlock} instead.
 *
 * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.
 * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`
 *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as
 *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.
 * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from
 *     {@link module:twgl.createUniformBlockInfo}.
 * @memberOf module:twgl/programs
 */


function setUniformBlock(gl, programInfo, uniformBlockInfo) {
  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {
    gl.bufferData(gl.UNIFORM_BUFFER, uniformBlockInfo.array, gl.DYNAMIC_DRAW);
  }
}
/**
 * Sets values of a uniform block object
 *
 * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.
 * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given
 *    type of uniform. So for example given a block like
 *
 *       uniform SomeBlock {
 *         float someFloat;
 *         vec2 someVec2;
 *         vec3 someVec3Array[2];
 *         int someInt;
 *       }
 *
 *  You can set the values of the uniform block with
 *
 *       twgl.setBlockUniforms(someBlockInfo, {
 *          someFloat: 12.3,
 *          someVec2: [1, 2],
 *          someVec3Array: [1, 2, 3, 4, 5, 6],
 *          someInt: 5,
 *       }
 *
 *  Arrays can be JavaScript arrays or typed arrays
 *
 *  Any name that doesn't match will be ignored
 * @memberOf module:twgl/programs
 */


function setBlockUniforms(uniformBlockInfo, values) {
  var uniforms = uniformBlockInfo.uniforms;

  for (var name in values) {
    var array = uniforms[name];

    if (array) {
      var value = values[name];

      if (value.length) {
        array.set(value);
      } else {
        array[0] = value;
      }
    }
  }
}
/**
 * Set uniforms and binds related textures.
 *
 * example:
 *
 *     const programInfo = createProgramInfo(
 *         gl, ["some-vs", "some-fs"]);
 *
 *     const tex1 = gl.createTexture();
 *     const tex2 = gl.createTexture();
 *
 *     ... assume we setup the textures with data ...
 *
 *     const uniforms = {
 *       u_someSampler: tex1,
 *       u_someOtherSampler: tex2,
 *       u_someColor: [1,0,0,1],
 *       u_somePosition: [0,1,1],
 *       u_someMatrix: [
 *         1,0,0,0,
 *         0,1,0,0,
 *         0,0,1,0,
 *         0,0,0,0,
 *       ],
 *     };
 *
 *     gl.useProgram(program);
 *
 * This will automatically bind the textures AND set the
 * uniforms.
 *
 *     twgl.setUniforms(programInfo, uniforms);
 *
 * For the example above it is equivalent to
 *
 *     var texUnit = 0;
 *     gl.activeTexture(gl.TEXTURE0 + texUnit);
 *     gl.bindTexture(gl.TEXTURE_2D, tex1);
 *     gl.uniform1i(u_someSamplerLocation, texUnit++);
 *     gl.activeTexture(gl.TEXTURE0 + texUnit);
 *     gl.bindTexture(gl.TEXTURE_2D, tex2);
 *     gl.uniform1i(u_someSamplerLocation, texUnit++);
 *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);
 *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);
 *     gl.uniformMatrix4fv(u_someMatrix, false, [
 *         1,0,0,0,
 *         0,1,0,0,
 *         0,0,1,0,
 *         0,0,0,0,
 *       ]);
 *
 * Note it is perfectly reasonable to call `setUniforms` multiple times. For example
 *
 *     const uniforms = {
 *       u_someSampler: tex1,
 *       u_someOtherSampler: tex2,
 *     };
 *
 *     const moreUniforms {
 *       u_someColor: [1,0,0,1],
 *       u_somePosition: [0,1,1],
 *       u_someMatrix: [
 *         1,0,0,0,
 *         0,1,0,0,
 *         0,0,1,0,
 *         0,0,0,0,
 *       ],
 *     };
 *
 *     twgl.setUniforms(programInfo, uniforms);
 *     twgl.setUniforms(programInfo, moreUniforms);
 *
 * You can also add WebGLSamplers to uniform samplers as in
 *
 *     const uniforms = {
 *       u_someSampler: {
 *         texture: someWebGLTexture,
 *         sampler: someWebGLSampler,
 *       },
 *     };
 *
 * In which case both the sampler and texture will be bound to the
 * same unit.
 *
 * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from
 *        `createUniformSetters`.
 * @param {Object.<string, ?>} values an object with values for the
 *        uniforms.
 *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example
 *
 *     const sharedUniforms = {
 *       u_fogNear: 10,
 *       u_projection: ...
 *       ...
 *     };
 *
 *     const localUniforms = {
 *       u_world: ...
 *       u_diffuseColor: ...
 *     };
 *
 *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);
 *
 *     // is the same as
 *
 *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);
 *
 *     // is the same as
 *
 *     twgl.setUniforms(programInfo, sharedUniforms);
 *     twgl.setUniforms(programInfo, localUniforms};
 *
 * @memberOf module:twgl/programs
 */


function setUniforms(setters, values) {
  // eslint-disable-line
  var actualSetters = setters.uniformSetters || setters;
  var numArgs = arguments.length;

  for (var andx = 1; andx < numArgs; ++andx) {
    var vals = arguments[andx];

    if (Array.isArray(vals)) {
      var numValues = vals.length;

      for (var ii = 0; ii < numValues; ++ii) {
        setUniforms(actualSetters, vals[ii]);
      }
    } else {
      for (var name in vals) {
        var setter = actualSetters[name];

        if (setter) {
          setter(vals[name]);
        }
      }
    }
  }
}
/**
 * Creates setter functions for all attributes of a shader
 * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.
 *
 * @see {@link module:twgl.setAttributes} for example
 * @param {WebGLProgram} program the program to create setters for.
 * @return {Object.<string, function>} an object with a setter for each attribute by name.
 * @memberOf module:twgl/programs
 */


function createAttributeSetters(gl, program) {
  var attribSetters = {};
  var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);

  for (var ii = 0; ii < numAttribs; ++ii) {
    var attribInfo = gl.getActiveAttrib(program, ii);

    if (isBuiltIn(attribInfo)) {
      continue;
    }

    var index = gl.getAttribLocation(program, attribInfo.name);
    var typeInfo = attrTypeMap[attribInfo.type];
    var setter = typeInfo.setter(gl, index, typeInfo);
    setter.location = index;
    attribSetters[attribInfo.name] = setter;
  }

  return attribSetters;
}
/**
 * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})
 *
 * Example:
 *
 *     const program = createProgramFromScripts(
 *         gl, ["some-vs", "some-fs");
 *
 *     const attribSetters = createAttributeSetters(program);
 *
 *     const positionBuffer = gl.createBuffer();
 *     const texcoordBuffer = gl.createBuffer();
 *
 *     const attribs = {
 *       a_position: {buffer: positionBuffer, numComponents: 3},
 *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},
 *     };
 *
 *     gl.useProgram(program);
 *
 * This will automatically bind the buffers AND set the
 * attributes.
 *
 *     setAttributes(attribSetters, attribs);
 *
 * Properties of attribs. For each attrib you can add
 * properties:
 *
 * *   type: the type of data in the buffer. Default = gl.FLOAT
 * *   normalize: whether or not to normalize the data. Default = false
 * *   stride: the stride. Default = 0
 * *   offset: offset into the buffer. Default = 0
 * *   divisor: the divisor for instances. Default = undefined
 *
 * For example if you had 3 value float positions, 2 value
 * float texcoord and 4 value uint8 colors you'd setup your
 * attribs like this
 *
 *     const attribs = {
 *       a_position: {buffer: positionBuffer, numComponents: 3},
 *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},
 *       a_color: {
 *         buffer: colorBuffer,
 *         numComponents: 4,
 *         type: gl.UNSIGNED_BYTE,
 *         normalize: true,
 *       },
 *     };
 *
 * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters
 * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.
 * @memberOf module:twgl/programs
 * @deprecated use {@link module:twgl.setBuffersAndAttributes}
 */


function setAttributes(setters, buffers) {
  for (var name in buffers) {
    var setter = setters[name];

    if (setter) {
      setter(buffers[name]);
    }
  }
}
/**
 * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate
 *
 * Example:
 *
 *     const programInfo = createProgramInfo(
 *         gl, ["some-vs", "some-fs");
 *
 *     const arrays = {
 *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *     };
 *
 *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);
 *
 *     gl.useProgram(programInfo.program);
 *
 * This will automatically bind the buffers AND set the
 * attributes.
 *
 *     setBuffersAndAttributes(gl, programInfo, bufferInfo);
 *
 * For the example above it is equivilent to
 *
 *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
 *     gl.enableVertexAttribArray(a_positionLocation);
 *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);
 *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);
 *     gl.enableVertexAttribArray(a_texcoordLocation);
 *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
 * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgrmaInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}
 * @param {(module:twgl.BufferInfo|module:twgl.vertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.
 *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}
 * @memberOf module:twgl/programs
 */


function setBuffersAndAttributes(gl, programInfo, buffers) {
  if (buffers.vertexArrayObject) {
    gl.bindVertexArray(buffers.vertexArrayObject);
  } else {
    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);

    if (buffers.indices) {
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);
    }
  }
}
/**
 * @typedef {Object} ProgramInfo
 * @property {WebGLProgram} program A shader program
 * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,
 * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,
 * @propetty {module:twgl.UniformBlockSpec} [uniformBlockSpace] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..
 * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks
 * @memberOf module:twgl
 */

/**
 * Creates a ProgramInfo from an existing program.
 *
 * A ProgramInfo contains
 *
 *     programInfo = {
 *        program: WebGLProgram,
 *        uniformSetters: object of setters as returned from createUniformSetters,
 *        attribSetters: object of setters as returned from createAttribSetters,
 *     }
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {WebGLProgram} program an existing WebGLProgram.
 * @return {module:twgl.ProgramInfo} The created ProgramInfo.
 * @memberOf module:twgl/programs
 */


function createProgramInfoFromProgram(gl, program) {
  var uniformSetters = createUniformSetters(gl, program);
  var attribSetters = createAttributeSetters(gl, program);
  var programInfo = {
    program: program,
    uniformSetters: uniformSetters,
    attribSetters: attribSetters
  };

  if (utils.isWebGL2(gl)) {
    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);
    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);
  }

  return programInfo;
}
/**
 * Creates a ProgramInfo from 2 sources.
 *
 * A ProgramInfo contains
 *
 *     programInfo = {
 *        program: WebGLProgram,
 *        uniformSetters: object of setters as returned from createUniformSetters,
 *        attribSetters: object of setters as returned from createAttribSetters,
 *     }
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgramInfo(gl, [vs, fs], options);
 *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {string[]} shaderSources Array of sources for the
 *        shaders or ids. The first is assumed to be the vertex shader,
 *        the second the fragment shader.
 * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations] The locations for the attributes. A parallel array to opt_attribs letting you assign locations.
 * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile
 * @memberOf module:twgl/programs
 */


function createProgramInfo(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {
  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  var good = true;
  shaderSources = shaderSources.map(function (source) {
    // Lets assume if there is no \n it's an id
    if (source.indexOf("\n") < 0) {
      var script = getElementById(source);

      if (!script) {
        progOptions.errorCallback("no element with id: " + source);
        good = false;
      } else {
        source = script.text;
      }
    }

    return source;
  });

  if (!good) {
    return null;
  }

  var program = createProgramFromSources(gl, shaderSources, progOptions);

  if (!program) {
    return null;
  }

  return createProgramInfoFromProgram(gl, program);
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.axisRotate = axisRotate;
exports.axisRotation = axisRotation;
exports.copy = copy;
exports.frustum = frustum;
exports.getAxis = getAxis;
exports.getTranslation = getTranslation;
exports.identity = identity;
exports.inverse = inverse;
exports.lookAt = lookAt;
exports.multiply = multiply;
exports.negate = negate;
exports.ortho = ortho;
exports.perspective = perspective;
exports.rotateX = rotateX;
exports.rotateY = rotateY;
exports.rotateZ = rotateZ;
exports.rotationX = rotationX;
exports.rotationY = rotationY;
exports.rotationZ = rotationZ;
exports.scale = scale;
exports.scaling = scaling;
exports.setAxis = setAxis;
exports.setDefaultType = setDefaultType;
exports.setTranslation = setTranslation;
exports.transformDirection = transformDirection;
exports.transformNormal = transformNormal;
exports.transformPoint = transformPoint;
exports.translate = translate;
exports.translation = translation;
exports.transpose = transpose;

var v3 = _interopRequireWildcard(__webpack_require__(3));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/*
 * Copyright 2015, Gregg Tavares.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Gregg Tavares. nor the names of his
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * 4x4 Matrix math math functions.
 *
 * Almost all functions take an optional `dst` argument. If it is not passed in the
 * functions will create a new matrix. In other words you can do this
 *
 *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix
 *
 * or
 *
 *     const mat = m4.create();
 *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.
 *
 * The first style is often easier but depending on where it's used it generates garbage where
 * as there is almost never allocation with the second style.
 *
 * It is always save to pass any matrix as the destination. So for example
 *
 *     const mat = m4.identity();
 *     const trans = m4.translation([1, 2, 3]);
 *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.
 *
 * @module twgl/m4
 */
var MatType = Float32Array;
var tempV3a = v3.create();
var tempV3b = v3.create();
var tempV3c = v3.create();
/**
 * A JavaScript array with 16 values or a Float32Array with 16 values.
 * When created by the library will create the default type which is `Float32Array`
 * but can be set by calling {@link module:twgl/m4.setDefaultType}.
 * @typedef {(number[]|Float32Array)} Mat4
 * @memberOf module:twgl/m4
 */

/**
 * Sets the type this library creates for a Mat4
 * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`
 * @return {constructor} previous constructor for Mat4
 */

function setDefaultType(ctor) {
  var oldType = MatType;
  MatType = ctor;
  return oldType;
}
/**
 * Negates a matrix.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} -m.
 * @memberOf module:twgl/m4
 */


function negate(m, dst) {
  dst = dst || new MatType(16);
  dst[0] = -m[0];
  dst[1] = -m[1];
  dst[2] = -m[2];
  dst[3] = -m[3];
  dst[4] = -m[4];
  dst[5] = -m[5];
  dst[6] = -m[6];
  dst[7] = -m[7];
  dst[8] = -m[8];
  dst[9] = -m[9];
  dst[10] = -m[10];
  dst[11] = -m[11];
  dst[12] = -m[12];
  dst[13] = -m[13];
  dst[14] = -m[14];
  dst[15] = -m[15];
  return dst;
}
/**
 * Copies a matrix.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/m4.Mat4} [dst] The matrix.
 * @return {module:twgl/m4.Mat4} A copy of m.
 * @memberOf module:twgl/m4
 */


function copy(m, dst) {
  dst = dst || new MatType(16);
  dst[0] = m[0];
  dst[1] = m[1];
  dst[2] = m[2];
  dst[3] = m[3];
  dst[4] = m[4];
  dst[5] = m[5];
  dst[6] = m[6];
  dst[7] = m[7];
  dst[8] = m[8];
  dst[9] = m[9];
  dst[10] = m[10];
  dst[11] = m[11];
  dst[12] = m[12];
  dst[13] = m[13];
  dst[14] = m[14];
  dst[15] = m[15];
  return dst;
}
/**
 * Creates an n-by-n identity matrix.
 *
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.
 * @memberOf module:twgl/m4
 */


function identity(dst) {
  dst = dst || new MatType(16);
  dst[0] = 1;
  dst[1] = 0;
  dst[2] = 0;
  dst[3] = 0;
  dst[4] = 0;
  dst[5] = 1;
  dst[6] = 0;
  dst[7] = 0;
  dst[8] = 0;
  dst[9] = 0;
  dst[10] = 1;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;
  return dst;
}
/**
 * Takes the transpose of a matrix.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} The transpose of m.
 * @memberOf module:twgl/m4
 */


function transpose(m, dst) {
  dst = dst || new MatType(16);

  if (dst === m) {
    var t;
    t = m[1];
    m[1] = m[4];
    m[4] = t;
    t = m[2];
    m[2] = m[8];
    m[8] = t;
    t = m[3];
    m[3] = m[12];
    m[12] = t;
    t = m[6];
    m[6] = m[9];
    m[9] = t;
    t = m[7];
    m[7] = m[13];
    m[13] = t;
    t = m[11];
    m[11] = m[14];
    m[14] = t;
    return dst;
  }

  var m00 = m[0 * 4 + 0];
  var m01 = m[0 * 4 + 1];
  var m02 = m[0 * 4 + 2];
  var m03 = m[0 * 4 + 3];
  var m10 = m[1 * 4 + 0];
  var m11 = m[1 * 4 + 1];
  var m12 = m[1 * 4 + 2];
  var m13 = m[1 * 4 + 3];
  var m20 = m[2 * 4 + 0];
  var m21 = m[2 * 4 + 1];
  var m22 = m[2 * 4 + 2];
  var m23 = m[2 * 4 + 3];
  var m30 = m[3 * 4 + 0];
  var m31 = m[3 * 4 + 1];
  var m32 = m[3 * 4 + 2];
  var m33 = m[3 * 4 + 3];
  dst[0] = m00;
  dst[1] = m10;
  dst[2] = m20;
  dst[3] = m30;
  dst[4] = m01;
  dst[5] = m11;
  dst[6] = m21;
  dst[7] = m31;
  dst[8] = m02;
  dst[9] = m12;
  dst[10] = m22;
  dst[11] = m32;
  dst[12] = m03;
  dst[13] = m13;
  dst[14] = m23;
  dst[15] = m33;
  return dst;
}
/**
 * Computes the inverse of a 4-by-4 matrix.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} The inverse of m.
 * @memberOf module:twgl/m4
 */


function inverse(m, dst) {
  dst = dst || new MatType(16);
  var m00 = m[0 * 4 + 0];
  var m01 = m[0 * 4 + 1];
  var m02 = m[0 * 4 + 2];
  var m03 = m[0 * 4 + 3];
  var m10 = m[1 * 4 + 0];
  var m11 = m[1 * 4 + 1];
  var m12 = m[1 * 4 + 2];
  var m13 = m[1 * 4 + 3];
  var m20 = m[2 * 4 + 0];
  var m21 = m[2 * 4 + 1];
  var m22 = m[2 * 4 + 2];
  var m23 = m[2 * 4 + 3];
  var m30 = m[3 * 4 + 0];
  var m31 = m[3 * 4 + 1];
  var m32 = m[3 * 4 + 2];
  var m33 = m[3 * 4 + 3];
  var tmp_0 = m22 * m33;
  var tmp_1 = m32 * m23;
  var tmp_2 = m12 * m33;
  var tmp_3 = m32 * m13;
  var tmp_4 = m12 * m23;
  var tmp_5 = m22 * m13;
  var tmp_6 = m02 * m33;
  var tmp_7 = m32 * m03;
  var tmp_8 = m02 * m23;
  var tmp_9 = m22 * m03;
  var tmp_10 = m02 * m13;
  var tmp_11 = m12 * m03;
  var tmp_12 = m20 * m31;
  var tmp_13 = m30 * m21;
  var tmp_14 = m10 * m31;
  var tmp_15 = m30 * m11;
  var tmp_16 = m10 * m21;
  var tmp_17 = m20 * m11;
  var tmp_18 = m00 * m31;
  var tmp_19 = m30 * m01;
  var tmp_20 = m00 * m21;
  var tmp_21 = m20 * m01;
  var tmp_22 = m00 * m11;
  var tmp_23 = m10 * m01;
  var t0 = tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31 - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);
  var t1 = tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31 - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);
  var t2 = tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31 - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);
  var t3 = tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21 - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);
  var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);
  dst[0] = d * t0;
  dst[1] = d * t1;
  dst[2] = d * t2;
  dst[3] = d * t3;
  dst[4] = d * (tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30 - (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));
  dst[5] = d * (tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30 - (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));
  dst[6] = d * (tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30 - (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));
  dst[7] = d * (tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20 - (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));
  dst[8] = d * (tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33 - (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));
  dst[9] = d * (tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33 - (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));
  dst[10] = d * (tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33 - (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));
  dst[11] = d * (tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23 - (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));
  dst[12] = d * (tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12 - (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));
  dst[13] = d * (tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22 - (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));
  dst[14] = d * (tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02 - (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));
  dst[15] = d * (tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12 - (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));
  return dst;
}
/**
 * Multiplies two 4-by-4 matrices with a on the left and b on the right
 * @param {module:twgl/m4.Mat4} a The matrix on the left.
 * @param {module:twgl/m4.Mat4} b The matrix on the right.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} The matrix product of a and b.
 * @memberOf module:twgl/m4
 */


function multiply(a, b, dst) {
  dst = dst || new MatType(16);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4 + 0];
  var a11 = a[4 + 1];
  var a12 = a[4 + 2];
  var a13 = a[4 + 3];
  var a20 = a[8 + 0];
  var a21 = a[8 + 1];
  var a22 = a[8 + 2];
  var a23 = a[8 + 3];
  var a30 = a[12 + 0];
  var a31 = a[12 + 1];
  var a32 = a[12 + 2];
  var a33 = a[12 + 3];
  var b00 = b[0];
  var b01 = b[1];
  var b02 = b[2];
  var b03 = b[3];
  var b10 = b[4 + 0];
  var b11 = b[4 + 1];
  var b12 = b[4 + 2];
  var b13 = b[4 + 3];
  var b20 = b[8 + 0];
  var b21 = b[8 + 1];
  var b22 = b[8 + 2];
  var b23 = b[8 + 3];
  var b30 = b[12 + 0];
  var b31 = b[12 + 1];
  var b32 = b[12 + 2];
  var b33 = b[12 + 3];
  dst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;
  dst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;
  dst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;
  dst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;
  dst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;
  dst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;
  dst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;
  dst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;
  dst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;
  dst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;
  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;
  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;
  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;
  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;
  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;
  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;
  return dst;
}
/**
 * Sets the translation component of a 4-by-4 matrix to the given
 * vector.
 * @param {module:twgl/m4.Mat4} a The matrix.
 * @param {Vec3} v The vector.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} a once modified.
 * @memberOf module:twgl/m4
 */


function setTranslation(a, v, dst) {
  dst = dst || identity();

  if (a !== dst) {
    dst[0] = a[0];
    dst[1] = a[1];
    dst[2] = a[2];
    dst[3] = a[3];
    dst[4] = a[4];
    dst[5] = a[5];
    dst[6] = a[6];
    dst[7] = a[7];
    dst[8] = a[8];
    dst[9] = a[9];
    dst[10] = a[10];
    dst[11] = a[11];
  }

  dst[12] = v[0];
  dst[13] = v[1];
  dst[14] = v[2];
  dst[15] = 1;
  return dst;
}
/**
 * Returns the translation component of a 4-by-4 matrix as a vector with 3
 * entries.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {Vec3} [dst] vector..
 * @return {Vec3} The translation component of m.
 * @memberOf module:twgl/m4
 */


function getTranslation(m, dst) {
  dst = dst || v3.create();
  dst[0] = m[12];
  dst[1] = m[13];
  dst[2] = m[14];
  return dst;
}
/**
 * Returns an axis of a 4x4 matrix as a vector with 3 entries
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {number} axis The axis 0 = x, 1 = y, 2 = z;
 * @return {Vec3} [dst] vector.
 * @return {Vec3} The axis component of m.
 * @memberOf module:twgl/m4
 */


function getAxis(m, axis, dst) {
  dst = dst || v3.create();
  var off = axis * 4;
  dst[0] = m[off + 0];
  dst[1] = m[off + 1];
  dst[2] = m[off + 2];
  return dst;
}
/**
 * Sets an axis of a 4x4 matrix as a vector with 3 entries
 * @param {Vec3} v the axis vector
 * @param {number} axis The axis  0 = x, 1 = y, 2 = z;
 * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If none a new one is created
 * @return {module:twgl/m4.Mat4} dst
 * @memberOf module:twgl/m4
 */


function setAxis(a, v, axis, dst) {
  if (dst !== a) {
    dst = copy(a, dst);
  }

  var off = axis * 4;
  dst[off + 0] = v[0];
  dst[off + 1] = v[1];
  dst[off + 2] = v[2];
  return dst;
}
/**
 * Computes a 4-by-4 perspective transformation matrix given the angular height
 * of the frustum, the aspect ratio, and the near and far clipping planes.  The
 * arguments define a frustum extending in the negative z direction.  The given
 * angle is the vertical angle of the frustum, and the horizontal angle is
 * determined to produce the given aspect ratio.  The arguments near and far are
 * the distances to the near and far clipping planes.  Note that near and far
 * are not z coordinates, but rather they are distances along the negative
 * z-axis.  The matrix generated sends the viewing frustum to the unit box.
 * We assume a unit box extending from -1 to 1 in the x and y dimensions and
 * from 0 to 1 in the z dimension.
 * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).
 * @param {number} aspect The aspect ratio width / height.
 * @param {number} zNear The depth (negative z coordinate)
 *     of the near clipping plane.
 * @param {number} zFar The depth (negative z coordinate)
 *     of the far clipping plane.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} The perspective matrix.
 * @memberOf module:twgl/m4
 */


function perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {
  dst = dst || new MatType(16);
  var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);
  var rangeInv = 1.0 / (zNear - zFar);
  dst[0] = f / aspect;
  dst[1] = 0;
  dst[2] = 0;
  dst[3] = 0;
  dst[4] = 0;
  dst[5] = f;
  dst[6] = 0;
  dst[7] = 0;
  dst[8] = 0;
  dst[9] = 0;
  dst[10] = (zNear + zFar) * rangeInv;
  dst[11] = -1;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = zNear * zFar * rangeInv * 2;
  dst[15] = 0;
  return dst;
}
/**
 * Computes a 4-by-4 othogonal transformation matrix given the left, right,
 * bottom, and top dimensions of the near clipping plane as well as the
 * near and far clipping plane distances.
 * @param {number} left Left side of the near clipping plane viewport.
 * @param {number} right Right side of the near clipping plane viewport.
 * @param {number} top Top of the near clipping plane viewport.
 * @param {number} bottom Bottom of the near clipping plane viewport.
 * @param {number} near The depth (negative z coordinate)
 *     of the near clipping plane.
 * @param {number} far The depth (negative z coordinate)
 *     of the far clipping plane.
 * @param {module:twgl/m4.Mat4} [dst] Output matrix.
 * @return {module:twgl/m4.Mat4} The perspective matrix.
 * @memberOf module:twgl/m4
 */


function ortho(left, right, bottom, top, near, far, dst) {
  dst = dst || new MatType(16);
  dst[0] = 2 / (right - left);
  dst[1] = 0;
  dst[2] = 0;
  dst[3] = 0;
  dst[4] = 0;
  dst[5] = 2 / (top - bottom);
  dst[6] = 0;
  dst[7] = 0;
  dst[8] = 0;
  dst[9] = 0;
  dst[10] = 2 / (near - far);
  dst[11] = 0;
  dst[12] = (right + left) / (left - right);
  dst[13] = (top + bottom) / (bottom - top);
  dst[14] = (far + near) / (near - far);
  dst[15] = 1;
  return dst;
}
/**
 * Computes a 4-by-4 perspective transformation matrix given the left, right,
 * top, bottom, near and far clipping planes. The arguments define a frustum
 * extending in the negative z direction. The arguments near and far are the
 * distances to the near and far clipping planes. Note that near and far are not
 * z coordinates, but rather they are distances along the negative z-axis. The
 * matrix generated sends the viewing frustum to the unit box. We assume a unit
 * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z
 * dimension.
 * @param {number} left The x coordinate of the left plane of the box.
 * @param {number} right The x coordinate of the right plane of the box.
 * @param {number} bottom The y coordinate of the bottom plane of the box.
 * @param {number} top The y coordinate of the right plane of the box.
 * @param {number} near The negative z coordinate of the near plane of the box.
 * @param {number} far The negative z coordinate of the far plane of the box.
 * @param {module:twgl/m4.Mat4} [dst] Output matrix.
 * @return {module:twgl/m4.Mat4} The perspective projection matrix.
 * @memberOf module:twgl/m4
 */


function frustum(left, right, bottom, top, near, far, dst) {
  dst = dst || new MatType(16);
  var dx = right - left;
  var dy = top - bottom;
  var dz = near - far;
  dst[0] = 2 * near / dx;
  dst[1] = 0;
  dst[2] = 0;
  dst[3] = 0;
  dst[4] = 0;
  dst[5] = 2 * near / dy;
  dst[6] = 0;
  dst[7] = 0;
  dst[8] = (left + right) / dx;
  dst[9] = (top + bottom) / dy;
  dst[10] = far / dz;
  dst[11] = -1;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = near * far / dz;
  dst[15] = 0;
  return dst;
}
/**
 * Computes a 4-by-4 look-at transformation.
 *
 * This is a matrix which positions the camera itself. If you want
 * a view matrix (a matrix which moves things in front of the camera)
 * take the inverse of this.
 *
 * @param {Vec3} eye The position of the eye.
 * @param {Vec3} target The position meant to be viewed.
 * @param {Vec3} up A vector pointing up.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} The look-at matrix.
 * @memberOf module:twgl/m4
 */


function lookAt(eye, target, up, dst) {
  dst = dst || new MatType(16);
  var xAxis = tempV3a;
  var yAxis = tempV3b;
  var zAxis = tempV3c;
  v3.normalize(v3.subtract(eye, target, zAxis), zAxis);
  v3.normalize(v3.cross(up, zAxis, xAxis), xAxis);
  v3.normalize(v3.cross(zAxis, xAxis, yAxis), yAxis);
  dst[0] = xAxis[0];
  dst[1] = xAxis[1];
  dst[2] = xAxis[2];
  dst[3] = 0;
  dst[4] = yAxis[0];
  dst[5] = yAxis[1];
  dst[6] = yAxis[2];
  dst[7] = 0;
  dst[8] = zAxis[0];
  dst[9] = zAxis[1];
  dst[10] = zAxis[2];
  dst[11] = 0;
  dst[12] = eye[0];
  dst[13] = eye[1];
  dst[14] = eye[2];
  dst[15] = 1;
  return dst;
}
/**
 * Creates a 4-by-4 matrix which translates by the given vector v.
 * @param {Vec3} v The vector by
 *     which to translate.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} The translation matrix.
 * @memberOf module:twgl/m4
 */


function translation(v, dst) {
  dst = dst || new MatType(16);
  dst[0] = 1;
  dst[1] = 0;
  dst[2] = 0;
  dst[3] = 0;
  dst[4] = 0;
  dst[5] = 1;
  dst[6] = 0;
  dst[7] = 0;
  dst[8] = 0;
  dst[9] = 0;
  dst[10] = 1;
  dst[11] = 0;
  dst[12] = v[0];
  dst[13] = v[1];
  dst[14] = v[2];
  dst[15] = 1;
  return dst;
}
/**
 * Modifies the given 4-by-4 matrix by translation by the given vector v.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {Vec3} v The vector by
 *     which to translate.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} m once modified.
 * @memberOf module:twgl/m4
 */


function translate(m, v, dst) {
  dst = dst || new MatType(16);
  var v0 = v[0];
  var v1 = v[1];
  var v2 = v[2];
  var m00 = m[0];
  var m01 = m[1];
  var m02 = m[2];
  var m03 = m[3];
  var m10 = m[1 * 4 + 0];
  var m11 = m[1 * 4 + 1];
  var m12 = m[1 * 4 + 2];
  var m13 = m[1 * 4 + 3];
  var m20 = m[2 * 4 + 0];
  var m21 = m[2 * 4 + 1];
  var m22 = m[2 * 4 + 2];
  var m23 = m[2 * 4 + 3];
  var m30 = m[3 * 4 + 0];
  var m31 = m[3 * 4 + 1];
  var m32 = m[3 * 4 + 2];
  var m33 = m[3 * 4 + 3];

  if (m !== dst) {
    dst[0] = m00;
    dst[1] = m01;
    dst[2] = m02;
    dst[3] = m03;
    dst[4] = m10;
    dst[5] = m11;
    dst[6] = m12;
    dst[7] = m13;
    dst[8] = m20;
    dst[9] = m21;
    dst[10] = m22;
    dst[11] = m23;
  }

  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;
  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;
  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;
  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;
  return dst;
}
/**
 * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} The rotation matrix.
 * @memberOf module:twgl/m4
 */


function rotationX(angleInRadians, dst) {
  dst = dst || new MatType(16);
  var c = Math.cos(angleInRadians);
  var s = Math.sin(angleInRadians);
  dst[0] = 1;
  dst[1] = 0;
  dst[2] = 0;
  dst[3] = 0;
  dst[4] = 0;
  dst[5] = c;
  dst[6] = s;
  dst[7] = 0;
  dst[8] = 0;
  dst[9] = -s;
  dst[10] = c;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;
  return dst;
}
/**
 * Modifies the given 4-by-4 matrix by a rotation around the x-axis by the given
 * angle.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} m once modified.
 * @memberOf module:twgl/m4
 */


function rotateX(m, angleInRadians, dst) {
  dst = dst || new MatType(16);
  var m10 = m[4];
  var m11 = m[5];
  var m12 = m[6];
  var m13 = m[7];
  var m20 = m[8];
  var m21 = m[9];
  var m22 = m[10];
  var m23 = m[11];
  var c = Math.cos(angleInRadians);
  var s = Math.sin(angleInRadians);
  dst[4] = c * m10 + s * m20;
  dst[5] = c * m11 + s * m21;
  dst[6] = c * m12 + s * m22;
  dst[7] = c * m13 + s * m23;
  dst[8] = c * m20 - s * m10;
  dst[9] = c * m21 - s * m11;
  dst[10] = c * m22 - s * m12;
  dst[11] = c * m23 - s * m13;

  if (m !== dst) {
    dst[0] = m[0];
    dst[1] = m[1];
    dst[2] = m[2];
    dst[3] = m[3];
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}
/**
 * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} The rotation matrix.
 * @memberOf module:twgl/m4
 */


function rotationY(angleInRadians, dst) {
  dst = dst || new MatType(16);
  var c = Math.cos(angleInRadians);
  var s = Math.sin(angleInRadians);
  dst[0] = c;
  dst[1] = 0;
  dst[2] = -s;
  dst[3] = 0;
  dst[4] = 0;
  dst[5] = 1;
  dst[6] = 0;
  dst[7] = 0;
  dst[8] = s;
  dst[9] = 0;
  dst[10] = c;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;
  return dst;
}
/**
 * Modifies the given 4-by-4 matrix by a rotation around the y-axis by the given
 * angle.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} m once modified.
 * @memberOf module:twgl/m4
 */


function rotateY(m, angleInRadians, dst) {
  dst = dst || new MatType(16);
  var m00 = m[0 * 4 + 0];
  var m01 = m[0 * 4 + 1];
  var m02 = m[0 * 4 + 2];
  var m03 = m[0 * 4 + 3];
  var m20 = m[2 * 4 + 0];
  var m21 = m[2 * 4 + 1];
  var m22 = m[2 * 4 + 2];
  var m23 = m[2 * 4 + 3];
  var c = Math.cos(angleInRadians);
  var s = Math.sin(angleInRadians);
  dst[0] = c * m00 - s * m20;
  dst[1] = c * m01 - s * m21;
  dst[2] = c * m02 - s * m22;
  dst[3] = c * m03 - s * m23;
  dst[8] = c * m20 + s * m00;
  dst[9] = c * m21 + s * m01;
  dst[10] = c * m22 + s * m02;
  dst[11] = c * m23 + s * m03;

  if (m !== dst) {
    dst[4] = m[4];
    dst[5] = m[5];
    dst[6] = m[6];
    dst[7] = m[7];
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}
/**
 * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} The rotation matrix.
 * @memberOf module:twgl/m4
 */


function rotationZ(angleInRadians, dst) {
  dst = dst || new MatType(16);
  var c = Math.cos(angleInRadians);
  var s = Math.sin(angleInRadians);
  dst[0] = c;
  dst[1] = s;
  dst[2] = 0;
  dst[3] = 0;
  dst[4] = -s;
  dst[5] = c;
  dst[6] = 0;
  dst[7] = 0;
  dst[8] = 0;
  dst[9] = 0;
  dst[10] = 1;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;
  return dst;
}
/**
 * Modifies the given 4-by-4 matrix by a rotation around the z-axis by the given
 * angle.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} m once modified.
 * @memberOf module:twgl/m4
 */


function rotateZ(m, angleInRadians, dst) {
  dst = dst || new MatType(16);
  var m00 = m[0 * 4 + 0];
  var m01 = m[0 * 4 + 1];
  var m02 = m[0 * 4 + 2];
  var m03 = m[0 * 4 + 3];
  var m10 = m[1 * 4 + 0];
  var m11 = m[1 * 4 + 1];
  var m12 = m[1 * 4 + 2];
  var m13 = m[1 * 4 + 3];
  var c = Math.cos(angleInRadians);
  var s = Math.sin(angleInRadians);
  dst[0] = c * m00 + s * m10;
  dst[1] = c * m01 + s * m11;
  dst[2] = c * m02 + s * m12;
  dst[3] = c * m03 + s * m13;
  dst[4] = c * m10 - s * m00;
  dst[5] = c * m11 - s * m01;
  dst[6] = c * m12 - s * m02;
  dst[7] = c * m13 - s * m03;

  if (m !== dst) {
    dst[8] = m[8];
    dst[9] = m[9];
    dst[10] = m[10];
    dst[11] = m[11];
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}
/**
 * Creates a 4-by-4 matrix which rotates around the given axis by the given
 * angle.
 * @param {Vec3} axis The axis
 *     about which to rotate.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians
 *     around the axis.
 * @memberOf module:twgl/m4
 */


function axisRotation(axis, angleInRadians, dst) {
  dst = dst || new MatType(16);
  var x = axis[0];
  var y = axis[1];
  var z = axis[2];
  var n = Math.sqrt(x * x + y * y + z * z);
  x /= n;
  y /= n;
  z /= n;
  var xx = x * x;
  var yy = y * y;
  var zz = z * z;
  var c = Math.cos(angleInRadians);
  var s = Math.sin(angleInRadians);
  var oneMinusCosine = 1 - c;
  dst[0] = xx + (1 - xx) * c;
  dst[1] = x * y * oneMinusCosine + z * s;
  dst[2] = x * z * oneMinusCosine - y * s;
  dst[3] = 0;
  dst[4] = x * y * oneMinusCosine - z * s;
  dst[5] = yy + (1 - yy) * c;
  dst[6] = y * z * oneMinusCosine + x * s;
  dst[7] = 0;
  dst[8] = x * z * oneMinusCosine + y * s;
  dst[9] = y * z * oneMinusCosine - x * s;
  dst[10] = zz + (1 - zz) * c;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;
  return dst;
}
/**
 * Modifies the given 4-by-4 matrix by rotation around the given axis by the
 * given angle.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {Vec3} axis The axis
 *     about which to rotate.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} m once modified.
 * @memberOf module:twgl/m4
 */


function axisRotate(m, axis, angleInRadians, dst) {
  dst = dst || new MatType(16);
  var x = axis[0];
  var y = axis[1];
  var z = axis[2];
  var n = Math.sqrt(x * x + y * y + z * z);
  x /= n;
  y /= n;
  z /= n;
  var xx = x * x;
  var yy = y * y;
  var zz = z * z;
  var c = Math.cos(angleInRadians);
  var s = Math.sin(angleInRadians);
  var oneMinusCosine = 1 - c;
  var r00 = xx + (1 - xx) * c;
  var r01 = x * y * oneMinusCosine + z * s;
  var r02 = x * z * oneMinusCosine - y * s;
  var r10 = x * y * oneMinusCosine - z * s;
  var r11 = yy + (1 - yy) * c;
  var r12 = y * z * oneMinusCosine + x * s;
  var r20 = x * z * oneMinusCosine + y * s;
  var r21 = y * z * oneMinusCosine - x * s;
  var r22 = zz + (1 - zz) * c;
  var m00 = m[0];
  var m01 = m[1];
  var m02 = m[2];
  var m03 = m[3];
  var m10 = m[4];
  var m11 = m[5];
  var m12 = m[6];
  var m13 = m[7];
  var m20 = m[8];
  var m21 = m[9];
  var m22 = m[10];
  var m23 = m[11];
  dst[0] = r00 * m00 + r01 * m10 + r02 * m20;
  dst[1] = r00 * m01 + r01 * m11 + r02 * m21;
  dst[2] = r00 * m02 + r01 * m12 + r02 * m22;
  dst[3] = r00 * m03 + r01 * m13 + r02 * m23;
  dst[4] = r10 * m00 + r11 * m10 + r12 * m20;
  dst[5] = r10 * m01 + r11 * m11 + r12 * m21;
  dst[6] = r10 * m02 + r11 * m12 + r12 * m22;
  dst[7] = r10 * m03 + r11 * m13 + r12 * m23;
  dst[8] = r20 * m00 + r21 * m10 + r22 * m20;
  dst[9] = r20 * m01 + r21 * m11 + r22 * m21;
  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;
  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;

  if (m !== dst) {
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}
/**
 * Creates a 4-by-4 matrix which scales in each dimension by an amount given by
 * the corresponding entry in the given vector; assumes the vector has three
 * entries.
 * @param {Vec3} v A vector of
 *     three entries specifying the factor by which to scale in each dimension.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} The scaling matrix.
 * @memberOf module:twgl/m4
 */


function scaling(v, dst) {
  dst = dst || new MatType(16);
  dst[0] = v[0];
  dst[1] = 0;
  dst[2] = 0;
  dst[3] = 0;
  dst[4] = 0;
  dst[5] = v[1];
  dst[6] = 0;
  dst[7] = 0;
  dst[8] = 0;
  dst[9] = 0;
  dst[10] = v[2];
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;
  return dst;
}
/**
 * Modifies the given 4-by-4 matrix, scaling in each dimension by an amount
 * given by the corresponding entry in the given vector; assumes the vector has
 * three entries.
 * @param {module:twgl/m4.Mat4} m The matrix to be modified.
 * @param {Vec3} v A vector of three entries specifying the
 *     factor by which to scale in each dimension.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
 * @return {module:twgl/m4.Mat4} m once modified.
 * @memberOf module:twgl/m4
 */


function scale(m, v, dst) {
  dst = dst || new MatType(16);
  var v0 = v[0];
  var v1 = v[1];
  var v2 = v[2];
  dst[0] = v0 * m[0 * 4 + 0];
  dst[1] = v0 * m[0 * 4 + 1];
  dst[2] = v0 * m[0 * 4 + 2];
  dst[3] = v0 * m[0 * 4 + 3];
  dst[4] = v1 * m[1 * 4 + 0];
  dst[5] = v1 * m[1 * 4 + 1];
  dst[6] = v1 * m[1 * 4 + 2];
  dst[7] = v1 * m[1 * 4 + 3];
  dst[8] = v2 * m[2 * 4 + 0];
  dst[9] = v2 * m[2 * 4 + 1];
  dst[10] = v2 * m[2 * 4 + 2];
  dst[11] = v2 * m[2 * 4 + 3];

  if (m !== dst) {
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}
/**
 * Takes a 4-by-4 matrix and a vector with 3 entries,
 * interprets the vector as a point, transforms that point by the matrix, and
 * returns the result as a vector with 3 entries.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {Vec3} v The point.
 * @param {Vec3} dst optional vec3 to store result
 * @return {Vec3} dst or new vec3 if not provided
 * @memberOf module:twgl/m4
 */


function transformPoint(m, v, dst) {
  dst = dst || v3.create();
  var v0 = v[0];
  var v1 = v[1];
  var v2 = v[2];
  var d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];
  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;
  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;
  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;
  return dst;
}
/**
 * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a
 * direction, transforms that direction by the matrix, and returns the result;
 * assumes the transformation of 3-dimensional space represented by the matrix
 * is parallel-preserving, i.e. any combination of rotation, scaling and
 * translation, but not a perspective distortion. Returns a vector with 3
 * entries.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {Vec3} v The direction.
 * @param {Vec3} dst optional Vec3 to store result
 * @return {Vec3} dst or new Vec3 if not provided
 * @memberOf module:twgl/m4
 */


function transformDirection(m, v, dst) {
  dst = dst || v3.create();
  var v0 = v[0];
  var v1 = v[1];
  var v2 = v[2];
  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];
  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];
  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];
  return dst;
}
/**
 * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector
 * as a normal to a surface, and computes a vector which is normal upon
 * transforming that surface by the matrix. The effect of this function is the
 * same as transforming v (as a direction) by the inverse-transpose of m.  This
 * function assumes the transformation of 3-dimensional space represented by the
 * matrix is parallel-preserving, i.e. any combination of rotation, scaling and
 * translation, but not a perspective distortion.  Returns a vector with 3
 * entries.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {Vec3} v The normal.
 * @param {Vec3} [dst] The direction.
 * @return {Vec3} The transformed direction.
 * @memberOf module:twgl/m4
 */


function transformNormal(m, v, dst) {
  dst = dst || v3.create();
  var mi = inverse(m);
  var v0 = v[0];
  var v1 = v[1];
  var v2 = v[2];
  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];
  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];
  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];
  return dst;
}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.createAttribsFromArrays = createAttribsFromArrays;
exports.createBuffersFromArrays = createBuffersFromArrays;
exports.createBufferFromArray = createBufferFromArray;
exports.createBufferFromTypedArray = createBufferFromTypedArray;
exports.createBufferInfoFromArrays = createBufferInfoFromArrays;
exports.setAttribInfoBufferFromArray = setAttribInfoBufferFromArray;
exports.setAttributePrefix = setAttributePrefix;
exports.setAttributeDefaults_ = setDefaults;
exports.getNumComponents_ = getNumComponents;
exports.getArray_ = getArray;

var typedArrays = _interopRequireWildcard(__webpack_require__(1));

var helper = _interopRequireWildcard(__webpack_require__(0));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/*
 * Copyright 2015, Gregg Tavares.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Gregg Tavares. nor the names of his
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Low level attribute and buffer related functions
 *
 * You should generally not need to use these functions. They are provided
 * for those cases where you're doing something out of the ordinary
 * and you need lower level access.
 *
 * For backward compatibily they are available at both `twgl.attributes` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/attributes
 */
// make sure we don't see a global gl
var gl = undefined; // eslint-disable-line

var defaults = {
  attribPrefix: ""
};
/**
 * Sets the default attrib prefix
 *
 * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`
 * as it makes it clear where they came from. But, when building geometry I prefer using unprefixed names.
 *
 * In otherwords I'll create arrays of geometry like this
 *
 *     var arrays = {
 *       position: ...
 *       normal: ...
 *       texcoord: ...
 *     };
 *
 * But need those mapped to attributes and my attributes start with `a_`.
 *
 * @deprecated see {@link module:twgl.setDefaults}
 * @param {string} prefix prefix for attribs
 * @memberOf module:twgl/attributes
 */

function setAttributePrefix(prefix) {
  defaults.attribPrefix = prefix;
}

function setDefaults(newDefaults) {
  helper.copyExistingProperties(newDefaults, defaults);
}

function setBufferFromTypedArray(gl, type, buffer, array, drawType) {
  gl.bindBuffer(type, buffer);
  gl.bufferData(type, array, drawType || gl.STATIC_DRAW);
}
/**
 * Given typed array creates a WebGLBuffer and copies the typed array
 * into it.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken
 * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.
 * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.
 * @return {WebGLBuffer} the created WebGLBuffer
 * @memberOf module:twgl/attributes
 */


function createBufferFromTypedArray(gl, typedArray, type, drawType) {
  if (helper.isBuffer(gl, typedArray)) {
    return typedArray;
  }

  type = type || gl.ARRAY_BUFFER;
  var buffer = gl.createBuffer();
  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);
  return buffer;
}

function isIndices(name) {
  return name === "indices";
} // This is really just a guess. Though I can't really imagine using
// anything else? Maybe for some compression?


function getNormalizationForTypedArray(typedArray) {
  if (typedArray instanceof Int8Array) {
    return true;
  } // eslint-disable-line


  if (typedArray instanceof Uint8Array) {
    return true;
  } // eslint-disable-line


  return false;
} // This is really just a guess. Though I can't really imagine using
// anything else? Maybe for some compression?


function getNormalizationForTypedArrayType(typedArrayType) {
  if (typedArrayType === Int8Array) {
    return true;
  } // eslint-disable-line


  if (typedArrayType === Uint8Array) {
    return true;
  } // eslint-disable-line


  return false;
}

function getArray(array) {
  return array.length ? array : array.data;
}

var texcoordRE = /coord|texture/i;
var colorRE = /color|colour/i;

function guessNumComponentsFromName(name, length) {
  var numComponents;

  if (texcoordRE.test(name)) {
    numComponents = 2;
  } else if (colorRE.test(name)) {
    numComponents = 4;
  } else {
    numComponents = 3; // position, normals, indices ...
  }

  if (length % numComponents > 0) {
    throw "Can not guess numComponents for attribute '" + name + "'. Tried " + numComponents + " but " + length + " values is not evenly divisible by " + numComponents + ". You should specify it.";
  }

  return numComponents;
}

function getNumComponents(array, arrayName) {
  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);
}

function makeTypedArray(array, name) {
  if (typedArrays.isArrayBuffer(array)) {
    return array;
  }

  if (typedArrays.isArrayBuffer(array.data)) {
    return array.data;
  }

  if (Array.isArray(array)) {
    array = {
      data: array
    };
  }

  var Type = array.type;

  if (!Type) {
    if (isIndices(name)) {
      Type = Uint16Array;
    } else {
      Type = Float32Array;
    }
  }

  return new Type(array.data);
}
/**
 * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer
 * for the attribute.
 *
 * @typedef {Object} AttribInfo
 * @property {number} [numComponents] the number of components for this attribute.
 * @property {number} [size] synonym for `numComponents`.
 * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`
 * @property {boolean} [normalize] whether or not to normalize the data. Default = false
 * @property {number} [offset] offset into buffer in bytes. Default = 0
 * @property {number} [stride] the stride in bytes per element. Default = 0
 * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor
 *    where as anything else = do call it with this value
 * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute
 * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW
 * @memberOf module:twgl
 */

/**
 * Use this type of array spec when TWGL can't guess the type or number of compoments of an array
 * @typedef {Object} FullArraySpec
 * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.
 * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.
 *    If `coord` is in the name assumes `numComponents = 2`.
 *    If `color` is in the name assumes `numComponents = 4`.
 *    otherwise assumes `numComponents = 3`
 * @property {constructor} type The type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).
 * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.
 * @property {number} [size] synonym for `numComponents`.
 * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.
 * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0
 * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0
 * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor
 *    where as anything else = do call it with this value
 * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.
 * @property {string} [name] synonym for `attrib`.
 * @property {string} [attribName] synonym for `attrib`.
 * @memberOf module:twgl
 */

/**
 * An individual array in {@link module:twgl.Arrays}
 *
 * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`
 * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will
 * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.
 *
 * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec
 * @memberOf module:twgl
 */

/**
 * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your
 * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.
 *
 *     Bare JavaScript Arrays
 *
 *         var arrays = {
 *            position: [-1, 1, 0],
 *            normal: [0, 1, 0],
 *            ...
 *         }
 *
 *     Bare TypedArrays
 *
 *         var arrays = {
 *            position: new Float32Array([-1, 1, 0]),
 *            color: new Uint8Array([255, 128, 64, 255]),
 *            ...
 *         }
 *
 * *   Will guess at `numComponents` if not specified based on name.
 *
 *     If `coord` is in the name assumes `numComponents = 2`
 *
 *     If `color` is in the name assumes `numComponents = 4`
 *
 *     otherwise assumes `numComponents = 3`
 *
 * Objects with various fields. See {@link module:twgl.FullArraySpec}.
 *
 *     var arrays = {
 *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
 *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
 *     };
 *
 * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays
 * @memberOf module:twgl
 */

/**
 * Creates a set of attribute data and WebGLBuffers from set of arrays
 *
 * Given
 *
 *      var arrays = {
 *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
 *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },
 *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
 *      };
 *
 * returns something like
 *
 *      var attribs = {
 *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
 *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
 *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
 *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },
 *      };
 *
 * notes:
 *
 * *   Arrays can take various forms
 *
 *     Bare JavaScript Arrays
 *
 *         var arrays = {
 *            position: [-1, 1, 0],
 *            normal: [0, 1, 0],
 *            ...
 *         }
 *
 *     Bare TypedArrays
 *
 *         var arrays = {
 *            position: new Float32Array([-1, 1, 0]),
 *            color: new Uint8Array([255, 128, 64, 255]),
 *            ...
 *         }
 *
 * *   Will guess at `numComponents` if not specified based on name.
 *
 *     If `coord` is in the name assumes `numComponents = 2`
 *
 *     If `color` is in the name assumes `numComponents = 4`
 *
 *     otherwise assumes `numComponents = 3`
 *
 * @param {WebGLRenderingContext} gl The webgl rendering context.
 * @param {module:twgl.Arrays} arrays The arrays
 * @return {Object.<string, module:twgl.AttribInfo>} the attribs
 * @memberOf module:twgl/attributes
 */


function createAttribsFromArrays(gl, arrays) {
  var attribs = {};
  Object.keys(arrays).forEach(function (arrayName) {
    if (!isIndices(arrayName)) {
      var array = arrays[arrayName];
      var attribName = array.attrib || array.name || array.attribName || defaults.attribPrefix + arrayName;
      var buffer;
      var type;
      var normalization;
      var numComponents;
      var numValues;

      if (typeof array === "number" || typeof array.data === "number") {
        numValues = array.data || array;
        var arrayType = array.type || Float32Array;
        var numBytes = numValues * arrayType.BYTES_PER_ELEMENT;
        type = typedArrays.getGLTypeForTypedArrayType(arrayType);
        normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);
        numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);
        buffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
        gl.bufferData(gl.ARRAY_BUFFER, numBytes, array.drawType || gl.STATIC_DRAW);
      } else {
        var typedArray = makeTypedArray(array, arrayName);
        buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);
        type = typedArrays.getGLTypeForTypedArray(typedArray);
        normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);
        numComponents = getNumComponents(array, arrayName);
        numValues = typedArray.length;
      }

      attribs[attribName] = {
        buffer: buffer,
        numComponents: numComponents,
        type: type,
        normalize: normalization,
        stride: array.stride || 0,
        offset: array.offset || 0,
        divisor: array.divisor === undefined ? undefined : array.divisor,
        drawType: array.drawType
      };
    }
  });
  gl.bindBuffer(gl.ARRAY_BUFFER, null);
  return attribs;
}
/**
 * Sets the contents of a buffer attached to an attribInfo
 *
 * This is helper function to dynamically update a buffer.
 *
 * Let's say you make a bufferInfo
 *
 *     var arrays = {
 *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),
 *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),
 *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),
 *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),
 *     };
 *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);
 *
 *  And you want to dynamically upate the positions. You could do this
 *
 *     // assuming arrays.position has already been updated with new data.
 *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);
 *
 * @param {WebGLRenderingContext} gl
 * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix
 *   the name of the attribute will include the prefix.
 * @param {ArraySpec} array Note: it is arguably ineffient to pass in anything but a typed array because anything
 *    else will have to be converted to a typed array before it can be used by WebGL. During init time that
 *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.
 * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer
 *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`
 *    for the portion of the array you want to use.
 *
 *        var someArray = new Float32Array(1000); // an array with 1000 floats
 *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray
 *
 *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`
 * @memberOf module:twgl/attributes
 */


function setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {
  array = makeTypedArray(array);

  if (offset !== undefined) {
    gl.bindBuffer(gl.ARRAY_BUFFER, attribInfo.buffer);
    gl.bufferSubData(gl.ARRAY_BUFFER, offset, array);
  } else {
    setBufferFromTypedArray(gl, gl.ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);
  }
}

function getBytesPerValueForGLType(gl, type) {
  if (type === gl.BYTE) return 1; // eslint-disable-line

  if (type === gl.UNSIGNED_BYTE) return 1; // eslint-disable-line

  if (type === gl.SHORT) return 2; // eslint-disable-line

  if (type === gl.UNSIGNED_SHORT) return 2; // eslint-disable-line

  if (type === gl.INT) return 4; // eslint-disable-line

  if (type === gl.UNSIGNED_INT) return 4; // eslint-disable-line

  if (type === gl.FLOAT) return 4; // eslint-disable-line

  return 0;
}
/**
 * tries to get the number of elements from a set of arrays.
 */


var positionKeys = ['position', 'positions', 'a_position'];

function getNumElementsFromNonIndexedArrays(arrays) {
  var key;

  for (var _ii = 0; _ii < positionKeys.length; ++_ii) {
    key = positionKeys[_ii];

    if (key in arrays) {
      break;
    }
  }

  if (ii === positionKeys.length) {
    key = Object.keys(arrays)[0];
  }

  var array = arrays[key];
  var length = getArray(array).length;
  var numComponents = getNumComponents(array, key);
  var numElements = length / numComponents;

  if (length % numComponents > 0) {
    throw "numComponents " + numComponents + " not correct for length " + length;
  }

  return numElements;
}

function getNumElementsFromAttributes(gl, attribs) {
  var key;
  var ii;

  for (ii = 0; ii < positionKeys.length; ++ii) {
    key = positionKeys[ii];

    if (key in attribs) {
      break;
    }

    key = defaults.attribPrefix + key;

    if (key in attribs) {
      break;
    }
  }

  if (ii === positionKeys.length) {
    key = Object.keys(attribs)[0];
  }

  var attrib = attribs[key];
  gl.bindBuffer(gl.ARRAY_BUFFER, attrib.buffer);
  var numBytes = gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE);
  gl.bindBuffer(gl.ARRAY_BUFFER, null);
  var bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);
  var totalElements = numBytes / bytesPerValue;
  var numComponents = attrib.numComponents || attrib.size; // TODO: check stride

  var numElements = totalElements / numComponents;

  if (numElements % 1 !== 0) {
    throw "numComponents " + numComponents + " not correct for length " + length;
  }

  return numElements;
}
/**
 * @typedef {Object} BufferInfo
 * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.
 * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..
 * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.
 * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs approriate to call `setAttributes`
 * @memberOf module:twgl
 */

/**
 * Creates a BufferInfo from an object of arrays.
 *
 * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to
 * {@link module:twgl:drawBufferInfo}.
 *
 * Given an object like
 *
 *     var arrays = {
 *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
 *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
 *     };
 *
 *  Creates an BufferInfo like this
 *
 *     bufferInfo = {
 *       numElements: 4,        // or whatever the number of elements is
 *       indices: WebGLBuffer,  // this property will not exist if there are no indices
 *       attribs: {
 *         a_position: { buffer: WebGLBuffer, numComponents: 3, },
 *         a_normal:   { buffer: WebGLBuffer, numComponents: 3, },
 *         a_texcoord: { buffer: WebGLBuffer, numComponents: 2, },
 *       },
 *     };
 *
 *  The properties of arrays can be JavaScript arrays in which case the number of components
 *  will be guessed.
 *
 *     var arrays = {
 *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],
 *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],
 *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
 *        indices:  [0, 1, 2, 1, 2, 3],
 *     };
 *
 *  They can also by TypedArrays
 *
 *     var arrays = {
 *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),
 *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),
 *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),
 *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),
 *     };
 *
 *  Or augmentedTypedArrays
 *
 *     var positions = createAugmentedTypedArray(3, 4);
 *     var texcoords = createAugmentedTypedArray(2, 4);
 *     var normals   = createAugmentedTypedArray(3, 4);
 *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);
 *
 *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);
 *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);
 *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);
 *     indices.push([0, 1, 2, 1, 2, 3]);
 *
 *     var arrays = {
 *        position: positions,
 *        texcoord: texcoords,
 *        normal:   normals,
 *        indices:  indices,
 *     };
 *
 * For the last example it is equivalent to
 *
 *     var bufferInfo = {
 *       attribs: {
 *         a_position: { numComponents: 3, buffer: gl.createBuffer(), },
 *         a_texcoods: { numComponents: 2, buffer: gl.createBuffer(), },
 *         a_normals: { numComponents: 3, buffer: gl.createBuffer(), },
 *       },
 *       indices: gl.createBuffer(),
 *       numElements: 6,
 *     };
 *
 *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_position.buffer);
 *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);
 *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_texcoord.buffer);
 *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);
 *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_normal.buffer);
 *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);
 *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);
 *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {module:twgl.Arrays} arrays Your data
 * @return {module:twgl.BufferInfo} A BufferInfo
 * @memberOf module:twgl/attributes
 */


function createBufferInfoFromArrays(gl, arrays) {
  var bufferInfo = {
    attribs: createAttribsFromArrays(gl, arrays)
  };
  var indices = arrays.indices;

  if (indices) {
    var newIndices = makeTypedArray(indices, "indices");
    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, gl.ELEMENT_ARRAY_BUFFER);
    bufferInfo.numElements = newIndices.length;
    bufferInfo.elementType = typedArrays.getGLTypeForTypedArray(newIndices);
  } else {
    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);
  }

  return bufferInfo;
}
/**
 * Creates a buffer from an array, typed array, or array spec
 *
 * Given something like this
 *
 *     [1, 2, 3],
 *
 * or
 *
 *     new Uint16Array([1,2,3]);
 *
 * or
 *
 *     {
 *        data: [1, 2, 3],
 *        type: Uint8Array,
 *     }
 *
 * returns a WebGLBuffer that constains the given data.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
 * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.
 * @param {string} arrayName name of array. Used to guess the type if type can not be dervied other wise.
 * @return {WebGLBuffer} a WebGLBuffer containing the data in array.
 * @memberOf module:twgl/attributes
 */


function createBufferFromArray(gl, array, arrayName) {
  var type = arrayName === "indices" ? gl.ELEMENT_ARRAY_BUFFER : gl.ARRAY_BUFFER;
  var typedArray = makeTypedArray(array, arrayName);
  return createBufferFromTypedArray(gl, typedArray, type);
}
/**
 * Creates buffers from arrays or typed arrays
 *
 * Given something like this
 *
 *     var arrays = {
 *        positions: [1, 2, 3],
 *        normals: [0, 0, 1],
 *     }
 *
 * returns something like
 *
 *     buffers = {
 *       positions: WebGLBuffer,
 *       normals: WebGLBuffer,
 *     }
 *
 * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
 * @param {module:twgl.Arrays} arrays
 * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array
 * @memberOf module:twgl/attributes
 */


function createBuffersFromArrays(gl, arrays) {
  var buffers = {};
  Object.keys(arrays).forEach(function (key) {
    buffers[key] = createBufferFromArray(gl, arrays[key], key);
  }); // Ugh!

  if (arrays.indices) {
    buffers.numElements = arrays.indices.length;
    buffers.elementType = typedArrays.getGLTypeForTypedArray(makeTypedArray(arrays.indices), 'indices');
  } else {
    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);
  }

  return buffers;
}

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.setTextureDefaults_ = setDefaults;
exports.createSampler = createSampler;
exports.createSamplers = createSamplers;
exports.setSamplerParameters = setSamplerParameters;
exports.createTexture = createTexture;
exports.setEmptyTexture = setEmptyTexture;
exports.setTextureFromArray = setTextureFromArray;
exports.loadTextureFromUrl = loadTextureFromUrl;
exports.setTextureFromElement = setTextureFromElement;
exports.setTextureFilteringForSize = setTextureFilteringForSize;
exports.setTextureParameters = setTextureParameters;
exports.setDefaultTextureColor = setDefaultTextureColor;
exports.createTextures = createTextures;
exports.resizeTexture = resizeTexture;
exports.getNumComponentsForFormat = getNumComponentsForFormat;
exports.getBytesPerElementForInternalFormat = getBytesPerElementForInternalFormat;

var utils = _interopRequireWildcard(__webpack_require__(4));

var typedArrays = _interopRequireWildcard(__webpack_require__(1));

var helper = _interopRequireWildcard(__webpack_require__(0));

var _globalObject = _interopRequireDefault(__webpack_require__(2));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/*
 * Copyright 2015, Gregg Tavares.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Gregg Tavares. nor the names of his
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Low level texture related functions
 *
 * You should generally not need to use these functions. They are provided
 * for those cases where you're doing something out of the ordinary
 * and you need lower level access.
 *
 * For backward compatibily they are available at both `twgl.textures` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/textures
 */
// make sure we don't see a global gl
var gl = undefined; // eslint-disable-line

var defaults = {
  textureColor: new Uint8Array([128, 192, 255, 255]),
  textureOptions: {},
  crossOrigin: undefined
};
var isArrayBuffer = typedArrays.isArrayBuffer; // Should we make this on demand?

var ctx = _globalObject.default.document && _globalObject.default.document.createElement ? _globalObject.default.document.createElement("canvas").getContext("2d") : null; // NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but
//       not only does Firefox NOT support it but Firefox freezes immediately
//       if you try to create one instead of just returning null and continuing.
//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext("2d"));  // OffscreenCanvas may not support 2d
// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2
// we can use the various unpack settings. Otherwise we could try using
// the ability of an imagebitmap to be cut. Unfortunately cutting an imagebitmap
// is async and the current TWGL code expects a non-Async result though that
// might not be a problem. ImageBitmap though is not available in Edge or Safari
// as of 2018-01-02

/* PixelFormat */

var ALPHA = 0x1906;
var RGB = 0x1907;
var RGBA = 0x1908;
var LUMINANCE = 0x1909;
var LUMINANCE_ALPHA = 0x190A;
var DEPTH_COMPONENT = 0x1902;
var DEPTH_STENCIL = 0x84F9;
/* TextureWrapMode */

var REPEAT = 0x2901; // eslint-disable-line

var MIRRORED_REPEAT = 0x8370; // eslint-disable-line

/* TextureMagFilter */

var NEAREST = 0x2600; // eslint-disable-line

/* TextureMinFilter */

var NEAREST_MIPMAP_NEAREST = 0x2700; // eslint-disable-line

var LINEAR_MIPMAP_NEAREST = 0x2701; // eslint-disable-line

var NEAREST_MIPMAP_LINEAR = 0x2702; // eslint-disable-line

var LINEAR_MIPMAP_LINEAR = 0x2703; // eslint-disable-line

var R8 = 0x8229;
var R8_SNORM = 0x8F94;
var R16F = 0x822D;
var R32F = 0x822E;
var R8UI = 0x8232;
var R8I = 0x8231;
var RG16UI = 0x823A;
var RG16I = 0x8239;
var RG32UI = 0x823C;
var RG32I = 0x823B;
var RG8 = 0x822B;
var RG8_SNORM = 0x8F95;
var RG16F = 0x822F;
var RG32F = 0x8230;
var RG8UI = 0x8238;
var RG8I = 0x8237;
var R16UI = 0x8234;
var R16I = 0x8233;
var R32UI = 0x8236;
var R32I = 0x8235;
var RGB8 = 0x8051;
var SRGB8 = 0x8C41;
var RGB565 = 0x8D62;
var RGB8_SNORM = 0x8F96;
var R11F_G11F_B10F = 0x8C3A;
var RGB9_E5 = 0x8C3D;
var RGB16F = 0x881B;
var RGB32F = 0x8815;
var RGB8UI = 0x8D7D;
var RGB8I = 0x8D8F;
var RGB16UI = 0x8D77;
var RGB16I = 0x8D89;
var RGB32UI = 0x8D71;
var RGB32I = 0x8D83;
var RGBA8 = 0x8058;
var SRGB8_ALPHA8 = 0x8C43;
var RGBA8_SNORM = 0x8F97;
var RGB5_A1 = 0x8057;
var RGBA4 = 0x8056;
var RGB10_A2 = 0x8059;
var RGBA16F = 0x881A;
var RGBA32F = 0x8814;
var RGBA8UI = 0x8D7C;
var RGBA8I = 0x8D8E;
var RGB10_A2UI = 0x906F;
var RGBA16UI = 0x8D76;
var RGBA16I = 0x8D88;
var RGBA32I = 0x8D82;
var RGBA32UI = 0x8D70;
var DEPTH_COMPONENT16 = 0x81A5;
var DEPTH_COMPONENT24 = 0x81A6;
var DEPTH_COMPONENT32F = 0x8CAC;
var DEPTH32F_STENCIL8 = 0x8CAD;
var DEPTH24_STENCIL8 = 0x88F0;
/* DataType */

var BYTE = 0x1400;
var UNSIGNED_BYTE = 0x1401;
var SHORT = 0x1402;
var UNSIGNED_SHORT = 0x1403;
var INT = 0x1404;
var UNSIGNED_INT = 0x1405;
var FLOAT = 0x1406;
var UNSIGNED_SHORT_4_4_4_4 = 0x8033;
var UNSIGNED_SHORT_5_5_5_1 = 0x8034;
var UNSIGNED_SHORT_5_6_5 = 0x8363;
var HALF_FLOAT = 0x140B;
var HALF_FLOAT_OES = 0x8D61; // Thanks Khronos for making this different >:(

var UNSIGNED_INT_2_10_10_10_REV = 0x8368;
var UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
var UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
var FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
var UNSIGNED_INT_24_8 = 0x84FA;
var RG = 0x8227;
var RG_INTEGER = 0x8228;
var RED = 0x1903;
var RED_INTEGER = 0x8D94;
var RGB_INTEGER = 0x8D98;
var RGBA_INTEGER = 0x8D99;
var formatInfo = {};
{
  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle
  // the name.
  var f = formatInfo;
  f[ALPHA] = {
    numColorComponents: 1
  };
  f[LUMINANCE] = {
    numColorComponents: 1
  };
  f[LUMINANCE_ALPHA] = {
    numColorComponents: 2
  };
  f[RGB] = {
    numColorComponents: 3
  };
  f[RGBA] = {
    numColorComponents: 4
  };
  f[RED] = {
    numColorComponents: 1
  };
  f[RED_INTEGER] = {
    numColorComponents: 1
  };
  f[RG] = {
    numColorComponents: 2
  };
  f[RG_INTEGER] = {
    numColorComponents: 2
  };
  f[RGB] = {
    numColorComponents: 3
  };
  f[RGB_INTEGER] = {
    numColorComponents: 3
  };
  f[RGBA] = {
    numColorComponents: 4
  };
  f[RGBA_INTEGER] = {
    numColorComponents: 4
  };
  f[DEPTH_COMPONENT] = {
    numColorComponents: 1
  };
  f[DEPTH_STENCIL] = {
    numColorComponents: 2
  };
}
var textureInternalFormatInfo = {};
{
  // NOTE: these properties need unique names so we can let Uglify mangle the name.
  var t = textureInternalFormatInfo; // unsized formats

  t[ALPHA] = {
    textureFormat: ALPHA,
    colorRenderable: true,
    textureFilterable: true,
    bytesPerElement: [1, 2, 2, 4],
    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT]
  };
  t[LUMINANCE] = {
    textureFormat: LUMINANCE,
    colorRenderable: true,
    textureFilterable: true,
    bytesPerElement: [1, 2, 2, 4],
    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT]
  };
  t[LUMINANCE_ALPHA] = {
    textureFormat: LUMINANCE_ALPHA,
    colorRenderable: true,
    textureFilterable: true,
    bytesPerElement: [2, 4, 4, 8],
    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT]
  };
  t[RGB] = {
    textureFormat: RGB,
    colorRenderable: true,
    textureFilterable: true,
    bytesPerElement: [3, 6, 6, 12, 2],
    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_5_6_5]
  };
  t[RGBA] = {
    textureFormat: RGBA,
    colorRenderable: true,
    textureFilterable: true,
    bytesPerElement: [4, 8, 8, 16, 2, 2],
    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1]
  }; // sized formats

  t[R8] = {
    textureFormat: RED,
    colorRenderable: true,
    textureFilterable: true,
    bytesPerElement: 1,
    type: UNSIGNED_BYTE
  };
  t[R8_SNORM] = {
    textureFormat: RED,
    colorRenderable: false,
    textureFilterable: true,
    bytesPerElement: 1,
    type: BYTE
  };
  t[R16F] = {
    textureFormat: RED,
    colorRenderable: false,
    textureFilterable: true,
    bytesPerElement: [4, 2],
    type: [FLOAT, HALF_FLOAT]
  };
  t[R32F] = {
    textureFormat: RED,
    colorRenderable: false,
    textureFilterable: false,
    bytesPerElement: 4,
    type: FLOAT
  };
  t[R8UI] = {
    textureFormat: RED_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 1,
    type: UNSIGNED_BYTE
  };
  t[R8I] = {
    textureFormat: RED_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 1,
    type: BYTE
  };
  t[R16UI] = {
    textureFormat: RED_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 2,
    type: UNSIGNED_SHORT
  };
  t[R16I] = {
    textureFormat: RED_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 2,
    type: SHORT
  };
  t[R32UI] = {
    textureFormat: RED_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 4,
    type: UNSIGNED_INT
  };
  t[R32I] = {
    textureFormat: RED_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 4,
    type: INT
  };
  t[RG8] = {
    textureFormat: RG,
    colorRenderable: true,
    textureFilterable: true,
    bytesPerElement: 2,
    type: UNSIGNED_BYTE
  };
  t[RG8_SNORM] = {
    textureFormat: RG,
    colorRenderable: false,
    textureFilterable: true,
    bytesPerElement: 2,
    type: BYTE
  };
  t[RG16F] = {
    textureFormat: RG,
    colorRenderable: false,
    textureFilterable: true,
    bytesPerElement: [8, 4],
    type: [FLOAT, HALF_FLOAT]
  };
  t[RG32F] = {
    textureFormat: RG,
    colorRenderable: false,
    textureFilterable: false,
    bytesPerElement: 8,
    type: FLOAT
  };
  t[RG8UI] = {
    textureFormat: RG_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 2,
    type: UNSIGNED_BYTE
  };
  t[RG8I] = {
    textureFormat: RG_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 2,
    type: BYTE
  };
  t[RG16UI] = {
    textureFormat: RG_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 4,
    type: UNSIGNED_SHORT
  };
  t[RG16I] = {
    textureFormat: RG_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 4,
    type: SHORT
  };
  t[RG32UI] = {
    textureFormat: RG_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 8,
    type: UNSIGNED_INT
  };
  t[RG32I] = {
    textureFormat: RG_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 8,
    type: INT
  };
  t[RGB8] = {
    textureFormat: RGB,
    colorRenderable: true,
    textureFilterable: true,
    bytesPerElement: 3,
    type: UNSIGNED_BYTE
  };
  t[SRGB8] = {
    textureFormat: RGB,
    colorRenderable: false,
    textureFilterable: true,
    bytesPerElement: 3,
    type: UNSIGNED_BYTE
  };
  t[RGB565] = {
    textureFormat: RGB,
    colorRenderable: true,
    textureFilterable: true,
    bytesPerElement: [3, 2],
    type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_6_5]
  };
  t[RGB8_SNORM] = {
    textureFormat: RGB,
    colorRenderable: false,
    textureFilterable: true,
    bytesPerElement: 3,
    type: BYTE
  };
  t[R11F_G11F_B10F] = {
    textureFormat: RGB,
    colorRenderable: false,
    textureFilterable: true,
    bytesPerElement: [12, 6, 4],
    type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV]
  };
  t[RGB9_E5] = {
    textureFormat: RGB,
    colorRenderable: false,
    textureFilterable: true,
    bytesPerElement: [12, 6, 4],
    type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV]
  };
  t[RGB16F] = {
    textureFormat: RGB,
    colorRenderable: false,
    textureFilterable: true,
    bytesPerElement: [12, 6],
    type: [FLOAT, HALF_FLOAT]
  };
  t[RGB32F] = {
    textureFormat: RGB,
    colorRenderable: false,
    textureFilterable: false,
    bytesPerElement: 12,
    type: FLOAT
  };
  t[RGB8UI] = {
    textureFormat: RGB_INTEGER,
    colorRenderable: false,
    textureFilterable: false,
    bytesPerElement: 3,
    type: UNSIGNED_BYTE
  };
  t[RGB8I] = {
    textureFormat: RGB_INTEGER,
    colorRenderable: false,
    textureFilterable: false,
    bytesPerElement: 3,
    type: BYTE
  };
  t[RGB16UI] = {
    textureFormat: RGB_INTEGER,
    colorRenderable: false,
    textureFilterable: false,
    bytesPerElement: 6,
    type: UNSIGNED_SHORT
  };
  t[RGB16I] = {
    textureFormat: RGB_INTEGER,
    colorRenderable: false,
    textureFilterable: false,
    bytesPerElement: 6,
    type: SHORT
  };
  t[RGB32UI] = {
    textureFormat: RGB_INTEGER,
    colorRenderable: false,
    textureFilterable: false,
    bytesPerElement: 12,
    type: UNSIGNED_INT
  };
  t[RGB32I] = {
    textureFormat: RGB_INTEGER,
    colorRenderable: false,
    textureFilterable: false,
    bytesPerElement: 12,
    type: INT
  };
  t[RGBA8] = {
    textureFormat: RGBA,
    colorRenderable: true,
    textureFilterable: true,
    bytesPerElement: 4,
    type: UNSIGNED_BYTE
  };
  t[SRGB8_ALPHA8] = {
    textureFormat: RGBA,
    colorRenderable: true,
    textureFilterable: true,
    bytesPerElement: 4,
    type: UNSIGNED_BYTE
  };
  t[RGBA8_SNORM] = {
    textureFormat: RGBA,
    colorRenderable: false,
    textureFilterable: true,
    bytesPerElement: 4,
    type: BYTE
  };
  t[RGB5_A1] = {
    textureFormat: RGBA,
    colorRenderable: true,
    textureFilterable: true,
    bytesPerElement: [4, 2, 4],
    type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV]
  };
  t[RGBA4] = {
    textureFormat: RGBA,
    colorRenderable: true,
    textureFilterable: true,
    bytesPerElement: [4, 2],
    type: [UNSIGNED_BYTE, UNSIGNED_SHORT_4_4_4_4]
  };
  t[RGB10_A2] = {
    textureFormat: RGBA,
    colorRenderable: true,
    textureFilterable: true,
    bytesPerElement: 4,
    type: UNSIGNED_INT_2_10_10_10_REV
  };
  t[RGBA16F] = {
    textureFormat: RGBA,
    colorRenderable: false,
    textureFilterable: true,
    bytesPerElement: [16, 8],
    type: [FLOAT, HALF_FLOAT]
  };
  t[RGBA32F] = {
    textureFormat: RGBA,
    colorRenderable: false,
    textureFilterable: false,
    bytesPerElement: 16,
    type: FLOAT
  };
  t[RGBA8UI] = {
    textureFormat: RGBA_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 4,
    type: UNSIGNED_BYTE
  };
  t[RGBA8I] = {
    textureFormat: RGBA_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 4,
    type: BYTE
  };
  t[RGB10_A2UI] = {
    textureFormat: RGBA_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 4,
    type: UNSIGNED_INT_2_10_10_10_REV
  };
  t[RGBA16UI] = {
    textureFormat: RGBA_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 8,
    type: UNSIGNED_SHORT
  };
  t[RGBA16I] = {
    textureFormat: RGBA_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 8,
    type: SHORT
  };
  t[RGBA32I] = {
    textureFormat: RGBA_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 16,
    type: INT
  };
  t[RGBA32UI] = {
    textureFormat: RGBA_INTEGER,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 16,
    type: UNSIGNED_INT
  }; // Sized Internal

  t[DEPTH_COMPONENT16] = {
    textureFormat: DEPTH_COMPONENT,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: [2, 4],
    type: [UNSIGNED_SHORT, UNSIGNED_INT]
  };
  t[DEPTH_COMPONENT24] = {
    textureFormat: DEPTH_COMPONENT,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 4,
    type: UNSIGNED_INT
  };
  t[DEPTH_COMPONENT32F] = {
    textureFormat: DEPTH_COMPONENT,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 4,
    type: FLOAT
  };
  t[DEPTH24_STENCIL8] = {
    textureFormat: DEPTH_STENCIL,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 4,
    type: UNSIGNED_INT_24_8
  };
  t[DEPTH32F_STENCIL8] = {
    textureFormat: DEPTH_STENCIL,
    colorRenderable: true,
    textureFilterable: false,
    bytesPerElement: 4,
    type: FLOAT_32_UNSIGNED_INT_24_8_REV
  };
  Object.keys(t).forEach(function (internalFormat) {
    var info = t[internalFormat];
    info.bytesPerElementMap = {};

    if (Array.isArray(info.bytesPerElement)) {
      info.bytesPerElement.forEach(function (bytesPerElement, ndx) {
        var type = info.type[ndx];
        info.bytesPerElementMap[type] = bytesPerElement;
      });
    } else {
      var type = info.type;
      info.bytesPerElementMap[type] = info.bytesPerElement;
    }
  });
}
/**
 * Gets the number of bytes per element for a given internalFormat / type
 * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
 * @param {number} type The type parameter for texImage2D etc..
 * @return {number} the number of bytes per element for the given internalFormat, type combo
 * @memberOf module:twgl/textures
 */

function getBytesPerElementForInternalFormat(internalFormat, type) {
  var info = textureInternalFormatInfo[internalFormat];

  if (!info) {
    throw "unknown internal format";
  }

  var bytesPerElement = info.bytesPerElementMap[type];

  if (bytesPerElement === undefined) {
    throw "unknown internal format";
  }

  return bytesPerElement;
}
/**
 * Gets the format for a given internalFormat
 *
 * @param {number} internalFormat The internal format
 * @return {{format:number, type:number}} the corresponding format and type
 */


function getFormatAndTypeForInternalFormat(internalFormat) {
  var info = textureInternalFormatInfo[internalFormat];

  if (!info) {
    throw "unknown internal format";
  }

  return {
    format: info.textureFormat,
    type: Array.isArray(info.type) ? info.type[0] : info.type
  };
}
/**
 * Returns true if value is power of 2
 * @param {number} value number to check.
 * @return true if value is power of 2
 */


function isPowerOf2(value) {
  return (value & value - 1) === 0;
}
/**
 * Gets whether or not we can generate mips for the given format
 * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
 * @param {number} type The type parameter for texImage2D etc..
 * @return {boolean} true if we can generate mips
 */


function canGenerateMipmap(gl, width, height, internalFormat
/*, type */
) {
  if (!utils.isWebGL2(gl)) {
    return isPowerOf2(width) && isPowerOf2(height);
  }

  var info = textureInternalFormatInfo[internalFormat];

  if (!info) {
    throw "unknown internal format";
  }

  return info.colorRenderable && info.textureFilterable;
}
/**
 * Gets whether or not we can generate mips for the given format
 * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
 * @param {number} type The type parameter for texImage2D etc..
 * @return {boolean} true if we can generate mips
 */


function canFilter(internalFormat
/*, type */
) {
  var info = textureInternalFormatInfo[internalFormat];

  if (!info) {
    throw "unknown internal format";
  }

  return info.textureFilterable;
}
/**
 * Gets the number of compontents for a given image format.
 * @param {number} format the format.
 * @return {number} the number of components for the format.
 * @memberOf module:twgl/textures
 */


function getNumComponentsForFormat(format) {
  var info = formatInfo[format];

  if (!info) {
    throw "unknown format: " + format;
  }

  return info.numColorComponents;
}
/**
 * Gets the texture type for a given array type.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @return {number} the gl texture type
 */


function getTextureTypeForArrayType(gl, src, defaultType) {
  if (isArrayBuffer(src)) {
    return typedArrays.getGLTypeForTypedArray(src);
  }

  return defaultType || gl.UNSIGNED_BYTE;
}

function guessDimensions(gl, target, width, height, numElements) {
  if (numElements % 1 !== 0) {
    throw "can't guess dimensions";
  }

  if (!width && !height) {
    var size = Math.sqrt(numElements / (target === gl.TEXTURE_CUBE_MAP ? 6 : 1));

    if (size % 1 === 0) {
      width = size;
      height = size;
    } else {
      width = numElements;
      height = 1;
    }
  } else if (!height) {
    height = numElements / width;

    if (height % 1) {
      throw "can't guess dimensions";
    }
  } else if (!width) {
    width = numElements / height;

    if (width % 1) {
      throw "can't guess dimensions";
    }
  }

  return {
    width: width,
    height: height
  };
}
/**
 * Sets the default texture color.
 *
 * The default texture color is used when loading textures from
 * urls. Because the URL will be loaded async we'd like to be
 * able to use the texture immediately. By putting a 1x1 pixel
 * color in the texture we can start using the texture before
 * the URL has loaded.
 *
 * @param {number[]} color Array of 4 values in the range 0 to 1
 * @deprecated see {@link module:twgl.setDefaults}
 * @memberOf module:twgl/textures
 */


function setDefaultTextureColor(color) {
  defaults.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);
}

function setDefaults(newDefaults) {
  helper.copyExistingProperties(newDefaults, defaults);

  if (newDefaults.textureColor) {
    setDefaultTextureColor(newDefaults.textureColor);
  }
}
/**
 * A function to generate the source for a texture.
 * @callback TextureFunc
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {module:twgl.TextureOptions} options the texture options
 * @return {*} Returns any of the things documentented for `src` for {@link module:twgl.TextureOptions}.
 * @memberOf module:twgl
 */

/**
 * Texture options passed to most texture functions. Each function will use whatever options
 * are appropriate for its needs. This lets you pass the same options to all functions.
 *
 * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,
 * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.
 *
 * @typedef {Object} TextureOptions
 * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.
 * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.
 * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.
 * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.
 * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .
 * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`
 *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.
 * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`
 * @property {number} [minMag] both the min and mag filter settings.
 * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`
 * @property {number} [format] format for texture. Defaults to `gl.RGBA`.
 * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`
 *     is ArrayBufferView defaults to type that matches ArrayBufferView type.
 * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube
 * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
 * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
 * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
 * @property {number} [minLod] TEXTURE_MIN_LOD setting
 * @property {number} [maxLod] TEXTURE_MAX_LOD setting
 * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting
 * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting
 * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.
 * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.
 *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
 *     the current setting for specific textures.
 * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.
 *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
 *     the current setting for specific textures.
 * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.
 *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
 *     the current setting for specific textures.
 * @property {(number[]|ArrayBufferView)} color color used as temporary 1x1 pixel color for textures loaded async when src is a string.
 *    If it's a JavaScript array assumes color is 0 to 1 like most GL colors as in `[1, 0, 0, 1] = red=1, green=0, blue=0, alpha=0`.
 *    Defaults to `[0.5, 0.75, 1, 1]`. See {@link module:twgl.setDefaultTextureColor}. If `false` texture is set. Can be used to re-load a texture
 * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and
 *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above
 *    then then `auto` is assumed to be `false` unless explicity set to `true`.
 * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is
 *
 *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
 *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
 *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
 *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
 *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
 *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]
 *
 * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture
 *
 *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable
 *    1x1 pixel texture will be returned immediatley. The texture will be updated once the image has downloaded.
 *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.
 *    The pieces will be uploaded in `cubeFaceOrder`
 *
 *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.
 *
 *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then eact entry is a slice of the a 2d array texture
 *    and will be scaled to the specified width and height OR to the size of the first image that loads.
 *
 *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,
 *    `HTMLCanvasElement`, `HTMLVideoElement`.
 *
 *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is
 *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`
 *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided
 *    by 6. Then
 *
 *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height
 *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.
 *
 *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.
 *
 * If `number[]` will be converted to `type`.
 *
 * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.
 * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`
 * an array etc...
 *
 * If `src` is undefined then an empty texture will be created of size `width` by `height`.
 *
 * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.
 *    default: undefined. Also see {@link module:twgl.setDefaults}.
 *
 * @memberOf module:twgl
 */
// NOTE: While querying GL is considered slow it's not remotely as slow
// as uploading a texture. On top of that you're unlikely to call this in
// a perf critical loop. Even if upload a texture every frame that's unlikely
// to be more than 1 or 2 textures a frame. In other words, the benefits of
// making the API easy to use outweigh any supposed perf benefits
//
// Also note I get that having one global of these is bad practice.
// As long as it's used correctly it means no garbage which probably
// doesn't matter when dealing with textures but old habits die hard.


var lastPackState = {};
/**
 * Saves any packing state that will be set based on the options.
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 */

function savePackState(gl, options) {
  if (options.colorspaceConversion !== undefined) {
    lastPackState.colorspaceConversion = gl.getParameter(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL);
    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);
  }

  if (options.premultiplyAlpha !== undefined) {
    lastPackState.premultiplyAlpha = gl.getParameter(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);
  }

  if (options.flipY !== undefined) {
    lastPackState.flipY = gl.getParameter(gl.UNPACK_FLIP_Y_WEBGL);
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, options.flipY);
  }
}
/**
 * Restores any packing state that was set based on the options.
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 */


function restorePackState(gl, options) {
  if (options.colorspaceConversion !== undefined) {
    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, lastPackState.colorspaceConversion);
  }

  if (options.premultiplyAlpha !== undefined) {
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, lastPackState.premultiplyAlpha);
  }

  if (options.flipY !== undefined) {
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, lastPackState.flipY);
  }
}
/**
 * Saves state related to data size
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 */


function saveSkipState(gl) {
  lastPackState.unpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);

  if (utils.isWebGL2(gl)) {
    lastPackState.unpackRowLength = gl.getParameter(gl.UNPACK_ROW_LENGTH);
    lastPackState.unpackImageHeight = gl.getParameter(gl.UNPACK_IMAGE_HEIGHT);
    lastPackState.unpackSkipPixels = gl.getParameter(gl.UNPACK_SKIP_PIXELS);
    lastPackState.unpackSkipRows = gl.getParameter(gl.UNPACK_SKIP_ROWS);
    lastPackState.unpackSkipImages = gl.getParameter(gl.UNPACK_SKIP_IMAGES);
  }
}
/**
 * Restores state related to data size
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 */


function restoreSkipState(gl) {
  gl.pixelStorei(gl.UNPACK_ALIGNMENT, lastPackState.unpackAlignment);

  if (utils.isWebGL2(gl)) {
    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, lastPackState.unpackRowLength);
    gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, lastPackState.unpackImageHeight);
    gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, lastPackState.unpackSkipPixels);
    gl.pixelStorei(gl.UNPACK_SKIP_ROWS, lastPackState.unpackSkipRows);
    gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, lastPackState.unpackSkipImages);
  }
}
/**
 * Sets the parameters of a texture or sampler
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {number|WebGLSampler} target texture target or sampler
 * @param {function()} parameteriFn texParamteri or samplerParameteri fn
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 */


function setTextureSamplerParameters(gl, target, parameteriFn, options) {
  if (options.minMag) {
    parameteriFn.call(gl, target, gl.TEXTURE_MIN_FILTER, options.minMag);
    parameteriFn.call(gl, target, gl.TEXTURE_MAG_FILTER, options.minMag);
  }

  if (options.min) {
    parameteriFn.call(gl, target, gl.TEXTURE_MIN_FILTER, options.min);
  }

  if (options.mag) {
    parameteriFn.call(gl, target, gl.TEXTURE_MAG_FILTER, options.mag);
  }

  if (options.wrap) {
    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_S, options.wrap);
    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_T, options.wrap);

    if (target === gl.TEXTURE_3D || helper.isSampler(gl, target)) {
      parameteriFn.call(gl, target, gl.TEXTURE_WRAP_R, options.wrap);
    }
  }

  if (options.wrapR) {
    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_R, options.wrapR);
  }

  if (options.wrapS) {
    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_S, options.wrapS);
  }

  if (options.wrapT) {
    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_T, options.wrapT);
  }

  if (options.minLod) {
    parameteriFn.call(gl, target, gl.TEXTURE_MIN_LOD, options.minLod);
  }

  if (options.maxLod) {
    parameteriFn.call(gl, target, gl.TEXTURE_MAX_LOD, options.maxLod);
  }

  if (options.baseLevel) {
    parameteriFn.call(gl, target, gl.TEXTURE_BASE_LEVEL, options.baseLevel);
  }

  if (options.maxLevel) {
    parameteriFn.call(gl, target, gl.TEXTURE_MAX_LEVEL, options.maxLevel);
  }
}
/**
 * Sets the texture parameters of a texture.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 */


function setTextureParameters(gl, tex, options) {
  var target = options.target || gl.TEXTURE_2D;
  gl.bindTexture(target, tex);
  setTextureSamplerParameters(gl, target, gl.texParameteri, options);
}
/**
 * Sets the sampler parameters of a sampler.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLSampler} sampler the WebGLSampler to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @memberOf module:twgl/textures
 */


function setSamplerParameters(gl, sampler, options) {
  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);
}
/**
 * Creates a new sampler object and sets parameters.
 *
 * Example:
 *
 *      const sampler = twgl.createSampler(gl, {
 *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER
 *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R
 *      });
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.
 * @return {Object.<string,WebGLSampler>} the created samplers by name
 */


function createSampler(gl, options) {
  var sampler = gl.createSampler();
  setSamplerParameters(gl, sampler, options);
  return sampler;
}
/**
 * Creates a multiple sampler objects and sets parameters on each.
 *
 * Example:
 *
 *      const samplers = twgl.createSamplers(gl, {
 *        nearest: {
 *          minMag: gl.NEAREST,
 *        },
 *        nearestClampS: {
 *          minMag: gl.NEAREST,
 *          wrapS: gl.CLAMP_TO_NEAREST,
 *        },
 *        linear: {
 *          minMag: gl.LINEAR,
 *        },
 *        nearestClamp: {
 *          minMag: gl.NEAREST,
 *          wrap: gl.CLAMP_TO_EDGE,
 *        },
 *        linearClamp: {
 *          minMag: gl.LINEAR,
 *          wrap: gl.CLAMP_TO_EDGE,
 *        },
 *        linearClampT: {
 *          minMag: gl.LINEAR,
 *          wrapT: gl.CLAMP_TO_EDGE,
 *        },
 *      });
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler
 */


function createSamplers(gl, samplerOptions) {
  var samplers = {};
  Object.keys(samplerOptions).forEach(function (name) {
    samplers[name] = createSampler(gl, samplerOptions[name]);
  });
  return samplers;
}
/**
 * Makes a 1x1 pixel
 * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.
 * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values
 * @return {Uint8Array} Unit8Array with color.
 */


function make1Pixel(color) {
  color = color || defaults.textureColor;

  if (isArrayBuffer(color)) {
    return color;
  }

  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);
}
/**
 * Sets filtering or generates mips for texture based on width or height
 * If width or height is not passed in uses `options.width` and//or `options.height`
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @param {number} [width] width of texture
 * @param {number} [height] height of texture
 * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..
 * @param {number} [type] The type parameter for texImage2D etc..
 * @memberOf module:twgl/textures
 */


function setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type) {
  options = options || defaults.textureOptions;
  internalFormat = internalFormat || gl.RGBA;
  type = type || gl.UNSIGNED_BYTE;
  var target = options.target || gl.TEXTURE_2D;
  width = width || options.width;
  height = height || options.height;
  gl.bindTexture(target, tex);

  if (canGenerateMipmap(gl, width, height, internalFormat, type)) {
    gl.generateMipmap(target);
  } else {
    var filtering = canFilter(internalFormat, type) ? gl.LINEAR : gl.NEAREST;
    gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, filtering);
    gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, filtering);
    gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  }
}

function shouldAutomaticallySetTextureFilteringForSize(options) {
  return options.auto === true || options.auto === undefined && options.level === undefined;
}
/**
 * Gets an array of cubemap face enums
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @return {number[]} cubemap face enums
 */


function getCubeFaceOrder(gl, options) {
  options = options || {};
  return options.cubeFaceOrder || [gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
}
/**
 * @typedef {Object} FaceInfo
 * @property {number} face gl enum for texImage2D
 * @property {number} ndx face index (0 - 5) into source data
 * @ignore
 */

/**
 * Gets an array of FaceInfos
 * There's a bug in some NVidia drivers that will crash the driver if
 * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take
 * the user's desired order from his faces to WebGL and make sure we
 * do the faces in WebGL order
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundent but
 *    it's needed internally to sort the array of `ndx` properties by `face`.
 */


function getCubeFacesWithNdx(gl, options) {
  var faces = getCubeFaceOrder(gl, options); // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(

  var facesWithNdx = faces.map(function (face, ndx) {
    return {
      face: face,
      ndx: ndx
    };
  });
  facesWithNdx.sort(function (a, b) {
    return a.face - b.face;
  });
  return facesWithNdx;
}
/**
 * Set a texture from the contents of an element. Will also set
 * texture filtering or generate mips based on the dimensions of the element
 * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will
 * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {HTMLElement} element a canvas, img, or video element.
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 * @kind function
 */


function setTextureFromElement(gl, tex, element, options) {
  options = options || defaults.textureOptions;
  var target = options.target || gl.TEXTURE_2D;
  var level = options.level || 0;
  var width = element.width;
  var height = element.height;
  var internalFormat = options.internalFormat || options.format || gl.RGBA;
  var formatType = getFormatAndTypeForInternalFormat(internalFormat);
  var format = options.format || formatType.format;
  var type = options.type || formatType.type;
  savePackState(gl, options);
  gl.bindTexture(target, tex);

  if (target === gl.TEXTURE_CUBE_MAP) {
    // guess the parts
    var imgWidth = element.width;
    var imgHeight = element.height;
    var size;
    var slices;

    if (imgWidth / 6 === imgHeight) {
      // It's 6x1
      size = imgHeight;
      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];
    } else if (imgHeight / 6 === imgWidth) {
      // It's 1x6
      size = imgWidth;
      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];
    } else if (imgWidth / 3 === imgHeight / 2) {
      // It's 3x2
      size = imgWidth / 3;
      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];
    } else if (imgWidth / 2 === imgHeight / 3) {
      // It's 2x3
      size = imgWidth / 2;
      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];
    } else {
      throw "can't figure out cube map from element: " + (element.src ? element.src : element.nodeName);
    }

    if (ctx) {
      ctx.canvas.width = size;
      ctx.canvas.height = size;
      width = size;
      height = size;
      getCubeFacesWithNdx(gl, options).forEach(function (f) {
        var xOffset = slices[f.ndx * 2 + 0] * size;
        var yOffset = slices[f.ndx * 2 + 1] * size;
        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);
        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);
      }); // Free up the canvas memory

      ctx.canvas.width = 1;
      ctx.canvas.height = 1;
    } else if (_globalObject.default.createImageBitmap) {
      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's
      // note lossy? (alpha is not premultiplied? although I'm not sure what
      width = size;
      height = size;
      getCubeFacesWithNdx(gl, options).forEach(function (f) {
        var xOffset = slices[f.ndx * 2 + 0] * size;
        var yOffset = slices[f.ndx * 2 + 1] * size; // We can't easily use a default texture color here as it would have to match
        // the type across all faces where as with a 2D one there's only one face
        // so we're replacing everything all at once. It also has to be the correct size.
        // On the other hand we need all faces to be the same size so as one face loads
        // the rest match else the texture will be unrenderable.

        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);

        _globalObject.default.createImageBitmap(element, xOffset, yOffset, size, size, {
          premultiplyAlpha: 'none',
          colorSpaceConversion: 'none'
        }).then(function (imageBitmap) {
          savePackState(gl, options);
          gl.bindTexture(target, tex);
          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);
          restorePackState(gl, options);

          if (shouldAutomaticallySetTextureFilteringForSize(options)) {
            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type);
          }
        });
      });
    }
  } else if (target === gl.TEXTURE_3D || target === gl.TEXTURE_2D_ARRAY) {
    var smallest = Math.min(element.width, element.height);
    var largest = Math.max(element.width, element.height);
    var depth = largest / smallest;

    if (depth % 1 !== 0) {
      throw "can not compute 3D dimensions of element";
    }

    var xMult = element.width === largest ? 1 : 0;
    var yMult = element.height === largest ? 1 : 0;
    saveSkipState(gl);
    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, element.width);
    gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, 0);
    gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, 0);
    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);

    for (var d = 0; d < depth; ++d) {
      var srcX = d * smallest * xMult;
      var srcY = d * smallest * yMult;
      gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, srcX);
      gl.pixelStorei(gl.UNPACK_SKIP_ROWS, srcY);
      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);
    }

    restoreSkipState(gl);
  } else {
    gl.texImage2D(target, level, internalFormat, format, type, element);
  }

  restorePackState(gl, options);

  if (shouldAutomaticallySetTextureFilteringForSize(options)) {
    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type);
  }

  setTextureParameters(gl, tex, options);
}

function noop() {}
/**
 * Loads an image
 * @param {string} url url to image
 * @param {string} crossOrigin
 * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null
 *     if there was an error
 * @return {HTMLImageElement} the image being loaded.
 */


function loadImage(url, crossOrigin, callback) {
  callback = callback || noop;
  var img;

  if (_globalObject.default.Image) {
    img = new _globalObject.default.Image();
    crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults.crossOrigin;

    if (crossOrigin !== undefined) {
      img.crossOrigin = crossOrigin;
    }

    var clearEventHandlers = function clearEventHandlers() {
      img.removeEventListener('error', onError); // eslint-disable-line

      img.removeEventListener('load', onLoad); // eslint-disable-line

      img = null;
    };

    var onError = function onError() {
      var msg = "couldn't load image: " + url;
      helper.error(msg);
      callback(msg, img);
      clearEventHandlers();
    };

    var onLoad = function onLoad() {
      callback(null, img);
      clearEventHandlers();
    };

    img.addEventListener('error', onError);
    img.addEventListener('load', onLoad);
    img.src = url;
    return img;
  } else if (_globalObject.default.ImageBitmap) {
    var err;
    var bm;

    var cb = function cb() {
      callback(err, bm);
    };

    var options = {};

    if (crossOrigin) {
      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin
    }

    fetch(url, options).then(function (response) {
      if (!response.ok) {
        throw response;
      }

      return response.blob();
    }).then(function (blob) {
      return _globalObject.default.createImageBitmap(blob, {
        premultiplyAlpha: 'none',
        colorSpaceConversion: 'none'
      });
    }).then(function (bitmap) {
      // not sure if this works. We don't want
      // to catch the user's error. So, call
      // the callback in a timeout so we're
      // not in this scope inside the promise.
      bm = bitmap;
      setTimeout(cb);
    }).catch(function (e) {
      err = e;
      setTimeout(cb);
    });
    img = null;
  }

  return img;
}
/**
 * check if object is a TexImageSource
 *
 * @param {Object} obj Object to test
 * @return {boolean} true if object is a TexImageSource
 */


function isTexImageSource(obj) {
  return _globalObject.default.ImageBitmap && obj instanceof _globalObject.default.ImageBitmap || _globalObject.default.ImageData && obj instanceof _globalObject.default.ImageData || _globalObject.default.HTMLElement && obj instanceof _globalObject.default.HTMLElement;
}
/**
 * if obj is an TexImageSource then just
 * uses it otherwise if obj is a string
 * then load it first.
 *
 * @param {string|TexImageSource} obj
 * @param {string} crossOrigin
 * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null
 *     if there was an error
 */


function loadAndUseImage(obj, crossOrigin, callback) {
  if (isTexImageSource(obj)) {
    setTimeout(function () {
      callback(null, obj);
    });
    return obj;
  }

  return loadImage(obj, crossOrigin, callback);
}
/**
 * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set
 * the default texture color is used which can be set by calling `setDefaultTextureColor`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 */


function setTextureTo1PixelColor(gl, tex, options) {
  options = options || defaults.textureOptions;
  var target = options.target || gl.TEXTURE_2D;
  gl.bindTexture(target, tex);

  if (options.color === false) {
    return;
  } // Assume it's a URL
  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.


  var color = make1Pixel(options.color);

  if (target === gl.TEXTURE_CUBE_MAP) {
    for (var ii = 0; ii < 6; ++ii) {
      gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);
    }
  } else if (target === gl.TEXTURE_3D || target === gl.TEXTURE_2D_ARRAY) {
    gl.texImage3D(target, 0, gl.RGBA, 1, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);
  } else {
    gl.texImage2D(target, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);
  }
}
/**
 * The src image(s) used to create a texture.
 *
 * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}
 * you can pass in urls for images to load into the textures. If it's a single url
 * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap
 * this will be a corresponding array of images for the cubemap.
 *
 * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc
 * @memberOf module:twgl
 */

/**
 * A callback for when an image finished downloading and been uploaded into a texture
 * @callback TextureReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {WebGLTexture} texture the texture.
 * @param {module:twgl.TextureSrc} souce image(s) used to as the src for the texture
 * @memberOf module:twgl
 */

/**
 * A callback for when all images have finished downloading and been uploaded into their respective textures
 * @callback TexturesReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.
 * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.
 * @memberOf module:twgl
 */

/**
 * A callback for when an image finished downloading and been uploaded into a texture
 * @callback CubemapReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {WebGLTexture} tex the texture.
 * @param {HTMLImageElement[]} imgs the images for each face.
 * @memberOf module:twgl
 */

/**
 * A callback for when an image finished downloading and been uploaded into a texture
 * @callback ThreeDReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {WebGLTexture} tex the texture.
 * @param {HTMLImageElement[]} imgs the images for each slice.
 * @memberOf module:twgl
 */

/**
 * Loads a texture from an image from a Url as specified in `options.src`
 * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is
 * immediately useable. It will be updated with the contents of the image once the image has finished
 * downloading. Filtering options will be set as approriate for image unless `options.auto === false`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will
 *    be non null if there was an error.
 * @return {HTMLImageElement} the image being downloaded.
 * @memberOf module:twgl/textures
 */


function loadTextureFromUrl(gl, tex, options, callback) {
  callback = callback || noop;
  options = options || defaults.textureOptions;
  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.

  options = Object.assign({}, options);
  var img = loadAndUseImage(options.src, options.crossOrigin, function (err, img) {
    if (err) {
      callback(err, tex, img);
    } else {
      setTextureFromElement(gl, tex, img, options);
      callback(null, tex, img);
    }
  });
  return img;
}
/**
 * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color
 * so that it is usable immediately unless `option.color === false`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will
 *    be non null if there was an error.
 * @memberOf module:twgl/textures
 */


function loadCubemapFromUrls(gl, tex, options, callback) {
  callback = callback || noop;
  var urls = options.src;

  if (urls.length !== 6) {
    throw "there must be 6 urls for a cubemap";
  }

  var level = options.level || 0;
  var internalFormat = options.internalFormat || options.format || gl.RGBA;
  var formatType = getFormatAndTypeForInternalFormat(internalFormat);
  var format = options.format || formatType.format;
  var type = options.type || gl.UNSIGNED_BYTE;
  var target = options.target || gl.TEXTURE_2D;

  if (target !== gl.TEXTURE_CUBE_MAP) {
    throw "target must be TEXTURE_CUBE_MAP";
  }

  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.

  options = Object.assign({}, options);
  var numToLoad = 6;
  var errors = [];
  var faces = getCubeFaceOrder(gl, options);
  var imgs; // eslint-disable-line

  function uploadImg(faceTarget) {
    return function (err, img) {
      --numToLoad;

      if (err) {
        errors.push(err);
      } else {
        if (img.width !== img.height) {
          errors.push("cubemap face img is not a square: " + img.src);
        } else {
          savePackState(gl, options);
          gl.bindTexture(target, tex); // So assuming this is the first image we now have one face that's img sized
          // and 5 faces that are 1x1 pixel so size the other faces

          if (numToLoad === 5) {
            // use the default order
            getCubeFaceOrder(gl).forEach(function (otherTarget) {
              // Should we re-use the same face or a color?
              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);
            });
          } else {
            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);
          }

          restorePackState(gl, options);

          if (shouldAutomaticallySetTextureFilteringForSize(options)) {
            gl.generateMipmap(target);
          }
        }
      }

      if (numToLoad === 0) {
        callback(errors.length ? errors : undefined, tex, imgs);
      }
    };
  }

  imgs = urls.map(function (url, ndx) {
    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));
  });
}
/**
 * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.
 * Will set the texture to a 1x1 pixel color
 * so that it is usable immediately unless `option.color === false`.
 *
 * If the width and height is not specified the width and height of the first
 * image loaded will be used. Note that since images are loaded async
 * which image downloads first is unknown.
 *
 * If an image is not the same size as the width and height it will be scaled
 * to that width and height.
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will
 *    be non null if there was an error.
 * @memberOf module:twgl/textures
 */


function loadSlicesFromUrls(gl, tex, options, callback) {
  callback = callback || noop;
  var urls = options.src;
  var internalFormat = options.internalFormat || options.format || gl.RGBA;
  var formatType = getFormatAndTypeForInternalFormat(internalFormat);
  var format = options.format || formatType.format;
  var type = options.type || gl.UNSIGNED_BYTE;
  var target = options.target || gl.TEXTURE_2D_ARRAY;

  if (target !== gl.TEXTURE_3D && target !== gl.TEXTURE_2D_ARRAY) {
    throw "target must be TEXTURE_3D or TEXTURE_2D_ARRAY";
  }

  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.

  options = Object.assign({}, options);
  var numToLoad = urls.length;
  var errors = [];
  var imgs; // eslint-disable-line

  var level = options.level || 0;
  var width = options.width;
  var height = options.height;
  var depth = urls.length;
  var firstImage = true;

  function uploadImg(slice) {
    return function (err, img) {
      --numToLoad;

      if (err) {
        errors.push(err);
      } else {
        savePackState(gl, options);
        gl.bindTexture(target, tex);

        if (firstImage) {
          firstImage = false;
          width = options.width || img.width;
          height = options.height || img.height;
          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null); // put it in every slice otherwise some slices will be 0,0,0,0

          for (var s = 0; s < depth; ++s) {
            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);
          }
        } else {
          var src = img;

          if (img.width !== width || img.height !== height) {
            // Size the image to fix
            src = ctx.canvas;
            ctx.canvas.width = width;
            ctx.canvas.height = height;
            ctx.drawImage(img, 0, 0, width, height);
          }

          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src); // free the canvas memory

          if (src === ctx.canvas) {
            ctx.canvas.width = 0;
            ctx.canvas.height = 0;
          }
        }

        restorePackState(gl, options);

        if (shouldAutomaticallySetTextureFilteringForSize(options)) {
          gl.generateMipmap(target);
        }
      }

      if (numToLoad === 0) {
        callback(errors.length ? errors : undefined, tex, imgs);
      }
    };
  }

  imgs = urls.map(function (url, ndx) {
    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));
  });
}
/**
 * Sets a texture from an array or typed array. If the width or height is not provided will attempt to
 * guess the size. See {@link module:twgl.TextureOptions}.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 */


function setTextureFromArray(gl, tex, src, options) {
  options = options || defaults.textureOptions;
  var target = options.target || gl.TEXTURE_2D;
  gl.bindTexture(target, tex);
  var width = options.width;
  var height = options.height;
  var depth = options.depth;
  var level = options.level || 0;
  var internalFormat = options.internalFormat || options.format || gl.RGBA;
  var formatType = getFormatAndTypeForInternalFormat(internalFormat);
  var format = options.format || formatType.format;
  var type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);

  if (!isArrayBuffer(src)) {
    var Type = typedArrays.getTypedArrayTypeForGLType(type);
    src = new Type(src);
  } else if (src instanceof Uint8ClampedArray) {
    src = new Uint8Array(src.buffer);
  }

  var bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);
  var numElements = src.byteLength / bytesPerElement; // TODO: check UNPACK_ALIGNMENT?

  if (numElements % 1) {
    throw "length wrong size for format: " + utils.glEnumToString(gl, format);
  }

  var dimensions;

  if (target === gl.TEXTURE_3D) {
    if (!width && !height && !depth) {
      var size = Math.cbrt(numElements);

      if (size % 1 !== 0) {
        throw "can't guess cube size of array of numElements: " + numElements;
      }

      width = size;
      height = size;
      depth = size;
    } else if (width && (!height || !depth)) {
      dimensions = guessDimensions(gl, target, height, depth, numElements / width);
      height = dimensions.width;
      depth = dimensions.height;
    } else if (height && (!width || !depth)) {
      dimensions = guessDimensions(gl, target, width, depth, numElements / height);
      width = dimensions.width;
      depth = dimensions.height;
    } else {
      dimensions = guessDimensions(gl, target, width, height, numElements / depth);
      width = dimensions.width;
      height = dimensions.height;
    }
  } else {
    dimensions = guessDimensions(gl, target, width, height, numElements);
    width = dimensions.width;
    height = dimensions.height;
  }

  saveSkipState(gl);
  gl.pixelStorei(gl.UNPACK_ALIGNMENT, options.unpackAlignment || 1);
  savePackState(gl, options);

  if (target === gl.TEXTURE_CUBE_MAP) {
    var elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;
    var faceSize = numElements / 6 * elementsPerElement;
    getCubeFacesWithNdx(gl, options).forEach(function (f) {
      var offset = faceSize * f.ndx;
      var data = src.subarray(offset, offset + faceSize);
      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);
    });
  } else if (target === gl.TEXTURE_3D) {
    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);
  } else {
    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);
  }

  restorePackState(gl, options);
  restoreSkipState(gl);
  return {
    width: width,
    height: height,
    depth: depth,
    type: type
  };
}
/**
 * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.
 * You must set `options.width` and `options.height`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @memberOf module:twgl/textures
 */


function setEmptyTexture(gl, tex, options) {
  var target = options.target || gl.TEXTURE_2D;
  gl.bindTexture(target, tex);
  var level = options.level || 0;
  var internalFormat = options.internalFormat || options.format || gl.RGBA;
  var formatType = getFormatAndTypeForInternalFormat(internalFormat);
  var format = options.format || formatType.format;
  var type = options.type || formatType.type;
  savePackState(gl, options);

  if (target === gl.TEXTURE_CUBE_MAP) {
    for (var ii = 0; ii < 6; ++ii) {
      gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);
    }
  } else if (target === gl.TEXTURE_3D) {
    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);
  } else {
    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);
  }

  restorePackState(gl, options);
}
/**
 * Creates a texture based on the options passed in.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.
 * @return {WebGLTexture} the created texture.
 * @memberOf module:twgl/textures
 */


function createTexture(gl, options, callback) {
  callback = callback || noop;
  options = options || defaults.textureOptions;
  var tex = gl.createTexture();
  var target = options.target || gl.TEXTURE_2D;
  var width = options.width || 1;
  var height = options.height || 1;
  var internalFormat = options.internalFormat || gl.RGBA;
  var formatType = getFormatAndTypeForInternalFormat(internalFormat);
  var type = options.type || formatType.type;
  gl.bindTexture(target, tex);

  if (target === gl.TEXTURE_CUBE_MAP) {
    // this should have been the default for CUBEMAPS :(
    gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  }

  var src = options.src;

  if (src) {
    if (typeof src === "function") {
      src = src(gl, options);
    }

    if (typeof src === "string") {
      loadTextureFromUrl(gl, tex, options, callback);
    } else if (isArrayBuffer(src) || Array.isArray(src) && (typeof src[0] === 'number' || Array.isArray(src[0]) || isArrayBuffer(src[0]))) {
      var dimensions = setTextureFromArray(gl, tex, src, options);
      width = dimensions.width;
      height = dimensions.height;
      type = dimensions.type;
    } else if (Array.isArray(src) && (typeof src[0] === 'string' || isTexImageSource(src[0]))) {
      if (target === gl.TEXTURE_CUBE_MAP) {
        loadCubemapFromUrls(gl, tex, options, callback);
      } else {
        loadSlicesFromUrls(gl, tex, options, callback);
      }
    } else if (isTexImageSource(src)) {
      setTextureFromElement(gl, tex, src, options);
      width = src.width;
      height = src.height;
    } else {
      throw "unsupported src type";
    }
  } else {
    setEmptyTexture(gl, tex, options);
  }

  if (shouldAutomaticallySetTextureFilteringForSize(options)) {
    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type);
  }

  setTextureParameters(gl, tex, options);
  return tex;
}
/**
 * Resizes a texture based on the options passed in.
 *
 * Note: This is not a generic resize anything function.
 * It's mostly used by {@link module:twgl.resizeFramebufferInfo}
 * It will use `options.src` if it exists to try to determine a `type`
 * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided
 * for the texture. Texture parameters will be set accordingly
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the texture to resize
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {number} [width] the new width. If not passed in will use `options.width`
 * @param {number} [height] the new height. If not passed in will use `options.height`
 * @memberOf module:twgl/textures
 */


function resizeTexture(gl, tex, options, width, height) {
  width = width || options.width;
  height = height || options.height;
  var target = options.target || gl.TEXTURE_2D;
  gl.bindTexture(target, tex);
  var level = options.level || 0;
  var internalFormat = options.internalFormat || options.format || gl.RGBA;
  var formatType = getFormatAndTypeForInternalFormat(internalFormat);
  var format = options.format || formatType.format;
  var type;
  var src = options.src;

  if (!src) {
    type = options.type || formatType.type;
  } else if (isArrayBuffer(src) || Array.isArray(src) && typeof src[0] === 'number') {
    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);
  } else {
    type = options.type || formatType.type;
  }

  if (target === gl.TEXTURE_CUBE_MAP) {
    for (var ii = 0; ii < 6; ++ii) {
      gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);
    }
  } else {
    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);
  }
}
/**
 * Check if a src is an async request.
 * if src is a string we're going to download an image
 * if src is an array of strings we're going to download cubemap images
 * @param {*} src The src from a TextureOptions
 * @returns {bool} true if src is async.
 */


function isAsyncSrc(src) {
  return typeof src === 'string' || Array.isArray(src) && typeof src[0] === 'string';
}
/**
 * Creates a bunch of textures based on the passed in options.
 *
 * Example:
 *
 *     const textures = twgl.createTextures(gl, {
 *       // a power of 2 image
 *       hftIcon: { src: "images/hft-icon-16.png", mag: gl.NEAREST },
 *       // a non-power of 2 image
 *       clover: { src: "images/clover.jpg" },
 *       // From a canvas
 *       fromCanvas: { src: ctx.canvas },
 *       // A cubemap from 6 images
 *       yokohama: {
 *         target: gl.TEXTURE_CUBE_MAP,
 *         src: [
 *           'images/yokohama/posx.jpg',
 *           'images/yokohama/negx.jpg',
 *           'images/yokohama/posy.jpg',
 *           'images/yokohama/negy.jpg',
 *           'images/yokohama/posz.jpg',
 *           'images/yokohama/negz.jpg',
 *         ],
 *       },
 *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)
 *       goldengate: {
 *         target: gl.TEXTURE_CUBE_MAP,
 *         src: 'images/goldengate.jpg',
 *       },
 *       // A 2x2 pixel texture from a JavaScript array
 *       checker: {
 *         mag: gl.NEAREST,
 *         min: gl.LINEAR,
 *         src: [
 *           255,255,255,255,
 *           192,192,192,255,
 *           192,192,192,255,
 *           255,255,255,255,
 *         ],
 *       },
 *       // a 1x2 pixel texture from a typed array.
 *       stripe: {
 *         mag: gl.NEAREST,
 *         min: gl.LINEAR,
 *         format: gl.LUMINANCE,
 *         src: new Uint8Array([
 *           255,
 *           128,
 *           255,
 *           128,
 *           255,
 *           128,
 *           255,
 *           128,
 *         ]),
 *         width: 1,
 *       },
 *     });
 *
 * Now
 *
 * *   `textures.hftIcon` will be a 2d texture
 * *   `textures.clover` will be a 2d texture
 * *   `textures.fromCanvas` will be a 2d texture
 * *   `textures.yohohama` will be a cubemap texture
 * *   `textures.goldengate` will be a cubemap texture
 * *   `textures.checker` will be a 2d texture
 * *   `textures.stripe` will be a 2d texture
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.
 * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.
 * @return {Object.<string,WebGLTexture>} the created textures by name
 * @memberOf module:twgl/textures
 */


function createTextures(gl, textureOptions, callback) {
  callback = callback || noop;
  var numDownloading = 0;
  var errors = [];
  var textures = {};
  var images = {};

  function callCallbackIfReady() {
    if (numDownloading === 0) {
      setTimeout(function () {
        callback(errors.length ? errors : undefined, textures, images);
      }, 0);
    }
  }

  Object.keys(textureOptions).forEach(function (name) {
    var options = textureOptions[name];
    var onLoadFn;

    if (isAsyncSrc(options.src)) {
      onLoadFn = function onLoadFn(err, tex, img) {
        images[name] = img;
        --numDownloading;

        if (err) {
          errors.push(err);
        }

        callCallbackIfReady();
      };

      ++numDownloading;
    }

    textures[name] = createTexture(gl, options, onLoadFn);
  }); // queue the callback if there are no images to download.
  // We do this because if your code is structured to wait for
  // images to download but then you comment out all the async
  // images your code would break.

  callCallbackIfReady();
  return textures;
} // Using quotes prevents Uglify from changing the names.
// No speed diff AFAICT.

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var _exportNames = {
  m4: true,
  v3: true,
  primitives: true
};
exports.primitives = exports.v3 = exports.m4 = void 0;

var m4 = _interopRequireWildcard(__webpack_require__(6));

exports.m4 = m4;

var v3 = _interopRequireWildcard(__webpack_require__(3));

exports.v3 = v3;

var primitives = _interopRequireWildcard(__webpack_require__(10));

exports.primitives = primitives;

var _twgl = __webpack_require__(11);

Object.keys(_twgl).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = _twgl[key];
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.create3DFVertices = create3DFVertices;
exports.createAugmentedTypedArray = createAugmentedTypedArray;
exports.createCubeVertices = createCubeVertices;
exports.createPlaneVertices = createPlaneVertices;
exports.createSphereVertices = createSphereVertices;
exports.createTruncatedConeVertices = createTruncatedConeVertices;
exports.createXYQuadVertices = createXYQuadVertices;
exports.createCresentVertices = createCresentVertices;
exports.createCylinderVertices = createCylinderVertices;
exports.createTorusVertices = createTorusVertices;
exports.createDiscVertices = createDiscVertices;
exports.deindexVertices = deindexVertices;
exports.flattenNormals = flattenNormals;
exports.makeRandomVertexColors = makeRandomVertexColors;
exports.reorientDirections = reorientDirections;
exports.reorientNormals = reorientNormals;
exports.reorientPositions = reorientPositions;
exports.reorientVertices = reorientVertices;
exports.concatVertices = concatVertices;
exports.duplicateVertices = duplicateVertices;
exports.createDiscBuffers = exports.createDiscBufferInfo = exports.createTorusBuffers = exports.createTorusBufferInfo = exports.createCylinderBuffers = exports.createCylinderBufferInfo = exports.createCresentBuffers = exports.createCresentBufferInfo = exports.createXYQuadBuffers = exports.createXYQuadBufferInfo = exports.createTruncatedConeBuffers = exports.createTruncatedConeBufferInfo = exports.createSphereBuffers = exports.createSphereBufferInfo = exports.createPlaneBuffers = exports.createPlaneBufferInfo = exports.createCubeBuffers = exports.createCubeBufferInfo = exports.create3DFBuffers = exports.create3DFBufferInfo = void 0;

var attributes = _interopRequireWildcard(__webpack_require__(7));

var helper = _interopRequireWildcard(__webpack_require__(0));

var typedArrays = _interopRequireWildcard(__webpack_require__(1));

var m4 = _interopRequireWildcard(__webpack_require__(6));

var v3 = _interopRequireWildcard(__webpack_require__(3));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/*
 * Copyright 2015, Gregg Tavares.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Gregg Tavares. nor the names of his
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Various functions to make simple primitives
 *
 * note: Most primitive functions come in 3 styles
 *
 * *  `createSomeShapeBufferInfo`
 *
 *    These functions are almost always the functions you want to call. They
 *    create vertices then make WebGLBuffers and create {@link module:twgl.AttribInfo}s
 *    returing a {@link module:twgl.BufferInfo} you can pass to {@link module:twgl.setBuffersAndAttributes}
 *    and {@link module:twgl.drawBufferInfo} etc...
 *
 * *  `createSomeShapeBuffers`
 *
 *    These create WebGLBuffers and put your data in them but nothing else.
 *    It's a shortcut to doing it yourself if you don't want to use
 *    the higher level functions.
 *
 * *  `createSomeShapeVertices`
 *
 *    These just create vertices, no buffers. This allows you to manipulate the vertices
 *    or add more data before generating a {@link module:twgl.BufferInfo}. Once you're finished
 *    manipulating the vertices call {@link module:twgl.createBufferInfoFromArrays}.
 *
 *    example:
 *
 *        const arrays = twgl.primitives.createPlaneArrays(1);
 *        twgl.primitives.reorientVertices(arrays, m4.rotationX(Math.PI * 0.5));
 *        const bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);
 *
 * @module twgl/primitives
 */
var getArray = attributes.getArray_; // eslint-disable-line

var getNumComponents = attributes.getNumComponents_; // eslint-disable-line

/**
 * Add `push` to a typed array. It just keeps a 'cursor'
 * and allows use to `push` values into the array so we
 * don't have to manually compute offsets
 * @param {TypedArray} typedArray TypedArray to augment
 * @param {number} numComponents number of components.
 */

function augmentTypedArray(typedArray, numComponents) {
  var cursor = 0;

  typedArray.push = function () {
    for (var ii = 0; ii < arguments.length; ++ii) {
      var value = arguments[ii];

      if (value instanceof Array || typedArrays.isArrayBuffer(value)) {
        for (var jj = 0; jj < value.length; ++jj) {
          typedArray[cursor++] = value[jj];
        }
      } else {
        typedArray[cursor++] = value;
      }
    }
  };

  typedArray.reset = function (opt_index) {
    cursor = opt_index || 0;
  };

  typedArray.numComponents = numComponents;
  Object.defineProperty(typedArray, 'numElements', {
    get: function get() {
      return this.length / this.numComponents | 0;
    }
  });
  return typedArray;
}
/**
 * creates a typed array with a `push` function attached
 * so that you can easily *push* values.
 *
 * `push` can take multiple arguments. If an argument is an array each element
 * of the array will be added to the typed array.
 *
 * Example:
 *
 *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values
 *     array.push(1, 2, 3);
 *     array.push([4, 5, 6]);
 *     // array now contains [1, 2, 3, 4, 5, 6]
 *
 * Also has `numComponents` and `numElements` properties.
 *
 * @param {number} numComponents number of components
 * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.
 * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.
 * @return {ArrayBufferView} A typed array.
 * @memberOf module:twgl/primitives
 */


function createAugmentedTypedArray(numComponents, numElements, opt_type) {
  var Type = opt_type || Float32Array;
  return augmentTypedArray(new Type(numComponents * numElements), numComponents);
}

function allButIndices(name) {
  return name !== "indices";
}
/**
 * Given indexed vertices creates a new set of vertices unindexed by expanding the indexed vertices.
 * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex
 * @return {Object.<string, TypedArray>} The deindexed vertices
 * @memberOf module:twgl/primitives
 */


function deindexVertices(vertices) {
  var indices = vertices.indices;
  var newVertices = {};
  var numElements = indices.length;

  function expandToUnindexed(channel) {
    var srcBuffer = vertices[channel];
    var numComponents = srcBuffer.numComponents;
    var dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);

    for (var ii = 0; ii < numElements; ++ii) {
      var ndx = indices[ii];
      var offset = ndx * numComponents;

      for (var jj = 0; jj < numComponents; ++jj) {
        dstBuffer.push(srcBuffer[offset + jj]);
      }
    }

    newVertices[channel] = dstBuffer;
  }

  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);
  return newVertices;
}
/**
 * flattens the normals of deindexed vertices in place.
 * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten
 * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)
 * @memberOf module:twgl/primitives
 */


function flattenNormals(vertices) {
  if (vertices.indices) {
    throw "can't flatten normals of indexed vertices. deindex them first";
  }

  var normals = vertices.normal;
  var numNormals = normals.length;

  for (var ii = 0; ii < numNormals; ii += 9) {
    // pull out the 3 normals for this triangle
    var nax = normals[ii + 0];
    var nay = normals[ii + 1];
    var naz = normals[ii + 2];
    var nbx = normals[ii + 3];
    var nby = normals[ii + 4];
    var nbz = normals[ii + 5];
    var ncx = normals[ii + 6];
    var ncy = normals[ii + 7];
    var ncz = normals[ii + 8]; // add them

    var nx = nax + nbx + ncx;
    var ny = nay + nby + ncy;
    var nz = naz + nbz + ncz; // normalize them

    var length = Math.sqrt(nx * nx + ny * ny + nz * nz);
    nx /= length;
    ny /= length;
    nz /= length; // copy them back in

    normals[ii + 0] = nx;
    normals[ii + 1] = ny;
    normals[ii + 2] = nz;
    normals[ii + 3] = nx;
    normals[ii + 4] = ny;
    normals[ii + 5] = nz;
    normals[ii + 6] = nx;
    normals[ii + 7] = ny;
    normals[ii + 8] = nz;
  }

  return vertices;
}

function applyFuncToV3Array(array, matrix, fn) {
  var len = array.length;
  var tmp = new Float32Array(3);

  for (var ii = 0; ii < len; ii += 3) {
    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);
    array[ii] = tmp[0];
    array[ii + 1] = tmp[1];
    array[ii + 2] = tmp[2];
  }
}

function transformNormal(mi, v, dst) {
  dst = dst || v3.create();
  var v0 = v[0];
  var v1 = v[1];
  var v2 = v[2];
  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];
  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];
  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];
  return dst;
}
/**
 * Reorients directions by the given matrix..
 * @param {number[]|TypedArray} array The array. Assumes value floats per element.
 * @param {Matrix} matrix A matrix to multiply by.
 * @return {number[]|TypedArray} the same array that was passed in
 * @memberOf module:twgl/primitives
 */


function reorientDirections(array, matrix) {
  applyFuncToV3Array(array, matrix, m4.transformDirection);
  return array;
}
/**
 * Reorients normals by the inverse-transpose of the given
 * matrix..
 * @param {number[]|TypedArray} array The array. Assumes value floats per element.
 * @param {Matrix} matrix A matrix to multiply by.
 * @return {number[]|TypedArray} the same array that was passed in
 * @memberOf module:twgl/primitives
 */


function reorientNormals(array, matrix) {
  applyFuncToV3Array(array, m4.inverse(matrix), transformNormal);
  return array;
}
/**
 * Reorients positions by the given matrix. In other words, it
 * multiplies each vertex by the given matrix.
 * @param {number[]|TypedArray} array The array. Assumes value floats per element.
 * @param {Matrix} matrix A matrix to multiply by.
 * @return {number[]|TypedArray} the same array that was passed in
 * @memberOf module:twgl/primitives
 */


function reorientPositions(array, matrix) {
  applyFuncToV3Array(array, matrix, m4.transformPoint);
  return array;
}
/**
 * Reorients arrays by the given matrix. Assumes arrays have
 * names that contains 'pos' could be reoriented as positions,
 * 'binorm' or 'tan' as directions, and 'norm' as normals.
 *
 * @param {Object.<string, (number[]|TypedArray)>} arrays The vertices to reorient
 * @param {Matrix} matrix matrix to reorient by.
 * @return {Object.<string, (number[]|TypedArray)>} same arrays that were passed in.
 * @memberOf module:twgl/primitives
 */


function reorientVertices(arrays, matrix) {
  Object.keys(arrays).forEach(function (name) {
    var array = arrays[name];

    if (name.indexOf("pos") >= 0) {
      reorientPositions(array, matrix);
    } else if (name.indexOf("tan") >= 0 || name.indexOf("binorm") >= 0) {
      reorientDirections(array, matrix);
    } else if (name.indexOf("norm") >= 0) {
      reorientNormals(array, matrix);
    }
  });
  return arrays;
}
/**
 * Creates XY quad BufferInfo
 *
 * The default with no parameters will return a 2x2 quad with values from -1 to +1.
 * If you want a unit quad with that goes from 0 to 1 you'd call it with
 *
 *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);
 *
 * If you want a unit quad centered above 0,0 you'd call it with
 *
 *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
 * @param {number} [xOffset] the amount to offset the quad in X
 * @param {number} [yOffset] the amount to offset the quad in Y
 * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo
 * @memberOf module:twgl/primitives
 * @function createXYQuadBufferInfo
 */

/**
 * Creates XY quad Buffers
 *
 * The default with no parameters will return a 2x2 quad with values from -1 to +1.
 * If you want a unit quad with that goes from 0 to 1 you'd call it with
 *
 *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);
 *
 * If you want a unit quad centered above 0,0 you'd call it with
 *
 *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
 * @param {number} [xOffset] the amount to offset the quad in X
 * @param {number} [yOffset] the amount to offset the quad in Y
 * @return {module:twgl.BufferInfo} the created XY Quad buffers
 * @memberOf module:twgl/primitives
 * @function createXYQuadBuffers
 */

/**
 * Creates XY quad vertices
 *
 * The default with no parameters will return a 2x2 quad with values from -1 to +1.
 * If you want a unit quad with that goes from 0 to 1 you'd call it with
 *
 *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);
 *
 * If you want a unit quad centered above 0,0 you'd call it with
 *
 *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);
 *
 * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
 * @param {number} [xOffset] the amount to offset the quad in X
 * @param {number} [yOffset] the amount to offset the quad in Y
 * @return {Object.<string, TypedArray> the created XY Quad vertices
 * @memberOf module:twgl/primitives
 */


function createXYQuadVertices(size, xOffset, yOffset) {
  size = size || 2;
  xOffset = xOffset || 0;
  yOffset = yOffset || 0;
  size *= 0.5;
  return {
    position: {
      numComponents: 2,
      data: [xOffset + -1 * size, yOffset + -1 * size, xOffset + 1 * size, yOffset + -1 * size, xOffset + -1 * size, yOffset + 1 * size, xOffset + 1 * size, yOffset + 1 * size]
    },
    normal: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
    texcoord: [0, 0, 1, 0, 0, 1, 1, 1],
    indices: [0, 1, 2, 2, 1, 3]
  };
}
/**
 * Creates XZ plane BufferInfo.
 *
 * The created plane has position, normal, and texcoord data
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [width] Width of the plane. Default = 1
 * @param {number} [depth] Depth of the plane. Default = 1
 * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
 * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
 * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.
 * @return {@module:twgl.BufferInfo} The created plane BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createPlaneBufferInfo
 */

/**
 * Creates XZ plane buffers.
 *
 * The created plane has position, normal, and texcoord data
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [width] Width of the plane. Default = 1
 * @param {number} [depth] Depth of the plane. Default = 1
 * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
 * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
 * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.
 * @return {Object.<string, WebGLBuffer>} The created plane buffers.
 * @memberOf module:twgl/primitives
 * @function createPlaneBuffers
 */

/**
 * Creates XZ plane vertices.
 *
 * The created plane has position, normal, and texcoord data
 *
 * @param {number} [width] Width of the plane. Default = 1
 * @param {number} [depth] Depth of the plane. Default = 1
 * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
 * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
 * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.
 * @return {Object.<string, TypedArray>} The created plane vertices.
 * @memberOf module:twgl/primitives
 */


function createPlaneVertices(width, depth, subdivisionsWidth, subdivisionsDepth, matrix) {
  width = width || 1;
  depth = depth || 1;
  subdivisionsWidth = subdivisionsWidth || 1;
  subdivisionsDepth = subdivisionsDepth || 1;
  matrix = matrix || m4.identity();
  var numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);
  var positions = createAugmentedTypedArray(3, numVertices);
  var normals = createAugmentedTypedArray(3, numVertices);
  var texcoords = createAugmentedTypedArray(2, numVertices);

  for (var z = 0; z <= subdivisionsDepth; z++) {
    for (var x = 0; x <= subdivisionsWidth; x++) {
      var u = x / subdivisionsWidth;
      var v = z / subdivisionsDepth;
      positions.push(width * u - width * 0.5, 0, depth * v - depth * 0.5);
      normals.push(0, 1, 0);
      texcoords.push(u, v);
    }
  }

  var numVertsAcross = subdivisionsWidth + 1;
  var indices = createAugmentedTypedArray(3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);

  for (var _z = 0; _z < subdivisionsDepth; _z++) {
    // eslint-disable-line
    for (var _x = 0; _x < subdivisionsWidth; _x++) {
      // eslint-disable-line
      // Make triangle 1 of quad.
      indices.push((_z + 0) * numVertsAcross + _x, (_z + 1) * numVertsAcross + _x, (_z + 0) * numVertsAcross + _x + 1); // Make triangle 2 of quad.

      indices.push((_z + 1) * numVertsAcross + _x, (_z + 1) * numVertsAcross + _x + 1, (_z + 0) * numVertsAcross + _x + 1);
    }
  }

  var arrays = reorientVertices({
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices
  }, matrix);
  return arrays;
}
/**
 * Creates sphere BufferInfo.
 *
 * The created sphere has position, normal, and texcoord data
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius radius of the sphere.
 * @param {number} subdivisionsAxis number of steps around the sphere.
 * @param {number} subdivisionsHeight number of vertically on the sphere.
 * @param {number} [opt_startLatitudeInRadians] where to start the
 *     top of the sphere. Default = 0.
 * @param {number} [opt_endLatitudeInRadians] Where to end the
 *     bottom of the sphere. Default = Math.PI.
 * @param {number} [opt_startLongitudeInRadians] where to start
 *     wrapping the sphere. Default = 0.
 * @param {number} [opt_endLongitudeInRadians] where to end
 *     wrapping the sphere. Default = 2 * Math.PI.
 * @return {module:twgl.BufferInfo} The created sphere BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createSphereBufferInfo
 */

/**
 * Creates sphere buffers.
 *
 * The created sphere has position, normal, and texcoord data
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius radius of the sphere.
 * @param {number} subdivisionsAxis number of steps around the sphere.
 * @param {number} subdivisionsHeight number of vertically on the sphere.
 * @param {number} [opt_startLatitudeInRadians] where to start the
 *     top of the sphere. Default = 0.
 * @param {number} [opt_endLatitudeInRadians] Where to end the
 *     bottom of the sphere. Default = Math.PI.
 * @param {number} [opt_startLongitudeInRadians] where to start
 *     wrapping the sphere. Default = 0.
 * @param {number} [opt_endLongitudeInRadians] where to end
 *     wrapping the sphere. Default = 2 * Math.PI.
 * @return {Object.<string, WebGLBuffer>} The created sphere buffers.
 * @memberOf module:twgl/primitives
 * @function createSphereBuffers
 */

/**
 * Creates sphere vertices.
 *
 * The created sphere has position, normal, and texcoord data
 *
 * @param {number} radius radius of the sphere.
 * @param {number} subdivisionsAxis number of steps around the sphere.
 * @param {number} subdivisionsHeight number of vertically on the sphere.
 * @param {number} [opt_startLatitudeInRadians] where to start the
 *     top of the sphere. Default = 0.
 * @param {number} [opt_endLatitudeInRadians] Where to end the
 *     bottom of the sphere. Default = Math.PI.
 * @param {number} [opt_startLongitudeInRadians] where to start
 *     wrapping the sphere. Default = 0.
 * @param {number} [opt_endLongitudeInRadians] where to end
 *     wrapping the sphere. Default = 2 * Math.PI.
 * @return {Object.<string, TypedArray>} The created sphere vertices.
 * @memberOf module:twgl/primitives
 */


function createSphereVertices(radius, subdivisionsAxis, subdivisionsHeight, opt_startLatitudeInRadians, opt_endLatitudeInRadians, opt_startLongitudeInRadians, opt_endLongitudeInRadians) {
  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {
    throw Error('subdivisionAxis and subdivisionHeight must be > 0');
  }

  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;
  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;
  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;
  opt_endLongitudeInRadians = opt_endLongitudeInRadians || Math.PI * 2;
  var latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;
  var longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians; // We are going to generate our sphere by iterating through its
  // spherical coordinates and generating 2 triangles for each quad on a
  // ring of the sphere.

  var numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);
  var positions = createAugmentedTypedArray(3, numVertices);
  var normals = createAugmentedTypedArray(3, numVertices);
  var texcoords = createAugmentedTypedArray(2, numVertices); // Generate the individual vertices in our vertex buffer.

  for (var y = 0; y <= subdivisionsHeight; y++) {
    for (var x = 0; x <= subdivisionsAxis; x++) {
      // Generate a vertex based on its spherical coordinates
      var u = x / subdivisionsAxis;
      var v = y / subdivisionsHeight;
      var theta = longRange * u;
      var phi = latRange * v;
      var sinTheta = Math.sin(theta);
      var cosTheta = Math.cos(theta);
      var sinPhi = Math.sin(phi);
      var cosPhi = Math.cos(phi);
      var ux = cosTheta * sinPhi;
      var uy = cosPhi;
      var uz = sinTheta * sinPhi;
      positions.push(radius * ux, radius * uy, radius * uz);
      normals.push(ux, uy, uz);
      texcoords.push(1 - u, v);
    }
  }

  var numVertsAround = subdivisionsAxis + 1;
  var indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);

  for (var _x2 = 0; _x2 < subdivisionsAxis; _x2++) {
    // eslint-disable-line
    for (var _y = 0; _y < subdivisionsHeight; _y++) {
      // eslint-disable-line
      // Make triangle 1 of quad.
      indices.push((_y + 0) * numVertsAround + _x2, (_y + 0) * numVertsAround + _x2 + 1, (_y + 1) * numVertsAround + _x2); // Make triangle 2 of quad.

      indices.push((_y + 1) * numVertsAround + _x2, (_y + 0) * numVertsAround + _x2 + 1, (_y + 1) * numVertsAround + _x2 + 1);
    }
  }

  return {
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices
  };
}
/**
 * Array of the indices of corners of each face of a cube.
 * @type {Array.<number[]>}
 */


var CUBE_FACE_INDICES = [[3, 7, 5, 1], // right
[6, 2, 0, 4], // left
[6, 7, 3, 2], // ??
[0, 1, 5, 4], // ??
[7, 6, 4, 5], // front
[2, 3, 1, 0]];
/**
 * Creates a BufferInfo for a cube.
 *
 * The cube is created around the origin. (-size / 2, size / 2).
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [size] width, height and depth of the cube.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createCubeBufferInfo
 */

/**
 * Creates the buffers and indices for a cube.
 *
 * The cube is created around the origin. (-size / 2, size / 2).
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [size] width, height and depth of the cube.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createCubeBuffers
 */

/**
 * Creates the vertices and indices for a cube.
 *
 * The cube is created around the origin. (-size / 2, size / 2).
 *
 * @param {number} [size] width, height and depth of the cube.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */

function createCubeVertices(size) {
  size = size || 1;
  var k = size / 2;
  var cornerVertices = [[-k, -k, -k], [+k, -k, -k], [-k, +k, -k], [+k, +k, -k], [-k, -k, +k], [+k, -k, +k], [-k, +k, +k], [+k, +k, +k]];
  var faceNormals = [[+1, +0, +0], [-1, +0, +0], [+0, +1, +0], [+0, -1, +0], [+0, +0, +1], [+0, +0, -1]];
  var uvCoords = [[1, 0], [0, 0], [0, 1], [1, 1]];
  var numVertices = 6 * 4;
  var positions = createAugmentedTypedArray(3, numVertices);
  var normals = createAugmentedTypedArray(3, numVertices);
  var texcoords = createAugmentedTypedArray(2, numVertices);
  var indices = createAugmentedTypedArray(3, 6 * 2, Uint16Array);

  for (var f = 0; f < 6; ++f) {
    var faceIndices = CUBE_FACE_INDICES[f];

    for (var v = 0; v < 4; ++v) {
      var position = cornerVertices[faceIndices[v]];
      var normal = faceNormals[f];
      var uv = uvCoords[v]; // Each face needs all four vertices because the normals and texture
      // coordinates are not all the same.

      positions.push(position);
      normals.push(normal);
      texcoords.push(uv);
    } // Two triangles make a square face.


    var offset = 4 * f;
    indices.push(offset + 0, offset + 1, offset + 2);
    indices.push(offset + 0, offset + 2, offset + 3);
  }

  return {
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices
  };
}
/**
 * Creates a BufferInfo for a truncated cone, which is like a cylinder
 * except that it has different top and bottom radii. A truncated cone
 * can also be used to create cylinders and regular cones. The
 * truncated cone will be created centered about the origin, with the
 * y axis as its vertical axis.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} bottomRadius Bottom radius of truncated cone.
 * @param {number} topRadius Top radius of truncated cone.
 * @param {number} height Height of truncated cone.
 * @param {number} radialSubdivisions The number of subdivisions around the
 *     truncated cone.
 * @param {number} verticalSubdivisions The number of subdivisions down the
 *     truncated cone.
 * @param {boolean} [opt_topCap] Create top cap. Default = true.
 * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
 * @return {module:twgl.BufferInfo} The created cone BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createTruncatedConeBufferInfo
 */

/**
 * Creates buffers for a truncated cone, which is like a cylinder
 * except that it has different top and bottom radii. A truncated cone
 * can also be used to create cylinders and regular cones. The
 * truncated cone will be created centered about the origin, with the
 * y axis as its vertical axis.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} bottomRadius Bottom radius of truncated cone.
 * @param {number} topRadius Top radius of truncated cone.
 * @param {number} height Height of truncated cone.
 * @param {number} radialSubdivisions The number of subdivisions around the
 *     truncated cone.
 * @param {number} verticalSubdivisions The number of subdivisions down the
 *     truncated cone.
 * @param {boolean} [opt_topCap] Create top cap. Default = true.
 * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
 * @return {Object.<string, WebGLBuffer>} The created cone buffers.
 * @memberOf module:twgl/primitives
 * @function createTruncatedConeBuffers
 */

/**
 * Creates vertices for a truncated cone, which is like a cylinder
 * except that it has different top and bottom radii. A truncated cone
 * can also be used to create cylinders and regular cones. The
 * truncated cone will be created centered about the origin, with the
 * y axis as its vertical axis. .
 *
 * @param {number} bottomRadius Bottom radius of truncated cone.
 * @param {number} topRadius Top radius of truncated cone.
 * @param {number} height Height of truncated cone.
 * @param {number} radialSubdivisions The number of subdivisions around the
 *     truncated cone.
 * @param {number} verticalSubdivisions The number of subdivisions down the
 *     truncated cone.
 * @param {boolean} [opt_topCap] Create top cap. Default = true.
 * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
 * @return {Object.<string, TypedArray>} The created cone vertices.
 * @memberOf module:twgl/primitives
 */


function createTruncatedConeVertices(bottomRadius, topRadius, height, radialSubdivisions, verticalSubdivisions, opt_topCap, opt_bottomCap) {
  if (radialSubdivisions < 3) {
    throw Error('radialSubdivisions must be 3 or greater');
  }

  if (verticalSubdivisions < 1) {
    throw Error('verticalSubdivisions must be 1 or greater');
  }

  var topCap = opt_topCap === undefined ? true : opt_topCap;
  var bottomCap = opt_bottomCap === undefined ? true : opt_bottomCap;
  var extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);
  var numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);
  var positions = createAugmentedTypedArray(3, numVertices);
  var normals = createAugmentedTypedArray(3, numVertices);
  var texcoords = createAugmentedTypedArray(2, numVertices);
  var indices = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra) * 2, Uint16Array);
  var vertsAroundEdge = radialSubdivisions + 1; // The slant of the cone is constant across its surface

  var slant = Math.atan2(bottomRadius - topRadius, height);
  var cosSlant = Math.cos(slant);
  var sinSlant = Math.sin(slant);
  var start = topCap ? -2 : 0;
  var end = verticalSubdivisions + (bottomCap ? 2 : 0);

  for (var yy = start; yy <= end; ++yy) {
    var v = yy / verticalSubdivisions;
    var y = height * v;
    var ringRadius = void 0;

    if (yy < 0) {
      y = 0;
      v = 1;
      ringRadius = bottomRadius;
    } else if (yy > verticalSubdivisions) {
      y = height;
      v = 1;
      ringRadius = topRadius;
    } else {
      ringRadius = bottomRadius + (topRadius - bottomRadius) * (yy / verticalSubdivisions);
    }

    if (yy === -2 || yy === verticalSubdivisions + 2) {
      ringRadius = 0;
      v = 0;
    }

    y -= height / 2;

    for (var ii = 0; ii < vertsAroundEdge; ++ii) {
      var sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);
      var cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);
      positions.push(sin * ringRadius, y, cos * ringRadius);
      normals.push(yy < 0 || yy > verticalSubdivisions ? 0 : sin * cosSlant, yy < 0 ? -1 : yy > verticalSubdivisions ? 1 : sinSlant, yy < 0 || yy > verticalSubdivisions ? 0 : cos * cosSlant);
      texcoords.push(ii / radialSubdivisions, 1 - v);
    }
  }

  for (var _yy = 0; _yy < verticalSubdivisions + extra; ++_yy) {
    // eslint-disable-line
    for (var _ii = 0; _ii < radialSubdivisions; ++_ii) {
      // eslint-disable-line
      indices.push(vertsAroundEdge * (_yy + 0) + 0 + _ii, vertsAroundEdge * (_yy + 0) + 1 + _ii, vertsAroundEdge * (_yy + 1) + 1 + _ii);
      indices.push(vertsAroundEdge * (_yy + 0) + 0 + _ii, vertsAroundEdge * (_yy + 1) + 1 + _ii, vertsAroundEdge * (_yy + 1) + 0 + _ii);
    }
  }

  return {
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices
  };
}
/**
 * Expands RLE data
 * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z
 * @param {number[]} [padding] value to add each entry with.
 * @return {number[]} the expanded rleData
 */


function expandRLEData(rleData, padding) {
  padding = padding || [];
  var data = [];

  for (var ii = 0; ii < rleData.length; ii += 4) {
    var runLength = rleData[ii];
    var element = rleData.slice(ii + 1, ii + 4);
    element.push.apply(element, padding);

    for (var jj = 0; jj < runLength; ++jj) {
      data.push.apply(data, element);
    }
  }

  return data;
}
/**
 * Creates 3D 'F' BufferInfo.
 * An 'F' is useful because you can easily tell which way it is oriented.
 * The created 'F' has position, normal, texcoord, and color buffers.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function create3DFBufferInfo
 */

/**
 * Creates 3D 'F' buffers.
 * An 'F' is useful because you can easily tell which way it is oriented.
 * The created 'F' has position, normal, texcoord, and color buffers.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function create3DFBuffers
 */

/**
 * Creates 3D 'F' vertices.
 * An 'F' is useful because you can easily tell which way it is oriented.
 * The created 'F' has position, normal, texcoord, and color arrays.
 *
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */


function create3DFVertices() {
  var positions = [// left column front
  0, 0, 0, 0, 150, 0, 30, 0, 0, 0, 150, 0, 30, 150, 0, 30, 0, 0, // top rung front
  30, 0, 0, 30, 30, 0, 100, 0, 0, 30, 30, 0, 100, 30, 0, 100, 0, 0, // middle rung front
  30, 60, 0, 30, 90, 0, 67, 60, 0, 30, 90, 0, 67, 90, 0, 67, 60, 0, // left column back
  0, 0, 30, 30, 0, 30, 0, 150, 30, 0, 150, 30, 30, 0, 30, 30, 150, 30, // top rung back
  30, 0, 30, 100, 0, 30, 30, 30, 30, 30, 30, 30, 100, 0, 30, 100, 30, 30, // middle rung back
  30, 60, 30, 67, 60, 30, 30, 90, 30, 30, 90, 30, 67, 60, 30, 67, 90, 30, // top
  0, 0, 0, 100, 0, 0, 100, 0, 30, 0, 0, 0, 100, 0, 30, 0, 0, 30, // top rung front
  100, 0, 0, 100, 30, 0, 100, 30, 30, 100, 0, 0, 100, 30, 30, 100, 0, 30, // under top rung
  30, 30, 0, 30, 30, 30, 100, 30, 30, 30, 30, 0, 100, 30, 30, 100, 30, 0, // between top rung and middle
  30, 30, 0, 30, 60, 30, 30, 30, 30, 30, 30, 0, 30, 60, 0, 30, 60, 30, // top of middle rung
  30, 60, 0, 67, 60, 30, 30, 60, 30, 30, 60, 0, 67, 60, 0, 67, 60, 30, // front of middle rung
  67, 60, 0, 67, 90, 30, 67, 60, 30, 67, 60, 0, 67, 90, 0, 67, 90, 30, // bottom of middle rung.
  30, 90, 0, 30, 90, 30, 67, 90, 30, 30, 90, 0, 67, 90, 30, 67, 90, 0, // front of bottom
  30, 90, 0, 30, 150, 30, 30, 90, 30, 30, 90, 0, 30, 150, 0, 30, 150, 30, // bottom
  0, 150, 0, 0, 150, 30, 30, 150, 30, 0, 150, 0, 30, 150, 30, 30, 150, 0, // left side
  0, 0, 0, 0, 0, 30, 0, 150, 30, 0, 0, 0, 0, 150, 30, 0, 150, 0];
  var texcoords = [// left column front
  0.22, 0.19, 0.22, 0.79, 0.34, 0.19, 0.22, 0.79, 0.34, 0.79, 0.34, 0.19, // top rung front
  0.34, 0.19, 0.34, 0.31, 0.62, 0.19, 0.34, 0.31, 0.62, 0.31, 0.62, 0.19, // middle rung front
  0.34, 0.43, 0.34, 0.55, 0.49, 0.43, 0.34, 0.55, 0.49, 0.55, 0.49, 0.43, // left column back
  0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, // top rung back
  0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, // middle rung back
  0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, // top
  0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, // top rung front
  0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, // under top rung
  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, // between top rung and middle
  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // top of middle rung
  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // front of middle rung
  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // bottom of middle rung.
  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, // front of bottom
  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // bottom
  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, // left side
  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0];
  var normals = expandRLEData([// left column front
  // top rung front
  // middle rung front
  18, 0, 0, 1, // left column back
  // top rung back
  // middle rung back
  18, 0, 0, -1, // top
  6, 0, 1, 0, // top rung front
  6, 1, 0, 0, // under top rung
  6, 0, -1, 0, // between top rung and middle
  6, 1, 0, 0, // top of middle rung
  6, 0, 1, 0, // front of middle rung
  6, 1, 0, 0, // bottom of middle rung.
  6, 0, -1, 0, // front of bottom
  6, 1, 0, 0, // bottom
  6, 0, -1, 0, // left side
  6, -1, 0, 0]);
  var colors = expandRLEData([// left column front
  // top rung front
  // middle rung front
  18, 200, 70, 120, // left column back
  // top rung back
  // middle rung back
  18, 80, 70, 200, // top
  6, 70, 200, 210, // top rung front
  6, 200, 200, 70, // under top rung
  6, 210, 100, 70, // between top rung and middle
  6, 210, 160, 70, // top of middle rung
  6, 70, 180, 210, // front of middle rung
  6, 100, 70, 210, // bottom of middle rung.
  6, 76, 210, 100, // front of bottom
  6, 140, 210, 80, // bottom
  6, 90, 130, 110, // left side
  6, 160, 160, 220], [255]);
  var numVerts = positions.length / 3;
  var arrays = {
    position: createAugmentedTypedArray(3, numVerts),
    texcoord: createAugmentedTypedArray(2, numVerts),
    normal: createAugmentedTypedArray(3, numVerts),
    color: createAugmentedTypedArray(4, numVerts, Uint8Array),
    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array)
  };
  arrays.position.push(positions);
  arrays.texcoord.push(texcoords);
  arrays.normal.push(normals);
  arrays.color.push(colors);

  for (var ii = 0; ii < numVerts; ++ii) {
    arrays.indices.push(ii);
  }

  return arrays;
}
/**
 * Creates cresent BufferInfo.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} verticalRadius The vertical radius of the cresent.
 * @param {number} outerRadius The outer radius of the cresent.
 * @param {number} innerRadius The inner radius of the cresent.
 * @param {number} thickness The thickness of the cresent.
 * @param {number} subdivisionsDown number of steps around the cresent.
 * @param {number} subdivisionsThick number of vertically on the cresent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createCresentBufferInfo
 */

/**
 * Creates cresent buffers.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} verticalRadius The vertical radius of the cresent.
 * @param {number} outerRadius The outer radius of the cresent.
 * @param {number} innerRadius The inner radius of the cresent.
 * @param {number} thickness The thickness of the cresent.
 * @param {number} subdivisionsDown number of steps around the cresent.
 * @param {number} subdivisionsThick number of vertically on the cresent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createCresentBuffers
 */

/**
 * Creates cresent vertices.
 *
 * @param {number} verticalRadius The vertical radius of the cresent.
 * @param {number} outerRadius The outer radius of the cresent.
 * @param {number} innerRadius The inner radius of the cresent.
 * @param {number} thickness The thickness of the cresent.
 * @param {number} subdivisionsDown number of steps around the cresent.
 * @param {number} subdivisionsThick number of vertically on the cresent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */


function createCresentVertices(verticalRadius, outerRadius, innerRadius, thickness, subdivisionsDown, startOffset, endOffset) {
  if (subdivisionsDown <= 0) {
    throw Error('subdivisionDown must be > 0');
  }

  startOffset = startOffset || 0;
  endOffset = endOffset || 1;
  var subdivisionsThick = 2;
  var offsetRange = endOffset - startOffset;
  var numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);
  var positions = createAugmentedTypedArray(3, numVertices);
  var normals = createAugmentedTypedArray(3, numVertices);
  var texcoords = createAugmentedTypedArray(2, numVertices);

  function lerp(a, b, s) {
    return a + (b - a) * s;
  }

  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {
    for (var z = 0; z <= subdivisionsDown; z++) {
      var uBack = x / (subdivisionsThick - 1);
      var v = z / subdivisionsDown;
      var xBack = (uBack - 0.5) * 2;
      var angle = (startOffset + v * offsetRange) * Math.PI;
      var s = Math.sin(angle);
      var c = Math.cos(angle);
      var radius = lerp(verticalRadius, arcRadius, s);
      var px = xBack * thickness;
      var py = c * verticalRadius;
      var pz = s * radius;
      positions.push(px, py, pz);
      var n = v3.add(v3.multiply([0, s, c], normalMult), normalAdd);
      normals.push(n);
      texcoords.push(uBack * uMult + uAdd, v);
    }
  } // Generate the individual vertices in our vertex buffer.


  for (var x = 0; x < subdivisionsThick; x++) {
    var uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;
    createArc(outerRadius, x, [1, 1, 1], [0, 0, 0], 1, 0);
    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);
    createArc(innerRadius, x, [1, 1, 1], [0, 0, 0], 1, 0);
    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);
  } // Do outer surface.


  var indices = createAugmentedTypedArray(3, subdivisionsDown * 2 * (2 + subdivisionsThick), Uint16Array);

  function createSurface(leftArcOffset, rightArcOffset) {
    for (var z = 0; z < subdivisionsDown; ++z) {
      // Make triangle 1 of quad.
      indices.push(leftArcOffset + z + 0, leftArcOffset + z + 1, rightArcOffset + z + 0); // Make triangle 2 of quad.

      indices.push(leftArcOffset + z + 1, rightArcOffset + z + 1, rightArcOffset + z + 0);
    }
  }

  var numVerticesDown = subdivisionsDown + 1; // front

  createSurface(numVerticesDown * 0, numVerticesDown * 4); // right

  createSurface(numVerticesDown * 5, numVerticesDown * 7); // back

  createSurface(numVerticesDown * 6, numVerticesDown * 2); // left

  createSurface(numVerticesDown * 3, numVerticesDown * 1);
  return {
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices
  };
}
/**
 * Creates cylinder BufferInfo. The cylinder will be created around the origin
 * along the y-axis.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius Radius of cylinder.
 * @param {number} height Height of cylinder.
 * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
 * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
 * @param {boolean} [topCap] Create top cap. Default = true.
 * @param {boolean} [bottomCap] Create bottom cap. Default = true.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createCylinderBufferInfo
 */

/**
 * Creates cylinder buffers. The cylinder will be created around the origin
 * along the y-axis.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius Radius of cylinder.
 * @param {number} height Height of cylinder.
 * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
 * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
 * @param {boolean} [topCap] Create top cap. Default = true.
 * @param {boolean} [bottomCap] Create bottom cap. Default = true.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createCylinderBuffers
 */

/**
 * Creates cylinder vertices. The cylinder will be created around the origin
 * along the y-axis.
 *
 * @param {number} radius Radius of cylinder.
 * @param {number} height Height of cylinder.
 * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
 * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
 * @param {boolean} [topCap] Create top cap. Default = true.
 * @param {boolean} [bottomCap] Create bottom cap. Default = true.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */


function createCylinderVertices(radius, height, radialSubdivisions, verticalSubdivisions, topCap, bottomCap) {
  return createTruncatedConeVertices(radius, radius, height, radialSubdivisions, verticalSubdivisions, topCap, bottomCap);
}
/**
 * Creates BufferInfo for a torus
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius radius of center of torus circle.
 * @param {number} thickness radius of torus ring.
 * @param {number} radialSubdivisions The number of subdivisions around the torus.
 * @param {number} bodySubdivisions The number of subdivisions around the body torus.
 * @param {boolean} [startAngle] start angle in radians. Default = 0.
 * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createTorusBufferInfo
 */

/**
 * Creates buffers for a torus
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius radius of center of torus circle.
 * @param {number} thickness radius of torus ring.
 * @param {number} radialSubdivisions The number of subdivisions around the torus.
 * @param {number} bodySubdivisions The number of subdivisions around the body torus.
 * @param {boolean} [startAngle] start angle in radians. Default = 0.
 * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createTorusBuffers
 */

/**
 * Creates vertices for a torus
 *
 * @param {number} radius radius of center of torus circle.
 * @param {number} thickness radius of torus ring.
 * @param {number} radialSubdivisions The number of subdivisions around the torus.
 * @param {number} bodySubdivisions The number of subdivisions around the body torus.
 * @param {boolean} [startAngle] start angle in radians. Default = 0.
 * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */


function createTorusVertices(radius, thickness, radialSubdivisions, bodySubdivisions, startAngle, endAngle) {
  if (radialSubdivisions < 3) {
    throw Error('radialSubdivisions must be 3 or greater');
  }

  if (bodySubdivisions < 3) {
    throw Error('verticalSubdivisions must be 3 or greater');
  }

  startAngle = startAngle || 0;
  endAngle = endAngle || Math.PI * 2;
  var range = endAngle - startAngle;
  var radialParts = radialSubdivisions + 1;
  var bodyParts = bodySubdivisions + 1;
  var numVertices = radialParts * bodyParts;
  var positions = createAugmentedTypedArray(3, numVertices);
  var normals = createAugmentedTypedArray(3, numVertices);
  var texcoords = createAugmentedTypedArray(2, numVertices);
  var indices = createAugmentedTypedArray(3, radialSubdivisions * bodySubdivisions * 2, Uint16Array);

  for (var slice = 0; slice < bodyParts; ++slice) {
    var v = slice / bodySubdivisions;
    var sliceAngle = v * Math.PI * 2;
    var sliceSin = Math.sin(sliceAngle);
    var ringRadius = radius + sliceSin * thickness;
    var ny = Math.cos(sliceAngle);
    var y = ny * thickness;

    for (var ring = 0; ring < radialParts; ++ring) {
      var u = ring / radialSubdivisions;
      var ringAngle = startAngle + u * range;
      var xSin = Math.sin(ringAngle);
      var zCos = Math.cos(ringAngle);
      var x = xSin * ringRadius;
      var z = zCos * ringRadius;
      var nx = xSin * sliceSin;
      var nz = zCos * sliceSin;
      positions.push(x, y, z);
      normals.push(nx, ny, nz);
      texcoords.push(u, 1 - v);
    }
  }

  for (var _slice = 0; _slice < bodySubdivisions; ++_slice) {
    // eslint-disable-line
    for (var _ring = 0; _ring < radialSubdivisions; ++_ring) {
      // eslint-disable-line
      var nextRingIndex = 1 + _ring;
      var nextSliceIndex = 1 + _slice;
      indices.push(radialParts * _slice + _ring, radialParts * nextSliceIndex + _ring, radialParts * _slice + nextRingIndex);
      indices.push(radialParts * nextSliceIndex + _ring, radialParts * nextSliceIndex + nextRingIndex, radialParts * _slice + nextRingIndex);
    }
  }

  return {
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices
  };
}
/**
 * Creates a disc BufferInfo. The disc will be in the xz plane, centered at
 * the origin. When creating, at least 3 divisions, or pie
 * pieces, need to be specified, otherwise the triangles making
 * up the disc will be degenerate. You can also specify the
 * number of radial pieces `stacks`. A value of 1 for
 * stacks will give you a simple disc of pie pieces.  If you
 * want to create an annulus you can set `innerRadius` to a
 * value > 0. Finally, `stackPower` allows you to have the widths
 * increase or decrease as you move away from the center. This
 * is particularly useful when using the disc as a ground plane
 * with a fixed camera such that you don't need the resolution
 * of small triangles near the perimeter. For example, a value
 * of 2 will produce stacks whose ouside radius increases with
 * the square of the stack index. A value of 1 will give uniform
 * stacks.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius Radius of the ground plane.
 * @param {number} divisions Number of triangles in the ground plane (at least 3).
 * @param {number} [stacks] Number of radial divisions (default=1).
 * @param {number} [innerRadius] Default 0.
 * @param {number} [stackPower] Power to raise stack size to for decreasing width.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createDiscBufferInfo
 */

/**
 * Creates disc buffers. The disc will be in the xz plane, centered at
 * the origin. When creating, at least 3 divisions, or pie
 * pieces, need to be specified, otherwise the triangles making
 * up the disc will be degenerate. You can also specify the
 * number of radial pieces `stacks`. A value of 1 for
 * stacks will give you a simple disc of pie pieces.  If you
 * want to create an annulus you can set `innerRadius` to a
 * value > 0. Finally, `stackPower` allows you to have the widths
 * increase or decrease as you move away from the center. This
 * is particularly useful when using the disc as a ground plane
 * with a fixed camera such that you don't need the resolution
 * of small triangles near the perimeter. For example, a value
 * of 2 will produce stacks whose ouside radius increases with
 * the square of the stack index. A value of 1 will give uniform
 * stacks.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius Radius of the ground plane.
 * @param {number} divisions Number of triangles in the ground plane (at least 3).
 * @param {number} [stacks] Number of radial divisions (default=1).
 * @param {number} [innerRadius] Default 0.
 * @param {number} [stackPower] Power to raise stack size to for decreasing width.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createDiscBuffers
 */

/**
 * Creates disc vertices. The disc will be in the xz plane, centered at
 * the origin. When creating, at least 3 divisions, or pie
 * pieces, need to be specified, otherwise the triangles making
 * up the disc will be degenerate. You can also specify the
 * number of radial pieces `stacks`. A value of 1 for
 * stacks will give you a simple disc of pie pieces.  If you
 * want to create an annulus you can set `innerRadius` to a
 * value > 0. Finally, `stackPower` allows you to have the widths
 * increase or decrease as you move away from the center. This
 * is particularly useful when using the disc as a ground plane
 * with a fixed camera such that you don't need the resolution
 * of small triangles near the perimeter. For example, a value
 * of 2 will produce stacks whose ouside radius increases with
 * the square of the stack index. A value of 1 will give uniform
 * stacks.
 *
 * @param {number} radius Radius of the ground plane.
 * @param {number} divisions Number of triangles in the ground plane (at least 3).
 * @param {number} [stacks] Number of radial divisions (default=1).
 * @param {number} [innerRadius] Default 0.
 * @param {number} [stackPower] Power to raise stack size to for decreasing width.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */


function createDiscVertices(radius, divisions, stacks, innerRadius, stackPower) {
  if (divisions < 3) {
    throw Error('divisions must be at least 3');
  }

  stacks = stacks ? stacks : 1;
  stackPower = stackPower ? stackPower : 1;
  innerRadius = innerRadius ? innerRadius : 0; // Note: We don't share the center vertex because that would
  // mess up texture coordinates.

  var numVertices = (divisions + 1) * (stacks + 1);
  var positions = createAugmentedTypedArray(3, numVertices);
  var normals = createAugmentedTypedArray(3, numVertices);
  var texcoords = createAugmentedTypedArray(2, numVertices);
  var indices = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);
  var firstIndex = 0;
  var radiusSpan = radius - innerRadius;
  var pointsPerStack = divisions + 1; // Build the disk one stack at a time.

  for (var stack = 0; stack <= stacks; ++stack) {
    var stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);

    for (var i = 0; i <= divisions; ++i) {
      var theta = 2.0 * Math.PI * i / divisions;
      var x = stackRadius * Math.cos(theta);
      var z = stackRadius * Math.sin(theta);
      positions.push(x, 0, z);
      normals.push(0, 1, 0);
      texcoords.push(1 - i / divisions, stack / stacks);

      if (stack > 0 && i !== divisions) {
        // a, b, c and d are the indices of the vertices of a quad.  unless
        // the current stack is the one closest to the center, in which case
        // the vertices a and b connect to the center vertex.
        var a = firstIndex + (i + 1);
        var b = firstIndex + i;
        var c = firstIndex + i - pointsPerStack;
        var d = firstIndex + (i + 1) - pointsPerStack; // Make a quad of the vertices a, b, c, d.

        indices.push(a, b, c);
        indices.push(a, c, d);
      }
    }

    firstIndex += divisions + 1;
  }

  return {
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices
  };
}
/**
 * creates a random integer between 0 and range - 1 inclusive.
 * @param {number} range
 * @return {number} random value between 0 and range - 1 inclusive.
 */


function randInt(range) {
  return Math.random() * range | 0;
}
/**
 * Used to supply random colors
 * @callback RandomColorFunc
 * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed
 * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha
 * @return {number} a number from 0 to 255
 * @memberOf module:twgl/primitives
 */

/**
 * @typedef {Object} RandomVerticesOptions
 * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices
 * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers
 * @memberOf module:twgl/primitives
 */

/**
 * Creates an augmentedTypedArray of random vertex colors.
 * If the vertices are indexed (have an indices array) then will
 * just make random colors. Otherwise assumes they are triangles
 * and makes one random color for every 3 vertices.
 * @param {Object.<string, augmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.
 * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.
 * @return {Object.<string, augmentedTypedArray>} same vertices as passed in with `color` added.
 * @memberOf module:twgl/primitives
 */


function makeRandomVertexColors(vertices, options) {
  options = options || {};
  var numElements = vertices.position.numElements;
  var vcolors = createAugmentedTypedArray(4, numElements, Uint8Array);

  var rand = options.rand || function (ndx, channel) {
    return channel < 3 ? randInt(256) : 255;
  };

  vertices.color = vcolors;

  if (vertices.indices) {
    // just make random colors if index
    for (var ii = 0; ii < numElements; ++ii) {
      vcolors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));
    }
  } else {
    // make random colors per triangle
    var numVertsPerColor = options.vertsPerColor || 3;
    var numSets = numElements / numVertsPerColor;

    for (var _ii2 = 0; _ii2 < numSets; ++_ii2) {
      // eslint-disable-line
      var color = [rand(_ii2, 0), rand(_ii2, 1), rand(_ii2, 2), rand(_ii2, 3)];

      for (var jj = 0; jj < numVertsPerColor; ++jj) {
        vcolors.push(color);
      }
    }
  }

  return vertices;
}
/**
 * creates a function that calls fn to create vertices and then
 * creates a buffers for them
 */


function createBufferFunc(fn) {
  return function (gl) {
    var arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));
    return attributes.createBuffersFromArrays(gl, arrays);
  };
}
/**
 * creates a function that calls fn to create vertices and then
 * creates a bufferInfo object for them
 */


function createBufferInfoFunc(fn) {
  return function (gl) {
    var arrays = fn.apply(null, Array.prototype.slice.call(arguments, 1));
    return attributes.createBufferInfoFromArrays(gl, arrays);
  };
}

var arraySpecPropertyNames = ["numComponents", "size", "type", "normalize", "stride", "offset", "attrib", "name", "attribName"];
/**
 * Copy elements from one array to another
 *
 * @param {Array|TypedArray} src source array
 * @param {Array|TypedArray} dst dest array
 * @param {number} dstNdx index in dest to copy src
 * @param {number} [offset] offset to add to copied values
 */

function copyElements(src, dst, dstNdx, offset) {
  offset = offset || 0;
  var length = src.length;

  for (var ii = 0; ii < length; ++ii) {
    dst[dstNdx + ii] = src[ii] + offset;
  }
}
/**
 * Creates an array of the same time
 *
 * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy
 * @param {number} length size of new array
 * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray
 */


function createArrayOfSameType(srcArray, length) {
  var arraySrc = getArray(srcArray);
  var newArray = new arraySrc.constructor(length);
  var newArraySpec = newArray; // If it appears to have been augmented make new one augemented

  if (arraySrc.numComponents && arraySrc.numElements) {
    augmentTypedArray(newArray, arraySrc.numComponents);
  } // If it was a fullspec make new one a fullspec


  if (srcArray.data) {
    newArraySpec = {
      data: newArray
    };
    helper.copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);
  }

  return newArraySpec;
}
/**
 * Concatinates sets of vertices
 *
 * Assumes the vertices match in composition. For example
 * if one set of vertices has positions, normals, and indices
 * all sets of vertices must have positions, normals, and indices
 * and of the same type.
 *
 * Example:
 *
 *      const cubeVertices = twgl.primtiives.createCubeVertices(2);
 *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);
 *      // move the sphere 2 units up
 *      twgl.primitives.reorientVertices(
 *          sphereVertices, twgl.m4.translation([0, 2, 0]));
 *      // merge the sphere with the cube
 *      const cubeSphereVertices = twgl.primitives.concatVertices(
 *          [cubeVertices, sphereVertices]);
 *      // turn them into WebGL buffers and attrib data
 *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);
 *
 * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices
 * @return {module:twgl.Arrays} The concatinated vertices.
 * @memberOf module:twgl/primitives
 */


function concatVertices(arrayOfArrays) {
  var names = {};
  var baseName; // get names of all arrays.
  // and numElements for each set of vertices

  var _loop = function _loop(ii) {
    var arrays = arrayOfArrays[ii];
    Object.keys(arrays).forEach(function (name) {
      // eslint-disable-line
      if (!names[name]) {
        names[name] = [];
      }

      if (!baseName && name !== 'indices') {
        baseName = name;
      }

      var arrayInfo = arrays[name];
      var numComponents = getNumComponents(arrayInfo, name);
      var array = getArray(arrayInfo);
      var numElements = array.length / numComponents;
      names[name].push(numElements);
    });
  };

  for (var ii = 0; ii < arrayOfArrays.length; ++ii) {
    _loop(ii);
  } // compute length of combined array
  // and return one for reference


  function getLengthOfCombinedArrays(name) {
    var length = 0;
    var arraySpec;

    for (var ii = 0; ii < arrayOfArrays.length; ++ii) {
      var arrays = arrayOfArrays[ii];
      var arrayInfo = arrays[name];
      var array = getArray(arrayInfo);
      length += array.length;

      if (!arraySpec || arrayInfo.data) {
        arraySpec = arrayInfo;
      }
    }

    return {
      length: length,
      spec: arraySpec
    };
  }

  function copyArraysToNewArray(name, base, newArray) {
    var baseIndex = 0;
    var offset = 0;

    for (var ii = 0; ii < arrayOfArrays.length; ++ii) {
      var arrays = arrayOfArrays[ii];
      var arrayInfo = arrays[name];
      var array = getArray(arrayInfo);

      if (name === 'indices') {
        copyElements(array, newArray, offset, baseIndex);
        baseIndex += base[ii];
      } else {
        copyElements(array, newArray, offset);
      }

      offset += array.length;
    }
  }

  var base = names[baseName];
  var newArrays = {};
  Object.keys(names).forEach(function (name) {
    var info = getLengthOfCombinedArrays(name);
    var newArraySpec = createArrayOfSameType(info.spec, info.length);
    copyArraysToNewArray(name, base, getArray(newArraySpec));
    newArrays[name] = newArraySpec;
  });
  return newArrays;
}
/**
 * Creates a duplicate set of vertices
 *
 * This is useful for calling reorientVertices when you
 * also want to keep the original available
 *
 * @param {module:twgl.Arrays} arrays of vertices
 * @return {module:twgl.Arrays} The dupilicated vertices.
 * @memberOf module:twgl/primitives
 */


function duplicateVertices(arrays) {
  var newArrays = {};
  Object.keys(arrays).forEach(function (name) {
    var arraySpec = arrays[name];
    var srcArray = getArray(arraySpec);
    var newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);
    copyElements(srcArray, getArray(newArraySpec), 0);
    newArrays[name] = newArraySpec;
  });
  return newArrays;
}

var create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);
exports.create3DFBufferInfo = create3DFBufferInfo;
var create3DFBuffers = createBufferFunc(create3DFVertices);
exports.create3DFBuffers = create3DFBuffers;
var createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);
exports.createCubeBufferInfo = createCubeBufferInfo;
var createCubeBuffers = createBufferFunc(createCubeVertices);
exports.createCubeBuffers = createCubeBuffers;
var createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);
exports.createPlaneBufferInfo = createPlaneBufferInfo;
var createPlaneBuffers = createBufferFunc(createPlaneVertices);
exports.createPlaneBuffers = createPlaneBuffers;
var createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);
exports.createSphereBufferInfo = createSphereBufferInfo;
var createSphereBuffers = createBufferFunc(createSphereVertices);
exports.createSphereBuffers = createSphereBuffers;
var createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);
exports.createTruncatedConeBufferInfo = createTruncatedConeBufferInfo;
var createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);
exports.createTruncatedConeBuffers = createTruncatedConeBuffers;
var createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);
exports.createXYQuadBufferInfo = createXYQuadBufferInfo;
var createXYQuadBuffers = createBufferFunc(createXYQuadVertices);
exports.createXYQuadBuffers = createXYQuadBuffers;
var createCresentBufferInfo = createBufferInfoFunc(createCresentVertices);
exports.createCresentBufferInfo = createCresentBufferInfo;
var createCresentBuffers = createBufferFunc(createCresentVertices);
exports.createCresentBuffers = createCresentBuffers;
var createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);
exports.createCylinderBufferInfo = createCylinderBufferInfo;
var createCylinderBuffers = createBufferFunc(createCylinderVertices);
exports.createCylinderBuffers = createCylinderBuffers;
var createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);
exports.createTorusBufferInfo = createTorusBufferInfo;
var createTorusBuffers = createBufferFunc(createTorusVertices);
exports.createTorusBuffers = createTorusBuffers;
var createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);
exports.createDiscBufferInfo = createDiscBufferInfo;
var createDiscBuffers = createBufferFunc(createDiscVertices);
exports.createDiscBuffers = createDiscBuffers;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var _exportNames = {
  addExtensionsToContext: true,
  getContext: true,
  getWebGLContext: true,
  resizeCanvasToDisplaySize: true,
  setDefaults: true
};
exports.addExtensionsToContext = addExtensionsToContext;
exports.getContext = getContext;
exports.getWebGLContext = getWebGLContext;
exports.resizeCanvasToDisplaySize = resizeCanvasToDisplaySize;
exports.setDefaults = setDefaults;

var attributes = _interopRequireWildcard(__webpack_require__(7));

Object.keys(attributes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = attributes[key];
});

var textures = _interopRequireWildcard(__webpack_require__(8));

Object.keys(textures).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = textures[key];
});

var helper = _interopRequireWildcard(__webpack_require__(0));

var utils = _interopRequireWildcard(__webpack_require__(4));

Object.keys(utils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = utils[key];
});

var _draw = __webpack_require__(12);

Object.keys(_draw).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = _draw[key];
});

var _framebuffers = __webpack_require__(13);

Object.keys(_framebuffers).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = _framebuffers[key];
});

var _programs = __webpack_require__(5);

Object.keys(_programs).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = _programs[key];
});

var _typedarrays = __webpack_require__(1);

Object.keys(_typedarrays).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = _typedarrays[key];
});

var _vertexArrays = __webpack_require__(14);

Object.keys(_vertexArrays).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = _vertexArrays[key];
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/*
 * Copyright 2015, Gregg Tavares.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Gregg Tavares. nor the names of his
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * The main TWGL module.
 *
 * For most use cases you shouldn't need anything outside this module.
 * Exceptions between the stuff added to twgl-full (v3, m4, primitives)
 *
 * @module twgl
 * @borrows module:twgl/attributes.setAttribInfoBufferFromArray as setAttribInfoBufferFromArray
 * @borrows module:twgl/attributes.createBufferInfoFromArrays as createBufferInfoFromArrays
 * @borrows module:twgl/attributes.createVertexArrayInfo as createVertexArrayInfo
 * @borrows module:twgl/draw.drawBufferInfo as drawBufferInfo
 * @borrows module:twgl/draw.drawObjectList as drawObjectList
 * @borrows module:twgl/framebuffers.createFramebufferInfo as createFramebufferInfo
 * @borrows module:twgl/framebuffers.resizeFramebufferInfo as resizeFramebufferInfo
 * @borrows module:twgl/framebuffers.bindFramebufferInfo as bindFramebufferInfo
 * @borrows module:twgl/programs.createProgramInfo as createProgramInfo
 * @borrows module:twgl/programs.createUniformBlockInfo as createUniformBlockInfo
 * @borrows module:twgl/programs.bindUniformBlock as bindUniformBlock
 * @borrows module:twgl/programs.setUniformBlock as setUniformBlock
 * @borrows module:twgl/programs.setBlockUniforms as setBlockUniforms
 * @borrows module:twgl/programs.setUniforms as setUniforms
 * @borrows module:twgl/programs.setBuffersAndAttributes as setBuffersAndAttributes
 * @borrows module:twgl/textures.setTextureFromArray as setTextureFromArray
 * @borrows module:twgl/textures.createTexture as createTexture
 * @borrows module:twgl/textures.resizeTexture as resizeTexture
 * @borrows module:twgl/textures.createTextures as createTextures
 */
// make sure we don't see a global gl
var gl = undefined; // eslint-disable-line

var defaults = {
  addExtensionsToContext: true
};
/**
 * Various default settings for twgl.
 *
 * Note: You can call this any number of times. Example:
 *
 *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });
 *     twgl.setDefaults({ attribPrefix: 'a_' });
 *
 * is equivalent to
 *
 *     twgl.setDefaults({
 *       textureColor: [1, 0, 0, 1],
 *       attribPrefix: 'a_',
 *     });
 *
 * @typedef {Object} Defaults
 * @property {string} attribPrefix The prefix to stick on attributes
 *
 *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`
 *   as it makes it clear where they came from. But, when building geometry I prefer using unprefixed names.
 *
 *   In otherwords I'll create arrays of geometry like this
 *
 *       const arrays = {
 *         position: ...
 *         normal: ...
 *         texcoord: ...
 *       };
 *
 *   But need those mapped to attributes and my attributes start with `a_`.
 *
 *   Default: `""`
 *
 * @property {number[]} textureColor Array of 4 values in the range 0 to 1
 *
 *   The default texture color is used when loading textures from
 *   urls. Because the URL will be loaded async we'd like to be
 *   able to use the texture immediately. By putting a 1x1 pixel
 *   color in the texture we can start using the texture before
 *   the URL has loaded.
 *
 *   Default: `[0.5, 0.75, 1, 1]`
 *
 * @property {string} crossOrigin
 *
 *   If not undefined sets the crossOrigin attribute on images
 *   that twgl creates when downloading images for textures.
 *
 *   Also see {@link module:twgl.TextureOptions}.
 *
 * @property {bool} addExtensionsToContext
 *
 *   If true, then, when twgl will try to add any supported WebGL extensions
 *   directly to the context under their normal GL names. For example
 *   if ANGLE_instances_arrays exists then twgl would enable it,
 *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,
 *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`
 *   to the `WebGLRenderingContext`.
 *
 * @memberOf module:twgl
 */

/**
 * Sets various defaults for twgl.
 *
 * In the interest of terseness which is kind of the point
 * of twgl I've integrated a few of the older functions here
 *
 * @param {module:twgl.Defaults} newDefaults The default settings.
 * @memberOf module:twgl
 */

function setDefaults(newDefaults) {
  helper.copyExistingProperties(newDefaults, defaults);
  attributes.setAttributeDefaults_(newDefaults); // eslint-disable-line

  textures.setTextureDefaults_(newDefaults); // eslint-disable-line
}

var prefixRE = /^(.*?)_/;

function addExtensionToContext(gl, extensionName) {
  utils.glEnumToString(gl, 0);
  var ext = gl.getExtension(extensionName);

  if (ext) {
    var enums = {};
    var fnSuffix = prefixRE.exec(extensionName)[1];
    var enumSuffix = '_' + fnSuffix;

    for (var key in ext) {
      var value = ext[key];
      var isFunc = typeof value === 'function';
      var suffix = isFunc ? fnSuffix : enumSuffix;
      var name = key; // examples of where this is not true are WEBGL_compressed_texture_s3tc
      // and WEBGL_compressed_texture_pvrtc

      if (key.endsWith(suffix)) {
        name = key.substring(0, key.length - suffix.length);
      }

      if (gl[name] !== undefined) {
        if (!isFunc && gl[name] !== value) {
          helper.warn(name, gl[name], value, key);
        }
      } else {
        if (isFunc) {
          gl[name] = function (origFn) {
            return function () {
              return origFn.apply(ext, arguments);
            };
          }(value);
        } else {
          gl[name] = value;
          enums[name] = value;
        }
      }
    } // pass the modified enums to glEnumToString


    enums.constructor = {
      name: ext.constructor.name
    };
    utils.glEnumToString(enums, 0);
  }

  return ext;
}
/*
 * If you're wondering why the code doesn't just iterate
 * over all extensions using `gl.getExtensions` is that it's possible
 * some future extension is incompatible with this code. Rather than
 * have thing suddenly break it seems better to manually add to this
 * list.
 *
 */


var supportedExtensions = ['ANGLE_instanced_arrays', 'EXT_blend_minmax', 'EXT_color_buffer_float', 'EXT_color_buffer_half_float', 'EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2', 'EXT_frag_depth', 'EXT_sRGB', 'EXT_shader_texture_lod', 'EXT_texture_filter_anisotropic', 'OES_element_index_uint', 'OES_standard_derivatives', 'OES_texture_float', 'OES_texture_float_linear', 'OES_texture_half_float', 'OES_texture_half_float_linear', 'OES_vertex_array_object', 'WEBGL_color_buffer_float', 'WEBGL_compressed_texture_atc', 'WEBGL_compressed_texture_etc1', 'WEBGL_compressed_texture_pvrtc', 'WEBGL_compressed_texture_s3tc', 'WEBGL_compressed_texture_s3tc_srgb', 'WEBGL_depth_texture', 'WEBGL_draw_buffers'];
/**
 * Attempts to enable all of the following extensions
 * and add their functions and constants to the
 * `WebGLRenderingContext` using their normal non-extension like names.
 *
 *      ANGLE_instanced_arrays
 *      EXT_blend_minmax
 *      EXT_color_buffer_float
 *      EXT_color_buffer_half_float
 *      EXT_disjoint_timer_query
 *      EXT_disjoint_timer_query_webgl2
 *      EXT_frag_depth
 *      EXT_sRGB
 *      EXT_shader_texture_lod
 *      EXT_texture_filter_anisotropic
 *      OES_element_index_uint
 *      OES_standard_derivatives
 *      OES_texture_float
 *      OES_texture_float_linear
 *      OES_texture_half_float
 *      OES_texture_half_float_linear
 *      OES_vertex_array_object
 *      WEBGL_color_buffer_float
 *      WEBGL_compressed_texture_atc
 *      WEBGL_compressed_texture_etc1
 *      WEBGL_compressed_texture_pvrtc
 *      WEBGL_compressed_texture_s3tc
 *      WEBGL_compressed_texture_s3tc_srgb
 *      WEBGL_depth_texture
 *      WEBGL_draw_buffers
 *
 * For example if `ANGLE_instanced_arrays` exists then the functions
 * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`
 * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the
 * `WebGLRenderingContext`.
 *
 * Note that if you want to know if the extension exists you should
 * probably call `gl.getExtension` for each extension. Alternatively
 * you can check for the existance of the functions or constants that
 * are expected to be added. For example
 *
 *    if (gl.drawBuffers) {
 *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2
 *      ....
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @memberOf module:twgl
 */

function addExtensionsToContext(gl) {
  for (var ii = 0; ii < supportedExtensions.length; ++ii) {
    addExtensionToContext(gl, supportedExtensions[ii]);
  }
}
/**
 * Creates a webgl context.
 * @param {HTMLCanvasElement} canvas The canvas tag to get
 *     context from. If one is not passed in one will be
 *     created.
 * @return {WebGLRenderingContext} The created context.
 */


function create3DContext(canvas, opt_attribs) {
  var names = ["webgl", "experimental-webgl"];
  var context = null;

  for (var ii = 0; ii < names.length; ++ii) {
    context = canvas.getContext(names[ii], opt_attribs);

    if (context) {
      if (defaults.addExtensionsToContext) {
        addExtensionsToContext(context);
      }

      break;
    }
  }

  return context;
}
/**
 * Gets a WebGL1 context.
 *
 * Note: Will attempt to enable Vertex Array Objects
 * and add WebGL2 entry points. (unless you first set defaults with
 * `twgl.setDefaults({enableVertexArrayObjects: false})`;
 *
 * @param {HTMLCanvasElement} canvas a canvas element.
 * @param {WebGLContextCreationAttirbutes} [opt_attribs] optional webgl context creation attributes
 * @memberOf module:twgl
 */


function getWebGLContext(canvas, opt_attribs) {
  var gl = create3DContext(canvas, opt_attribs);
  return gl;
}
/**
 * Creates a webgl context.
 *
 * Will return a WebGL2 context if possible.
 *
 * You can check if it's WebGL2 with
 *
 *     twgl.isWebGL2(gl);
 *
 * @param {HTMLCanvasElement} canvas The canvas tag to get
 *     context from. If one is not passed in one will be
 *     created.
 * @return {WebGLRenderingContext} The created context.
 */


function createContext(canvas, opt_attribs) {
  var names = ["webgl2", "webgl", "experimental-webgl"];
  var context = null;

  for (var ii = 0; ii < names.length; ++ii) {
    context = canvas.getContext(names[ii], opt_attribs);

    if (context) {
      if (defaults.addExtensionsToContext) {
        addExtensionsToContext(context);
      }

      break;
    }
  }

  return context;
}
/**
 * Gets a WebGL context.  Will create a WebGL2 context if possible.
 *
 * You can check if it's WebGL2 with
 *
 *    function isWebGL2(gl) {
 *      return gl.getParameter(gl.VERSION).indexOf("WebGL 2.0 ") == 0;
 *    }
 *
 * Note: For a WebGL1 context will attempt to enable Vertex Array Objects
 * and add WebGL2 entry points. (unless you first set defaults with
 * `twgl.setDefaults({enableVertexArrayObjects: false})`;
 *
 * @param {HTMLCanvasElement} canvas a canvas element.
 * @param {WebGLContextCreationAttirbutes} [opt_attribs] optional webgl context creation attributes
 * @return {WebGLRenderingContext} The created context.
 * @memberOf module:twgl
 */


function getContext(canvas, opt_attribs) {
  var gl = createContext(canvas, opt_attribs);
  return gl;
}
/**
 * Resize a canvas to match the size it's displayed.
 * @param {HTMLCanvasElement} canvas The canvas to resize.
 * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.
 * @return {boolean} true if the canvas was resized.
 * @memberOf module:twgl
 */


function resizeCanvasToDisplaySize(canvas, multiplier) {
  multiplier = multiplier || 1;
  multiplier = Math.max(0, multiplier);
  var width = canvas.clientWidth * multiplier | 0;
  var height = canvas.clientHeight * multiplier | 0;

  if (canvas.width !== width || canvas.height !== height) {
    canvas.width = width;
    canvas.height = height;
    return true;
  }

  return false;
}

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.drawBufferInfo = drawBufferInfo;
exports.drawObjectList = drawObjectList;

var programs = _interopRequireWildcard(__webpack_require__(5));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/*
 * Copyright 2015, Gregg Tavares.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Gregg Tavares. nor the names of his
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Drawing related functions
 *
 * For backward compatibily they are available at both `twgl.draw` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/draw
 */

/**
 * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate
 *
 * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself
 * but calling this means if you switch from indexed data to non-indexed
 * data you don't have to remember to update your draw call.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or
 *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}
 * @param {enum} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`
 * @param {number} [count] An optional count. Defaults to bufferInfo.numElements
 * @param {number} [offset] An optional offset. Defaults to 0.
 * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called
 * @memberOf module:twgl/draw
 */
function drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {
  type = type === undefined ? gl.TRIANGLES : type;
  var indices = bufferInfo.indices;
  var elementType = bufferInfo.elementType;
  var numElements = count === undefined ? bufferInfo.numElements : count;
  offset = offset === undefined ? 0 : offset;

  if (elementType || indices) {
    if (instanceCount !== undefined) {
      gl.drawElementsInstanced(type, numElements, elementType === undefined ? gl.UNSIGNED_SHORT : bufferInfo.elementType, offset, instanceCount);
    } else {
      gl.drawElements(type, numElements, elementType === undefined ? gl.UNSIGNED_SHORT : bufferInfo.elementType, offset);
    }
  } else {
    if (instanceCount !== undefined) {
      gl.drawArraysInstanced(type, offset, numElements, instanceCount);
    } else {
      gl.drawArrays(type, offset, numElements);
    }
  }
}
/**
 * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.
 *
 * You need either a `BufferInfo` or a `VertexArrayInfo`.
 *
 * @typedef {Object} DrawObject
 * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In otherwords `undefined` = `true`
 * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...
 * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}
 * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}
 * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}
 * @property {Object<string, ?>} uniforms The values for the uniforms.
 *   You can pass multiple objects by putting them in an array. For example
 *
 *     var sharedUniforms = {
 *       u_fogNear: 10,
 *       u_projection: ...
 *       ...
 *     };
 *
 *     var localUniforms = {
 *       u_world: ...
 *       u_diffuseColor: ...
 *     };
 *
 *     var drawObj = {
 *       ...
 *       uniforms: [sharedUniforms, localUniforms],
 *     };
 *
 * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.
 * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElemnts`. Defaults to bufferInfo.numElements.
 * @property {number} [instanceCount] the number of instances. Defaults to undefined.
 * @memberOf module:twgl
 */

/**
 * Draws a list of objects
 * @param {DrawObject[]} objectsToDraw an array of objects to draw.
 * @memberOf module:twgl/draw
 */


function drawObjectList(gl, objectsToDraw) {
  var lastUsedProgramInfo = null;
  var lastUsedBufferInfo = null;
  objectsToDraw.forEach(function (object) {
    if (object.active === false) {
      return;
    }

    var programInfo = object.programInfo;
    var bufferInfo = object.vertexArrayInfo || object.bufferInfo;
    var bindBuffers = false;
    var type = object.type === undefined ? gl.TRIANGLES : object.type;

    if (programInfo !== lastUsedProgramInfo) {
      lastUsedProgramInfo = programInfo;
      gl.useProgram(programInfo.program); // We have to rebind buffers when changing programs because we
      // only bind buffers the program uses. So if 2 programs use the same
      // bufferInfo but the 1st one uses only positions the when the
      // we switch to the 2nd one some of the attributes will not be on.

      bindBuffers = true;
    } // Setup all the needed attributes.


    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {
      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {
        gl.bindVertexArray(null);
      }

      lastUsedBufferInfo = bufferInfo;
      programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);
    } // Set the uniforms.


    programs.setUniforms(programInfo, object.uniforms); // Draw

    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);
  });

  if (lastUsedBufferInfo.vertexArrayObject) {
    gl.bindVertexArray(null);
  }
}

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.bindFramebufferInfo = bindFramebufferInfo;
exports.createFramebufferInfo = createFramebufferInfo;
exports.resizeFramebufferInfo = resizeFramebufferInfo;

var textures = _interopRequireWildcard(__webpack_require__(8));

var helper = _interopRequireWildcard(__webpack_require__(0));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/*
 * Copyright 2015, Gregg Tavares.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Gregg Tavares. nor the names of his
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Framebuffer related functions
 *
 * For backward compatibily they are available at both `twgl.framebuffer` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/framebuffers
 */
// make sure we don't see a global gl
var gl = undefined; // eslint-disable-line

var UNSIGNED_BYTE = 0x1401;
/* PixelFormat */

var DEPTH_COMPONENT = 0x1902;
var RGBA = 0x1908;
/* Framebuffer Object. */

var RGBA4 = 0x8056;
var RGB5_A1 = 0x8057;
var RGB565 = 0x8D62;
var DEPTH_COMPONENT16 = 0x81A5;
var STENCIL_INDEX = 0x1901;
var STENCIL_INDEX8 = 0x8D48;
var DEPTH_STENCIL = 0x84F9;
var COLOR_ATTACHMENT0 = 0x8CE0;
var DEPTH_ATTACHMENT = 0x8D00;
var STENCIL_ATTACHMENT = 0x8D20;
var DEPTH_STENCIL_ATTACHMENT = 0x821A;
/* TextureWrapMode */

var REPEAT = 0x2901; // eslint-disable-line

var CLAMP_TO_EDGE = 0x812F;
var MIRRORED_REPEAT = 0x8370; // eslint-disable-line

/* TextureMagFilter */

var NEAREST = 0x2600; // eslint-disable-line

var LINEAR = 0x2601;
/* TextureMinFilter */

var NEAREST_MIPMAP_NEAREST = 0x2700; // eslint-disable-line

var LINEAR_MIPMAP_NEAREST = 0x2701; // eslint-disable-line

var NEAREST_MIPMAP_LINEAR = 0x2702; // eslint-disable-line

var LINEAR_MIPMAP_LINEAR = 0x2703; // eslint-disable-line

/**
 * The options for a framebuffer attachment.
 *
 * Note: For a `format` that is a texture include all the texture
 * options from {@link module:twgl.TextureOptions} for example
 * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}
 * `auto` defaults to `false` for attachment textures but `min` and `mag` default
 * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`
 *
 * @typedef {Object} AttachmentOptions
 * @property {number} [attach] The attachment point. Defaults
 *   to `gl.COLOR_ATTACTMENT0 + ndx` unless type is a depth or stencil type
 *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending
 *   on the format or attachment type.
 * @property {number} [format] The format. If one of `gl.RGBA4`,
 *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,
 *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a
 *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`
 * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.
 * @property {number} [target] The texture target for `gl.framebufferTexture2D`.
 *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.
 * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.
 * @property {WebGLObject} [attachment] An existing renderbuffer or texture.
 *    If provided will attach this Object. This allows you to share
 *    attachemnts across framebuffers.
 * @memberOf module:twgl
 */

var defaultAttachments = [{
  format: RGBA,
  type: UNSIGNED_BYTE,
  min: LINEAR,
  wrap: CLAMP_TO_EDGE
}, {
  format: DEPTH_STENCIL
}];
var attachmentsByFormat = {};
attachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;
attachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;
attachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;
attachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;
attachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;

function getAttachmentPointForFormat(format) {
  return attachmentsByFormat[format];
}

var renderbufferFormats = {};
renderbufferFormats[RGBA4] = true;
renderbufferFormats[RGB5_A1] = true;
renderbufferFormats[RGB565] = true;
renderbufferFormats[DEPTH_STENCIL] = true;
renderbufferFormats[DEPTH_COMPONENT16] = true;
renderbufferFormats[STENCIL_INDEX] = true;
renderbufferFormats[STENCIL_INDEX8] = true;

function isRenderbufferFormat(format) {
  return renderbufferFormats[format];
}
/**
 * @typedef {Object} FramebufferInfo
 * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo
 * @property {WebGLObject[]} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.
 * @memberOf module:twgl
 */

/**
 * Creates a framebuffer and attachments.
 *
 * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.
 *
 * The simplest usage
 *
 *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer
 *     const fbi = twgl.createFramebufferInfo(gl);
 *
 * More complex usage
 *
 *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer
 *     const attachments = [
 *       { format: RGB565, mag: NEAREST },
 *       { format: STENCIL_INDEX8 },
 *     ]
 *     const fbi = twgl.createFramebufferInfo(gl, attachments);
 *
 * Passing in a specific size
 *
 *     const width = 256;
 *     const height = 256;
 *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);
 *
 * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.
 * [WebGL only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an
 *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.
 * @param {number} [width] the width for the attachments. Default = size of drawingBuffer
 * @param {number} [height] the height for the attachments. Defautt = size of drawingBuffer
 * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.
 * @memberOf module:twgl/framebuffers
 */


function createFramebufferInfo(gl, attachments, width, height) {
  var target = gl.FRAMEBUFFER;
  var fb = gl.createFramebuffer();
  gl.bindFramebuffer(target, fb);
  width = width || gl.drawingBufferWidth;
  height = height || gl.drawingBufferHeight;
  attachments = attachments || defaultAttachments;
  var colorAttachmentCount = 0;
  var framebufferInfo = {
    framebuffer: fb,
    attachments: [],
    width: width,
    height: height
  };
  attachments.forEach(function (attachmentOptions) {
    var attachment = attachmentOptions.attachment;
    var format = attachmentOptions.format;
    var attachmentPoint = getAttachmentPointForFormat(format);

    if (!attachmentPoint) {
      attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;
    }

    if (!attachment) {
      if (isRenderbufferFormat(format)) {
        attachment = gl.createRenderbuffer();
        gl.bindRenderbuffer(gl.RENDERBUFFER, attachment);
        gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);
      } else {
        var textureOptions = Object.assign({}, attachmentOptions);
        textureOptions.width = width;
        textureOptions.height = height;

        if (textureOptions.auto === undefined) {
          textureOptions.auto = false;
          textureOptions.min = textureOptions.min || textureOptions.minMag || gl.LINEAR;
          textureOptions.mag = textureOptions.mag || textureOptions.minMag || gl.LINEAR;
          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || gl.CLAMP_TO_EDGE;
          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || gl.CLAMP_TO_EDGE;
        }

        attachment = textures.createTexture(gl, textureOptions);
      }
    }

    if (helper.isRenderbuffer(gl, attachment)) {
      gl.framebufferRenderbuffer(target, attachmentPoint, gl.RENDERBUFFER, attachment);
    } else if (helper.isTexture(gl, attachment)) {
      gl.framebufferTexture2D(target, attachmentPoint, attachmentOptions.texTarget || gl.TEXTURE_2D, attachment, attachmentOptions.level || 0);
    } else {
      throw "unknown attachment type";
    }

    framebufferInfo.attachments.push(attachment);
  });
  return framebufferInfo;
}
/**
 * Resizes the attachments of a framebuffer.
 *
 * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}
 * because TWGL has no idea the format/type of each attachment.
 *
 * The simplest usage
 *
 *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer
 *     const fbi = twgl.createFramebufferInfo(gl);
 *
 *     ...
 *
 *     function render() {
 *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {
 *         // resize the attachments
 *         twgl.resizeFramebufferInfo(gl, fbi);
 *       }
 *
 * More complex usage
 *
 *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer
 *     const attachments = [
 *       { format: RGB565, mag: NEAREST },
 *       { format: STENCIL_INDEX8 },
 *     ]
 *     const fbi = twgl.createFramebufferInfo(gl, attachments);
 *
 *     ...
 *
 *     function render() {
 *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {
 *         // resize the attachments to match
 *         twgl.resizeFramebufferInfo(gl, fbi, attachments);
 *       }
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.
 * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.
 * @param {number} [width] the width for the attachments. Default = size of drawingBuffer
 * @param {number} [height] the height for the attachments. Defautt = size of drawingBuffer
 * @memberOf module:twgl/framebuffers
 */


function resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {
  width = width || gl.drawingBufferWidth;
  height = height || gl.drawingBufferHeight;
  framebufferInfo.width = width;
  framebufferInfo.height = height;
  attachments = attachments || defaultAttachments;
  attachments.forEach(function (attachmentOptions, ndx) {
    var attachment = framebufferInfo.attachments[ndx];
    var format = attachmentOptions.format;

    if (helper.isRenderbuffer(gl, attachment)) {
      gl.bindRenderbuffer(gl.RENDERBUFFER, attachment);
      gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);
    } else if (helper.isTexture(gl, attachment)) {
      textures.resizeTexture(gl, attachment, attachmentOptions, width, height);
    } else {
      throw "unknown attachment type";
    }
  });
}
/**
 * Binds a framebuffer
 *
 * This function pretty much soley exists because I spent hours
 * trying to figure out why something I wrote wasn't working only
 * to realize I forget to set the viewport dimensions.
 * My hope is this function will fix that.
 *
 * It is effectively the same as
 *
 *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);
 *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.FramebufferInfo} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.
 *   If not passed will bind the canvas.
 * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.
 * @memberOf module:twgl/framebuffers
 */


function bindFramebufferInfo(gl, framebufferInfo, target) {
  target = target || gl.FRAMEBUFFER;

  if (framebufferInfo) {
    gl.bindFramebuffer(target, framebufferInfo.framebuffer);
    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);
  } else {
    gl.bindFramebuffer(target, null);
    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
  }
}

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.createVertexArrayInfo = createVertexArrayInfo;
exports.createVAOAndSetAttributes = createVAOAndSetAttributes;
exports.createVAOFromBufferInfo = createVAOFromBufferInfo;

var programs = _interopRequireWildcard(__webpack_require__(5));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/*
 * Copyright 2015, Gregg Tavares.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Gregg Tavares. nor the names of his
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * vertex array object related functions
 *
 * You should generally not need to use these functions. They are provided
 * for those cases where you're doing something out of the ordinary
 * and you need lower level access.
 *
 * For backward compatibily they are available at both `twgl.attributes` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/vertexArrays
 */

/**
 * @typedef {Object} VertexArrayInfo
 * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.
 * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..
 * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object
 * @memberOf module:twgl
 */

/**
 * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos
 *
 * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to
 * {@link module:twgl:drawBufferInfo}.
 *
 * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects
 *   assign buffers to specific attributes at creation time. That means they can only be used with programs
 *   who's attributes use the same attribute locations for the same purposes.
 *
 * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}
 *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.
 *
 * also
 *
 * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object
 *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**
 *   will affect the Vertex Array Object state.
 *
 * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos
 * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...
 *
 *    You need to make sure every attribute that will be used is bound. So for example assume shader 1
 *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo
 *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't
 *    now attribute D's location.
 *
 *    So, you can pass in both shader 1 and shader 2's programInfo
 *
 * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo
 *
 * @memberOf module:twgl/vertexArrays
 */
function createVertexArrayInfo(gl, programInfos, bufferInfo) {
  var vao = gl.createVertexArray();
  gl.bindVertexArray(vao);

  if (!programInfos.length) {
    programInfos = [programInfos];
  }

  programInfos.forEach(function (programInfo) {
    programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);
  });
  gl.bindVertexArray(null);
  return {
    numElements: bufferInfo.numElements,
    elementType: bufferInfo.elementType,
    vertexArrayObject: vao
  };
}
/**
 * Creates a vertex array object and then sets the attributes on it
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters
 * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.
 * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices
 * @memberOf module:twgl/vertexArrays
 */


function createVAOAndSetAttributes(gl, setters, attribs, indices) {
  var vao = gl.createVertexArray();
  gl.bindVertexArray(vao);
  programs.setAttributes(setters, attribs);

  if (indices) {
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indices);
  } // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER
  // like when creating buffers for other stuff will mess up this VAO's binding


  gl.bindVertexArray(null);
  return vao;
}
/**
 * Creates a vertex array object and then sets the attributes
 * on it
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters
 * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...
 * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices
 * @memberOf module:twgl/vertexArrays
 */


function createVAOFromBufferInfo(gl, programInfo, bufferInfo) {
  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);
}

/***/ })
/******/ ]);
});

/***/ }),

/***/ "./node_modules/unicode-trie/index.js":
/*!********************************************!*\
  !*** ./node_modules/unicode-trie/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.7.1
var UnicodeTrie, inflate;

inflate = __webpack_require__(/*! tiny-inflate */ "./node_modules/tiny-inflate/index.js");

UnicodeTrie = (function() {
  var DATA_BLOCK_LENGTH, DATA_GRANULARITY, DATA_MASK, INDEX_1_OFFSET, INDEX_2_BLOCK_LENGTH, INDEX_2_BMP_LENGTH, INDEX_2_MASK, INDEX_SHIFT, LSCP_INDEX_2_LENGTH, LSCP_INDEX_2_OFFSET, OMITTED_BMP_INDEX_1_LENGTH, SHIFT_1, SHIFT_1_2, SHIFT_2, UTF8_2B_INDEX_2_LENGTH, UTF8_2B_INDEX_2_OFFSET;

  SHIFT_1 = 6 + 5;

  SHIFT_2 = 5;

  SHIFT_1_2 = SHIFT_1 - SHIFT_2;

  OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;

  INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;

  INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;

  INDEX_SHIFT = 2;

  DATA_BLOCK_LENGTH = 1 << SHIFT_2;

  DATA_MASK = DATA_BLOCK_LENGTH - 1;

  LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;

  LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;

  INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;

  UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;

  UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;

  INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;

  DATA_GRANULARITY = 1 << INDEX_SHIFT;

  function UnicodeTrie(data) {
    var isBuffer, uncompressedLength, view;
    isBuffer = typeof data.readUInt32BE === 'function' && typeof data.slice === 'function';
    if (isBuffer || data instanceof Uint8Array) {
      if (isBuffer) {
        this.highStart = data.readUInt32BE(0);
        this.errorValue = data.readUInt32BE(4);
        uncompressedLength = data.readUInt32BE(8);
        data = data.slice(12);
      } else {
        view = new DataView(data.buffer);
        this.highStart = view.getUint32(0);
        this.errorValue = view.getUint32(4);
        uncompressedLength = view.getUint32(8);
        data = data.subarray(12);
      }
      data = inflate(data, new Uint8Array(uncompressedLength));
      data = inflate(data, new Uint8Array(uncompressedLength));
      this.data = new Uint32Array(data.buffer);
    } else {
      this.data = data.data, this.highStart = data.highStart, this.errorValue = data.errorValue;
    }
  }

  UnicodeTrie.prototype.get = function(codePoint) {
    var index;
    if (codePoint < 0 || codePoint > 0x10ffff) {
      return this.errorValue;
    }
    if (codePoint < 0xd800 || (codePoint > 0xdbff && codePoint <= 0xffff)) {
      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);
      return this.data[index];
    }
    if (codePoint <= 0xffff) {
      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);
      return this.data[index];
    }
    if (codePoint < this.highStart) {
      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];
      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];
      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);
      return this.data[index];
    }
    return this.data[this.data.length - DATA_GRANULARITY];
  };

  return UnicodeTrie;

})();

module.exports = UnicodeTrie;


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/BitmapSkin.js":
/*!***************************!*\
  !*** ./src/BitmapSkin.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var twgl = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.js");

var Skin = __webpack_require__(/*! ./Skin */ "./src/Skin.js");

var BitmapSkin = function (_Skin) {
    _inherits(BitmapSkin, _Skin);

    /**
     * Create a new Bitmap Skin.
     * @extends Skin
     * @param {!int} id - The ID for this Skin.
     * @param {!RenderWebGL} renderer - The renderer which will use this skin.
     */
    function BitmapSkin(id, renderer) {
        _classCallCheck(this, BitmapSkin);

        /** @type {!int} */
        var _this = _possibleConstructorReturn(this, (BitmapSkin.__proto__ || Object.getPrototypeOf(BitmapSkin)).call(this, id, renderer));

        _this._costumeResolution = 1;

        /** @type {Array<int>} */
        _this._textureSize = [0, 0];
        return _this;
    }

    /**
     * Dispose of this object. Do not use it after calling this method.
     */


    _createClass(BitmapSkin, [{
        key: 'dispose',
        value: function dispose() {
            if (this._texture) {
                this._renderer.gl.deleteTexture(this._texture);
                this._texture = null;
            }
            _get(BitmapSkin.prototype.__proto__ || Object.getPrototypeOf(BitmapSkin.prototype), 'dispose', this).call(this);
        }

        /**
         * @return {Array<number>} the "native" size, in texels, of this skin.
         */

    }, {
        key: 'getTexture',


        /**
         * @param {Array<number>} scale - The scaling factors to be used.
         * @return {WebGLTexture} The GL texture representation of this skin when drawing at the given scale.
         */
        // eslint-disable-next-line no-unused-vars
        value: function getTexture(scale) {
            return this._texture || _get(BitmapSkin.prototype.__proto__ || Object.getPrototypeOf(BitmapSkin.prototype), 'getTexture', this).call(this);
        }

        /**
         * Set the contents of this skin to a snapshot of the provided bitmap data.
         * @param {ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} bitmapData - new contents for this skin.
         * @param {int} [costumeResolution=1] - The resolution to use for this bitmap.
         * @param {Array<number>} [rotationCenter] - Optional rotation center for the bitmap. If not supplied, it will be
         * calculated from the bounding box
         * @fires Skin.event:WasAltered
         */

    }, {
        key: 'setBitmap',
        value: function setBitmap(bitmapData, costumeResolution, rotationCenter) {
            if (!bitmapData.width || !bitmapData.height) {
                _get(BitmapSkin.prototype.__proto__ || Object.getPrototypeOf(BitmapSkin.prototype), 'setEmptyImageData', this).call(this);
                return;
            }
            var gl = this._renderer.gl;

            // TW: We want to use <canvas> as-is because reading ImageData wastes memory.
            // However, vanilla LLK/scratch-vm will reuse any canvas that we get here for other costumes,
            // which will cause bugs when Silhouette lazily reads the canvas data.
            // Turbo Warp/scratch-vm does not reuse canvases and will set canvas.reusable = false.
            var textureData = bitmapData;
            if (bitmapData instanceof HTMLCanvasElement && bitmapData.reusable !== false) {
                var context = bitmapData.getContext('2d');
                textureData = context.getImageData(0, 0, bitmapData.width, bitmapData.height);
            }

            if (this._texture === null) {
                var textureOptions = {
                    auto: false,
                    wrap: gl.CLAMP_TO_EDGE
                };

                this._texture = twgl.createTexture(gl, textureOptions);
            }

            this._setTexture(textureData);

            // Do these last in case any of the above throws an exception
            this._costumeResolution = costumeResolution || 2;
            this._textureSize = BitmapSkin._getBitmapSize(bitmapData);

            if (typeof rotationCenter === 'undefined') rotationCenter = this.calculateRotationCenter();
            this._rotationCenter[0] = rotationCenter[0];
            this._rotationCenter[1] = rotationCenter[1];

            this.emitWasAltered();
        }

        /**
         * @param {ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} bitmapData - bitmap data to inspect.
         * @returns {Array<int>} the width and height of the bitmap data, in pixels.
         * @private
         */

    }, {
        key: 'size',
        get: function get() {
            return [this._textureSize[0] / this._costumeResolution, this._textureSize[1] / this._costumeResolution];
        }
    }], [{
        key: '_getBitmapSize',
        value: function _getBitmapSize(bitmapData) {
            if (bitmapData instanceof HTMLImageElement) {
                return [bitmapData.naturalWidth || bitmapData.width, bitmapData.naturalHeight || bitmapData.height];
            }

            if (bitmapData instanceof HTMLVideoElement) {
                return [bitmapData.videoWidth || bitmapData.width, bitmapData.videoHeight || bitmapData.height];
            }

            // ImageData or HTMLCanvasElement
            return [bitmapData.width, bitmapData.height];
        }
    }]);

    return BitmapSkin;
}(Skin);

module.exports = BitmapSkin;

/***/ }),

/***/ "./src/Drawable.js":
/*!*************************!*\
  !*** ./src/Drawable.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var twgl = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.js");

var Rectangle = __webpack_require__(/*! ./Rectangle */ "./src/Rectangle.js");
var RenderConstants = __webpack_require__(/*! ./RenderConstants */ "./src/RenderConstants.js");
var ShaderManager = __webpack_require__(/*! ./ShaderManager */ "./src/ShaderManager.js");
var EffectTransform = __webpack_require__(/*! ./EffectTransform */ "./src/EffectTransform.js");
var log = __webpack_require__(/*! ./util/log */ "./src/util/log.js");

/**
 * An internal workspace for calculating texture locations from world vectors
 * this is REUSED for memory conservation reasons
 * @type {twgl.v3}
 */
var __isTouchingPosition = twgl.v3.create();
var FLOATING_POINT_ERROR_ALLOWANCE = 1e-6;

/**
 * Convert a scratch space location into a texture space float.  Uses the
 * internal __isTouchingPosition as a return value, so this should be copied
 * if you ever need to get two local positions and store both.  Requires that
 * the drawable inverseMatrix is up to date.
 *
 * @param {Drawable} drawable The drawable to get the inverse matrix and uniforms from
 * @param {twgl.v3} vec [x,y] scratch space vector
 * @return {twgl.v3} [x,y] texture space float vector - transformed by effects and matrix
 */
var getLocalPosition = function getLocalPosition(drawable, vec) {
    // Transfrom from world coordinates to Drawable coordinates.
    var localPosition = __isTouchingPosition;
    var v0 = vec[0];
    var v1 = vec[1];
    var m = drawable._inverseMatrix;
    // var v2 = v[2];
    var d = v0 * m[3] + v1 * m[7] + m[15];
    // The RenderWebGL quad flips the texture's X axis. So rendered bottom
    // left is 1, 0 and the top right is 0, 1. Flip the X axis so
    // localPosition matches that transformation.
    localPosition[0] = 0.5 - (v0 * m[0] + v1 * m[4] + m[12]) / d;
    localPosition[1] = (v0 * m[1] + v1 * m[5] + m[13]) / d + 0.5;
    // Fix floating point issues near 0. Filed https://github.com/LLK/scratch-render/issues/688 that
    // they're happening in the first place.
    // TODO: Check if this can be removed after render pull 479 is merged
    if (Math.abs(localPosition[0]) < FLOATING_POINT_ERROR_ALLOWANCE) localPosition[0] = 0;
    if (Math.abs(localPosition[1]) < FLOATING_POINT_ERROR_ALLOWANCE) localPosition[1] = 0;
    // Apply texture effect transform if the localPosition is within the drawable's space,
    // and any effects are currently active.
    if (drawable.enabledEffects !== 0 && localPosition[0] >= 0 && localPosition[0] < 1 && localPosition[1] >= 0 && localPosition[1] < 1) {

        EffectTransform.transformPoint(drawable, localPosition, localPosition);
    }
    return localPosition;
};

var Drawable = function () {
    /**
     * An object which can be drawn by the renderer.
     * @todo double-buffer all rendering state (position, skin, effects, etc.)
     * @param {!int} id - This Drawable's unique ID.
     * @param {!RenderWebGL} renderer - The renderer that created this Drawable
     * @constructor
     */
    function Drawable(id, renderer) {
        _classCallCheck(this, Drawable);

        /** @type {!int} */
        this._id = id;
        this._renderer = renderer;

        /**
         * The uniforms to be used by the vertex and pixel shaders.
         * Some of these are used by other parts of the renderer as well.
         * @type {Object.<string,*>}
         * @private
         */
        this._uniforms = {
            /**
             * The model matrix, to concat with projection at draw time.
             * @type {module:twgl/m4.Mat4}
             */
            u_modelMatrix: twgl.m4.identity(),

            /**
             * The color to use in the silhouette draw mode.
             * @type {Array<number>}
             */
            u_silhouetteColor: Drawable.color4fFromID(this._id)
        };

        // Effect values are uniforms too
        var numEffects = ShaderManager.EFFECTS.length;
        for (var index = 0; index < numEffects; ++index) {
            var effectName = ShaderManager.EFFECTS[index];
            var effectInfo = ShaderManager.EFFECT_INFO[effectName];
            var converter = effectInfo.converter;
            this._uniforms[effectInfo.uniformName] = converter(0);
        }

        this._position = twgl.v3.create(0, 0);
        this._scale = twgl.v3.create(100, 100);
        this._transform = [];
        this._direction = 90;
        this._transformDirty = true;
        this._rotationMatrix = twgl.m4.identity();
        this._rotationTransformDirty = true;
        this._rotationAdjusted = twgl.v3.create();
        this._rotationCenterDirty = true;
        this._skinScale = twgl.v3.create(0, 0, 0);
        this._skinScaleDirty = true;
        this._inverseMatrix = twgl.m4.identity();
        this._inverseTransformDirty = true;
        this._visible = true;

        /** A bitmask identifying which effects are currently in use.
         * @readonly
         * @type {int} */
        this.enabledEffects = 0;

        /** @todo move convex hull functionality, maybe bounds functionality overall, to Skin classes */
        this._convexHullPoints = null;
        this._convexHullDirty = true;

        // The precise bounding box will be from the transformed convex hull points,
        // so initialize the array of transformed hull points in setConvexHullPoints.
        // Initializing it once per convex hull recalculation avoids unnecessary creation of twgl.v3 objects.
        this._transformedHullPoints = null;
        this._transformedHullDirty = true;

        this._skinWasAltered = this._skinWasAltered.bind(this);

        this.isTouching = this._isTouchingNever;

        this._highQuality = false;
    }

    _createClass(Drawable, [{
        key: 'setHighQuality',
        value: function setHighQuality(highQuality) {
            this._highQuality = highQuality;
        }

        /**
         * Dispose of this Drawable. Do not use it after calling this method.
         */

    }, {
        key: 'dispose',
        value: function dispose() {
            // Use the setter: disconnect events
            this.skin = null;
        }

        /**
         * Mark this Drawable's transform as dirty.
         * It will be recalculated next time it's needed.
         */

    }, {
        key: 'setTransformDirty',
        value: function setTransformDirty() {
            this._transformDirty = true;
            this._inverseTransformDirty = true;
            this._transformedHullDirty = true;
        }

        /**
         * @returns {number} The ID for this Drawable.
         */

    }, {
        key: 'getUniforms',


        /**
         * @returns {object.<string, *>} the shader uniforms to be used when rendering this Drawable.
         */
        value: function getUniforms() {
            if (this._transformDirty) {
                this._calculateTransform();
            }
            return this._uniforms;
        }

        /**
         * @returns {boolean} whether this Drawable is visible.
         */

    }, {
        key: 'getVisible',
        value: function getVisible() {
            return this._visible;
        }

        /**
         * Update the position if it is different. Marks the transform as dirty.
         * @param {Array.<number>} position A new position.
         */

    }, {
        key: 'updatePosition',
        value: function updatePosition(position) {
            if (this._position[0] !== position[0] || this._position[1] !== position[1]) {
                if (this._highQuality) {
                    this._position[0] = position[0];
                    this._position[1] = position[1];
                } else {
                    this._position[0] = Math.round(position[0]);
                    this._position[1] = Math.round(position[1]);
                }
                this._renderer.dirty = true;
                this.setTransformDirty();
            }
        }

        /**
         * Update the direction if it is different. Marks the transform as dirty.
         * @param {number} direction A new direction.
         */

    }, {
        key: 'updateDirection',
        value: function updateDirection(direction) {
            if (this._direction !== direction) {
                this._direction = direction;
                this._renderer.dirty = true;
                this._rotationTransformDirty = true;
                this.setTransformDirty();
            }
        }

        /**
         * Update the scale if it is different. Marks the transform as dirty.
         * @param {Array.<number>} scale A new scale.
         */

    }, {
        key: 'updateScale',
        value: function updateScale(scale) {
            if (this._scale[0] !== scale[0] || this._scale[1] !== scale[1]) {
                this._scale[0] = scale[0];
                this._scale[1] = scale[1];
                this._renderer.dirty = true;
                this._rotationCenterDirty = true;
                this._skinScaleDirty = true;
                this.setTransformDirty();
            }
        }

        /**
         * Update the scale if it is different. Marks the transform as dirty.
         * @param {Array.<number>} transform A new scale.
         */

    }, {
        key: 'updateTransform',
        value: function updateTransform(transform) {
            this._transform = transform;
            this._renderer.dirty = true;
            this._rotationCenterDirty = true;
            this._skinScaleDirty = true;
            this.setTransformDirty();
        }

        /**
         * Update visibility if it is different. Marks the convex hull as dirty.
         * @param {boolean} visible A new visibility state.
         */

    }, {
        key: 'updateVisible',
        value: function updateVisible(visible) {
            if (this._visible !== visible) {
                this._visible = visible;
                this._renderer.dirty = true;
                this.setConvexHullDirty();
            }
        }

        /**
         * Update an effect. Marks the convex hull as dirty if the effect changes shape.
         * @param {string} effectName The name of the effect.
         * @param {number} rawValue A new effect value.
         */

    }, {
        key: 'updateEffect',
        value: function updateEffect(effectName, rawValue) {
            this._renderer.dirty = true;
            var effectInfo = ShaderManager.EFFECT_INFO[effectName];
            if (rawValue) {
                this.enabledEffects |= effectInfo.mask;
            } else {
                this.enabledEffects &= ~effectInfo.mask;
            }
            var converter = effectInfo.converter;
            this._uniforms[effectInfo.uniformName] = converter(rawValue);
            if (effectInfo.shapeChanges) {
                this.setConvexHullDirty();
            }
        }

        /**
         * Update the position, direction, scale, or effect properties of this Drawable.
         * @deprecated Use specific update* methods instead.
         * @param {object.<string,*>} properties The new property values to set.
         */

    }, {
        key: 'updateProperties',
        value: function updateProperties(properties) {
            if ('position' in properties) {
                this.updatePosition(properties.position);
            }
            if ('direction' in properties) {
                this.updateDirection(properties.direction);
            }
            if ('scale' in properties) {
                this.updateScale(properties.scale);
            }
            if ('visible' in properties) {
                this.updateVisible(properties.visible);
            }
            var numEffects = ShaderManager.EFFECTS.length;
            for (var index = 0; index < numEffects; ++index) {
                var effectName = ShaderManager.EFFECTS[index];
                if (effectName in properties) {
                    this.updateEffect(effectName, properties[effectName]);
                }
            }
        }

        /**
         * Calculate the transform to use when rendering this Drawable.
         * @private
         */

    }, {
        key: '_calculateTransform',
        value: function _calculateTransform() {
            if (this._rotationTransformDirty) {
                var rotation = (270 - this._direction) * Math.PI / 180;

                // Calling rotationZ sets the destination matrix to a rotation
                // around the Z axis setting matrix components 0, 1, 4 and 5 with
                // cosine and sine values of the rotation.
                // twgl.m4.rotationZ(rotation, this._rotationMatrix);

                // twgl assumes the last value set to the matrix was anything.
                // Drawable knows, it was another rotationZ matrix, so we can skip
                // assigning the values that will never change.
                var c = Math.cos(rotation);
                var s = Math.sin(rotation);
                this._rotationMatrix[0] = c;
                this._rotationMatrix[1] = s;
                // this._rotationMatrix[2] = 0;
                // this._rotationMatrix[3] = 0;
                this._rotationMatrix[4] = -s;
                this._rotationMatrix[5] = c;
                // this._rotationMatrix[6] = 0;
                // this._rotationMatrix[7] = 0;
                // this._rotationMatrix[8] = 0;
                // this._rotationMatrix[9] = 0;
                // this._rotationMatrix[10] = 1;
                // this._rotationMatrix[11] = 0;
                // this._rotationMatrix[12] = 0;
                // this._rotationMatrix[13] = 0;
                // this._rotationMatrix[14] = 0;
                // this._rotationMatrix[15] = 1;

                this._rotationTransformDirty = false;
            }

            // Adjust rotation center relative to the skin.
            if (this._rotationCenterDirty && this.skin !== null) {
                // twgl version of the following in function work.
                // let rotationAdjusted = twgl.v3.subtract(
                //     this.skin.rotationCenter,
                //     twgl.v3.divScalar(this.skin.size, 2, this._rotationAdjusted),
                //     this._rotationAdjusted
                // );
                // rotationAdjusted = twgl.v3.multiply(
                //     rotationAdjusted, this._scale, rotationAdjusted
                // );
                // rotationAdjusted = twgl.v3.divScalar(
                //     rotationAdjusted, 100, rotationAdjusted
                // );
                // rotationAdjusted[1] *= -1; // Y flipped to Scratch coordinate.
                // rotationAdjusted[2] = 0; // Z coordinate is 0.

                // Locally assign rotationCenter and skinSize to keep from having
                // the Skin getter properties called twice while locally assigning
                // their components for readability.
                var rotationCenter = this.skin.rotationCenter;
                var skinSize = this.skin.size;
                var center0 = rotationCenter[0];
                var center1 = rotationCenter[1];
                var skinSize0 = skinSize[0];
                var skinSize1 = skinSize[1];
                var _scale = this._scale[0];
                var _scale2 = this._scale[1];

                var rotationAdjusted = this._rotationAdjusted;
                rotationAdjusted[0] = (center0 - skinSize0 / 2) * _scale / 100;
                rotationAdjusted[1] = (center1 - skinSize1 / 2) * _scale2 / 100 * -1;
                // rotationAdjusted[2] = 0;

                this._rotationCenterDirty = false;
            }

            if (this._skinScaleDirty && this.skin !== null) {
                // twgl version of the following in function work.
                // const scaledSize = twgl.v3.divScalar(
                //     twgl.v3.multiply(this.skin.size, this._scale),
                //     100
                // );
                // // was NaN because the vectors have only 2 components.
                // scaledSize[2] = 0;

                // Locally assign skinSize to keep from having the Skin getter
                // properties called twice.
                var _skinSize = this.skin.size;
                var scaledSize = this._skinScale;
                scaledSize[0] = _skinSize[0] * this._scale[0] / 100;
                scaledSize[1] = _skinSize[1] * this._scale[1] / 100;
                // scaledSize[2] = 0;

                this._skinScaleDirty = false;
            }

            var modelMatrix = this._uniforms.u_modelMatrix;

            // twgl version of the following in function work.
            // twgl.m4.identity(modelMatrix);
            // twgl.m4.translate(modelMatrix, this._position, modelMatrix);
            // twgl.m4.multiply(modelMatrix, this._rotationMatrix, modelMatrix);
            // twgl.m4.translate(modelMatrix, this._rotationAdjusted, modelMatrix);
            // twgl.m4.scale(modelMatrix, scaledSize, modelMatrix);

            // Drawable configures a 3D matrix for drawing in WebGL, but most values
            // will never be set because the inputs are on the X and Y position axis
            // and the Z rotation axis. Drawable can bring the work inside
            // _calculateTransform and greatly reduce the ammount of math and array
            // assignments needed.

            var scale0 = this._skinScale[0];
            var scale1 = this._skinScale[1];
            var rotation00 = this._rotationMatrix[0];
            var rotation01 = this._rotationMatrix[1];
            var rotation10 = this._rotationMatrix[4];
            var rotation11 = this._rotationMatrix[5];
            var adjusted0 = this._rotationAdjusted[0];
            var adjusted1 = this._rotationAdjusted[1];
            var position0 = this._position[0];
            var position1 = this._position[1];

            // Commented assignments show what the values are when the matrix was
            // instantiated. Those values will never change so they do not need to
            // be reassigned.
            modelMatrix[0] = scale0 * rotation00;
            modelMatrix[1] = scale0 * rotation01;
            // modelMatrix[2] = 0;
            // modelMatrix[3] = 0;
            modelMatrix[4] = scale1 * rotation10;
            modelMatrix[5] = scale1 * rotation11;
            // modelMatrix[6] = 0;
            // modelMatrix[7] = 0;
            // modelMatrix[8] = 0;
            // modelMatrix[9] = 0;
            // modelMatrix[10] = 1;
            // modelMatrix[11] = 0;
            modelMatrix[12] = rotation00 * adjusted0 + rotation10 * adjusted1 + position0;
            modelMatrix[13] = rotation01 * adjusted0 + rotation11 * adjusted1 + position1;
            // modelMatrix[14] = 0;
            // modelMatrix[15] = 1;

            this._transformDirty = false;
        }

        /**
         * Whether the Drawable needs convex hull points provided by the renderer.
         * @return {boolean} True when no convex hull known, or it's dirty.
         */

    }, {
        key: 'needsConvexHullPoints',
        value: function needsConvexHullPoints() {
            return !this._convexHullPoints || this._convexHullDirty || this._convexHullPoints.length === 0;
        }

        /**
         * Set the convex hull to be dirty.
         * Do this whenever the Drawable's shape has possibly changed.
         */

    }, {
        key: 'setConvexHullDirty',
        value: function setConvexHullDirty() {
            this._convexHullDirty = true;
        }

        /**
         * Set the convex hull points for the Drawable.
         * @param {Array<Array<number>>} points Convex hull points, as [[x, y], ...]
         */

    }, {
        key: 'setConvexHullPoints',
        value: function setConvexHullPoints(points) {
            this._convexHullPoints = points;
            this._convexHullDirty = false;

            // Re-create the "transformed hull points" array.
            // We only do this when the hull points change to avoid unnecessary allocations and GC.
            this._transformedHullPoints = [];
            for (var i = 0; i < points.length; i++) {
                this._transformedHullPoints.push(twgl.v3.create());
            }
            this._transformedHullDirty = true;
        }

        /**
         * @function
         * @name isTouching
         * Check if the world position touches the skin.
         * The caller is responsible for ensuring this drawable's inverse matrix & its skin's silhouette are up-to-date.
         * @see updateCPURenderAttributes
         * @param {twgl.v3} vec World coordinate vector.
         * @return {boolean} True if the world position touches the skin.
         */

        // `updateCPURenderAttributes` sets this Drawable instance's `isTouching` method
        // to one of the following three functions:
        // If this drawable has no skin, set it to `_isTouchingNever`.
        // Otherwise, if this drawable uses nearest-neighbor scaling at its current scale, set it to `_isTouchingNearest`.
        // Otherwise, set it to `_isTouchingLinear`.
        // This allows several checks to be moved from the `isTouching` function to `updateCPURenderAttributes`.

        // eslint-disable-next-line no-unused-vars

    }, {
        key: '_isTouchingNever',
        value: function _isTouchingNever(vec) {
            return false;
        }
    }, {
        key: '_isTouchingNearest',
        value: function _isTouchingNearest(vec) {
            return this.skin.isTouchingNearest(getLocalPosition(this, vec));
        }
    }, {
        key: '_isTouchingLinear',
        value: function _isTouchingLinear(vec) {
            return this.skin.isTouchingLinear(getLocalPosition(this, vec));
        }

        /**
         * Get the precise bounds for a Drawable.
         * This function applies the transform matrix to the known convex hull,
         * and then finds the minimum box along the axes.
         * Before calling this, ensure the renderer has updated convex hull points.
         * @param {?Rectangle} result optional destination for bounds calculation
         * @return {!Rectangle} Bounds for a tight box around the Drawable.
         */

    }, {
        key: 'getBounds',
        value: function getBounds(result) {
            if (this.needsConvexHullPoints()) {
                throw new Error('Needs updated convex hull points before bounds calculation.');
            }
            if (this._transformDirty) {
                this._calculateTransform();
            }
            var transformedHullPoints = this._getTransformedHullPoints();
            // Search through transformed points to generate box on axes.
            result = result || new Rectangle();
            result.initFromPointsAABB(transformedHullPoints);
            return result;
        }

        /**
         * Get the precise bounds for the upper 8px slice of the Drawable.
         * Used for calculating where to position a text bubble.
         * Before calling this, ensure the renderer has updated convex hull points.
         * @param {?Rectangle} result optional destination for bounds calculation
         * @return {!Rectangle} Bounds for a tight box around a slice of the Drawable.
         */

    }, {
        key: 'getBoundsForBubble',
        value: function getBoundsForBubble(result) {
            if (this.needsConvexHullPoints()) {
                throw new Error('Needs updated convex hull points before bubble bounds calculation.');
            }
            if (this._transformDirty) {
                this._calculateTransform();
            }
            var slice = 8; // px, how tall the top slice to measure should be.
            var transformedHullPoints = this._getTransformedHullPoints();
            var maxY = Math.max.apply(null, transformedHullPoints.map(function (p) {
                return p[1];
            }));
            var filteredHullPoints = transformedHullPoints.filter(function (p) {
                return p[1] > maxY - slice;
            });
            // Search through filtered points to generate box on axes.
            result = result || new Rectangle();
            result.initFromPointsAABB(filteredHullPoints);
            return result;
        }

        /**
         * Get the rough axis-aligned bounding box for the Drawable.
         * Calculated by transforming the skin's bounds.
         * Note that this is less precise than the box returned by `getBounds`,
         * which is tightly snapped to account for a Drawable's transparent regions.
         * `getAABB` returns a much less accurate bounding box, but will be much
         * faster to calculate so may be desired for quick checks/optimizations.
         * @param {?Rectangle} result optional destination for bounds calculation
         * @return {!Rectangle} Rough axis-aligned bounding box for Drawable.
         */

    }, {
        key: 'getAABB',
        value: function getAABB(result) {
            if (this._transformDirty) {
                this._calculateTransform();
            }
            var tm = this._uniforms.u_modelMatrix;
            result = result || new Rectangle();
            result.initFromModelMatrix(tm);
            return result;
        }

        /**
         * Return the best Drawable bounds possible without performing graphics queries.
         * I.e., returns the tight bounding box when the convex hull points are already
         * known, but otherwise return the rough AABB of the Drawable.
         * @param {?Rectangle} result optional destination for bounds calculation
         * @return {!Rectangle} Bounds for the Drawable.
         */

    }, {
        key: 'getFastBounds',
        value: function getFastBounds(result) {
            if (!this.needsConvexHullPoints()) {
                return this.getBounds(result);
            }
            return this.getAABB(result);
        }

        /**
         * Transform all the convex hull points by the current Drawable's
         * transform. This allows us to skip recalculating the convex hull
         * for many Drawable updates, including translation, rotation, scaling.
         * @return {!Array.<!Array.number>} Array of glPoints which are Array<x, y>
         * @private
         */

    }, {
        key: '_getTransformedHullPoints',
        value: function _getTransformedHullPoints() {
            if (!this._transformedHullDirty) {
                return this._transformedHullPoints;
            }

            var projection = twgl.m4.ortho(-1, 1, -1, 1, -1, 1);
            var skinSize = this.skin.size;
            var halfXPixel = 1 / skinSize[0] / 2;
            var halfYPixel = 1 / skinSize[1] / 2;
            var tm = twgl.m4.multiply(this._uniforms.u_modelMatrix, projection);
            for (var i = 0; i < this._convexHullPoints.length; i++) {
                var point = this._convexHullPoints[i];
                var dstPoint = this._transformedHullPoints[i];

                dstPoint[0] = 0.5 + -point[0] / skinSize[0] - halfXPixel;
                dstPoint[1] = point[1] / skinSize[1] - 0.5 + halfYPixel;
                twgl.m4.transformPoint(tm, dstPoint, dstPoint);
            }

            this._transformedHullDirty = false;

            return this._transformedHullPoints;
        }

        /**
         * Update the transform matrix and calculate it's inverse for collision
         * and local texture position purposes.
         */

    }, {
        key: 'updateMatrix',
        value: function updateMatrix() {
            if (this._transformDirty) {
                this._calculateTransform();
            }
            // Get the inverse of the model matrix or update it.
            if (this._inverseTransformDirty) {
                var inverse = this._inverseMatrix;
                twgl.m4.copy(this._uniforms.u_modelMatrix, inverse);
                // The normal matrix uses a z scaling of 0 causing model[10] to be
                // 0. Getting a 4x4 inverse is impossible without a scaling in x, y,
                // and z.
                inverse[10] = 1;
                twgl.m4.inverse(inverse, inverse);
                this._inverseTransformDirty = false;
            }
        }

        /**
         * Update everything necessary to render this drawable on the CPU.
         */

    }, {
        key: 'updateCPURenderAttributes',
        value: function updateCPURenderAttributes() {
            this.updateMatrix();
            // CPU rendering always occurs at the "native" size, so no need to scale up this._scale
            if (this.skin) {
                this.skin.updateSilhouette(this._scale);

                if (this.skin.useNearest(this._scale, this)) {
                    this.isTouching = this._isTouchingNearest;
                } else {
                    this.isTouching = this._isTouchingLinear;
                }
            } else {
                log.warn('Could not find skin for drawable with id: ' + this._id);

                this.isTouching = this._isTouchingNever;
            }
        }

        /**
         * Respond to an internal change in the current Skin.
         */

    }, {
        key: '_skinWasAltered',
        value: function _skinWasAltered() {
            this._renderer.dirty = true;
            this._rotationCenterDirty = true;
            this._skinScaleDirty = true;
            this.setConvexHullDirty();
            this.setTransformDirty();
        }

        /**
         * Calculate a color to represent the given ID number. At least one component of
         * the resulting color will be non-zero if the ID is not RenderConstants.ID_NONE.
         * @param {int} id The ID to convert.
         * @returns {Array<number>} An array of [r,g,b,a], each component in the range [0,1].
         */

    }, {
        key: 'id',
        get: function get() {
            return this._id;
        }

        /**
         * @returns {Skin} the current skin for this Drawable.
         */

    }, {
        key: 'skin',
        get: function get() {
            return this._skin;
        }

        /**
         * @param {Skin} newSkin - A new Skin for this Drawable.
         */
        ,
        set: function set(newSkin) {
            if (this._skin !== newSkin) {
                this._skin = newSkin;
                this._skinWasAltered();
            }
        }

        /**
         * @returns {Array<number>} the current scaling percentages applied to this Drawable. [100,100] is normal size.
         */

    }, {
        key: 'scale',
        get: function get() {
            return [this._scale[0], this._scale[1]];
        }

        /**
         * @returns {Array<number>} transorm
         * @todo add proper docs
         */

    }, {
        key: 'transform',
        get: function get() {
            return this._transform;
        }
    }], [{
        key: 'color4fFromID',
        value: function color4fFromID(id) {
            id -= RenderConstants.ID_NONE;
            var r = (id >> 0 & 255) / 255.0;
            var g = (id >> 8 & 255) / 255.0;
            var b = (id >> 16 & 255) / 255.0;
            return [r, g, b, 1.0];
        }

        /**
         * Calculate the ID number represented by the given color. If all components of
         * the color are zero, the result will be RenderConstants.ID_NONE; otherwise the result
         * will be a valid ID.
         * @param {int} r The red value of the color, in the range [0,255].
         * @param {int} g The green value of the color, in the range [0,255].
         * @param {int} b The blue value of the color, in the range [0,255].
         * @returns {int} The ID represented by that color.
         */

    }, {
        key: 'color3bToID',
        value: function color3bToID(r, g, b) {
            var id = void 0;
            id = (r & 255) << 0;
            id |= (g & 255) << 8;
            id |= (b & 255) << 16;
            return id + RenderConstants.ID_NONE;
        }

        /**
         * Sample a color from a drawable's texture.
         * The caller is responsible for ensuring this drawable's inverse matrix & its skin's silhouette are up-to-date.
         * @see updateCPURenderAttributes
         * @param {twgl.v3} vec The scratch space [x,y] vector
         * @param {Drawable} drawable The drawable to sample the texture from
         * @param {Uint8ClampedArray} dst The "color4b" representation of the texture at point.
         * @param {number} [effectMask] A bitmask for which effects to use. Optional.
         * @returns {Uint8ClampedArray} The dst object filled with the color4b
         */

    }, {
        key: 'sampleColor4b',
        value: function sampleColor4b(vec, drawable, dst, effectMask) {
            var localPosition = getLocalPosition(drawable, vec);
            if (localPosition[0] < 0 || localPosition[1] < 0 || localPosition[0] > 1 || localPosition[1] > 1) {
                dst[0] = 0;
                dst[1] = 0;
                dst[2] = 0;
                dst[3] = 0;
                return dst;
            }

            var textColor =
            // commenting out to only use nearest for now
            // drawable.skin.useNearest(drawable._scale, drawable) ?
            drawable.skin._silhouette.colorAtNearest(localPosition, dst);
            // : drawable.skin._silhouette.colorAtLinear(localPosition, dst);

            if (drawable.enabledEffects === 0) return textColor;
            return EffectTransform.transformColor(drawable, textColor, effectMask);
        }
    }]);

    return Drawable;
}();

module.exports = Drawable;

/***/ }),

/***/ "./src/EffectTransform.js":
/*!********************************!*\
  !*** ./src/EffectTransform.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileoverview
 * A utility to transform a texture coordinate to another texture coordinate
 * representing how the shaders apply effects.
 */

var twgl = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.js");

var _require = __webpack_require__(/*! ./util/color-conversions */ "./src/util/color-conversions.js"),
    rgbToHsv = _require.rgbToHsv,
    hsvToRgb = _require.hsvToRgb;

var ShaderManager = __webpack_require__(/*! ./ShaderManager */ "./src/ShaderManager.js");
var decimalToRgb = function decimalToRgb(decimal) {
    var a = decimal >> 24 & 0xFF;
    var r = decimal >> 16 & 0xFF;
    var g = decimal >> 8 & 0xFF;
    var b = decimal & 0xFF;
    return { r: r, g: g, b: b, a: a > 0 ? a : 255 };
};

/**
 * A texture coordinate is between 0 and 1. 0.5 is the center position.
 * @const {number}
 */
var CENTER_X = 0.5;

/**
 * A texture coordinate is between 0 and 1. 0.5 is the center position.
 * @const {number}
 */
var CENTER_Y = 0.5;

/**
 * Reused memory location for storing an HSV color value.
 * @type {Array<number>}
 */
var __hsv = [0, 0, 0];

var EffectTransform = function () {
    function EffectTransform() {
        _classCallCheck(this, EffectTransform);
    }

    _createClass(EffectTransform, null, [{
        key: 'transformColor',


        /**
         * Transform a color in-place given the drawable's effect uniforms.  Will apply
         * Ghost and Color and Brightness effects.
         * @param {Drawable} drawable The drawable to get uniforms from.
         * @param {Uint8ClampedArray} inOutColor The color to transform.
         * @param {number} [effectMask] A bitmask for which effects to use. Optional.
         * @returns {Uint8ClampedArray} dst filled with the transformed color
         */
        value: function transformColor(drawable, inOutColor, effectMask) {
            // If the color is fully transparent, don't bother attempting any transformations.
            if (inOutColor[3] === 0) {
                return inOutColor;
            }

            var effects = drawable.enabledEffects;
            if (typeof effectMask === 'number') effects &= effectMask;
            var uniforms = drawable.getUniforms();

            var enableColor = (effects & ShaderManager.EFFECT_INFO.color.mask) !== 0;
            var enableSaturation = (effects & ShaderManager.EFFECT_INFO.saturation.mask) !== 0;
            var enableBrightness = (effects & ShaderManager.EFFECT_INFO.brightness.mask) !== 0;
            var enableTintColor = (effects & ShaderManager.EFFECT_INFO.tintColor.mask) !== 0;

            if (enableColor || enableSaturation || enableBrightness || enableTintColor) {
                // gl_FragColor.rgb /= gl_FragColor.a + epsilon;
                // Here, we're dividing by the (previously pre-multiplied) alpha to ensure HSV is properly calculated
                // for partially transparent pixels.
                // epsilon is present in the shader because dividing by 0 (fully transparent pixels) messes up calculations.
                // We're doing this with a Uint8ClampedArray here, so dividing by 0 just gives 255. We're later multiplying
                // by 0 again, so it won't affect results.
                var alpha = inOutColor[3] / 255;
                inOutColor[0] /= alpha;
                inOutColor[1] /= alpha;
                inOutColor[2] /= alpha;

                if (enableColor) {
                    // vec3 hsv = convertRGB2HSV(gl_FragColor.xyz);
                    var hsv = rgbToHsv(inOutColor, __hsv);

                    // this code forces grayscale values to be slightly saturated
                    // so that some slight change of hue will be visible

                    // pm: this usually ends up looking ugly in menus and such, so dont do this actually
                    // 	   this might be reverted to do this again though if it is genuinely better

                    // // const float minLightness = 0.11 / 2.0;
                    // const minV = 0.11 / 2.0;
                    // // const float minSaturation = 0.09;
                    // const minS = 0.09;
                    // // if (hsv.z < minLightness) hsv = vec3(0.0, 1.0, minLightness);
                    // if (hsv[2] < minV) {
                    //     hsv[0] = 0;
                    //     hsv[1] = 1;
                    //     hsv[2] = minV;
                    // // else if (hsv.y < minSaturation) hsv = vec3(0.0, minSaturation, hsv.z);
                    // } else if (hsv[1] < minS) {
                    //     hsv[0] = 0;
                    //     hsv[1] = minS;
                    // }

                    // hsv.x = mod(hsv.x + u_color, 1.0);
                    // if (hsv.x < 0.0) hsv.x += 1.0;
                    hsv[0] = uniforms.u_color + hsv[0] + 1;

                    // gl_FragColor.rgb = convertHSV2RGB(hsl);
                    hsvToRgb(hsv, inOutColor);
                }

                if (enableSaturation) {
                    // vec3 hsv = convertRGB2HSV(gl_FragColor.xyz);
                    var _hsv = rgbToHsv(inOutColor, __hsv);

                    // hsv.y *= u_saturation;
                    _hsv[1] = uniforms.u_saturation * _hsv[1];

                    // gl_FragColor.rgb = convertHSV2RGB(hsl);
                    hsvToRgb(_hsv, inOutColor);
                }

                if (enableBrightness) {
                    var brightness = uniforms.u_brightness * 255;
                    // gl_FragColor.rgb = clamp(gl_FragColor.rgb + vec3(u_brightness), vec3(0), vec3(1));
                    // We don't need to clamp because the Uint8ClampedArray does that for us
                    inOutColor[0] += brightness;
                    inOutColor[1] += brightness;
                    inOutColor[2] += brightness;
                }

                if (enableTintColor) {
                    // vec3 tintRgb = decimalToRgb(u_tintColor);
                    var tintRgb = decimalToRgb(uniforms.u_tintColor);

                    // gl_FragColor.rgb *= tintRgb;
                    inOutColor[0] * tintRgb.r;
                    inOutColor[1] * tintRgb.g;
                    inOutColor[2] * tintRgb.b;
                }

                // gl_FragColor.rgb *= gl_FragColor.a + epsilon;
                // Now we're doing the reverse, premultiplying by the alpha once again.
                inOutColor[0] *= alpha;
                inOutColor[1] *= alpha;
                inOutColor[2] *= alpha;
            }

            if ((effects & ShaderManager.EFFECT_INFO.ghost.mask) !== 0) {
                // gl_FragColor *= u_ghost
                inOutColor[0] *= uniforms.u_ghost;
                inOutColor[1] *= uniforms.u_ghost;
                inOutColor[2] *= uniforms.u_ghost;
                inOutColor[3] *= uniforms.u_ghost;
            }

            return inOutColor;
        }

        /**
         * Transform a texture coordinate to one that would be select after applying shader effects.
         * @param {Drawable} drawable The drawable whose effects to emulate.
         * @param {twgl.v3} vec The texture coordinate to transform.
         * @param {twgl.v3} dst A place to store the output coordinate.
         * @return {twgl.v3} dst - The coordinate after being transform by effects.
         */

    }, {
        key: 'transformPoint',
        value: function transformPoint(drawable, vec, dst) {
            twgl.v3.copy(vec, dst);

            var effects = drawable.enabledEffects;
            var uniforms = drawable.getUniforms();
            if ((effects & ShaderManager.EFFECT_INFO.mosaic.mask) !== 0) {
                // texcoord0 = fract(u_mosaic * texcoord0);
                dst[0] = uniforms.u_mosaic * dst[0] % 1;
                dst[1] = uniforms.u_mosaic * dst[1] % 1;
            }
            if ((effects & ShaderManager.EFFECT_INFO.pixelate.mask) !== 0) {
                var skinUniforms = drawable.skin.getUniforms();
                // vec2 pixelTexelSize = u_skinSize / u_pixelate;
                var texelX = skinUniforms.u_skinSize[0] / uniforms.u_pixelate;
                var texelY = skinUniforms.u_skinSize[1] / uniforms.u_pixelate;
                // texcoord0 = (floor(texcoord0 * pixelTexelSize) + kCenter) /
                //   pixelTexelSize;
                dst[0] = (Math.floor(dst[0] * texelX) + CENTER_X) / texelX;
                dst[1] = (Math.floor(dst[1] * texelY) + CENTER_Y) / texelY;
            }
            if ((effects & ShaderManager.EFFECT_INFO.whirl.mask) !== 0) {
                // const float kRadius = 0.5;
                var RADIUS = 0.5;
                // vec2 offset = texcoord0 - kCenter;
                var offsetX = dst[0] - CENTER_X;
                var offsetY = dst[1] - CENTER_Y;
                // float offsetMagnitude = length(offset);
                var offsetMagnitude = Math.sqrt(Math.pow(offsetX, 2) + Math.pow(offsetY, 2));
                // float whirlFactor = max(1.0 - (offsetMagnitude / kRadius), 0.0);
                var whirlFactor = Math.max(1.0 - offsetMagnitude / RADIUS, 0.0);
                // float whirlActual = u_whirl * whirlFactor * whirlFactor;
                var whirlActual = uniforms.u_whirl * whirlFactor * whirlFactor;
                // float sinWhirl = sin(whirlActual);
                var sinWhirl = Math.sin(whirlActual);
                // float cosWhirl = cos(whirlActual);
                var cosWhirl = Math.cos(whirlActual);
                // mat2 rotationMatrix = mat2(
                //     cosWhirl, -sinWhirl,
                //     sinWhirl, cosWhirl
                // );
                var rot1 = cosWhirl;
                var rot2 = -sinWhirl;
                var rot3 = sinWhirl;
                var rot4 = cosWhirl;

                // texcoord0 = rotationMatrix * offset + kCenter;
                dst[0] = rot1 * offsetX + rot3 * offsetY + CENTER_X;
                dst[1] = rot2 * offsetX + rot4 * offsetY + CENTER_Y;
            }
            if ((effects & ShaderManager.EFFECT_INFO.fisheye.mask) !== 0) {
                // vec2 vec = (texcoord0 - kCenter) / kCenter;
                var vX = (dst[0] - CENTER_X) / CENTER_X;
                var vY = (dst[1] - CENTER_Y) / CENTER_Y;
                // float vecLength = length(vec);
                var vLength = Math.sqrt(vX * vX + vY * vY);
                // float r = pow(min(vecLength, 1.0), u_fisheye) * max(1.0, vecLength);
                var r = Math.pow(Math.min(vLength, 1), uniforms.u_fisheye) * Math.max(1, vLength);
                // vec2 unit = vec / vecLength;
                var unitX = vX / vLength;
                var unitY = vY / vLength;
                // texcoord0 = kCenter + r * unit * kCenter;
                dst[0] = CENTER_X + r * unitX * CENTER_X;
                dst[1] = CENTER_Y + r * unitY * CENTER_Y;
            }

            return dst;
        }
    }]);

    return EffectTransform;
}();

module.exports = EffectTransform;

/***/ }),

/***/ "./src/PenSkin.js":
/*!************************!*\
  !*** ./src/PenSkin.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var twgl = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.js");

var RenderConstants = __webpack_require__(/*! ./RenderConstants */ "./src/RenderConstants.js");
var Skin = __webpack_require__(/*! ./Skin */ "./src/Skin.js");

var ShaderManager = __webpack_require__(/*! ./ShaderManager */ "./src/ShaderManager.js");

/**
 * Attributes to use when drawing with the pen
 * @typedef {object} PenSkin#PenAttributes
 * @property {number} [diameter] - The size (diameter) of the pen.
 * @property {Array<number>} [color4f] - The pen color as an array of [r,g,b,a], each component in the range [0,1].
 */

/**
 * The pen attributes to use when unspecified.
 * @type {PenSkin#PenAttributes}
 * @memberof PenSkin
 * @private
 * @const
 */
var DefaultPenAttributes = {
    color4f: [0, 0, 1, 1],
    diameter: 1
};

/**
 * Reused memory location for storing a premultiplied pen color.
 * @type {FloatArray}
 */
var __premultipliedColor = [0, 0, 0, 0];

var PEN_BUFFER_SIZE_LARGER = 65520;
var PEN_BUFFER_SIZE_SMALLER = 32760;

var PenSkin = function (_Skin) {
    _inherits(PenSkin, _Skin);

    /**
     * Create a Skin which implements a Scratch pen layer.
     * @param {int} id - The unique ID for this Skin.
     * @param {RenderWebGL} renderer - The renderer which will use this Skin.
     * @extends Skin
     * @listens RenderWebGL#event:NativeSizeChanged
     */
    function PenSkin(id, renderer) {
        _classCallCheck(this, PenSkin);

        /** @type {Array<number>} */
        var _this = _possibleConstructorReturn(this, (PenSkin.__proto__ || Object.getPrototypeOf(PenSkin)).call(this, id, renderer));

        _this._size = null;

        /** @type {WebGLFramebuffer} */
        _this._framebuffer = null;

        /** @type {boolean} */
        _this._silhouetteDirty = false;

        /** @type {Uint8Array} */
        _this._silhouettePixels = null;

        /** @type {ImageData} */
        _this._silhouetteImageData = null;

        /** @type {object} */
        _this._lineOnBufferDrawRegionId = {
            enter: function enter() {
                return _this._enterDrawLineOnBuffer();
            },
            exit: function exit() {
                return _this._exitDrawLineOnBuffer();
            }
        };

        /** @type {object} */
        _this._usePenBufferDrawRegionId = {
            enter: function enter() {
                return _this._enterUsePenBuffer();
            },
            exit: function exit() {
                return _this._exitUsePenBuffer();
            }
        };

        // tw: renderQuality attribute
        _this.renderQuality = 1;

        // tw: keep track of native size
        _this._nativeSize = renderer.getNativeSize();

        // tw: create the extra data structures needed to buffer pen
        _this._resetAttributeIndexes();
        _this.a_lineColor = new Float32Array(PEN_BUFFER_SIZE_LARGER);
        _this.a_cameraOffset = new Float32Array(4 * 6);
        _this.updatePenPointOffset(0, 0, 1, 0);
        _this.a_lineThicknessAndLength = new Float32Array(PEN_BUFFER_SIZE_SMALLER);
        _this.a_penPoints = new Float32Array(PEN_BUFFER_SIZE_LARGER);
        _this.a_position = new Float32Array(PEN_BUFFER_SIZE_SMALLER);
        for (var i = 0; i < _this.a_position.length; i += 12) {
            _this.a_position[i + 0] = 1;
            _this.a_position[i + 1] = 0;
            _this.a_position[i + 2] = 0;
            _this.a_position[i + 3] = 0;
            _this.a_position[i + 4] = 1;
            _this.a_position[i + 5] = 1;
            _this.a_position[i + 6] = 1;
            _this.a_position[i + 7] = 1;
            _this.a_position[i + 8] = 0;
            _this.a_position[i + 9] = 0;
            _this.a_position[i + 10] = 0;
            _this.a_position[i + 11] = 1;
        }
        /** @type {twgl.BufferInfo} */
        _this._lineBufferInfo = twgl.createBufferInfoFromArrays(_this._renderer.gl, {
            a_position: {
                numComponents: 2,
                data: _this.a_position
            },
            a_lineColor: {
                numComponents: 4,
                drawType: _this._renderer.gl.STREAM_DRAW,
                data: _this.a_lineColor
            },
            a_lineThicknessAndLength: {
                numComponents: 2,
                drawType: _this._renderer.gl.STREAM_DRAW,
                data: _this.a_lineThicknessAndLength
            },
            a_penPoints: {
                numComponents: 4,
                drawType: _this._renderer.gl.STREAM_DRAW,
                data: _this.a_penPoints
            },
            a_cameraOffset: {
                numComponents: 3,
                data: _this.a_cameraOffset
            }
        });

        var NO_EFFECTS = 0;
        /** @type {twgl.ProgramInfo} */
        _this._lineShader = _this._renderer._shaderManager.getShader(ShaderManager.DRAW_MODE.line, NO_EFFECTS);

        // tw: draw region used to preserve texture when resizing
        _this._drawTextureShader = _this._renderer._shaderManager.getShader(ShaderManager.DRAW_MODE.default, NO_EFFECTS);
        /** @type {object} */
        _this._drawTextureRegionId = {
            enter: function enter() {
                return _this._enterDrawTexture();
            },
            exit: function exit() {
                return _this._exitDrawTexture();
            }
        };

        _this.onNativeSizeChanged = _this.onNativeSizeChanged.bind(_this);
        _this._renderer.on(RenderConstants.Events.NativeSizeChanged, _this.onNativeSizeChanged);

        _this._setCanvasSize(renderer.getNativeSize());
        return _this;
    }

    /**
     * Dispose of this object. Do not use it after calling this method.
     */


    _createClass(PenSkin, [{
        key: 'dispose',
        value: function dispose() {
            this._renderer.removeListener(RenderConstants.Events.NativeSizeChanged, this.onNativeSizeChanged);
            this._renderer.gl.deleteTexture(this._texture);
            this._texture = null;
            _get(PenSkin.prototype.__proto__ || Object.getPrototypeOf(PenSkin.prototype), 'dispose', this).call(this);
        }

        /**
         * @return {Array<number>} the "native" size, in texels, of this skin. [width, height]
         */

    }, {
        key: 'useNearest',
        value: function useNearest(scale) {
            // Use nearest-neighbor interpolation when scaling up the pen skin-- this matches Scratch 2.0.
            // When scaling it down, use linear interpolation to avoid giving pen lines a "dashed" appearance.
            return Math.max(scale[0], scale[1]) >= 100;
        }

        /**
         * @param {Array<number>} scale The X and Y scaling factors to be used, as percentages of this skin's "native" size.
         * @return {WebGLTexture} The GL texture representation of this skin when drawing at the given size.
         */
        // eslint-disable-next-line no-unused-vars

    }, {
        key: 'getTexture',
        value: function getTexture(scale, transform) {
            return this._texture;
        }

        /**
         * Clear the pen layer.
         */

    }, {
        key: 'clear',
        value: function clear() {
            this._renderer.enterDrawRegion(this._usePenBufferDrawRegionId);

            /* Reset framebuffer to transparent black */
            var gl = this._renderer.gl;
            gl.clearColor(0, 0, 0, 0);
            gl.clear(gl.COLOR_BUFFER_BIT);

            this._silhouetteDirty = true;
        }

        /**
         * Draw a point on the pen layer.
         * @param {PenAttributes} penAttributes - how the point should be drawn.
         * @param {number} x - the X coordinate of the point to draw.
         * @param {number} y - the Y coordinate of the point to draw.
         */

    }, {
        key: 'drawPoint',
        value: function drawPoint(penAttributes, x, y) {
            this.drawLine(penAttributes, x, y, x, y);
        }

        /**
         * Draw a line on the pen layer.
         * @param {PenAttributes} penAttributes - how the line should be drawn.
         * @param {number} x0 - the X coordinate of the beginning of the line.
         * @param {number} y0 - the Y coordinate of the beginning of the line.
         * @param {number} x1 - the X coordinate of the end of the line.
         * @param {number} y1 - the Y coordinate of the end of the line.
         */

    }, {
        key: 'drawLine',
        value: function drawLine(penAttributes, x0, y0, x1, y1) {
            // For compatibility with Scratch 2.0, offset pen lines of width 1 and 3 so they're pixel-aligned.
            // See https://github.com/LLK/scratch-render/pull/314
            var diameter = penAttributes.diameter || DefaultPenAttributes.diameter;
            var offset = diameter === 1 || diameter === 3 ? 0.5 : 0;

            this._drawLineOnBuffer(penAttributes, x0 + offset, y0 + offset, x1 + offset, y1 + offset);

            this._silhouetteDirty = true;
        }

        /**
         * Prepare to draw lines in the _lineOnBufferDrawRegionId region.
         */

    }, {
        key: '_enterDrawLineOnBuffer',
        value: function _enterDrawLineOnBuffer() {
            // tw: reset attributes when starting pen drawing
            this._resetAttributeIndexes();
            var gl = this._renderer.gl;

            twgl.bindFramebufferInfo(gl, this._framebuffer);

            gl.viewport(0, 0, this._size[0], this._size[1]);

            var currentShader = this._lineShader;
            gl.useProgram(currentShader.program);
            twgl.setBuffersAndAttributes(gl, currentShader, this._lineBufferInfo);

            var uniforms = {
                u_skin: this._texture,
                u_stageSize: this._size
            };

            twgl.setUniforms(currentShader, uniforms);
        }

        /**
         * Return to a base state from _lineOnBufferDrawRegionId.
         */

    }, {
        key: '_exitDrawLineOnBuffer',
        value: function _exitDrawLineOnBuffer() {
            // tw: flush when exiting pen rendering
            if (this.a_lineColorIndex) {
                this._flushLines();
            }

            var gl = this._renderer.gl;

            twgl.bindFramebufferInfo(gl, null);
        }

        /**
         * Prepare to do things with this PenSkin's framebuffer
         */

    }, {
        key: '_enterUsePenBuffer',
        value: function _enterUsePenBuffer() {
            twgl.bindFramebufferInfo(this._renderer.gl, this._framebuffer);
        }

        /**
         * Return to a base state
         */

    }, {
        key: '_exitUsePenBuffer',
        value: function _exitUsePenBuffer() {
            twgl.bindFramebufferInfo(this._renderer.gl, null);
        }

        // tw: draw region used to preserve texture when resizing

    }, {
        key: '_enterDrawTexture',
        value: function _enterDrawTexture() {
            this._enterUsePenBuffer();
            var gl = this._renderer.gl;
            gl.viewport(0, 0, this._size[0], this._size[1]);
            gl.useProgram(this._drawTextureShader.program);
            twgl.setBuffersAndAttributes(gl, this._drawTextureShader, this._renderer._bufferInfo);
        }
    }, {
        key: '_exitDrawTexture',
        value: function _exitDrawTexture() {
            this._exitUsePenBuffer();
        }
    }, {
        key: '_drawPenTexture',
        value: function _drawPenTexture(texture) {
            this._renderer.enterDrawRegion(this._drawTextureRegionId);
            var gl = this._renderer.gl;
            var width = this._size[0];
            var height = this._size[1];

            var uniforms = {
                u_skin: texture,
                u_projectionMatrix: twgl.m4.ortho(width / 2, width / -2, height / -2, height / 2, -1, 1, twgl.m4.identity()),
                u_modelMatrix: twgl.m4.scaling(twgl.v3.create(width, height, 0), twgl.m4.identity())
            };

            twgl.setTextureParameters(gl, texture, {
                // Always use NEAREST because this most closely matches Scratch behavior
                minMag: gl.NEAREST
            });
            twgl.setUniforms(this._drawTextureShader, uniforms);
            twgl.drawBufferInfo(gl, this._renderer._bufferInfo, gl.TRIANGLES);
        }

        /**
         * Draw a line on the framebuffer.
         * Note that the point coordinates are in the following coordinate space:
         * +y is down, (0, 0) is the center, and the coords range from (-width / 2, -height / 2) to (height / 2, width / 2).
         * @param {PenAttributes} penAttributes - how the line should be drawn.
         * @param {number} x0 - the X coordinate of the beginning of the line.
         * @param {number} y0 - the Y coordinate of the beginning of the line.
         * @param {number} x1 - the X coordinate of the end of the line.
         * @param {number} y1 - the Y coordinate of the end of the line.
         */

    }, {
        key: '_drawLineOnBuffer',
        value: function _drawLineOnBuffer(penAttributes, x0, y0, x1, y1) {
            this._renderer.enterDrawRegion(this._lineOnBufferDrawRegionId);

            // tw: flush if this line would overflow buffers
            // For some reason, looking up the size of a_lineColor with .length is very slow in some browsers.
            // We see measurable performance improvements by comparing to a constant instead.
            if (this.a_lineColorIndex + 24 > PEN_BUFFER_SIZE_LARGER) {
                this._flushLines();
            }

            // Premultiply pen color by pen transparency
            var penColor = penAttributes.color4f || DefaultPenAttributes.color4f;
            __premultipliedColor[0] = penColor[0] * penColor[3];
            __premultipliedColor[1] = penColor[1] * penColor[3];
            __premultipliedColor[2] = penColor[2] * penColor[3];
            __premultipliedColor[3] = penColor[3];

            // tw: apply renderQuality
            x0 *= this.renderQuality;
            y0 *= this.renderQuality;
            x1 *= this.renderQuality;
            y1 *= this.renderQuality;

            // Fun fact: Doing this calculation in the shader has the potential to overflow the floating-point range.
            // 'mediump' precision is only required to have a range up to 2^14 (16384), so any lines longer than 2^7 (128)
            // can overflow that, because you're squaring the operands, and they could end up as "infinity".
            // Even GLSL's `length` function won't save us here:
            // https://asawicki.info/news_1596_watch_out_for_reduced_precision_normalizelength_in_opengl_es
            var lineDiffX = x1 - x0;
            var lineDiffY = y1 - y0;
            var lineLength = Math.sqrt(lineDiffX * lineDiffX + lineDiffY * lineDiffY);

            // tw: apply renderQuality
            var lineThickness = (penAttributes.diameter || DefaultPenAttributes.diameter) * this.renderQuality;
            // tw: write pen draws to buffers where they will be flushed later
            for (var i = 0; i < 6; i++) {
                this.a_lineColor[this.a_lineColorIndex] = __premultipliedColor[0];
                this.a_lineColorIndex++;
                this.a_lineColor[this.a_lineColorIndex] = __premultipliedColor[1];
                this.a_lineColorIndex++;
                this.a_lineColor[this.a_lineColorIndex] = __premultipliedColor[2];
                this.a_lineColorIndex++;
                this.a_lineColor[this.a_lineColorIndex] = __premultipliedColor[3];
                this.a_lineColorIndex++;

                this.a_lineThicknessAndLength[this.a_lineThicknessAndLengthIndex] = lineThickness;
                this.a_lineThicknessAndLengthIndex++;

                this.a_lineThicknessAndLength[this.a_lineThicknessAndLengthIndex] = lineLength;
                this.a_lineThicknessAndLengthIndex++;

                this.a_penPoints[this.a_penPointsIndex] = x0;
                this.a_penPointsIndex++;
                this.a_penPoints[this.a_penPointsIndex] = -y0;
                this.a_penPointsIndex++;
                this.a_penPoints[this.a_penPointsIndex] = lineDiffX;
                this.a_penPointsIndex++;
                this.a_penPoints[this.a_penPointsIndex] = -lineDiffY;
                this.a_penPointsIndex++;
            }
        }

        // tw: resets indexes in the pen drawing buffers

    }, {
        key: '_resetAttributeIndexes',
        value: function _resetAttributeIndexes() {
            this.a_lineColorIndex = 0;
            this.a_lineThicknessAndLengthIndex = 0;
            this.a_penPointsIndex = 0;
        }

        // tw: flushes buffered pen lines to the GPU

    }, {
        key: '_flushLines',
        value: function _flushLines() {
            var gl = this._renderer.gl;

            var currentShader = this._lineShader;

            // If only a small amount of data needs to be uploaded, only upload part of the data.
            // todo: need to see if this helps and fine tune this number
            if (this.a_lineColorIndex < 1000) {
                twgl.setAttribInfoBufferFromArray(gl, this._lineBufferInfo.attribs.a_lineColor, new Float32Array(this.a_lineColor.buffer, 0, this.a_lineColorIndex), 0);
                twgl.setAttribInfoBufferFromArray(gl, this._lineBufferInfo.attribs.a_penPoints, new Float32Array(this.a_penPoints.buffer, 0, this.a_penPointsIndex), 0);
                twgl.setAttribInfoBufferFromArray(gl, this._lineBufferInfo.attribs.a_lineThicknessAndLength, new Float32Array(this.a_lineThicknessAndLength.buffer, 0, this.a_lineThicknessAndLengthIndex), 0);
            } else {
                twgl.setAttribInfoBufferFromArray(gl, this._lineBufferInfo.attribs.a_lineColor, this.a_lineColor);
                twgl.setAttribInfoBufferFromArray(gl, this._lineBufferInfo.attribs.a_penPoints, this.a_penPoints);
                twgl.setAttribInfoBufferFromArray(gl, this._lineBufferInfo.attribs.a_lineThicknessAndLength, this.a_lineThicknessAndLength);
            }
            // todo: if we skip twgl and do all this buffer stuff ourselves, we can skip some unneeded gl calls
            twgl.setBuffersAndAttributes(gl, currentShader, this._lineBufferInfo);

            twgl.drawBufferInfo(gl, this._lineBufferInfo, gl.TRIANGLES, this.a_lineThicknessAndLengthIndex / 2);

            this._resetAttributeIndexes();

            this._silhouetteDirty = true;
        }

        /**
         * React to a change in the renderer's native size.
         * @param {object} event - The change event.
         */

    }, {
        key: 'onNativeSizeChanged',
        value: function onNativeSizeChanged(event) {
            // tw: keep track of native size
            this._nativeSize = event.newSize;
            this._setCanvasSize([event.newSize[0] * this.renderQuality, event.newSize[1] * this.renderQuality]);
            this.emitWasAltered();
        }

        /**
         * Set the size of the pen canvas.
         * @param {Array<int>} canvasSize - the new width and height for the canvas.
         * @private
         */

    }, {
        key: '_setCanvasSize',
        value: function _setCanvasSize(canvasSize) {
            var _canvasSize = _slicedToArray(canvasSize, 2),
                width = _canvasSize[0],
                height = _canvasSize[1];

            // tw: do not resize if new size === old size


            if (this._size && this._size[0] === width && this._size[1] === height) {
                return;
            }

            this._size = canvasSize;
            // tw: use native size for Drawable positioning logic
            this._rotationCenter[0] = this._nativeSize[0] / 2;
            this._rotationCenter[1] = this._nativeSize[1] / 2;

            var gl = this._renderer.gl;

            // tw: store current texture to redraw it later
            var oldTexture = this._texture;

            this._texture = twgl.createTexture(gl, {
                mag: gl.NEAREST,
                min: gl.NEAREST,
                wrap: gl.CLAMP_TO_EDGE,
                width: width,
                height: height
            });

            var attachments = [{
                format: gl.RGBA,
                attachment: this._texture
            }];

            if (this._framebuffer) {
                // tw: resize framebuffer info doesn't work here, so always make a new framebuffer
                // twgl.resizeFramebufferInfo(gl, this._framebuffer, attachments, width, height);
                this._framebuffer = twgl.createFramebufferInfo(gl, attachments, width, height);
            } else {
                this._framebuffer = twgl.createFramebufferInfo(gl, attachments, width, height);
            }

            gl.clearColor(0, 0, 0, 0);
            gl.clear(gl.COLOR_BUFFER_BIT);

            // tw: preserve old texture when resizing
            if (oldTexture) {
                this._drawPenTexture(oldTexture);
            }

            this._silhouettePixels = new Uint8Array(Math.floor(width * height * 4));
            this._silhouetteImageData = new ImageData(width, height);

            this._silhouetteDirty = true;
        }

        // tw: sets the "quality" of the pen skin

    }, {
        key: 'setRenderQuality',
        value: function setRenderQuality(quality) {
            if (this.renderQuality === quality) {
                return;
            }
            this.renderQuality = quality;
            this._setCanvasSize([Math.round(this._nativeSize[0] * quality), Math.round(this._nativeSize[1] * quality)]);
        }

        /**
         * If there have been pen operations that have dirtied the canvas, update
         * now before someone wants to use our silhouette.
         */

    }, {
        key: 'updateSilhouette',
        value: function updateSilhouette() {
            if (this._silhouetteDirty) {
                this._renderer.enterDrawRegion(this._usePenBufferDrawRegionId);
                // Sample the framebuffer's pixels into the silhouette instance
                var gl = this._renderer.gl;
                gl.readPixels(0, 0, this._size[0], this._size[1], gl.RGBA, gl.UNSIGNED_BYTE, this._silhouettePixels);

                this._silhouetteImageData.data.set(this._silhouettePixels);
                this._silhouette.update(this._silhouetteImageData, true /* isPremultiplied */);

                this._silhouetteDirty = false;
            }
        }
    }, {
        key: 'updatePenPointOffset',
        value: function updatePenPointOffset(x, y, scale, rot) {
            for (var idx = 0; idx < 4 * 6; idx += 4) {
                this.a_cameraOffset[idx + 0] = x;
                this.a_cameraOffset[idx + 1] = y;
                this.a_cameraOffset[idx + 2] = scale;
                this.a_cameraOffset[idx + 3] = rot;
            }
            this._silhouetteDirty = true;
        }
    }, {
        key: 'size',
        get: function get() {
            // tw: use native size for Drawable positioning logic
            return this._nativeSize;
        }
    }]);

    return PenSkin;
}(Skin);

module.exports = PenSkin;

/***/ }),

/***/ "./src/Rectangle.js":
/*!**************************!*\
  !*** ./src/Rectangle.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Rectangle = function () {
    /**
     * A utility for creating and comparing axis-aligned rectangles.
     * Rectangles are always initialized to the "largest possible rectangle";
     * use one of the init* methods below to set up a particular rectangle.
     * @constructor
     */
    function Rectangle() {
        _classCallCheck(this, Rectangle);

        this.left = -Infinity;
        this.right = Infinity;
        this.bottom = -Infinity;
        this.top = Infinity;
    }

    /**
     * Initialize a Rectangle from given Scratch-coordinate bounds.
     * @param {number} left Left bound of the rectangle.
     * @param {number} right Right bound of the rectangle.
     * @param {number} bottom Bottom bound of the rectangle.
     * @param {number} top Top bound of the rectangle.
     */


    _createClass(Rectangle, [{
        key: "initFromBounds",
        value: function initFromBounds(left, right, bottom, top) {
            this.left = left;
            this.right = right;
            this.bottom = bottom;
            this.top = top;
        }

        /**
         * Initialize a Rectangle to the minimum AABB around a set of points.
         * @param {Array<Array<number>>} points Array of [x, y] points.
         */

    }, {
        key: "initFromPointsAABB",
        value: function initFromPointsAABB(points) {
            this.left = Infinity;
            this.right = -Infinity;
            this.top = -Infinity;
            this.bottom = Infinity;

            for (var i = 0; i < points.length; i++) {
                var x = points[i][0];
                var y = points[i][1];
                if (x < this.left) {
                    this.left = x;
                }
                if (x > this.right) {
                    this.right = x;
                }
                if (y > this.top) {
                    this.top = y;
                }
                if (y < this.bottom) {
                    this.bottom = y;
                }
            }
        }

        /**
         * Initialize a Rectangle to a 1 unit square centered at 0 x 0 transformed
         * by a model matrix.
         * @param {Array.<number>} m A 4x4 matrix to transform the rectangle by.
         * @tutorial Rectangle-AABB-Matrix
         */

    }, {
        key: "initFromModelMatrix",
        value: function initFromModelMatrix(m) {
            // In 2D space, we will soon use the 2x2 "top left" scale and rotation
            // submatrix, while we store and the 1x2 "top right" that position
            // vector.
            var m30 = m[3 * 4 + 0];
            var m31 = m[3 * 4 + 1];

            // "Transform" a (0.5, 0.5) vector by the scale and rotation matrix but
            // sum the absolute of each component instead of use the signed values.
            var x = Math.abs(0.5 * m[0 * 4 + 0]) + Math.abs(0.5 * m[1 * 4 + 0]);
            var y = Math.abs(0.5 * m[0 * 4 + 1]) + Math.abs(0.5 * m[1 * 4 + 1]);

            // And adding them to the position components initializes our Rectangle.
            this.left = -x + m30;
            this.right = x + m30;
            this.top = y + m31;
            this.bottom = -y + m31;
        }

        /**
         * Determine if this Rectangle intersects some other.
         * Note that this is a comparison assuming the Rectangle was
         * initialized with Scratch-space bounds or points.
         * @param {!Rectangle} other Rectangle to check if intersecting.
         * @return {boolean} True if this Rectangle intersects other.
         */

    }, {
        key: "intersects",
        value: function intersects(other) {
            return this.left <= other.right && other.left <= this.right && this.top >= other.bottom && other.top >= this.bottom;
        }

        /**
         * Determine if this Rectangle fully contains some other.
         * Note that this is a comparison assuming the Rectangle was
         * initialized with Scratch-space bounds or points.
         * @param {!Rectangle} other Rectangle to check if fully contained.
         * @return {boolean} True if this Rectangle fully contains other.
         */

    }, {
        key: "contains",
        value: function contains(other) {
            return other.left > this.left && other.right < this.right && other.top < this.top && other.bottom > this.bottom;
        }

        /**
         * Clamp a Rectangle to bounds.
         * @param {number} left Left clamp.
         * @param {number} right Right clamp.
         * @param {number} bottom Bottom clamp.
         * @param {number} top Top clamp.
         */

    }, {
        key: "clamp",
        value: function clamp(left, right, bottom, top) {
            this.left = Math.max(this.left, left);
            this.right = Math.min(this.right, right);
            this.bottom = Math.max(this.bottom, bottom);
            this.top = Math.min(this.top, top);

            this.left = Math.min(this.left, right);
            this.right = Math.max(this.right, left);
            this.bottom = Math.min(this.bottom, top);
            this.top = Math.max(this.top, bottom);
        }

        /**
         * Push out the Rectangle to integer bounds.
         */

    }, {
        key: "snapToInt",
        value: function snapToInt() {
            this.left = Math.floor(this.left);
            this.right = Math.ceil(this.right);
            this.bottom = Math.floor(this.bottom);
            this.top = Math.ceil(this.top);
        }

        /**
         * Compute the intersection of two bounding Rectangles.
         * Could be an impossible box if they don't intersect.
         * @param {Rectangle} a One rectangle
         * @param {Rectangle} b Other rectangle
         * @param {?Rectangle} result A resulting storage rectangle  (safe to pass
         *                            a or b if you want to overwrite one)
         * @returns {Rectangle} resulting rectangle
         */

    }, {
        key: "width",


        /**
         * Width of the Rectangle.
         * @return {number} Width of rectangle.
         */
        get: function get() {
            return Math.abs(this.left - this.right);
        }

        /**
         * Height of the Rectangle.
         * @return {number} Height of rectangle.
         */

    }, {
        key: "height",
        get: function get() {
            return Math.abs(this.top - this.bottom);
        }
    }], [{
        key: "intersect",
        value: function intersect(a, b) {
            var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Rectangle();

            result.left = Math.max(a.left, b.left);
            result.right = Math.min(a.right, b.right);
            result.top = Math.min(a.top, b.top);
            result.bottom = Math.max(a.bottom, b.bottom);

            return result;
        }

        /**
         * Compute the union of two bounding Rectangles.
         * @param {Rectangle} a One rectangle
         * @param {Rectangle} b Other rectangle
         * @param {?Rectangle} result A resulting storage rectangle  (safe to pass
         *                            a or b if you want to overwrite one)
         * @returns {Rectangle} resulting rectangle
         */

    }, {
        key: "union",
        value: function union(a, b) {
            var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Rectangle();

            result.left = Math.min(a.left, b.left);
            result.right = Math.max(a.right, b.right);
            // Scratch Space - +y is up
            result.top = Math.max(a.top, b.top);
            result.bottom = Math.min(a.bottom, b.bottom);
            return result;
        }
    }]);

    return Rectangle;
}();

module.exports = Rectangle;

/***/ }),

/***/ "./src/RenderConstants.js":
/*!********************************!*\
  !*** ./src/RenderConstants.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** @module RenderConstants */

/**
 * Various constants meant for use throughout the renderer.
 * @enum
 */
module.exports = {
  /**
   * The ID value to use for "no item" or when an object has been disposed.
   * @const {int}
   */
  ID_NONE: -1,

  /**
   * @enum {string}
   */
  Events: {
    /**
     * Event emitted when the high quality render option changes.
     */
    UseHighQualityRenderChanged: 'UseHighQualityRenderChanged',

    /**
     * Event emitted when the private skin access option changes.
     */
    AllowPrivateSkinAccessChanged: 'AllowPrivateSkinAccessChanged',

    /**
     * NativeSizeChanged event
     *
     * @event RenderWebGL#event:NativeSizeChanged
     * @type {object}
     * @property {Array<int>} newSize - the new size of the renderer
     */
    NativeSizeChanged: 'NativeSizeChanged'
  }
};

/***/ }),

/***/ "./src/RenderWebGL.js":
/*!****************************!*\
  !*** ./src/RenderWebGL.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js");

var hull = __webpack_require__(/*! hull.js */ "./node_modules/hull.js/src/hull.js");
var twgl = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.js");

var Skin = __webpack_require__(/*! ./Skin */ "./src/Skin.js");
var BitmapSkin = __webpack_require__(/*! ./BitmapSkin */ "./src/BitmapSkin.js");
var Drawable = __webpack_require__(/*! ./Drawable */ "./src/Drawable.js");
var Rectangle = __webpack_require__(/*! ./Rectangle */ "./src/Rectangle.js");
var PenSkin = __webpack_require__(/*! ./PenSkin */ "./src/PenSkin.js");
var RenderConstants = __webpack_require__(/*! ./RenderConstants */ "./src/RenderConstants.js");
var ShaderManager = __webpack_require__(/*! ./ShaderManager */ "./src/ShaderManager.js");
var SVGSkin = __webpack_require__(/*! ./SVGSkin */ "./src/SVGSkin.js");
var TextBubbleSkin = __webpack_require__(/*! ./TextBubbleSkin */ "./src/TextBubbleSkin.js");
var TextCostumeSkin = __webpack_require__(/*! ./TextCostumeSkin */ "./src/TextCostumeSkin.js");
var EffectTransform = __webpack_require__(/*! ./EffectTransform */ "./src/EffectTransform.js");
var CanvasMeasurementProvider = __webpack_require__(/*! ./util/canvas-measurement-provider */ "./src/util/canvas-measurement-provider.js");
var log = __webpack_require__(/*! ./util/log */ "./src/util/log.js");

var __isTouchingDrawablesPoint = twgl.v3.create();
var __candidatesBounds = new Rectangle();
var __fenceBounds = new Rectangle();
var __touchingColor = new Uint8ClampedArray(4);
var __blendColor = new Uint8ClampedArray(4);

// More pixels than this and we give up to the GPU and take the cost of readPixels
// Width * Height * Number of drawables at location
var __cpuTouchingColorPixelCount = 4e4;

/**
 * @callback RenderWebGL#idFilterFunc
 * @param {int} drawableID The ID to filter.
 * @return {bool} True if the ID passes the filter, otherwise false.
 */

/**
 * Maximum touch size for a picking check.
 * @todo Figure out a reasonable max size. Maybe this should be configurable?
 * @type {Array<int>}
 * @memberof RenderWebGL
 */
var MAX_TOUCH_SIZE = [3, 3];

/**
 * Passed to the uniforms for mask in touching color
 */
var MASK_TOUCHING_COLOR_TOLERANCE = 2;

/**
 * Maximum number of pixels in either dimension of "extracted drawable" data
 * @type {int}
 */
var MAX_EXTRACTED_DRAWABLE_DIMENSION = 2048;

/**
 * Determines if the mask color is "close enough" (only test the 6 top bits for
 * each color).  These bit masks are what scratch 2 used to use, so we do the same.
 * @param {Uint8Array} a A color3b or color4b value.
 * @param {Uint8Array} b A color3b or color4b value.
 * @returns {boolean} If the colors match within the parameters.
 */
var maskMatches = function maskMatches(a, b) {
    return (
        // has some non-alpha component to test against
        a[3] > 0 && (a[0] & 252) === (b[0] & 252) && (a[1] & 252) === (b[1] & 252) && (a[2] & 252) === (b[2] & 252)
    );
};

/**
 * Determines if the given color is "close enough" (only test the 5 top bits for
 * red and green, 4 bits for blue).  These bit masks are what scratch 2 used to use,
 * so we do the same.
 * @param {Uint8Array} a A color3b or color4b value.
 * @param {Uint8Array} b A color3b or color4b value / or a larger array when used with offsets
 * @param {number} offset An offset into the `b` array, which lets you use a larger array to test
 *                  multiple values at the same time.
 * @returns {boolean} If the colors match within the parameters.
 */
var colorMatches = function colorMatches(a, b, offset) {
    return (a[0] & 248) === (b[offset + 0] & 248) && (a[1] & 248) === (b[offset + 1] & 248) && (a[2] & 240) === (b[offset + 2] & 240);
};

/**
 * Sprite Fencing - The number of pixels a sprite is required to leave remaining
 * onscreen around the edge of the staging area.
 * @type {number}
 */
var FENCE_WIDTH = 15;

// Loading text wrapper takes a while because of some of its dependencies, so only do so when needed.
var _TextWrapper = void 0;
var lazilyLoadTextWrapper = function lazilyLoadTextWrapper() {
    if (!_TextWrapper) {
        // eslint-disable-next-line global-require
        _TextWrapper = __webpack_require__(/*! ./util/text-wrapper */ "./src/util/text-wrapper.js");
    }
    return _TextWrapper;
};

var _stylesheet = void 0;
var loadStyles = function loadStyles() {
    if (!_stylesheet) {
        _stylesheet = document.createElement('style');
        // eslint-disable-next-line global-require
        _stylesheet.textContent = __webpack_require__(/*! raw-loader!./renderer.css */ "./node_modules/raw-loader/index.js!./src/renderer.css");
        _stylesheet.className = 'scratch-render-styles';
        document.head.appendChild(_stylesheet);
    }
};

var RenderWebGL = function (_EventEmitter) {
    _inherits(RenderWebGL, _EventEmitter);

    _createClass(RenderWebGL, null, [{
        key: 'isSupported',

        /**
         * Check if this environment appears to support this renderer before attempting to create an instance.
         * Catching an exception from the constructor is also a valid way to test for (lack of) support.
         * @param {canvas} [optCanvas] - An optional canvas to use for the test. Otherwise a temporary canvas will be used.
         * @returns {boolean} - True if this environment appears to support this renderer, false otherwise.
         */
        value: function isSupported(optCanvas) {
            try {
                optCanvas = optCanvas || document.createElement('canvas');
                var options = {
                    alpha: true,
                    stencil: true,
                    antialias: false,
                    xrCompatible: true
                };
                return !!(optCanvas.getContext('webgl', options) || optCanvas.getContext('experimental-webgl', options) || optCanvas.getContext('webgl2', options));
            } catch (e) {
                return false;
            }
        }

        /**
         * Ask TWGL to create a rendering context with the attributes used by this renderer.
         * @param {canvas} canvas - attach the context to this canvas.
         * @returns {WebGLRenderingContext} - a TWGL rendering context (backed by either WebGL 1.0 or 2.0).
         * @private
         */

    }, {
        key: '_getContext',
        value: function _getContext(canvas) {
            var contextAttribs = {
                alpha: true,
                stencil: true,
                antialias: false,
                xrCompatible: true,
                powerPreference: RenderWebGL.powerPreference
            };
            // getWebGLContext = try WebGL 1.0 only
            // getContext = try WebGL 2.0 and if that doesn't work, try WebGL 1.0
            // getWebGLContext || getContext = try WebGL 1.0 and if that doesn't work, try WebGL 2.0
            return twgl.getWebGLContext(canvas, contextAttribs) || twgl.getContext(canvas, contextAttribs);
        }

        /**
         * Create a renderer for drawing Scratch sprites to a canvas using WebGL.
         * Coordinates will default to Scratch 2.0 values if unspecified.
         * The stage's "native" size will be calculated from the these coordinates.
         * For example, the defaults result in a native size of 480x360.
         * Queries such as "touching color?" will always execute at the native size.
         * @see RenderWebGL#setStageSize
         * @see RenderWebGL#resize
         * @param {canvas} canvas The canvas to draw onto.
         * @param {int} [xLeft=-240] The x-coordinate of the left edge.
         * @param {int} [xRight=240] The x-coordinate of the right edge.
         * @param {int} [yBottom=-180] The y-coordinate of the bottom edge.
         * @param {int} [yTop=180] The y-coordinate of the top edge.
         * @constructor
         * @listens RenderWebGL#event:NativeSizeChanged
         */

    }]);

    function RenderWebGL(canvas, xLeft, xRight, yBottom, yTop) {
        _classCallCheck(this, RenderWebGL);

        /** @type {WebGLRenderingContext} */
        var _this = _possibleConstructorReturn(this, (RenderWebGL.__proto__ || Object.getPrototypeOf(RenderWebGL)).call(this));

        var gl = _this._gl = RenderWebGL._getContext(canvas);
        if (!gl) {
            throw new Error('Could not get WebGL context: this browser or environment may not support WebGL.');
        }

        /** @type {RenderWebGL.UseGpuModes} */
        _this._useGpuMode = RenderWebGL.UseGpuModes.Automatic;

        /** @type {Drawable[]} */
        _this._allDrawables = [];

        /** @type {Skin[]} */
        _this._allSkins = [];

        /** @type {Array<int>} */
        _this._drawList = [];

        // A list of layer group names in the order they should appear
        // from furthest back to furthest in front.
        /** @type {Array<String>} */
        _this._groupOrdering = [];

        /**
         * @typedef LayerGroup
         * @property {int} groupIndex The relative position of this layer group in the group ordering
         * @property {int} drawListOffset The absolute position of this layer group in the draw list
         * This number gets updated as drawables get added to or deleted from the draw list.
         */

        // Map of group name to layer group
        /** @type {Object.<string, LayerGroup>} */
        _this._layerGroups = {};

        /** @type {int} */
        _this._nextDrawableId = RenderConstants.ID_NONE + 1;

        /** @type {int} */
        _this._nextSkinId = RenderConstants.ID_NONE + 1;

        /** @type {module:twgl/m4.Mat4} */
        _this._projection = twgl.m4.identity();

        /** @type {ShaderManager} */
        _this._shaderManager = new ShaderManager(gl);

        /** @type {any} */
        _this._regionId = null;

        /** @type {function} */
        _this._exitRegion = null;

        /** @type {object} */
        _this._backgroundDrawRegionId = {
            enter: function enter() {
                return _this._enterDrawBackground();
            },
            exit: function exit() {
                return _this._exitDrawBackground();
            }
        };

        /** @type {Array.<snapshotCallback>} */
        _this._snapshotCallbacks = [];

        /** @type {Array<number>} */
        // Don't set this directly-- use setBackgroundColor so it stays in sync with _backgroundColor3b
        _this._backgroundColor4f = [0, 0, 0, 1];

        /** @type {Uint8ClampedArray} */
        // Don't set this directly-- use setBackgroundColor so it stays in sync with _backgroundColor4f
        _this._backgroundColor3b = new Uint8ClampedArray(3);

        // tw: track id of pen skin
        _this._penSkinId = null;

        // pm: extra rendering settings
        _this.customRenderConfig = {
            textCostumeResolution: {
                capped: false,
                fixed: false,
                value: 1
            }
        };

        _this.useHighQualityRender = true;

        _this.offscreenTouching = false;

        _this.dirty = true;

        /**
         * Element that contains all overlays.
         * @type {HTMLElement}
         */
        _this.overlayContainer = document.createElement('div');
        _this.overlayContainer.className = 'scratch-render-overlays';

        /**
         * @type {Array<{container: HTMLElement; userElement: HTMLElement; mode: string;}>}
         */
        _this._overlays = [];

        loadStyles();

        _this._createGeometry();

        _this.on(RenderConstants.Events.NativeSizeChanged, _this.onNativeSizeChanged);

        _this.setBackgroundColor(1, 1, 1);
        _this.setStageSize(xLeft || -240, xRight || 240, yBottom || -180, yTop || 180);
        _this.resize(_this._nativeSize[0], _this._nativeSize[1]);

        gl.disable(gl.DEPTH_TEST);
        /** @todo disable when no partial transparency? */
        gl.enable(gl.BLEND);
        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);

        /**
         * Whether or not the renderer should be drawing to an XR layer.
         * Used for the Virtual Reality extension.
         */
        _this.xrEnabled = false;

        /**
         * Whether or not the renderer should be drawing the image split for VR screens.
         * Used for the Virtual Reality extension.
         */
        _this.xrSplitting = false;

        /**
         * An offset where the XR splitting will shift closer to the center.
         * Used for the Virtual Reality extension.
         */
        _this.xrSplitOffset = 0;

        /**
         * The layer that should be drawn to.
         * Used for the Virtual Reality extension.
         */
        _this.xrLayer = null;

        /**
         * Whether projects should be able to access the contents of private skins such as webcams.
         * If set to false, routines such as isTouchingColor will ignore private skins.
         * Private skins will still be rendered on the canvas regardless of this setting.
         * This is set to true by default for compatibility with vanilla Scratch.
         * @type {boolean}
         */
        _this.allowPrivateSkinAccess = true;

        /**
         * Suggested maximum texture size in texels. This is not a hard limit.
         * Defualt value is same as Scratch's SVGSkin max.
         * @type {number}
         */
        _this.maxTextureDimension = 2048;

        /**
         * Custom fonts, used by SVGs. Maps font families to their @font-face statement.
         * Do not modify directly -- use {@link setCustomFonts}.
         * @type {Record<string, string>}
         */
        _this.customFonts = {};

        /**
         * <style> element used for custom fonts.
         * @type {HTMLStyleElement|null}
         */
        _this._customFontStyles = null;

        /**
         * Export internals for third-party extensions.
         */
        _this.exports = {
            twgl: twgl,
            Drawable: Drawable,
            Skin: Skin,
            BitmapSkin: BitmapSkin,
            TextBubbleSkin: TextBubbleSkin,
            PenSkin: PenSkin,
            SVGSkin: SVGSkin,
            CanvasMeasurementProvider: CanvasMeasurementProvider,
            Rectangle: Rectangle
        };
        return _this;
    }

    // tw: implement high quality pen option


    _createClass(RenderWebGL, [{
        key: 'setUseHighQualityRender',
        value: function setUseHighQualityRender(enabled) {
            this.dirty = true;
            this.useHighQualityRender = enabled;
            this.emit(RenderConstants.Events.UseHighQualityRenderChanged, enabled);
            this._updateRenderQuality();
        }
    }, {
        key: '_updateRenderQuality',
        value: function _updateRenderQuality() {
            if (this._penSkinId !== null) {
                var skin = this._allSkins[this._penSkinId];
                if (skin) {
                    if (this.useHighQualityRender) {
                        skin.setRenderQuality(this.canvas.width / this._nativeSize[0]);
                    } else {
                        skin.setRenderQuality(1);
                    }
                }
            }
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this._allDrawables[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var drawable = _step.value;

                    if (drawable) {
                        drawable.setHighQuality(this.useHighQualityRender);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }

        /**
         * Configure whether the renderer should let projects access private skins.
         * @param {boolean} allowPrivateSkinAccess Whether projects can access private skins or not.
         */

    }, {
        key: 'setPrivateSkinAccess',
        value: function setPrivateSkinAccess(allowPrivateSkinAccess) {
            this.allowPrivateSkinAccess = allowPrivateSkinAccess;
            this.emit(RenderConstants.Events.AllowPrivateSkinAccessChanged, allowPrivateSkinAccess);
        }

        /**
         * Modify the suggested maximum texture dimension. This should be set before any skins are created.
         * @param {number} newMax The new maximum in texels
         */

    }, {
        key: 'setMaxTextureDimension',
        value: function setMaxTextureDimension(newMax) {
            var hardwareLimit = this._gl.getParameter(this._gl.MAX_TEXTURE_SIZE);
            this.maxTextureDimension = Math.min(newMax, hardwareLimit);
        }

        /**
         * @returns {WebGLRenderingContext} the WebGL rendering context associated with this renderer.
         */

    }, {
        key: 'resize',


        /**
         * Set the physical size of the stage in device-independent pixels.
         * This will be multiplied by the device's pixel ratio on high-DPI displays.
         * @param {int} pixelsWide The desired width in device-independent pixels.
         * @param {int} pixelsTall The desired height in device-independent pixels.
         */
        value: function resize(pixelsWide, pixelsTall) {
            var canvas = this._gl.canvas;

            var pixelRatio = window.devicePixelRatio || 1;
            var newWidth = pixelsWide * pixelRatio;
            var newHeight = pixelsTall * pixelRatio;

            // Certain operations, such as moving the color picker, call `resize` once per frame, even though the canvas
            // size doesn't change. To avoid unnecessary canvas updates, check that we *really* need to resize the canvas.
            if (canvas.width !== newWidth || canvas.height !== newHeight) {
                canvas.width = newWidth;
                canvas.height = newHeight;

                this._updateRenderQuality();
                this._updateOverlays();

                // Resizing the canvas causes it to be cleared, so redraw it.
                this.dirty = true;
                this.draw();
            }
        }

        /**
         * Set the background color for the stage. The stage will be cleared with this
         * color each frame.
         * @param {number} red The red component for the background.
         * @param {number} green The green component for the background.
         * @param {number} blue The blue component for the background.
         * @param {number} alpha The Alpha component for the background. (0-1)
         */

    }, {
        key: 'setBackgroundColor',
        value: function setBackgroundColor(red, green, blue, alpha) {
            this.dirty = true;

            this._backgroundColor4f[0] = red;
            this._backgroundColor4f[1] = green;
            this._backgroundColor4f[2] = blue;
            this._backgroundColor4f[3] = alpha;

            this._backgroundColor3b[0] = red * 255;
            this._backgroundColor3b[1] = green * 255;
            this._backgroundColor3b[2] = blue * 255;
        }

        /**
         * Tell the renderer to draw various debug information to the provided canvas
         * during certain operations.
         * @param {canvas} canvas The canvas to use for debug output.
         */

    }, {
        key: 'setDebugCanvas',
        value: function setDebugCanvas(canvas) {
            this._debugCanvas = canvas;
        }

        /**
         * Control the use of the GPU or CPU paths in `isTouchingColor`.
         * @param {RenderWebGL.UseGpuModes} useGpuMode - automatically decide, force CPU, or force GPU.
         */

    }, {
        key: 'setUseGpuMode',
        value: function setUseGpuMode(useGpuMode) {
            this._useGpuMode = useGpuMode;
        }

        /**
         * Set logical size of the stage in Scratch units.
         * @param {int} xLeft The left edge's x-coordinate. Scratch 2 uses -240.
         * @param {int} xRight The right edge's x-coordinate. Scratch 2 uses 240.
         * @param {int} yBottom The bottom edge's y-coordinate. Scratch 2 uses -180.
         * @param {int} yTop The top edge's y-coordinate. Scratch 2 uses 180.
         */

    }, {
        key: 'setStageSize',
        value: function setStageSize(xLeft, xRight, yBottom, yTop) {
            this._xLeft = xLeft;
            this._xRight = xRight;
            this._yBottom = yBottom;
            this._yTop = yTop;

            // swap yBottom & yTop to fit Scratch convention of +y=up
            this._projection = twgl.m4.ortho(xLeft, xRight, yBottom, yTop, -1, 1);

            this._setNativeSize(Math.abs(xRight - xLeft), Math.abs(yBottom - yTop));
        }

        /**
         * @return {Array<int>} the "native" size of the stage, which is used for pen, query renders, etc.
         */

    }, {
        key: 'getNativeSize',
        value: function getNativeSize() {
            return [this._nativeSize[0], this._nativeSize[1]];
        }

        /**
         * Set the "native" size of the stage, which is used for pen, query renders, etc.
         * @param {int} width - the new width to set.
         * @param {int} height - the new height to set.
         * @private
         * @fires RenderWebGL#event:NativeSizeChanged
         */

    }, {
        key: '_setNativeSize',
        value: function _setNativeSize(width, height) {
            this._nativeSize = [width, height];
            this._updateOverlays();
            this.emit(RenderConstants.Events.NativeSizeChanged, { newSize: this._nativeSize });
        }

        /**
         * @param {HTMLElement} element HTML element
         * @param {string} mode Resize mode
         * @returns {*} Internal overlay object
         */

    }, {
        key: 'addOverlay',
        value: function addOverlay(element) {
            var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'scale';

            var container = document.createElement('div');
            container.appendChild(element);
            this.overlayContainer.appendChild(container);
            var overlay = {
                container: container,
                userElement: element,
                mode: mode
            };
            this._overlays.push(overlay);
            this._updateOverlays();
            return overlay;
        }

        /**
         * @param {HTMLElement} element HTML element
         */

    }, {
        key: 'removeOverlay',
        value: function removeOverlay(element) {
            var overlayIndex = this._overlays.findIndex(function (i) {
                return i.userElement === element;
            });
            if (overlayIndex !== -1) {
                this._overlays[overlayIndex].container.remove();
                this._overlays.splice(overlayIndex, 1);
            }
        }
    }, {
        key: '_updateOverlays',
        value: function _updateOverlays() {
            var _nativeSize = _slicedToArray(this._nativeSize, 2),
                nativeWidth = _nativeSize[0],
                nativeHeight = _nativeSize[1];

            var dpiIndependentWidth = this.canvas.width / window.devicePixelRatio;
            var dpiIndependentHeight = this.canvas.height / window.devicePixelRatio;

            this.overlayContainer.style.width = dpiIndependentWidth + 'px';
            this.overlayContainer.style.height = dpiIndependentHeight + 'px';

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this._overlays[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var overlay = _step2.value;

                    var container = overlay.container;
                    if (overlay.mode === 'scale' || overlay.mode === 'scale-centered') {
                        var xScale = dpiIndependentWidth / nativeWidth;
                        var yScale = dpiIndependentHeight / nativeHeight;
                        container.style.width = nativeWidth + 'px';
                        container.style.height = nativeHeight + 'px';

                        var scale = 'scale(' + xScale + ', ' + yScale + ')';
                        container.style.transformOrigin = 'top left';
                        if (overlay.mode === 'scale') {
                            container.style.transform = scale;
                        } else {
                            var shiftToCenter = 'translate(' + nativeWidth / 2 + 'px, ' + nativeHeight / 2 + 'px)';
                            container.style.transform = scale + ' ' + shiftToCenter;
                        }
                    } else {
                        container.style.transform = '';
                        container.style.width = '100%';
                        container.style.height = '100%';
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }

        /**
         * Create a new bitmap skin from a snapshot of the provided bitmap data.
         * @param {ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} bitmapData - new contents for this skin.
         * @param {!int} [costumeResolution=1] - The resolution to use for this bitmap.
         * @param {?Array<number>} [rotationCenter] Optional: rotation center of the skin. If not supplied, the center of
         * the skin will be used.
         * @returns {!int} the ID for the new skin.
         */

    }, {
        key: 'createBitmapSkin',
        value: function createBitmapSkin(bitmapData, costumeResolution, rotationCenter) {
            var skinId = this._nextSkinId++;
            var newSkin = new BitmapSkin(skinId, this);
            newSkin.setBitmap(bitmapData, costumeResolution, rotationCenter);
            this._allSkins[skinId] = newSkin;
            return skinId;
        }

        /**
         * Create a new SVG skin.
         * @param {!string} svgData - new SVG to use.
         * @param {?Array<number>} rotationCenter Optional: rotation center of the skin. If not supplied, the center of the
         * skin will be used
         * @returns {!int} the ID for the new skin.
         */

    }, {
        key: 'createSVGSkin',
        value: function createSVGSkin(svgData, rotationCenter) {
            var skinId = this._nextSkinId++;
            var newSkin = new SVGSkin(skinId, this);
            newSkin.setSVG(svgData, rotationCenter);
            this._allSkins[skinId] = newSkin;
            return skinId;
        }

        /**
         * Create a new PenSkin - a skin which implements a Scratch pen layer.
         * @returns {!int} the ID for the new skin.
         */

    }, {
        key: 'createPenSkin',
        value: function createPenSkin() {
            var skinId = this._nextSkinId++;
            var newSkin = new PenSkin(skinId, this);
            this._allSkins[skinId] = newSkin;
            // tw: track id of pen skin
            this._penSkinId = skinId;
            // tw: high quality pen may have been enabled before the pen skin was created
            this._updateRenderQuality();
            return skinId;
        }

        /**
         * Create a new SVG skin using the text skin creator. The rotation center
         * is always placed at the top left.
         * @param {!string} type - either "say" or "think".
         * @param {!string} text - the text for the bubble.
         * @param {!boolean} pointsLeft - which side the bubble is pointing.
         * @param {!object} props - text props.
         * @returns {!int} the ID for the new skin.
         */

    }, {
        key: 'createTextSkin',
        value: function createTextSkin(type, text, pointsLeft, props) {
            var skinId = this._nextSkinId++;
            var newSkin = new TextBubbleSkin(skinId, this);
            newSkin.setTextBubble(type, text, pointsLeft, props);
            this._allSkins[skinId] = newSkin;
            return skinId;
        }

        /**
         * Update an existing SVG skin, or create an SVG skin if the previous skin was not SVG.
         * @param {!int} skinId the ID for the skin to change.
         * @param {!string} svgData - new SVG to use.
         * @param {?Array<number>} rotationCenter Optional: rotation center of the skin. If not supplied, the center of the
         * skin will be used
         */

    }, {
        key: 'updateSVGSkin',
        value: function updateSVGSkin(skinId, svgData, rotationCenter) {
            if (this._allSkins[skinId] instanceof SVGSkin) {
                this._allSkins[skinId].setSVG(svgData, rotationCenter);
                return;
            }

            var newSkin = new SVGSkin(skinId, this);
            newSkin.setSVG(svgData, rotationCenter);
            this._reskin(skinId, newSkin);
        }

        /**
         * Update an existing bitmap skin, or create a bitmap skin if the previous skin was not bitmap.
         * @param {!int} skinId the ID for the skin to change.
         * @param {!ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imgData - new contents for this skin.
         * @param {!number} bitmapResolution - the resolution scale for a bitmap costume.
         * @param {?Array<number>} rotationCenter Optional: rotation center of the skin. If not supplied, the center of the
         * skin will be used
         */

    }, {
        key: 'updateBitmapSkin',
        value: function updateBitmapSkin(skinId, imgData, bitmapResolution, rotationCenter) {
            if (this._allSkins[skinId] instanceof BitmapSkin) {
                this._allSkins[skinId].setBitmap(imgData, bitmapResolution, rotationCenter);
                return;
            }

            var newSkin = new BitmapSkin(skinId, this);
            newSkin.setBitmap(imgData, bitmapResolution, rotationCenter);
            this._reskin(skinId, newSkin);
        }
    }, {
        key: '_reskin',
        value: function _reskin(skinId, newSkin) {
            var oldSkin = this._allSkins[skinId];
            this._allSkins[skinId] = newSkin;

            // Tell drawables to update
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this._allDrawables[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var drawable = _step3.value;

                    if (drawable && drawable.skin === oldSkin) {
                        drawable.skin = newSkin;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            oldSkin.dispose();
        }

        /**
         * Update a skin using the text skin creator.
         * @param {!int} skinId the ID for the skin to change.
         * @param {!string} type - either "say" or "think".
         * @param {!string} text - the text for the bubble.
         * @param {!boolean} pointsLeft - which side the bubble is pointing.
         * @param {!object} props - the text props.
         */

    }, {
        key: 'updateTextSkin',
        value: function updateTextSkin(skinId, type, text, pointsLeft, props) {
            if (this._allSkins[skinId] instanceof TextBubbleSkin) {
                this._allSkins[skinId].setTextBubble(type, text, pointsLeft, props);
                return;
            }

            var newSkin = new TextBubbleSkin(skinId, this);
            newSkin.setTextBubble(type, text, pointsLeft, props);
            this._reskin(skinId, newSkin);
        }

        /**
         * Update a skin using the text costume svg creator.
         * @param {!object} textState the state to apply.
         * @param {!boolean} pointsLeft - which side the bubble is pointing.
         * @returns {number} the the skin id
         */

    }, {
        key: 'updateTextCostumeSkin',
        value: function updateTextCostumeSkin(textState) {
            // update existing skin
            if (textState.skinId && this._allSkins[textState.skinId] instanceof TextCostumeSkin) {
                this._allSkins[textState.skinId].setTextAndStyle(textState);

                return textState.skinId;
            } // create and update a new skin


            var skinId = this._nextSkinId++;
            var newSkin = new TextCostumeSkin(skinId, this);
            this._allSkins[skinId] = newSkin;
            newSkin.setTextAndStyle(textState); // this._reskin(skinId, newSkin); // this is erroring- might be necessary?

            return skinId;
        }

        /**
         * Destroy an existing skin. Do not use the skin or its ID after calling this.
         * @param {!int} skinId - The ID of the skin to destroy.
         */

    }, {
        key: 'destroySkin',
        value: function destroySkin(skinId) {
            var oldSkin = this._allSkins[skinId];
            oldSkin.dispose();
            delete this._allSkins[skinId];
        }

        /**
         * Create a new Drawable and add it to the scene.
         * @param {string} group Layer group to add the drawable to
         * @returns {int} The ID of the new Drawable.
         */

    }, {
        key: 'createDrawable',
        value: function createDrawable(group) {
            if (!group || !Object.prototype.hasOwnProperty.call(this._layerGroups, group)) {
                log.warn('Cannot create a drawable without a known layer group');
                return;
            }
            var drawableID = this._nextDrawableId++;
            var drawable = new Drawable(drawableID, this);
            this._allDrawables[drawableID] = drawable;
            this._addToDrawList(drawableID, group);
            // tw: implement high quality render
            drawable.setHighQuality(this.useHighQualityRender);

            drawable.skin = null;

            return drawableID;
        }

        /**
         * @param {CanvasMeasurementProvider} measurementProvider helper for measuring text
         * @returns {TextWrapper} an instance of TextWrapper
         */

    }, {
        key: 'createTextWrapper',
        value: function createTextWrapper(measurementProvider) {
            return new (lazilyLoadTextWrapper())(measurementProvider);
        }

        /**
         * Mark a skin as containing private information.
         * @param {number} skinID The skin's ID
         */

    }, {
        key: 'markSkinAsPrivate',
        value: function markSkinAsPrivate(skinID) {
            var skin = this._allSkins[skinID];
            if (!skin) {
                return;
            }
            skin.private = true;
        }

        /**
         * Set the layer group ordering for the renderer.
         * @param {Array<string>} groupOrdering The ordered array of layer group
         * names
         */

    }, {
        key: 'setLayerGroupOrdering',
        value: function setLayerGroupOrdering(groupOrdering) {
            var oldGroups = {};
            for (var i = 0; i < this._groupOrdering.length; i++) {
                var groupID = this._groupOrdering[i];
                var layerGroup = this._layerGroups[groupID];
                var startIndex = layerGroup.drawListOffset;
                var endIndex = this._endIndexForKnownLayerGroup(layerGroup);
                oldGroups[groupID] = this._drawList.slice(startIndex, endIndex);
            }
            this._drawList = [];
            this._groupOrdering = groupOrdering;
            for (var _i = 0; _i < this._groupOrdering.length; _i++) {
                var _groupID = this._groupOrdering[_i];
                var oldLayerGroup = oldGroups[_groupID];
                if (oldLayerGroup) {
                    this._drawList = this._drawList.concat(oldLayerGroup);
                }
                this._layerGroups[_groupID] = {
                    groupIndex: _i,
                    drawListOffset: this._drawList.length
                };
            }
        }
    }, {
        key: '_addToDrawList',
        value: function _addToDrawList(drawableID, group) {
            var currentLayerGroup = this._layerGroups[group];
            var currentGroupOrderingIndex = currentLayerGroup.groupIndex;

            var drawListOffset = this._endIndexForKnownLayerGroup(currentLayerGroup);
            this._drawList.splice(drawListOffset, 0, drawableID);

            this._updateOffsets('add', currentGroupOrderingIndex);
        }
    }, {
        key: '_updateOffsets',
        value: function _updateOffsets(updateType, currentGroupOrderingIndex) {
            for (var i = currentGroupOrderingIndex + 1; i < this._groupOrdering.length; i++) {
                var laterGroupName = this._groupOrdering[i];
                if (updateType === 'add') {
                    this._layerGroups[laterGroupName].drawListOffset++;
                } else if (updateType === 'delete') {
                    this._layerGroups[laterGroupName].drawListOffset--;
                }
            }
        }
    }, {
        key: '_endIndexForKnownLayerGroup',


        // Given a layer group, return the index where it ends (non-inclusive),
        // e.g. the returned index does not have a drawable from this layer group in it)
        value: function _endIndexForKnownLayerGroup(layerGroup) {
            var groupIndex = layerGroup.groupIndex;
            if (groupIndex === this._groupOrdering.length - 1) {
                return this._drawList.length;
            }
            return this._layerGroups[this._groupOrdering[groupIndex + 1]].drawListOffset;
        }

        /**
         * Destroy a Drawable, removing it from the scene.
         * @param {int} drawableID The ID of the Drawable to remove.
         * @param {string} group Group name that the drawable belongs to
         */

    }, {
        key: 'destroyDrawable',
        value: function destroyDrawable(drawableID, group) {
            if (!group || !Object.prototype.hasOwnProperty.call(this._layerGroups, group)) {
                log.warn('Cannot destroy drawable without known layer group.');
                return;
            }
            this.dirty = true;
            var drawable = this._allDrawables[drawableID];
            drawable.dispose();
            delete this._allDrawables[drawableID];

            var currentLayerGroup = this._layerGroups[group];
            var endIndex = this._endIndexForKnownLayerGroup(currentLayerGroup);

            var index = currentLayerGroup.drawListOffset;
            while (index < endIndex) {
                if (this._drawList[index] === drawableID) {
                    break;
                }
                index++;
            }
            if (index < endIndex) {
                this._drawList.splice(index, 1);
                this._updateOffsets('delete', currentLayerGroup.groupIndex);
            } else {
                log.warn('Could not destroy drawable that could not be found in layer group.');
                return;
            }
        }

        /**
         * Returns the position of the given drawableID in the draw list. This is
         * the absolute position irrespective of layer group.
         * @param {number} drawableID The drawable ID to find.
         * @return {number} The postion of the given drawable ID.
         */

    }, {
        key: 'getDrawableOrder',
        value: function getDrawableOrder(drawableID) {
            return this._drawList.indexOf(drawableID);
        }

        /**
         * Set a drawable's order in the drawable list (effectively, z/layer).
         * Can be used to move drawables to absolute positions in the list,
         * or relative to their current positions.
         * "go back N layers": setDrawableOrder(id, -N, true, 1); (assuming stage at 0).
         * "go to back": setDrawableOrder(id, 1); (assuming stage at 0).
         * "go to front": setDrawableOrder(id, Infinity);
         * @param {int} drawableID ID of Drawable to reorder.
         * @param {number} order New absolute order or relative order adjusment.
         * @param {string=} group Name of layer group drawable belongs to.
         * Reordering will not take place if drawable cannot be found within the bounds
         * of the layer group.
         * @param {boolean=} optIsRelative If set, `order` refers to a relative change.
         * @param {number=} optMin If set, order constrained to be at least `optMin`.
         * @return {?number} New order if changed, or null.
         */

    }, {
        key: 'setDrawableOrder',
        value: function setDrawableOrder(drawableID, order, group, optIsRelative, optMin) {
            if (!group || !Object.prototype.hasOwnProperty.call(this._layerGroups, group)) {
                log.warn('Cannot set the order of a drawable without a known layer group.');
                return;
            }

            this.dirty = true;
            var currentLayerGroup = this._layerGroups[group];
            var startIndex = currentLayerGroup.drawListOffset;
            var endIndex = this._endIndexForKnownLayerGroup(currentLayerGroup);

            var oldIndex = startIndex;
            while (oldIndex < endIndex) {
                if (this._drawList[oldIndex] === drawableID) {
                    break;
                }
                oldIndex++;
            }

            if (oldIndex < endIndex) {
                // Remove drawable from the list.
                if (order === 0) {
                    return oldIndex;
                }

                var _ = this._drawList.splice(oldIndex, 1)[0];
                // Determine new index.
                var newIndex = order;
                if (optIsRelative) {
                    newIndex += oldIndex;
                }

                var possibleMin = (optMin || 0) + startIndex;
                var min = possibleMin >= startIndex && possibleMin < endIndex ? possibleMin : startIndex;
                newIndex = Math.max(newIndex, min);

                newIndex = Math.min(newIndex, endIndex);

                // Insert at new index.
                this._drawList.splice(newIndex, 0, drawableID);
                return newIndex;
            }

            return null;
        }
    }, {
        key: 'skinWasAltered',
        value: function skinWasAltered(skin) {
            // This is very hot function.
            for (var i = 0; i < this._allDrawables.length; i++) {
                var drawable = this._allDrawables[i];
                if (drawable && drawable._skin === skin) {
                    drawable._skinWasAltered();
                }
            }
        }

        /**
         * Draw all current drawables and present the frame on the canvas.
         */

    }, {
        key: 'draw',
        value: function draw() {
            // practically doesnt matter with XR enabled
            if (!this.dirty) {
                return;
            }

            if (this.xrEnabled) {
                // dont crash, just dont draw if we dont have a layer
                // can happen when exiting
                if (!this.xrLayer) return;
            }

            this.dirty = false;

            this._doExitDrawRegion();

            var gl = this._gl;

            var xrLayer = this.xrLayer;
            if (this.xrEnabled) {
                // todo: mayb this single line is better idk
                // twgl.bindFramebufferInfo(gl, xrLayer.framebuffer);
                gl.bindFramebuffer(gl.FRAMEBUFFER, xrLayer.framebuffer);
                gl.viewport(0, 0, xrLayer.framebufferWidth, xrLayer.framebufferHeight);
                // black full transparency apparently
                gl.clearColor(0, 0, 0, 0);
            } else {
                twgl.bindFramebufferInfo(gl, null);
                gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
                gl.clearColor.apply(gl, _toConsumableArray(this._backgroundColor4f));
            }
            gl.clear(gl.COLOR_BUFFER_BIT);

            var snapshotRequested = this._snapshotCallbacks.length > 0;
            // eslint-disable-next-line no-negated-condition
            if (!this.xrSplitting) {
                // draw normally
                this._drawThese(this._drawList, ShaderManager.DRAW_MODE.default, this._projection, {
                    framebufferWidth: gl.canvas.width,
                    framebufferHeight: gl.canvas.height,
                    skipPrivateSkins: snapshotRequested
                });
            } else {
                // draw split
                var width = this.xrEnabled ? xrLayer.framebufferWidth : gl.canvas.width;
                var height = this.xrEnabled ? xrLayer.framebufferHeight : gl.canvas.height;
                var stageWidth = this._xRight - this._xLeft;

                // create projections
                // #1 is used for the left eye
                // #2 is used for the right eye
                var projection1 = twgl.m4.ortho(this._xLeft + this.xrSplitOffset, this._xRight + stageWidth + this.xrSplitOffset, this._yBottom, this._yTop, -1, 1);
                var projection2 = twgl.m4.ortho(this._xLeft - stageWidth - this.xrSplitOffset, this._xRight + stageWidth - stageWidth - this.xrSplitOffset, this._yBottom, this._yTop, -1, 1);

                gl.enable(gl.SCISSOR_TEST);
                // draw left eye
                gl.scissor(0, 0, width / 2, height);
                this._drawThese(this._drawList, ShaderManager.DRAW_MODE.default, projection1, {
                    framebufferWidth: width,
                    framebufferHeight: height,
                    skipPrivateSkins: snapshotRequested
                });
                // draw right eye
                gl.scissor(width / 2, 0, width / 2, height);
                this._drawThese(this._drawList, ShaderManager.DRAW_MODE.default, projection2, {
                    framebufferWidth: width,
                    framebufferHeight: height,
                    skipPrivateSkins: snapshotRequested
                });
                gl.disable(gl.SCISSOR_TEST);
            }

            if (snapshotRequested) {
                var snapshot = gl.canvas.toDataURL();
                this._snapshotCallbacks.forEach(function (cb) {
                    return cb(snapshot);
                });
                this._snapshotCallbacks = [];
                // We need to make sure to always render next frame so that private skins
                // that were skipped this frame will become visible again shortly.
                this.dirty = true;
            }
        }

        /**
         * Get the precise bounds for a Drawable.
         * @param {int} drawableID ID of Drawable to get bounds for.
         * @return {object} Bounds for a tight box around the Drawable.
         */

    }, {
        key: 'getBounds',
        value: function getBounds(drawableID) {
            var drawable = this._allDrawables[drawableID];
            // Tell the Drawable about its updated convex hull, if necessary.
            if (drawable.needsConvexHullPoints()) {
                var points = this._getConvexHullPointsForDrawable(drawableID);
                drawable.setConvexHullPoints(points);
            }
            var bounds = drawable.getFastBounds();
            // In debug mode, draw the bounds.
            if (this._debugCanvas) {
                var gl = this._gl;
                this._debugCanvas.width = gl.canvas.width;
                this._debugCanvas.height = gl.canvas.height;
                var context = this._debugCanvas.getContext('2d');
                context.drawImage(gl.canvas, 0, 0);
                context.strokeStyle = '#FF0000';
                var pr = window.devicePixelRatio;
                context.strokeRect(pr * (bounds.left + this._nativeSize[0] / 2), pr * (-bounds.top + this._nativeSize[1] / 2), pr * (bounds.right - bounds.left), pr * (-bounds.bottom + bounds.top));
            }
            return bounds;
        }

        /**
         * Get the precise bounds for a Drawable around the top slice.
         * Used for positioning speech bubbles more closely to the sprite.
         * @param {int} drawableID ID of Drawable to get bubble bounds for.
         * @return {object} Bounds for a tight box around the Drawable top slice.
         */

    }, {
        key: 'getBoundsForBubble',
        value: function getBoundsForBubble(drawableID) {
            var drawable = this._allDrawables[drawableID];
            // Tell the Drawable about its updated convex hull, if necessary.
            if (drawable.needsConvexHullPoints()) {
                var points = this._getConvexHullPointsForDrawable(drawableID);
                drawable.setConvexHullPoints(points);
            }
            var bounds = drawable.getBoundsForBubble();
            // In debug mode, draw the bounds.
            if (this._debugCanvas) {
                var gl = this._gl;
                this._debugCanvas.width = gl.canvas.width;
                this._debugCanvas.height = gl.canvas.height;
                var context = this._debugCanvas.getContext('2d');
                context.drawImage(gl.canvas, 0, 0);
                context.strokeStyle = '#FF0000';
                var pr = window.devicePixelRatio;
                context.strokeRect(pr * (bounds.left + this._nativeSize[0] / 2), pr * (-bounds.top + this._nativeSize[1] / 2), pr * (bounds.right - bounds.left), pr * (-bounds.bottom + bounds.top));
            }
            return bounds;
        }

        /**
         * Get the current skin (costume) size of a Drawable.
         * @param {int} drawableID The ID of the Drawable to measure.
         * @return {Array<number>} Skin size, width and height.
         */

    }, {
        key: 'getCurrentSkinSize',
        value: function getCurrentSkinSize(drawableID) {
            var drawable = this._allDrawables[drawableID];
            return this.getSkinSize(drawable.skin.id);
        }

        /**
         * Get the size of a skin by ID.
         * @param {int} skinID The ID of the Skin to measure.
         * @return {Array<number>} Skin size, width and height.
         */

    }, {
        key: 'getSkinSize',
        value: function getSkinSize(skinID) {
            var skin = this._allSkins[skinID];
            return skin.size;
        }

        /**
         * Get the rotation center of a skin by ID.
         * @param {int} skinID The ID of the Skin
         * @return {Array<number>} The rotationCenterX and rotationCenterY
         */

    }, {
        key: 'getSkinRotationCenter',
        value: function getSkinRotationCenter(skinID) {
            var skin = this._allSkins[skinID];
            return skin.calculateRotationCenter();
        }

        /**
         * Check if a particular Drawable is touching a particular color.
         * Unlike touching drawable, if the "tester" is invisble, we will still test.
         * @param {int} drawableID The ID of the Drawable to check.
         * @param {Array<int>} color3b Test if the Drawable is touching this color.
         * @param {Array<int>} [mask3b] Optionally mask the check to this part of Drawable.
         * @returns {boolean} True iff the Drawable is touching the color.
         */

    }, {
        key: 'isTouchingColor',
        value: function isTouchingColor(drawableID, color3b, mask3b) {
            var candidates = this._candidatesTouching(drawableID, this._visibleDrawList);

            var bounds = void 0;
            if (colorMatches(color3b, this._backgroundColor3b, 0)) {
                // If the color we're checking for is the background color, don't confine the check to
                // candidate drawables' bounds--since the background spans the entire stage, we must check
                // everything that lies inside the drawable.
                bounds = this._touchingBounds(drawableID);
                // e.g. empty costume, or off the stage
                if (bounds === null) return false;
            } else if (candidates.length === 0) {
                // If not checking for the background color, we can return early if there are no candidate drawables.
                return false;
            } else {
                bounds = this._candidatesBounds(candidates);
            }

            var maxPixelsForCPU = this._getMaxPixelsForCPU();

            var debugCanvasContext = this._debugCanvas && this._debugCanvas.getContext('2d');
            if (debugCanvasContext) {
                this._debugCanvas.width = bounds.width;
                this._debugCanvas.height = bounds.height;
            }

            // if there are just too many pixels to CPU render efficiently, we need to let readPixels happen
            if (bounds.width * bounds.height * (candidates.length + 1) >= maxPixelsForCPU) {
                this._isTouchingColorGpuStart(drawableID, candidates.map(function (_ref) {
                    var id = _ref.id;
                    return id;
                }).reverse(), bounds, color3b, mask3b);
            }

            var drawable = this._allDrawables[drawableID];
            var point = __isTouchingDrawablesPoint;
            var color = __touchingColor;
            var hasMask = Boolean(mask3b);

            drawable.updateCPURenderAttributes();

            // Masked drawable ignores ghost effect
            var effectMask = ~ShaderManager.EFFECT_INFO.ghost.mask;

            // Scratch Space - +y is top
            for (var y = bounds.bottom; y <= bounds.top; y++) {
                if (bounds.width * (y - bounds.bottom) * (candidates.length + 1) >= maxPixelsForCPU) {
                    return this._isTouchingColorGpuFin(bounds, color3b, y - bounds.bottom);
                }
                for (var x = bounds.left; x <= bounds.right; x++) {
                    point[1] = y;
                    point[0] = x;
                    // if we use a mask, check our sample color...
                    if (hasMask ? maskMatches(Drawable.sampleColor4b(point, drawable, color, effectMask), mask3b) : drawable.isTouching(point)) {
                        RenderWebGL.sampleColor3b(point, candidates, color);
                        if (debugCanvasContext) {
                            debugCanvasContext.fillStyle = 'rgb(' + color[0] + ',' + color[1] + ',' + color[2] + ')';
                            debugCanvasContext.fillRect(x - bounds.left, bounds.bottom - y, 1, 1);
                        }
                        // ...and the target color is drawn at this pixel
                        if (colorMatches(color, color3b, 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
    }, {
        key: '_getMaxPixelsForCPU',
        value: function _getMaxPixelsForCPU() {
            switch (this._useGpuMode) {
                case RenderWebGL.UseGpuModes.ForceCPU:
                    return Infinity;
                case RenderWebGL.UseGpuModes.ForceGPU:
                    return 0;
                case RenderWebGL.UseGpuModes.Automatic:
                default:
                    return __cpuTouchingColorPixelCount;
            }
        }
    }, {
        key: '_enterDrawBackground',
        value: function _enterDrawBackground() {
            var gl = this.gl;
            var currentShader = this._shaderManager.getShader(ShaderManager.DRAW_MODE.background, 0);
            gl.disable(gl.BLEND);
            gl.useProgram(currentShader.program);
            twgl.setBuffersAndAttributes(gl, currentShader, this._bufferInfo);
        }
    }, {
        key: '_exitDrawBackground',
        value: function _exitDrawBackground() {
            var gl = this.gl;
            gl.enable(gl.BLEND);
        }
    }, {
        key: '_isTouchingColorGpuStart',
        value: function _isTouchingColorGpuStart(drawableID, candidateIDs, bounds, color3b, mask3b) {
            this._doExitDrawRegion();

            var gl = this._gl;
            twgl.bindFramebufferInfo(gl, this._queryBufferInfo);

            // Limit size of viewport to the bounds around the target Drawable,
            // and create the projection matrix for the draw.
            gl.viewport(0, 0, bounds.width, bounds.height);
            var projection = twgl.m4.ortho(bounds.left, bounds.right, bounds.top, bounds.bottom, -1, 1);

            // Clear the query buffer to fully transparent. This will be the color of pixels that fail the stencil test.
            gl.clearColor(0, 0, 0, 0);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);

            var extraUniforms = void 0;
            if (mask3b) {
                extraUniforms = {
                    u_colorMask: [mask3b[0] / 255, mask3b[1] / 255, mask3b[2] / 255],
                    u_colorMaskTolerance: MASK_TOUCHING_COLOR_TOLERANCE / 255
                };
            }

            try {
                // Using the stencil buffer, mask out the drawing to either the drawable's alpha channel
                // or pixels of the drawable which match the mask color, depending on whether a mask color is given.
                // Masked-out pixels will not be checked.
                gl.enable(gl.STENCIL_TEST);
                gl.stencilFunc(gl.ALWAYS, 1, 1);
                gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
                gl.colorMask(false, false, false, false);
                this._drawThese([drawableID], mask3b ? ShaderManager.DRAW_MODE.colorMask : ShaderManager.DRAW_MODE.silhouette, projection, {
                    extraUniforms: extraUniforms,
                    ignoreVisibility: true, // Touching color ignores sprite visibility,
                    effectMask: ~ShaderManager.EFFECT_INFO.ghost.mask
                });

                gl.stencilFunc(gl.EQUAL, 1, 1);
                gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
                gl.colorMask(true, true, true, true);

                // Draw the background as a quad. Drawing a background with gl.clear will not mask to the stenciled area.
                this.enterDrawRegion(this._backgroundDrawRegionId);

                var uniforms = {
                    u_backgroundColor: this._backgroundColor4f
                };

                var currentShader = this._shaderManager.getShader(ShaderManager.DRAW_MODE.background, 0);
                twgl.setUniforms(currentShader, uniforms);
                twgl.drawBufferInfo(gl, this._bufferInfo, gl.TRIANGLES);

                // Draw the candidate drawables on top of the background.
                this._drawThese(candidateIDs, ShaderManager.DRAW_MODE.default, projection, { idFilterFunc: function idFilterFunc(testID) {
                        return testID !== drawableID;
                    } });
            } finally {
                gl.colorMask(true, true, true, true);
                gl.disable(gl.STENCIL_TEST);
                this._doExitDrawRegion();
            }
        }
    }, {
        key: '_isTouchingColorGpuFin',
        value: function _isTouchingColorGpuFin(bounds, color3b, stop) {
            var gl = this._gl;
            var pixels = new Uint8Array(Math.floor(bounds.width * (bounds.height - stop) * 4));
            gl.readPixels(0, 0, bounds.width, bounds.height - stop, gl.RGBA, gl.UNSIGNED_BYTE, pixels);

            if (this._debugCanvas) {
                this._debugCanvas.width = bounds.width;
                this._debugCanvas.height = bounds.height;
                var context = this._debugCanvas.getContext('2d');
                var imageData = context.getImageData(0, 0, bounds.width, bounds.height - stop);
                imageData.data.set(pixels);
                context.putImageData(imageData, 0, 0);
            }

            for (var pixelBase = 0; pixelBase < pixels.length; pixelBase += 4) {
                // Transparent pixels are masked (either by the drawable's alpha channel or color mask).
                if (pixels[pixelBase + 3] !== 0 && colorMatches(color3b, pixels, pixelBase)) {
                    return true;
                }
            }

            return false;
        }

        /**
         * Check if a particular Drawable is touching any in a set of Drawables.
         * @param {int} drawableID The ID of the Drawable to check.
         * @param {?Array<int>} candidateIDs The Drawable IDs to check, otherwise all visible drawables in the renderer
         * @returns {boolean} True if the Drawable is touching one of candidateIDs.
         */

    }, {
        key: 'isTouchingDrawables',
        value: function isTouchingDrawables(drawableID) {
            var _this2 = this;

            var candidateIDs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._drawList;

            var candidates = this._candidatesTouching(drawableID,
            // even if passed an invisible drawable, we will NEVER touch it!
            candidateIDs.filter(function (id) {
                return _this2._allDrawables[id]._visible;
            }));
            // if we are invisble we don't touch anything.
            if (candidates.length === 0 || !this._allDrawables[drawableID]._visible) {
                return false;
            }

            // Get the union of all the candidates intersections.
            var bounds = this._candidatesBounds(candidates);

            var drawable = this._allDrawables[drawableID];
            var point = __isTouchingDrawablesPoint;

            drawable.updateCPURenderAttributes();

            // This is an EXTREMELY brute force collision detector, but it is
            // still faster than asking the GPU to give us the pixels.
            for (var x = bounds.left; x <= bounds.right; x++) {
                // Scratch Space - +y is top
                point[0] = x;
                for (var y = bounds.bottom; y <= bounds.top; y++) {
                    point[1] = y;
                    if (drawable.isTouching(point)) {
                        for (var index = 0; index < candidates.length; index++) {
                            if (candidates[index].drawable.isTouching(point)) {
                                return true;
                            }
                        }
                    }
                }
            }

            return false;
        }

        /**
         * Get the point where a particular Drawable is touching any in a set of Drawables.
         * @param {int} drawableID The ID of the Drawable to check.
         * @param {?Array<int>} candidateIDs The Drawable IDs to check, otherwise all visible drawables in the renderer
         * @returns {?Array<number>} [x, y] if found, null if not
         */

    }, {
        key: 'getTouchingDrawablesPoint',
        value: function getTouchingDrawablesPoint(drawableID) {
            var _this3 = this;

            var candidateIDs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._drawList;

            var candidates = this._candidatesTouching(drawableID,
            // even if passed an invisible drawable, we will NEVER touch it!
            candidateIDs.filter(function (id) {
                return _this3._allDrawables[id]._visible;
            }));
            // if we are invisble we don't touch anything.
            if (candidates.length === 0 || !this._allDrawables[drawableID]._visible) {
                return null;
            }

            // Get the union of all the candidates intersections.
            var bounds = this._candidatesBounds(candidates);

            var drawable = this._allDrawables[drawableID];
            var point = __isTouchingDrawablesPoint;

            drawable.updateCPURenderAttributes();

            // This is an EXTREMELY brute force collision detector, but it is
            // still faster than asking the GPU to give us the pixels.
            for (var x = bounds.left; x <= bounds.right; x++) {
                // Scratch Space - +y is top
                point[0] = x;
                for (var y = bounds.bottom; y <= bounds.top; y++) {
                    point[1] = y;
                    if (drawable.isTouching(point)) {
                        for (var index = 0; index < candidates.length; index++) {
                            if (candidates[index].drawable.isTouching(point)) {
                                return point;
                            }
                        }
                    }
                }
            }

            return null;
        }

        /**
         * Convert a client based x/y position on the canvas to a Scratch 3 world space
         * Rectangle.  This creates recangles with a radius to cover selecting multiple
         * scratch pixels with touch / small render areas.
         *
         * @param {int} centerX The client x coordinate of the picking location.
         * @param {int} centerY The client y coordinate of the picking location.
         * @param {int} [width] The client width of the touch event (optional).
         * @param {int} [height] The client width of the touch event (optional).
         * @returns {Rectangle} Scratch world space rectangle, iterate bottom <= top,
         *                      left <= right.
         */

    }, {
        key: 'clientSpaceToScratchBounds',
        value: function clientSpaceToScratchBounds(centerX, centerY) {
            var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

            var gl = this._gl;

            var clientToScratchX = this._nativeSize[0] / gl.canvas.clientWidth;
            var clientToScratchY = this._nativeSize[1] / gl.canvas.clientHeight;

            width *= clientToScratchX;
            height *= clientToScratchY;

            width = Math.max(1, Math.min(Math.round(width), MAX_TOUCH_SIZE[0]));
            height = Math.max(1, Math.min(Math.round(height), MAX_TOUCH_SIZE[1]));
            var x = centerX * clientToScratchX - (width - 1) / 2;
            // + because scratch y is inverted
            var y = centerY * clientToScratchY + (height - 1) / 2;

            var xOfs = width % 2 ? 0 : -0.5;
            // y is offset +0.5
            var yOfs = height % 2 ? 0 : -0.5;

            var bounds = new Rectangle();
            bounds.initFromBounds(Math.floor(this._xLeft + x + xOfs), Math.floor(this._xLeft + x + xOfs + width - 1), Math.ceil(this._yTop - y + yOfs), Math.ceil(this._yTop - y + yOfs + height - 1));
            return bounds;
        }

        /**
         * Determine if the drawable is touching a client based x/y.  Helper method for sensing
         * touching mouse-pointer.  Ignores visibility.
         *
         * @param {int} drawableID The ID of the drawable to check.
         * @param {int} centerX The client x coordinate of the picking location.
         * @param {int} centerY The client y coordinate of the picking location.
         * @param {int} [touchWidth] The client width of the touch event (optional).
         * @param {int} [touchHeight] The client height of the touch event (optional).
         * @returns {boolean} If the drawable has any pixels that would draw in the touch area
         */

    }, {
        key: 'drawableTouching',
        value: function drawableTouching(drawableID, centerX, centerY, touchWidth, touchHeight) {
            var drawable = this._allDrawables[drawableID];
            if (!drawable) {
                return false;
            }
            var bounds = this.clientSpaceToScratchBounds(centerX, centerY, touchWidth, touchHeight);

            var drawableBounds = drawable.getFastBounds();
            drawableBounds.snapToInt();
            if (!drawableBounds.intersects(bounds)) {
                return false;
            }

            drawable.updateCPURenderAttributes();

            var worldPos = twgl.v3.create();
            for (worldPos[1] = bounds.bottom; worldPos[1] <= bounds.top; worldPos[1]++) {
                for (worldPos[0] = bounds.left; worldPos[0] <= bounds.right; worldPos[0]++) {
                    if (drawable.isTouching(worldPos)) {
                        return true;
                    }
                }
            }
            return false;
        }

        /**
         * Detect which sprite, if any, is at the given location.
         * This function will pick all drawables that are visible, unless specific
         * candidate drawable IDs are provided.  Used for determining what is clicked
         * or dragged.  Will not select hidden / ghosted sprites.
         *
         * @param {int} centerX The client x coordinate of the picking location.
         * @param {int} centerY The client y coordinate of the picking location.
         * @param {int} [touchWidth] The client width of the touch event (optional).
         * @param {int} [touchHeight] The client height of the touch event (optional).
         * @param {Array<int>} [candidateIDs] The Drawable IDs to pick from, otherwise all visible drawables.
         * @returns {int} The ID of the topmost Drawable under the picking location, or
         * RenderConstants.ID_NONE if there is no Drawable at that location.
         */

    }, {
        key: 'pick',
        value: function pick(centerX, centerY, touchWidth, touchHeight, candidateIDs) {
            var _this4 = this;

            var bounds = this.clientSpaceToScratchBounds(centerX, centerY, touchWidth, touchHeight);
            if (bounds.left === -Infinity || bounds.bottom === -Infinity) {
                return false;
            }

            candidateIDs = (candidateIDs || this._drawList).filter(function (id) {
                var drawable = _this4._allDrawables[id];
                // default pick list ignores visible and ghosted sprites.
                if (drawable.getVisible() && drawable.getUniforms().u_ghost !== 0) {
                    var drawableBounds = drawable.getFastBounds();
                    var inRange = bounds.intersects(drawableBounds);
                    if (!inRange) return false;
                    if (drawable.skin instanceof PenSkin) return false;

                    drawable.updateCPURenderAttributes();
                    return true;
                }
                return false;
            });
            if (candidateIDs.length === 0) {
                return false;
            }

            var hits = [];
            var worldPos = twgl.v3.create(0, 0, 0);
            // Iterate over the scratch pixels and check if any candidate can be
            // touched at that point.
            for (worldPos[1] = bounds.bottom; worldPos[1] <= bounds.top; worldPos[1]++) {
                for (worldPos[0] = bounds.left; worldPos[0] <= bounds.right; worldPos[0]++) {

                    // Check candidates in the reverse order they would have been
                    // drawn. This will determine what candiate's silhouette pixel
                    // would have been drawn at the point.
                    for (var d = candidateIDs.length - 1; d >= 0; d--) {
                        var id = candidateIDs[d];
                        var drawable = this._allDrawables[id];
                        if (drawable.isTouching(worldPos)) {
                            hits[id] = (hits[id] || 0) + 1;
                            break;
                        }
                    }
                }
            }

            // Bias toward selecting anything over nothing
            hits[RenderConstants.ID_NONE] = 0;

            var hit = RenderConstants.ID_NONE;
            for (var hitID in hits) {
                if (Object.prototype.hasOwnProperty.call(hits, hitID) && hits[hitID] > hits[hit]) {
                    hit = hitID;
                }
            }

            return Number(hit);
        }

        /**
         * @typedef DrawableExtraction
         * @property {ImageData} data Raw pixel data for the drawable
         * @property {number} x The x coordinate of the drawable's bounding box's top-left corner, in 'CSS pixels'
         * @property {number} y The y coordinate of the drawable's bounding box's top-left corner, in 'CSS pixels'
         * @property {number} width The drawable's bounding box width, in 'CSS pixels'
         * @property {number} height The drawable's bounding box height, in 'CSS pixels'
         */

        /**
         * Return a drawable's pixel data and bounds in screen space.
         * @param {int} drawableID The ID of the drawable to get pixel data for
         * @return {DrawableExtraction} Data about the picked drawable
         */

    }, {
        key: 'extractDrawableScreenSpace',
        value: function extractDrawableScreenSpace(drawableID) {
            var drawable = this._allDrawables[drawableID];
            if (!drawable) throw new Error('Could not extract drawable with ID ' + drawableID + '; it does not exist');

            this._doExitDrawRegion();

            var nativeCenterX = this._nativeSize[0] * 0.5;
            var nativeCenterY = this._nativeSize[1] * 0.5;

            var scratchBounds = drawable.getFastBounds();

            var canvas = this.canvas;
            // Ratio of the screen-space scale of the stage's canvas to the "native size" of the stage
            var scaleFactor = canvas.width / this._nativeSize[0];

            // Bounds of the extracted drawable, in "canvas pixel space"
            // (origin is 0, 0, destination is the canvas width, height).
            var canvasSpaceBounds = new Rectangle();
            canvasSpaceBounds.initFromBounds((scratchBounds.left + nativeCenterX) * scaleFactor, (scratchBounds.right + nativeCenterX) * scaleFactor,
            // in "canvas space", +y is down, but Rectangle methods assume bottom < top, so swap them
            (nativeCenterY - scratchBounds.top) * scaleFactor, (nativeCenterY - scratchBounds.bottom) * scaleFactor);
            canvasSpaceBounds.snapToInt();

            // undo the transformation to transform the bounds, snapped to "canvas-pixel space", back to "Scratch space"
            // We have to transform -> snap -> invert transform so that the "Scratch-space" bounds are snapped in
            // "canvas-pixel space".
            scratchBounds.initFromBounds(canvasSpaceBounds.left / scaleFactor - nativeCenterX, canvasSpaceBounds.right / scaleFactor - nativeCenterX, nativeCenterY - canvasSpaceBounds.top / scaleFactor, nativeCenterY - canvasSpaceBounds.bottom / scaleFactor);

            var gl = this._gl;

            // Set a reasonable max limit width and height for the bufferInfo bounds
            var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
            var clampedWidth = Math.min(MAX_EXTRACTED_DRAWABLE_DIMENSION, canvasSpaceBounds.width, maxTextureSize);
            var clampedHeight = Math.min(MAX_EXTRACTED_DRAWABLE_DIMENSION, canvasSpaceBounds.height, maxTextureSize);

            // Make a new bufferInfo since this._queryBufferInfo is limited to 480x360
            var bufferInfo = twgl.createFramebufferInfo(gl, [{ format: gl.RGBA }], clampedWidth, clampedHeight);

            try {
                twgl.bindFramebufferInfo(gl, bufferInfo);

                // Limit size of viewport to the bounds around the target Drawable,
                // and create the projection matrix for the draw.
                gl.viewport(0, 0, clampedWidth, clampedHeight);
                var projection = twgl.m4.ortho(scratchBounds.left, scratchBounds.right, scratchBounds.top, scratchBounds.bottom, -1, 1);

                gl.clearColor(0, 0, 0, 0);
                gl.clear(gl.COLOR_BUFFER_BIT);
                this._drawThese([drawableID], ShaderManager.DRAW_MODE.straightAlpha, projection, {
                    // Don't apply the ghost effect. TODO: is this an intentional design decision?
                    // gsa: i wonder how deathly it would be to remove this
                    // effectMask: ~ShaderManager.EFFECT_INFO.ghost.mask,
                    // We're doing this in screen-space, so the framebuffer dimensions should be those of the canvas in
                    // screen-space. This is used to ensure SVG skins are rendered at the proper resolution.
                    framebufferWidth: canvas.width,
                    framebufferHeight: canvas.height
                });

                var data = new Uint8Array(Math.floor(clampedWidth * clampedHeight * 4));
                gl.readPixels(0, 0, clampedWidth, clampedHeight, gl.RGBA, gl.UNSIGNED_BYTE, data);
                // readPixels can only read into a Uint8Array, but ImageData has to take a Uint8ClampedArray.
                // We can share the same underlying buffer between them to avoid having to copy any data.
                var imageData = new ImageData(new Uint8ClampedArray(data.buffer), clampedWidth, clampedHeight);

                // On high-DPI devices, the canvas' width (in canvas pixels) will be larger than its width in CSS pixels.
                // We want to return the CSS-space bounds,
                // so take into account the ratio between the canvas' pixel dimensions and its layout dimensions.
                // This is usually the same as 1 / window.devicePixelRatio, but if e.g. you zoom your browser window without
                // the canvas resizing, then it'll differ.
                var ratio = canvas.getBoundingClientRect().width / canvas.width;

                return {
                    imageData: imageData,
                    x: canvasSpaceBounds.left * ratio,
                    y: canvasSpaceBounds.bottom * ratio,
                    width: canvasSpaceBounds.width * ratio,
                    height: canvasSpaceBounds.height * ratio
                };
            } finally {
                gl.deleteFramebuffer(bufferInfo.framebuffer);
            }
        }

        /**
         * @typedef ColorExtraction
         * @property {Uint8Array} data Raw pixel data for the drawable
         * @property {int} width Drawable bounding box width
         * @property {int} height Drawable bounding box height
         * @property {object} color Color object with RGBA properties at picked location
         */

        /**
         * Return drawable pixel data and color at a given position
         * @param {int} x The client x coordinate of the picking location.
         * @param {int} y The client y coordinate of the picking location.
         * @param {int} radius The client radius to extract pixels with.
         * @return {?ColorExtraction} Data about the picked color
         */

    }, {
        key: 'extractColor',
        value: function extractColor(x, y, radius) {
            this._doExitDrawRegion();

            var scratchX = Math.round(this._nativeSize[0] * (x / this._gl.canvas.clientWidth - 0.5));
            var scratchY = Math.round(-this._nativeSize[1] * (y / this._gl.canvas.clientHeight - 0.5));

            var gl = this._gl;
            twgl.bindFramebufferInfo(gl, this._queryBufferInfo);

            var bounds = new Rectangle();
            bounds.initFromBounds(scratchX - radius, scratchX + radius, scratchY - radius, scratchY + radius);

            var pickX = scratchX - bounds.left;
            var pickY = bounds.top - scratchY;

            gl.viewport(0, 0, bounds.width, bounds.height);
            var projection = twgl.m4.ortho(bounds.left, bounds.right, bounds.top, bounds.bottom, -1, 1);

            gl.clearColor.apply(gl, _toConsumableArray(this._backgroundColor4f));
            gl.clear(gl.COLOR_BUFFER_BIT);
            this._drawThese(this._drawList, ShaderManager.DRAW_MODE.default, projection);

            var data = new Uint8Array(Math.floor(bounds.width * bounds.height * 4));
            gl.readPixels(0, 0, bounds.width, bounds.height, gl.RGBA, gl.UNSIGNED_BYTE, data);

            var pixelBase = Math.floor(4 * (pickY * bounds.width + pickX));
            var color = {
                r: data[pixelBase],
                g: data[pixelBase + 1],
                b: data[pixelBase + 2],
                a: data[pixelBase + 3]
            };

            if (this._debugCanvas) {
                this._debugCanvas.width = bounds.width;
                this._debugCanvas.height = bounds.height;
                var ctx = this._debugCanvas.getContext('2d');
                var imageData = ctx.createImageData(bounds.width, bounds.height);
                imageData.data.set(data);
                ctx.putImageData(imageData, 0, 0);
                ctx.strokeStyle = 'black';
                ctx.fillStyle = 'rgba(' + color.r + ', ' + color.g + ', ' + color.b + ', ' + color.a + ')';
                ctx.rect(pickX - 4, pickY - 4, 8, 8);
                ctx.fill();
                ctx.stroke();
            }

            return {
                data: data,
                width: bounds.width,
                height: bounds.height,
                color: color
            };
        }

        /**
         * Get the candidate bounding box for a touching query.
         * @param {int} drawableID ID for drawable of query.
         * @return {?Rectangle} Rectangle bounds for touching query, or null.
         */

    }, {
        key: '_touchingBounds',
        value: function _touchingBounds(drawableID) {
            var drawable = this._allDrawables[drawableID];

            /** @todo remove this once URL-based skin setting is removed. */
            if (!drawable.skin || !drawable.skin.getTexture([100, 100])) return null;

            var bounds = drawable.getFastBounds();

            // Limit queries to the stage size.
            if (!this.offscreenTouching) {
                bounds.clamp(this._xLeft, this._xRight, this._yBottom, this._yTop);
            }

            // Use integer coordinates for queries - weird things happen
            // when you provide float width/heights to gl.viewport and projection.
            bounds.snapToInt();

            if (bounds.width === 0 || bounds.height === 0) {
                // No space to query.
                return null;
            }
            return bounds;
        }
    }, {
        key: '_unsnappedTouchingBounds',
        value: function _unsnappedTouchingBounds(drawableID) {
            // _touchingBounds with the snapToint call removed.
            var drawable = this._allDrawables[drawableID];
            if (!drawable.skin || !drawable.skin.getTexture([100, 100])) return null;
            var bounds = drawable.getFastBounds();
            if (!this.offscreenTouching) {
                bounds.clamp(this._xLeft, this._xRight, this._yBottom, this._yTop);
            }
            if (bounds.width === 0 || bounds.height === 0) {
                return null;
            }
            return bounds;
        }

        /**
         * Filter a list of candidates for a touching query into only those that
         * could possibly intersect the given bounds.
         * @param {int} drawableID - ID for drawable of query.
         * @param {Array<int>} candidateIDs - Candidates for touching query.
         * @return {?Array< {id, drawable, intersection} >} Filtered candidates with useful data.
         */

    }, {
        key: '_candidatesTouching',
        value: function _candidatesTouching(drawableID, candidateIDs) {
            var bounds = this._touchingBounds(drawableID);
            var result = [];
            if (bounds === null) {
                return result;
            }
            // iterate through the drawables list BACKWARDS - we want the top most item to be the first we check
            for (var index = candidateIDs.length - 1; index >= 0; index--) {
                var id = candidateIDs[index];
                if (id !== drawableID) {
                    var drawable = this._allDrawables[id];
                    // Text bubbles aren't considered in "touching" queries
                    if (drawable.skin instanceof TextBubbleSkin) continue;
                    if (drawable.skin && drawable._visible) {
                        // If private skin access is disabled, do not allow projects to use touching blocks to guess the
                        // contents of a private skin.
                        if (!this.allowPrivateSkinAccess && drawable.skin.private) continue;

                        // Update the CPU position data
                        drawable.updateCPURenderAttributes();
                        var candidateBounds = drawable.getFastBounds();

                        // Push bounds out to integers. If a drawable extends out into half a pixel, that half-pixel still
                        // needs to be tested. Plus, in some areas we construct another rectangle from the union of these,
                        // and iterate over its pixels (width * height). Turns out that doesn't work so well when the
                        // width/height aren't integers.
                        candidateBounds.snapToInt();

                        if (bounds.intersects(candidateBounds)) {
                            result.push({
                                id: id,
                                drawable: drawable,
                                intersection: Rectangle.intersect(bounds, candidateBounds)
                            });
                        }
                    }
                }
            }
            return result;
        }

        /**
         * Helper to get the union bounds from a set of candidates returned from the above method
         * @private
         * @param {Array<object>} candidates info from _candidatesTouching
         * @return {Rectangle} the outer bounding box union
         */

    }, {
        key: '_candidatesBounds',
        value: function _candidatesBounds(candidates) {
            return candidates.reduce(function (memo, _ref2) {
                var intersection = _ref2.intersection;

                if (!memo) {
                    return intersection;
                }
                // store the union of the two rectangles in our static rectangle instance
                return Rectangle.union(memo, intersection, __candidatesBounds);
            }, null);
        }

        /**
         * Update a drawable's skin.
         * @param {number} drawableID The drawable's id.
         * @param {number} skinId The skin to update to.
         */

    }, {
        key: 'updateDrawableSkinId',
        value: function updateDrawableSkinId(drawableID, skinId) {
            var drawable = this._allDrawables[drawableID];
            // TODO: https://github.com/LLK/scratch-vm/issues/2288
            if (!drawable) return;
            drawable.skin = this._allSkins[skinId];
        }

        /**
         * Update a drawable's position.
         * @param {number} drawableID The drawable's id.
         * @param {Array.<number>} position The new position.
         */

    }, {
        key: 'updateDrawablePosition',
        value: function updateDrawablePosition(drawableID, position) {
            var drawable = this._allDrawables[drawableID];
            // TODO: https://github.com/LLK/scratch-vm/issues/2288
            if (!drawable) return;
            drawable.updatePosition(position);
        }

        /**
         * Update a drawable's direction.
         * @param {number} drawableID The drawable's id.
         * @param {number} direction A new direction.
         */

    }, {
        key: 'updateDrawableDirection',
        value: function updateDrawableDirection(drawableID, direction) {
            var drawable = this._allDrawables[drawableID];
            // TODO: https://github.com/LLK/scratch-vm/issues/2288
            if (!drawable) return;
            drawable.updateDirection(direction);
        }

        /**
         * Update a drawable's scale.
         * @param {number} drawableID The drawable's id.
         * @param {Array.<number>} scale A new scale.
         */

    }, {
        key: 'updateDrawableScale',
        value: function updateDrawableScale(drawableID, scale) {
            var drawable = this._allDrawables[drawableID];
            // TODO: https://github.com/LLK/scratch-vm/issues/2288
            if (!drawable) return;
            drawable.updateScale(scale);
        }

        /**
         * Update a drawable's direction and scale together.
         * @param {number} drawableID The drawable's id.
         * @param {number} direction A new direction.
         * @param {Array.<number>} scale A new scale.
         * @param {Array.<number>} translate A new translation.
         */

    }, {
        key: 'updateDrawableDirectionScale',
        value: function updateDrawableDirectionScale(drawableID, direction, scale, translate) {
            var drawable = this._allDrawables[drawableID];
            // TODO: https://github.com/LLK/scratch-vm/issues/2288
            if (!drawable) return;
            drawable.updateDirection(direction);
            drawable.updateScale(scale);
            if (translate) drawable.updateTransform(translate);
        }

        /**
         * Update a drawable's visibility.
         * @param {number} drawableID The drawable's id.
         * @param {boolean} visible Will the drawable be visible?
         */

    }, {
        key: 'updateDrawableVisible',
        value: function updateDrawableVisible(drawableID, visible) {
            var drawable = this._allDrawables[drawableID];
            // TODO: https://github.com/LLK/scratch-vm/issues/2288
            if (!drawable) return;
            drawable.updateVisible(visible);
        }

        /**
         * Update a drawable's visual effect.
         * @param {number} drawableID The drawable's id.
         * @param {string} effectName The effect to change.
         * @param {number} value A new effect value.
         */

    }, {
        key: 'updateDrawableEffect',
        value: function updateDrawableEffect(drawableID, effectName, value) {
            var drawable = this._allDrawables[drawableID];
            // TODO: https://github.com/LLK/scratch-vm/issues/2288
            if (!drawable) return;
            drawable.updateEffect(effectName, value);
        }

        /**
         * Update the position, direction, scale, or effect properties of this Drawable.
         * @deprecated Use specific updateDrawable* methods instead.
         * @param {int} drawableID The ID of the Drawable to update.
         * @param {object.<string,*>} properties The new property values to set.
         */

    }, {
        key: 'updateDrawableProperties',
        value: function updateDrawableProperties(drawableID, properties) {
            var drawable = this._allDrawables[drawableID];
            if (!drawable) {
                /**
                 * @todo(https://github.com/LLK/scratch-vm/issues/2288) fix whatever's wrong in the VM which causes this, then add a warning or throw here.
                 * Right now this happens so much on some projects that a warning or exception here can hang the browser.
                 */
                return;
            }
            if ('skinId' in properties) {
                this.updateDrawableSkinId(drawableID, properties.skinId);
            }
            drawable.updateProperties(properties);
        }

        /**
         * Update the position object's x & y members to keep the drawable fenced in view.
         * @param {int} drawableID - The ID of the Drawable to update.
         * @param {Array.<number, number>} position to be fenced - An array of type [x, y]
         * @return {Array.<number, number>} The fenced position as an array [x, y]
         */

    }, {
        key: 'getFencedPositionOfDrawable',
        value: function getFencedPositionOfDrawable(drawableID, position) {
            var x = position[0];
            var y = position[1];

            var drawable = this._allDrawables[drawableID];
            if (!drawable) {
                // @todo(https://github.com/LLK/scratch-vm/issues/2288) fix whatever's wrong in the VM which causes this, then add a warning or throw here.
                // Right now this happens so much on some projects that a warning or exception here can hang the browser.
                return [x, y];
            }

            var dx = x - drawable._position[0];
            var dy = y - drawable._position[1];
            var aabb = drawable._skin.getFenceBounds(drawable, __fenceBounds);
            var inset = Math.floor(Math.min(aabb.width, aabb.height) / 2);

            var sx = this._xRight - Math.min(FENCE_WIDTH, inset);
            if (aabb.right + dx < -sx) {
                x = Math.ceil(drawable._position[0] - (sx + aabb.right));
            } else if (aabb.left + dx > sx) {
                x = Math.floor(drawable._position[0] + (sx - aabb.left));
            }
            var sy = this._yTop - Math.min(FENCE_WIDTH, inset);
            if (aabb.top + dy < -sy) {
                y = Math.ceil(drawable._position[1] - (sy + aabb.top));
            } else if (aabb.bottom + dy > sy) {
                y = Math.floor(drawable._position[1] + (sy - aabb.bottom));
            }
            return [x, y];
        }

        /**
         * translate the pen points
         * @param {int} penSkinID - the unique ID of a Pen Skin.
         * @param {number} x - the X offset of the translation.
         * @param {number} y - the Y offset of the translation.
         * @param {number} scale - the scale of the translation.
         * @param {number} dir - the direction of the translation.
         */

    }, {
        key: 'penTranslate',
        value: function penTranslate(penSkinID, x, y, scale, dir) {
            this.dirty = true;
            var skin = /** @type {PenSkin} */this._allSkins[penSkinID];
            skin.updatePenPointOffset(x, y, scale, dir);
        }

        /**
         * Clear a pen layer.
         * @param {int} penSkinID - the unique ID of a Pen Skin.
         */

    }, {
        key: 'penClear',
        value: function penClear(penSkinID) {
            this.dirty = true;
            var skin = /** @type {PenSkin} */this._allSkins[penSkinID];
            skin.clear();
        }

        /**
         * Draw a point on a pen layer.
         * @param {int} penSkinID - the unique ID of a Pen Skin.
         * @param {PenAttributes} penAttributes - how the point should be drawn.
         * @param {number} x - the X coordinate of the point to draw.
         * @param {number} y - the Y coordinate of the point to draw.
         */

    }, {
        key: 'penPoint',
        value: function penPoint(penSkinID, penAttributes, x, y) {
            this.dirty = true;
            var skin = /** @type {PenSkin} */this._allSkins[penSkinID];
            skin.drawPoint(penAttributes, x, y);
        }

        /**
         * Draw a line on a pen layer.
         * @param {int} penSkinID - the unique ID of a Pen Skin.
         * @param {PenAttributes} penAttributes - how the line should be drawn.
         * @param {number} x0 - the X coordinate of the beginning of the line.
         * @param {number} y0 - the Y coordinate of the beginning of the line.
         * @param {number} x1 - the X coordinate of the end of the line.
         * @param {number} y1 - the Y coordinate of the end of the line.
         */

    }, {
        key: 'penLine',
        value: function penLine(penSkinID, penAttributes, x0, y0, x1, y1) {
            this.dirty = true;
            var skin = /** @type {PenSkin} */this._allSkins[penSkinID];
            skin.drawLine(penAttributes, x0, y0, x1, y1);
        }

        /**
         * Stamp a Drawable onto a pen layer.
         * @param {int} penSkinID - the unique ID of a Pen Skin.
         * @param {int} stampID - the unique ID of the Drawable to use as the stamp.
         */

    }, {
        key: 'penStamp',
        value: function penStamp(penSkinID, stampID) {
            this.dirty = true;
            var stampDrawable = this._allDrawables[stampID];
            if (!stampDrawable) {
                return;
            }

            // TW: The bounds will be snapped later
            var bounds = this._unsnappedTouchingBounds(stampID);
            if (!bounds) {
                return;
            }

            this._doExitDrawRegion();

            var skin = /** @type {PenSkin} */this._allSkins[penSkinID];

            var gl = this._gl;
            twgl.bindFramebufferInfo(gl, skin._framebuffer);

            // Limit size of viewport to the bounds around the stamp Drawable and create the projection matrix for the draw.
            // TW: We upscale the "stage space" to "screen space" and then snap the coordinates so that tiled projects
            // don't have seems between sprites.
            var quality = skin.renderQuality;
            bounds.left *= quality;
            bounds.right *= quality;
            bounds.top *= quality;
            bounds.bottom *= quality;
            bounds.snapToInt();
            gl.viewport(this._nativeSize[0] * 0.5 * quality + bounds.left, this._nativeSize[1] * 0.5 * quality - bounds.top, bounds.width, bounds.height);
            var projection = twgl.m4.ortho(
            // TW: We have to convert the snapped "screen-space" back to "stage-space" for rendering.
            bounds.left / quality, bounds.right / quality, bounds.top / quality, bounds.bottom / quality, -1, 1);

            // Draw the stamped sprite onto the PenSkin's framebuffer.
            this._drawThese([stampID], ShaderManager.DRAW_MODE.default, projection, {
                ignoreVisibility: true,
                framebufferWidth: this._nativeSize[0] * quality,
                framebufferHeight: this._nativeSize[1] * quality
            });
            skin._silhouetteDirty = true;
        }

        /* ******
         * Truly internal functions: these support the functions above.
         ********/

        /**
         * Build geometry (vertex and index) buffers.
         * @private
         */

    }, {
        key: '_createGeometry',
        value: function _createGeometry() {
            var quad = {
                a_position: {
                    numComponents: 2,
                    data: [-0.5, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, 0.5, 0.5]
                },
                a_texCoord: {
                    numComponents: 2,
                    data: [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1]
                }
            };
            this._bufferInfo = twgl.createBufferInfoFromArrays(this._gl, quad);
        }

        /**
         * Respond to a change in the "native" rendering size. The native size is used by buffers which are fixed in size
         * regardless of the size of the main render target. This includes the buffers used for queries such as picking and
         * color-touching. The fixed size allows (more) consistent behavior across devices and presentation modes.
         * @param {object} event - The change event.
         * @private
         */

    }, {
        key: 'onNativeSizeChanged',
        value: function onNativeSizeChanged(event) {
            this.dirty = true;

            var _event$newSize = _slicedToArray(event.newSize, 2),
                width = _event$newSize[0],
                height = _event$newSize[1];

            var gl = this._gl;
            var attachments = [{ format: gl.RGBA }, { format: gl.DEPTH_STENCIL }];

            if (!this._pickBufferInfo) {
                this._pickBufferInfo = twgl.createFramebufferInfo(gl, attachments, MAX_TOUCH_SIZE[0], MAX_TOUCH_SIZE[1]);
            }

            /** @todo should we create this on demand to save memory? */
            // A 480x360 32-bpp buffer is 675 KiB.
            if (this._queryBufferInfo) {
                twgl.resizeFramebufferInfo(gl, this._queryBufferInfo, attachments, width, height);
            } else {
                this._queryBufferInfo = twgl.createFramebufferInfo(gl, attachments, width, height);
            }
        }

        /**
         * Enter a draw region.
         *
         * A draw region is where multiple draw operations are performed with the
         * same GL state. WebGL performs poorly when it changes state like blend
         * mode. Marking a collection of state values as a "region" the renderer
         * can skip superfluous extra state calls when it is already in that
         * region. Since one region may be entered from within another a exit
         * handle can also be registered that is called when a new region is about
         * to be entered to restore a common inbetween state.
         *
         * @param {any} regionId - id of the region to enter
         * @param {function} enter - handle to call when first entering a region
         * @param {function} exit - handle to call when leaving a region
         */

    }, {
        key: 'enterDrawRegion',
        value: function enterDrawRegion(regionId) {
            var enter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : regionId.enter;
            var exit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : regionId.exit;

            if (this._regionId !== regionId) {
                this._doExitDrawRegion();
                this._regionId = regionId;
                enter();
                this._exitRegion = exit;
            }
        }

        /**
         * Forcefully exit the current region returning to a common inbetween GL
         * state.
         */

    }, {
        key: '_doExitDrawRegion',
        value: function _doExitDrawRegion() {
            if (this._exitRegion !== null) {
                this._exitRegion();
            }
            this._exitRegion = null;
            this._regionId = null;
        }

        /**
         * Draw a set of Drawables, by drawable ID
         * @param {Array<int>} drawables The Drawable IDs to draw, possibly this._drawList.
         * @param {ShaderManager.DRAW_MODE} drawMode Draw normally, silhouette, etc.
         * @param {module:twgl/m4.Mat4} projection The projection matrix to use.
         * @param {object} [opts] Options for drawing
         * @param {idFilterFunc} opts.filter An optional filter function.
         * @param {object.<string,*>} opts.extraUniforms Extra uniforms for the shaders.
         * @param {int} opts.effectMask Bitmask for effects to allow
         * @param {boolean} opts.ignoreVisibility Draw all, despite visibility (e.g. stamping, touching color)
         * @param {int} opts.framebufferWidth The width of the framebuffer being drawn onto. Defaults to "native" width
         * @param {int} opts.framebufferHeight The height of the framebuffer being drawn onto. Defaults to "native" height
         * @param {boolean} opts.skipPrivateSkins Do not draw private skins.
         * @private
         */

    }, {
        key: '_drawThese',
        value: function _drawThese(drawables, drawMode, projection) {
            var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};


            var gl = this._gl;
            var currentShader = null;

            var framebufferSpaceScaleDiffers = 'framebufferWidth' in opts && 'framebufferHeight' in opts && opts.framebufferWidth !== this._nativeSize[0] && opts.framebufferHeight !== this._nativeSize[1];

            var numDrawables = drawables.length;
            for (var drawableIndex = 0; drawableIndex < numDrawables; ++drawableIndex) {
                var drawableID = drawables[drawableIndex];

                // If we have a filter, check whether the ID fails
                if (opts.filter && !opts.filter(drawableID)) continue;

                var drawable = this._allDrawables[drawableID];
                /** @todo check if drawable is inside the viewport before anything else */

                // Hidden drawables (e.g., by a "hide" block) are not drawn unless
                // the ignoreVisibility flag is used (e.g. for stamping or touchingColor).
                if (!drawable.getVisible() && !opts.ignoreVisibility) continue;

                // drawableScale is the "framebuffer-pixel-space" scale of the drawable, as percentages of the drawable's
                // "native size" (so 100 = same as skin's "native size", 200 = twice "native size").
                // If the framebuffer dimensions are the same as the stage's "native" size, there's no need to calculate it.
                var drawableScale = framebufferSpaceScaleDiffers ? [drawable.scale[0] * opts.framebufferWidth / this._nativeSize[0], drawable.scale[1] * opts.framebufferHeight / this._nativeSize[1]] : drawable.scale;
                var drawableTransform = drawable.transform || [0, 0];

                // If the skin or texture isn't ready yet, skip it.
                if (!drawable.skin || !drawable.skin.getTexture(drawableScale, drawableTransform)) continue;

                // Skip private skins, if requested.
                if (opts.skipPrivateSkins && drawable.skin.private) continue;

                var uniforms = {};

                var effectBits = drawable.enabledEffects;
                effectBits &= Object.prototype.hasOwnProperty.call(opts, 'effectMask') ? opts.effectMask : effectBits;
                var newShader = this._shaderManager.getShader(drawMode, effectBits);

                // Manually perform region check. Do not create functions inside a
                // loop.
                if (this._regionId !== newShader) {
                    this._doExitDrawRegion();
                    this._regionId = newShader;

                    currentShader = newShader;
                    gl.useProgram(currentShader.program);
                    twgl.setBuffersAndAttributes(gl, currentShader, this._bufferInfo);
                    Object.assign(uniforms, {
                        u_projectionMatrix: projection
                    });
                }

                Object.assign(uniforms, drawable.skin.getUniforms(drawableScale), drawable.getUniforms());

                // Apply extra uniforms after the Drawable's, to allow overwriting.
                if (opts.extraUniforms) {
                    Object.assign(uniforms, opts.extraUniforms);
                }

                if (uniforms.u_skin) {
                    twgl.setTextureParameters(gl, uniforms.u_skin, {
                        minMag: drawable.skin.useNearest(drawableScale, drawable) ? gl.NEAREST : gl.LINEAR
                    });
                }

                twgl.setUniforms(currentShader, uniforms);
                twgl.drawBufferInfo(gl, this._bufferInfo, gl.TRIANGLES);
            }

            this._regionId = null;
        }

        /**
         * Get the convex hull points for a particular Drawable.
         * To do this, calculate it based on the drawable's Silhouette.
         * @param {int} drawableID The Drawable IDs calculate convex hull for.
         * @return {Array<Array<number>>} points Convex hull points, as [[x, y], ...]
         */

    }, {
        key: '_getConvexHullPointsForDrawable',
        value: function _getConvexHullPointsForDrawable(drawableID) {
            var drawable = this._allDrawables[drawableID];

            var _drawable$skin$size = _slicedToArray(drawable.skin.size, 2),
                width = _drawable$skin$size[0],
                height = _drawable$skin$size[1];
            // No points in the hull if invisible or size is 0.


            if (!drawable.getVisible() || width === 0 || height === 0) {
                return [];
            }

            drawable.updateCPURenderAttributes();

            /**
             * Return the determinant of two vectors, the vector from A to B and the vector from A to C.
             *
             * The determinant is useful in this case to know if AC is counter-clockwise from AB.
             * A positive value means that AC is counter-clockwise from AB. A negative value means AC is clockwise from AB.
             *
             * @param {Float32Array} A A 2d vector in space.
             * @param {Float32Array} B A 2d vector in space.
             * @param {Float32Array} C A 2d vector in space.
             * @return {number} Greater than 0 if counter clockwise, less than if clockwise, 0 if all points are on a line.
             */
            var determinant = function determinant(A, B, C) {
                // AB = B - A
                // AC = C - A
                // det (AB BC) = AB0 * AC1 - AB1 * AC0
                return (B[0] - A[0]) * (C[1] - A[1]) - (B[1] - A[1]) * (C[0] - A[0]);
            };

            // This algorithm for calculating the convex hull somewhat resembles the monotone chain algorithm.
            // The main difference is that instead of sorting the points by x-coordinate, and y-coordinate in case of ties,
            // it goes through them by y-coordinate in the outer loop and x-coordinate in the inner loop.
            // This gives us "left" and "right" hulls, whereas the monotone chain algorithm gives "top" and "bottom" hulls.
            // Adapted from https://github.com/LLK/scratch-flash/blob/dcbeeb59d44c3be911545dfe54d46a32404f8e69/src/scratch/ScratchCostume.as#L369-L413

            var leftHull = [];
            var rightHull = [];

            // While convex hull algorithms usually push and pop values from the list of hull points,
            // here, we keep indices for the "last" point in each array. Any points past these indices are ignored.
            // This is functionally equivalent to pushing and popping from a "stack" of hull points.
            var leftEndPointIndex = -1;
            var rightEndPointIndex = -1;

            var _pixelPos = twgl.v3.create();
            var _effectPos = twgl.v3.create();

            var currentPoint = void 0;

            // *Not* Scratch Space-- +y is bottom
            // Loop over all rows of pixels, starting at the top
            for (var y = 0; y < height; y++) {
                _pixelPos[1] = y / height;

                // We start at the leftmost point, then go rightwards until we hit an opaque pixel
                var x = 0;
                for (; x < width; x++) {
                    _pixelPos[0] = x / width;
                    EffectTransform.transformPoint(drawable, _pixelPos, _effectPos);
                    if (drawable.skin.isTouchingLinear(_effectPos)) {
                        currentPoint = [x, y];
                        break;
                    }
                }

                // If we managed to loop all the way through, there are no opaque pixels on this row. Go to the next one
                if (x >= width) {
                    continue;
                }

                // Because leftEndPointIndex is initialized to -1, this is skipped for the first two rows.
                // It runs only when there are enough points in the left hull to make at least one line.
                // If appending the current point to the left hull makes a counter-clockwise turn,
                // we want to append the current point. Otherwise, we decrement the index of the "last" hull point until the
                // current point makes a counter-clockwise turn.
                // This decrementing has the same effect as popping from the point list, but is hopefully faster.
                while (leftEndPointIndex > 0) {
                    if (determinant(leftHull[leftEndPointIndex], leftHull[leftEndPointIndex - 1], currentPoint) > 0) {
                        break;
                    } else {
                        // leftHull.pop();
                        --leftEndPointIndex;
                    }
                }

                // This has the same effect as pushing to the point list.
                // This "list head pointer" coding style leaves excess points dangling at the end of the list,
                // but that doesn't matter; we simply won't copy them over to the final hull.

                // leftHull.push(currentPoint);
                leftHull[++leftEndPointIndex] = currentPoint;

                // Now we repeat the process for the right side, looking leftwards for a pixel.
                for (x = width - 1; x >= 0; x--) {
                    _pixelPos[0] = x / width;
                    EffectTransform.transformPoint(drawable, _pixelPos, _effectPos);
                    if (drawable.skin.isTouchingLinear(_effectPos)) {
                        currentPoint = [x, y];
                        break;
                    }
                }

                // Because we're coming at this from the right, it goes clockwise this time.
                while (rightEndPointIndex > 0) {
                    if (determinant(rightHull[rightEndPointIndex], rightHull[rightEndPointIndex - 1], currentPoint) < 0) {
                        break;
                    } else {
                        --rightEndPointIndex;
                    }
                }

                rightHull[++rightEndPointIndex] = currentPoint;
            }

            // Start off "hullPoints" with the left hull points.
            var hullPoints = leftHull;
            // This is where we get rid of those dangling extra points.
            hullPoints.length = leftEndPointIndex + 1;
            // Add points from the right side in reverse order so all points are ordered clockwise.
            for (var j = rightEndPointIndex; j >= 0; --j) {
                hullPoints.push(rightHull[j]);
            }

            // Simplify boundary points using hull.js.
            // TODO: Remove this; this algorithm already generates convex hulls.
            return hull(hullPoints, Infinity);
        }

        /**
         * Sample a "final" color from an array of drawables at a given scratch space.
         * Will blend any alpha values with the drawables "below" it.
         * @param {twgl.v3} vec Scratch Vector Space to sample
         * @param {Array<Drawables>} drawables A list of drawables with the "top most"
         *              drawable at index 0
         * @param {Uint8ClampedArray} dst The color3b space to store the answer in.
         * @return {Uint8ClampedArray} The dst vector with everything blended down.
         */

    }, {
        key: 'requestSnapshot',


        /**
         * @callback RenderWebGL#snapshotCallback
         * @param {string} dataURI Data URI of the snapshot of the renderer
         */

        /**
         * @param {snapshotCallback} callback Function called in the next frame with the snapshot data
         */
        value: function requestSnapshot(callback) {
            this.dirty = true;
            this._snapshotCallbacks.push(callback);
        }
    }, {
        key: 'getBubbleDefaults',
        value: function getBubbleDefaults() {
            var bubble = new TextBubbleSkin();
            var props = bubble.getAllProps();
            bubble.dispose();
            return props;
        }
    }, {
        key: 'getPenDrawableId',
        value: function getPenDrawableId() {
            var _this5 = this;

            return this._allDrawables.findIndex(function (drawable) {
                return drawable._skin._id === _this5._penSkinId;
            });
        }

        /**
         * Update the list of custom fonts. These fonts will be added to the DOM.
         * SEURITY CONSIDERATIONS: It is the caller's responsibility to ensure that the @font-face
         * statements do not contain malicious styles.
         * @param {Record<string, string>} customFonts Maps full font families (with fallbacks) to @font-face statements.
         */

    }, {
        key: 'setCustomFonts',
        value: function setCustomFonts(customFonts) {
            this.customFonts = customFonts;
            var css = Object.values(customFonts).join('\n');

            if (css.length) {
                if (!this._customFontStyles) {
                    this._customFontStyles = document.createElement('style');
                    this._customFontStyles.className = 'renderer-custom-fonts';
                    document.head.appendChild(this._customFontStyles);
                }
                this._customFontStyles.textContent = css;
            } else if (this._customFontStyles) {
                this._customFontStyles.remove();
                this._customFontStyles = null;
            }
        }
    }, {
        key: 'gl',
        get: function get() {
            return this._gl;
        }

        /**
         * @returns {HTMLCanvasElement} the canvas of the WebGL rendering context associated with this renderer.
         */

    }, {
        key: 'canvas',
        get: function get() {
            return this._gl && this._gl.canvas;
        }
    }, {
        key: '_visibleDrawList',
        get: function get() {
            var _this6 = this;

            return this._drawList.filter(function (id) {
                return _this6._allDrawables[id]._visible;
            });
        }
    }], [{
        key: 'sampleColor3b',
        value: function sampleColor3b(vec, drawables, dst) {
            dst = dst || new Uint8ClampedArray(3);
            dst.fill(0);
            var blendAlpha = 1;
            for (var index = 0; blendAlpha !== 0 && index < drawables.length; index++) {
                /*
                if (left > vec[0] || right < vec[0] ||
                    bottom > vec[1] || top < vec[0]) {
                    continue;
                }
                */
                Drawable.sampleColor4b(vec, drawables[index].drawable, __blendColor);
                // Equivalent to gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)
                dst[0] += __blendColor[0] * blendAlpha;
                dst[1] += __blendColor[1] * blendAlpha;
                dst[2] += __blendColor[2] * blendAlpha;
                blendAlpha *= 1 - __blendColor[3] / 255;
            }
            // Backdrop could be transparent, so we need to go to the "clear color" of the
            // draw scene (white) as a fallback if everything was alpha
            dst[0] += blendAlpha * 255;
            dst[1] += blendAlpha * 255;
            dst[2] += blendAlpha * 255;
            return dst;
        }
    }]);

    return RenderWebGL;
}(EventEmitter);

// i want to know who added this XD

// :3


RenderWebGL.prototype.canHazPixels = RenderWebGL.prototype.extractDrawableScreenSpace;

/**
 * Values for setUseGPU()
 * @enum {string}
 */
RenderWebGL.UseGpuModes = {
    /**
     * Heuristically decide whether to use the GPU path, the CPU path, or a dynamic mixture of the two.
     */
    Automatic: 'Automatic',

    /**
     * Always use the GPU path.
     */
    ForceGPU: 'ForceGPU',

    /**
     * Always use the CPU path.
     */
    ForceCPU: 'ForceCPU'
};

/**
 * WebGL powerPreference used for future RenderWebGL instances.
 * The power preference of a renderer cannot be changed after instantiation.
 * @type {'default'|'high-performance'|'low-power'}
 */
RenderWebGL.powerPreference = 'default';

module.exports = RenderWebGL;

/***/ }),

/***/ "./src/SVGSkin.js":
/*!************************!*\
  !*** ./src/SVGSkin.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var twgl = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.js");

var Skin = __webpack_require__(/*! ./Skin */ "./src/Skin.js");

var _require = __webpack_require__(/*! scratch-svg-renderer */ "./node_modules/scratch-svg-renderer/src/index.js"),
    loadSvgString = _require.loadSvgString,
    serializeSvgToString = _require.serializeSvgToString;

var ShaderManager = __webpack_require__(/*! ./ShaderManager */ "./src/ShaderManager.js");

/**
 * All scaled renderings of the SVG are stored in an array. The 1.0 scale of
 * the SVG is stored at the 8th index. The smallest possible 1 / 256 scale
 * rendering is stored at the 0th index.
 * @const {number}
 */
var INDEX_OFFSET = 8;

var SVGSkin = function (_Skin) {
    _inherits(SVGSkin, _Skin);

    /**
     * Create a new SVG skin.
     * @param {!int} id - The ID for this Skin.
     * @param {!RenderWebGL} renderer - The renderer which will use this skin.
     * @constructor
     * @extends Skin
     */
    function SVGSkin(id, renderer) {
        _classCallCheck(this, SVGSkin);

        /** @type {HTMLImageElement} */
        var _this = _possibleConstructorReturn(this, (SVGSkin.__proto__ || Object.getPrototypeOf(SVGSkin)).call(this, id, renderer));

        _this._svgImage = document.createElement('img');

        /** @type {boolean} */
        _this._svgImageLoaded = false;

        /** @type {Array<number>} */
        _this._size = [0, 0];

        /** @type {Array<number>} */
        _this._transform = [0, 0];

        /** @type {HTMLCanvasElement} */
        _this._canvas = document.createElement('canvas');

        /** @type {CanvasRenderingContext2D} */
        _this._context = _this._canvas.getContext('2d');

        /** @type {Array<WebGLTexture>} */
        _this._scaledMIPs = [];

        /** @type {number} */
        _this._largestMIPScale = 0;

        /**
        * Ratio of the size of the SVG and the max size of the WebGL texture
        * @type {Number}
        */
        _this._maxTextureScale = 1;
        return _this;
    }

    /**
     * Dispose of this object. Do not use it after calling this method.
     */


    _createClass(SVGSkin, [{
        key: 'dispose',
        value: function dispose() {
            this.resetMIPs();
            _get(SVGSkin.prototype.__proto__ || Object.getPrototypeOf(SVGSkin.prototype), 'dispose', this).call(this);
        }

        /**
         * @return {Array<number>} the natural size, in Scratch units, of this skin.
         */

    }, {
        key: 'useNearest',
        value: function useNearest(scale, drawable) {
            // If the effect bits for mosaic, pixelate, whirl, or fisheye are set, use linear
            if ((drawable.enabledEffects & (ShaderManager.EFFECT_INFO.fisheye.mask | ShaderManager.EFFECT_INFO.whirl.mask | ShaderManager.EFFECT_INFO.pixelate.mask | ShaderManager.EFFECT_INFO.mosaic.mask)) !== 0) {
                return false;
            }

            // We can't use nearest neighbor unless we are a multiple of 90 rotation
            if (drawable._direction % 90 !== 0) {
                return false;
            }

            // Because SVG skins' bounding boxes are currently not pixel-aligned, the idea here is to hide blurriness
            // by using nearest-neighbor scaling if one screen-space pixel is "close enough" to one texture pixel.
            // If the scale of the skin is very close to 100 (0.99999 variance is okay I guess)
            // TODO: Make this check more precise. We should use nearest if there's less than one pixel's difference
            // between the screen-space and texture-space sizes of the skin. Mipmaps make this harder because there are
            // multiple textures (and hence multiple texture spaces) and we need to know which one to choose.
            if (Math.abs(scale[0]) > 99 && Math.abs(scale[0]) < 101 && Math.abs(scale[1]) > 99 && Math.abs(scale[1]) < 101) {
                return true;
            }
            return false;
        }

        /**
         * Create a MIP for a given scale.
         * @param {number} scale - The relative size of the MIP
         * @return {SVGMIP} An object that handles creating and updating SVG textures.
         */

    }, {
        key: 'createMIP',
        value: function createMIP(scale, transform) {
            var isLargestMIP = this._largestMIPScale < scale;
            // TW: Silhouette will lazily read image data from our <canvas>. However, this canvas is shared
            // between the Skin and Silhouette so changing it here can mess up Silhouette. To prevent that,
            // we will force the silhouette to synchronously read the image data before we mutate the
            // canvas, unless the new MIP is the largest MIP, in which case doing so is unnecessary as we
            // will update the silhouette later anyways.
            if (!isLargestMIP) {
                this._silhouette.unlazy();
            }

            if (!transform) transform = [0, 0];
            if (!transform[0]) transform = [0, 0];
            if (!transform[1]) transform = [0, 0];

            // we scale up transform because 100% is a 45 degree angle (half the image width)
            // we also add 1 to it so this adds size ratther then remove size
            var tx = transform[0] * 100 / 200 + 1;
            var ty = transform[1] * 100 / 200 + 1;

            var _size = _slicedToArray(this._size, 2),
                width = _size[0],
                height = _size[1];

            this._canvas.width = width * scale * tx;
            this._canvas.height = height * scale * ty;
            if (this._canvas.width <= 0 || this._canvas.height <= 0 ||
            // Even if the canvas at the current scale has a nonzero size, the image's dimensions are floored
            // pre-scaling; e.g. if an image has a width of 0.4 and is being rendered at 3x scale, the canvas will have
            // a width of 1, but the image's width will be rounded down to 0 on some browsers (Firefox) prior to being
            // drawn at that scale, resulting in an IndexSizeError if we attempt to draw it.
            this._svgImage.naturalWidth <= 0 || this._svgImage.naturalHeight <= 0) return _get(SVGSkin.prototype.__proto__ || Object.getPrototypeOf(SVGSkin.prototype), 'getTexture', this).call(this);
            this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);
            // console.log(transform);
            this._context.setTransform(scale, transform[0], transform[1], scale, 0, 0);
            this._context.drawImage(this._svgImage, 0, 0);

            // TW: Reading image data from <canvas> is very slow and causes animations to stutter,
            // so we just use the canvas directly instead.
            var textureData = this._canvas;

            var textureOptions = {
                auto: false,
                wrap: this._renderer.gl.CLAMP_TO_EDGE,
                src: textureData,
                premultiplyAlpha: true
            };

            var mip = twgl.createTexture(this._renderer.gl, textureOptions);

            // Check if this is the largest MIP created so far. Currently, silhouettes only get scaled up.
            if (isLargestMIP) {
                this._silhouette.update(textureData);
                this._largestMIPScale = scale;
            }

            return mip;
        }
    }, {
        key: 'updateSilhouette',
        value: function updateSilhouette() {
            var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [100, 100];

            // Ensure a silhouette exists.
            this.getTexture(scale);
            this._silhouette.unlazy();
        }

        /**
         * @param {Array<number>} scale - The scaling factors to be used, each in the [0,100] range.
         * @param {Array<number>} transform - The scaling factors to be used, each in the [0,100] range.
         * @return {WebGLTexture} The GL texture representation of this skin when drawing at the given scale.
         */

    }, {
        key: 'getTexture',
        value: function getTexture(scale, transform) {
            // sometimes transform has undefined passed into it
            if (!transform) transform = [0, 0];
            if (typeof transform[0] !== 'number') transform = [0, 0];
            if (typeof transform[1] !== 'number') transform = [0, 0];

            // The texture only ever gets uniform scale. Take the larger of the two axes.
            var scaleMax = scale ? Math.max(Math.abs(scale[0]), Math.abs(scale[1])) : 100;
            var requestedScale = Math.min(scaleMax / 100, this._maxTextureScale);

            // Math.ceil(Math.log2(scale)) means we use the "1x" texture at (0.5, 1] scale,
            // the "2x" texture at (1, 2] scale, the "4x" texture at (2, 4] scale, etc.
            // This means that one texture pixel will always be between 0.5x and 1x the size of one rendered pixel,
            // but never bigger than one rendered pixel--this prevents blurriness from blowing up the texture too much.
            var mipLevel = Math.max(Math.ceil(Math.log2(requestedScale)) + INDEX_OFFSET, 0);
            // Can't use bitwise stuff here because we need to handle negative exponents
            var mipScale = Math.pow(2, mipLevel - INDEX_OFFSET);

            // this was split into 2 if statements because its hard to read
            if (this._svgImageLoaded) {
                // if there is no scaled mip for this level
                // or the passed in transform doesnt equal the current transform
                if (!(this._scaledMIPs[mipLevel] && this.isTransformEqual(this._transform, transform))) {
                    this._scaledMIPs[mipLevel] = this.createMIP(mipScale, transform || [0, 0]);
                    this._transform = transform;
                }
            }

            return this._scaledMIPs[mipLevel] || _get(SVGSkin.prototype.__proto__ || Object.getPrototypeOf(SVGSkin.prototype), 'getTexture', this).call(this);
        }

        /**
         * Checks the values of both transform arrays instead of the entire array.
         * This is because it causes some goofy bug if you check the entire array where they dont equal for some reason.
         * @param {Array<number>} transform 
         * @param {Array<number>} checkingTransform 
         */

    }, {
        key: 'isTransformEqual',
        value: function isTransformEqual(transform, checkingTransform) {
            if (!transform) return false;
            if (!checkingTransform) return false;
            var value = 0;
            if (transform[0] === checkingTransform[0]) value++;
            if (transform[1] === checkingTransform[1]) value++;
            return value === 2;
        }

        /**
         * Do a hard reset of the existing MIPs by deleting them.
         */

    }, {
        key: 'resetMIPs',
        value: function resetMIPs() {
            var _this2 = this;

            this._scaledMIPs.forEach(function (oldMIP) {
                return _this2._renderer.gl.deleteTexture(oldMIP);
            });
            this._scaledMIPs.length = 0;
            this._largestMIPScale = 0;
        }

        /**
         * Set the contents of this skin to a snapshot of the provided SVG data.
         * @param {string} svgData - new SVG to use.
         * @param {Array<number>} [rotationCenter] - Optional rotation center for the SVG. If not supplied, it will be
         * calculated from the bounding box
         * @fires Skin.event:WasAltered
         */

    }, {
        key: 'setSVG',
        value: function setSVG(svgData, rotationCenter) {
            var _this3 = this;

            var svgTag = loadSvgString(svgData);
            var svgText = serializeSvgToString(svgTag, this._renderer.customFonts);
            this._svgImageLoaded = false;

            var _svgTag$viewBox$baseV = svgTag.viewBox.baseVal,
                x = _svgTag$viewBox$baseV.x,
                y = _svgTag$viewBox$baseV.y,
                width = _svgTag$viewBox$baseV.width,
                height = _svgTag$viewBox$baseV.height;
            // While we're setting the size before the image is loaded, this doesn't cause the skin to appear with the wrong
            // size for a few frames while the new image is loading, because we don't emit the `WasAltered` event, telling
            // drawables using this skin to update, until the image is loaded.
            // We need to do this because the VM reads the skin's `size` directly after calling `setSVG`.
            // TODO: return a Promise so that the VM can read the skin's `size` after the image is loaded.

            this._size[0] = width;
            this._size[1] = height;

            // If there is another load already in progress, replace the old onload to effectively cancel the old load
            this._svgImage.onload = function () {
                if (width === 0 || height === 0) {
                    _get(SVGSkin.prototype.__proto__ || Object.getPrototypeOf(SVGSkin.prototype), 'setEmptyImageData', _this3).call(_this3);
                    return;
                }

                var maxDimension = Math.ceil(Math.max(width, height));
                var rendererMax = _this3._renderer.maxTextureDimension;
                var testScale = 2;
                for (testScale; maxDimension * testScale <= rendererMax; testScale *= 2) {
                    _this3._maxTextureScale = testScale;
                }

                _this3.resetMIPs();

                if (typeof rotationCenter === 'undefined') rotationCenter = _this3.calculateRotationCenter();
                // Compensate for viewbox offset.
                // See https://github.com/LLK/scratch-render/pull/90.
                _this3._rotationCenter[0] = rotationCenter[0] - x;
                _this3._rotationCenter[1] = rotationCenter[1] - y;

                _this3._svgImageLoaded = true;

                _this3.emitWasAltered();
            };

            this._svgImage.src = 'data:image/svg+xml;utf8,' + encodeURIComponent(svgText);
        }
    }, {
        key: 'size',
        get: function get() {
            return [this._size[0], this._size[1]];
        }
    }]);

    return SVGSkin;
}(Skin);

module.exports = SVGSkin;

/***/ }),

/***/ "./src/ShaderManager.js":
/*!******************************!*\
  !*** ./src/ShaderManager.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var twgl = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.js");

var clampNumber = function clampNumber(num, min, max) {
    return Math.max(Math.min(num, max), min);
};

var ShaderManager = function () {
    /**
     * @param {WebGLRenderingContext} gl WebGL rendering context to create shaders for
     * @constructor
     */
    function ShaderManager(gl) {
        _classCallCheck(this, ShaderManager);

        this._gl = gl;

        /**
         * The cache of all shaders compiled so far, filled on demand.
         * @type {Object<ShaderManager.DRAW_MODE, Array<ProgramInfo>>}
         * @private
         */
        this._shaderCache = {};
        for (var modeName in ShaderManager.DRAW_MODE) {
            if (Object.prototype.hasOwnProperty.call(ShaderManager.DRAW_MODE, modeName)) {
                this._shaderCache[modeName] = [];
            }
        }
    }

    /**
     * Fetch the shader for a particular set of active effects.
     * Build the shader if necessary.
     * @param {ShaderManager.DRAW_MODE} drawMode Draw normally, silhouette, etc.
     * @param {int} effectBits Bitmask representing the enabled effects.
     * @returns {ProgramInfo} The shader's program info.
     */


    _createClass(ShaderManager, [{
        key: 'getShader',
        value: function getShader(drawMode, effectBits) {
            var cache = this._shaderCache[drawMode];
            if (drawMode === ShaderManager.DRAW_MODE.silhouette) {
                // Silhouette mode isn't affected by these effects.
                effectBits &= ~(ShaderManager.EFFECT_INFO.color.mask | ShaderManager.EFFECT_INFO.brightness.mask);
            }
            var shader = cache[effectBits];
            if (!shader) {
                shader = cache[effectBits] = this._buildShader(drawMode, effectBits);
            }
            return shader;
        }

        /**
         * Build the shader for a particular set of active effects.
         * @param {ShaderManager.DRAW_MODE} drawMode Draw normally, silhouette, etc.
         * @param {int} effectBits Bitmask representing the enabled effects.
         * @returns {ProgramInfo} The new shader's program info.
         * @private
         */

    }, {
        key: '_buildShader',
        value: function _buildShader(drawMode, effectBits) {
            var numEffects = ShaderManager.EFFECTS.length;

            var defines = ['#define DRAW_MODE_' + drawMode];
            for (var index = 0; index < numEffects; ++index) {
                if ((effectBits & 1 << index) !== 0) {
                    defines.push('#define ENABLE_' + ShaderManager.EFFECTS[index]);
                }
            }

            var definesText = defines.join('\n') + '\n';

            /* eslint-disable global-require */
            var vsFullText = definesText + __webpack_require__(/*! raw-loader!./shaders/sprite.vert.glsl */ "./node_modules/raw-loader/index.js!./src/shaders/sprite.vert.glsl");
            var fsFullText = definesText + __webpack_require__(/*! raw-loader!./shaders/sprite.frag.glsl */ "./node_modules/raw-loader/index.js!./src/shaders/sprite.frag.glsl");
            /* eslint-enable global-require */

            return twgl.createProgramInfo(this._gl, [vsFullText, fsFullText]);
        }
    }]);

    return ShaderManager;
}();

/**
 * @typedef {object} ShaderManager.Effect
 * @prop {int} mask - The bit in 'effectBits' representing the effect.
 * @prop {function} converter - A conversion function which takes a Scratch value (generally in the range
 *   0..100 or -100..100) and maps it to a value useful to the shader. This
 *   mapping may not be reversible.
 * @prop {boolean} shapeChanges - Whether the effect could change the drawn shape.
 */

/**
 * Mapping of each effect name to info about that effect.
 * @enum {ShaderManager.Effect}
 */


ShaderManager.EFFECT_INFO = {
    /** Color effect */
    color: {
        uniformName: 'u_color',
        mask: 1 << 0,
        converter: function converter(x) {
            return x / 200 % 1;
        },
        shapeChanges: false
    },
    /** Fisheye effect */
    fisheye: {
        uniformName: 'u_fisheye',
        mask: 1 << 1,
        converter: function converter(x) {
            return Math.max(0, (x + 100) / 100);
        },
        shapeChanges: true
    },
    /** Whirl effect */
    whirl: {
        uniformName: 'u_whirl',
        mask: 1 << 2,
        converter: function converter(x) {
            return -x * Math.PI / 180;
        },
        shapeChanges: true
    },
    /** Pixelate effect */
    pixelate: {
        uniformName: 'u_pixelate',
        mask: 1 << 3,
        converter: function converter(x) {
            return Math.abs(x) / 10;
        },
        shapeChanges: true
    },
    /** Mosaic effect */
    mosaic: {
        uniformName: 'u_mosaic',
        mask: 1 << 4,
        converter: function converter(x) {
            x = Math.round((Math.abs(x) + 10) / 10);
            /** @todo cap by Math.min(srcWidth, srcHeight) */
            return Math.max(1, Math.min(x, 512));
        },
        shapeChanges: true
    },
    /** Brightness effect */
    brightness: {
        uniformName: 'u_brightness',
        mask: 1 << 5,
        converter: function converter(x) {
            return Math.max(-100, Math.min(x, 100)) / 100;
        },
        shapeChanges: false
    },
    /** Ghost effect */
    ghost: {
        uniformName: 'u_ghost',
        mask: 1 << 6,
        converter: function converter(x) {
            return 1 - Math.max(0, Math.min(x, 100)) / 100;
        },
        shapeChanges: false
    },
    /** Red effect */
    red: {
        uniformName: 'u_red',
        mask: 1 << 7,
        converter: function converter(x) {
            return clampNumber(x, -100, 100) / 100 * 4 + 1;
        },
        shapeChanges: false
    },
    /** Green effect */
    green: {
        uniformName: 'u_green',
        mask: 1 << 8,
        converter: function converter(x) {
            return clampNumber(x, -100, 100) / 100 * 4 + 1;
        },
        shapeChanges: false
    },
    /** Blue effect */
    blue: {
        uniformName: 'u_blue',
        mask: 1 << 9,
        converter: function converter(x) {
            return clampNumber(x, -100, 100) / 100 * 4 + 1;
        },
        shapeChanges: false
    },
    /** Opaque effect */
    opaque: {
        uniformName: 'u_opaque',
        mask: 1 << 10,
        converter: function converter(x) {
            return clampNumber(Math.ceil(x), 1, 100);
        },
        shapeChanges: false
    },
    /** Saturation effect */
    saturation: {
        uniformName: 'u_saturation',
        mask: 1 << 11,
        converter: function converter(x) {
            return x / 100 + 1;
        },
        shapeChanges: false
    },
    /** tintColor effect */
    tintColor: {
        uniformName: 'u_tintColor',
        mask: 1 << 12,
        converter: function converter(x) {
            return x - 1;
        },
        shapeChanges: false
    }
};

/**
 * The name of each supported effect.
 * @type {Array}
 */
ShaderManager.EFFECTS = Object.keys(ShaderManager.EFFECT_INFO);

/**
 * The available draw modes.
 * @readonly
 * @enum {string}
 */
ShaderManager.DRAW_MODE = {
    /**
     * Draw normally. Its output will use premultiplied alpha.
     */
    default: 'default',

    /**
     * Draw with non-premultiplied alpha. Useful for reading pixels from GL into an ImageData object.
     */
    straightAlpha: 'straightAlpha',

    /**
     * Draw a silhouette using a solid color.
     */
    silhouette: 'silhouette',

    /**
     * Draw only the parts of the drawable which match a particular color.
     */
    colorMask: 'colorMask',

    /**
     * Draw a line with caps.
     */
    line: 'line',

    /**
     * Draw the background in a certain color. Must sometimes be used instead of gl.clear.
     */
    background: 'background'
};

module.exports = ShaderManager;

/***/ }),

/***/ "./src/Silhouette.js":
/*!***************************!*\
  !*** ./src/Silhouette.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileoverview
 * A representation of a Skin's silhouette that can test if a point on the skin
 * renders a pixel where it is drawn.
 */

/**
 * <canvas> element used to update Silhouette data from skin bitmap data.
 * @type {CanvasElement}
 */
var __SilhouetteUpdateCanvas = void 0;

// Optimized Math.min and Math.max for integers;
// taken from https://web.archive.org/web/20190716181049/http://guihaire.com/code/?p=549
var intMin = function intMin(i, j) {
    return j ^ (i ^ j) & i - j >> 31;
};
var intMax = function intMax(i, j) {
    return i ^ (i ^ j) & i - j >> 31;
};

/**
 * Internal helper function (in hopes that compiler can inline).  Get a pixel
 * from silhouette data, or 0 if outside it's bounds.
 * @private
 * @param {Silhouette} silhouette - has data width and height
 * @param {number} x - x
 * @param {number} y - y
 * @return {number} Alpha value for x/y position
 */
var getPoint = function getPoint(_ref, x, y) {
    var width = _ref._width,
        height = _ref._height,
        data = _ref._colorData;

    // 0 if outside bounds, otherwise read from data.
    if (x >= width || y >= height || x < 0 || y < 0) {
        return 0;
    }
    return data[(y * width + x) * 4 + 3];
};

/**
 * Memory buffers for doing 4 corner sampling for linear interpolation
 */
var __cornerWork = [new Uint8ClampedArray(4), new Uint8ClampedArray(4), new Uint8ClampedArray(4), new Uint8ClampedArray(4)];

/**
 * Get the color from a given silhouette at an x/y local texture position.
 * Multiply color values by alpha for proper blending.
 * @param {Silhouette} $0 The silhouette to sample.
 * @param {number} x X position of texture [0, width).
 * @param {number} y Y position of texture [0, height).
 * @param {Uint8ClampedArray} dst A color 4b space.
 * @return {Uint8ClampedArray} The dst vector.
 */
var getColor4b = function getColor4b(_ref2, x, y, dst) {
    var width = _ref2._width,
        height = _ref2._height,
        data = _ref2._colorData;

    // Clamp coords to edge, matching GL_CLAMP_TO_EDGE.
    // (See github.com/LLK/scratch-render/blob/954cfff02b08069a082cbedd415c1fecd9b1e4fb/src/BitmapSkin.js#L88)
    x = intMax(0, intMin(x, width - 1));
    y = intMax(0, intMin(y, height - 1));

    // 0 if outside bounds, otherwise read from data.
    if (x >= width || y >= height || x < 0 || y < 0) {
        return dst.fill(0);
    }
    var offset = (y * width + x) * 4;
    // premultiply alpha
    var alpha = data[offset + 3] / 255;
    dst[0] = data[offset] * alpha;
    dst[1] = data[offset + 1] * alpha;
    dst[2] = data[offset + 2] * alpha;
    dst[3] = data[offset + 3];
    return dst;
};

/**
 * Get the color from a given silhouette at an x/y local texture position.
 * Do not multiply color values by alpha, as it has already been done.
 * @param {Silhouette} $0 The silhouette to sample.
 * @param {number} x X position of texture [0, width).
 * @param {number} y Y position of texture [0, height).
 * @param {Uint8ClampedArray} dst A color 4b space.
 * @return {Uint8ClampedArray} The dst vector.
 */
var getPremultipliedColor4b = function getPremultipliedColor4b(_ref3, x, y, dst) {
    var width = _ref3._width,
        height = _ref3._height,
        data = _ref3._colorData;

    // Clamp coords to edge, matching GL_CLAMP_TO_EDGE.
    x = intMax(0, intMin(x, width - 1));
    y = intMax(0, intMin(y, height - 1));

    var offset = (y * width + x) * 4;
    dst[0] = data[offset];
    dst[1] = data[offset + 1];
    dst[2] = data[offset + 2];
    dst[3] = data[offset + 3];
    return dst;
};

var Silhouette = function () {
    function Silhouette() {
        _classCallCheck(this, Silhouette);

        /**
         * The width of the data representing the current skin data.
         * @type {number}
         */
        this._width = 0;

        /**
         * The height of the data representing the current skin date.
         * @type {number}
         */
        this._height = 0;

        this._lazyData = null;

        /**
         * The data representing a skin's silhouette shape.
         * @type {Uint8ClampedArray}
         */
        this._colorData = null;

        // By default, silhouettes are assumed not to contain premultiplied image data,
        // so when we get a color, we want to multiply it by its alpha channel.
        // Point `_getColor` to the version of the function that multiplies.
        this._getColor = getColor4b;

        this.colorAtNearest = this.colorAtLinear = function (_, dst) {
            return dst.fill(0);
        };
    }

    /**
     * Update this silhouette with the bitmapData for a skin.
     * @param {ImageData|HTMLCanvasElement|HTMLImageElement} bitmapData An image, canvas or other element that the skin
     * @param {boolean} isPremultiplied True if the source bitmap data comes premultiplied (e.g. from readPixels).
     * rendering can be queried from.
     */


    _createClass(Silhouette, [{
        key: 'update',
        value: function update(bitmapData) {
            var isPremultiplied = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var imageData = void 0;
            if (bitmapData instanceof ImageData) {
                // If handed ImageData directly, use it directly.
                imageData = bitmapData;
                this._width = bitmapData.width;
                this._height = bitmapData.height;
                this._lazyData = null;
                this._colorData = imageData.data;
            } else {
                // TW: No reason to read the image data now, there's a high chance it won't be needed and will
                // just waste memory and CPU time. We'll read it lazily, only when necessary.
                this._width = bitmapData.width;
                this._height = bitmapData.height;
                if (!(this._width && this._height)) {
                    // TW: It might seem really weird to return here before updating anything else, but this is what
                    // LLK/scratch-render does.
                    return;
                }
                this._lazyData = bitmapData;
                this._colorData = null;
            }

            if (isPremultiplied) {
                this._getColor = getPremultipliedColor4b;
            } else {
                this._getColor = getColor4b;
            }

            // delete our custom overriden "uninitalized" color functions
            // let the prototype work for itself
            delete this.colorAtNearest;
            delete this.colorAtLinear;
        }
    }, {
        key: 'unlazy',
        value: function unlazy() {
            if (!this._lazyData) {
                return;
            }

            var width = this._lazyData.width;
            var height = this._lazyData.height;
            if (width && height) {
                var canvas = Silhouette._updateCanvas();
                canvas.width = width;
                canvas.height = height;
                var ctx = canvas.getContext('2d');

                ctx.clearRect(0, 0, width, height);
                ctx.drawImage(this._lazyData, 0, 0, width, height);
                var textureData = ctx.getImageData(0, 0, width, height);
                this._colorData = textureData.data;
            }

            this._lazyData = null;
        }

        /**
         * Sample a color from the silhouette at a given local position using
         * "nearest neighbor"
         * @param {twgl.v3} vec [x,y] texture space (0-1)
         * @param {Uint8ClampedArray} dst The memory buffer to store the value in. (4 bytes)
         * @returns {Uint8ClampedArray} dst
         */

    }, {
        key: 'colorAtNearest',
        value: function colorAtNearest(vec, dst) {
            return this._getColor(this, Math.floor(vec[0] * (this._width - 1)), Math.floor(vec[1] * (this._height - 1)), dst);
        }

        /**
         * Sample a color from the silhouette at a given local position using
         * "linear interpolation"
         * @param {twgl.v3} vec [x,y] texture space (0-1)
         * @param {Uint8ClampedArray} dst The memory buffer to store the value in. (4 bytes)
         * @returns {Uint8ClampedArray} dst
         */

    }, {
        key: 'colorAtLinear',
        value: function colorAtLinear(vec, dst) {
            var x = vec[0] * (this._width - 1);
            var y = vec[1] * (this._height - 1);

            var x1D = x % 1;
            var y1D = y % 1;
            var x0D = 1 - x1D;
            var y0D = 1 - y1D;

            var xFloor = Math.floor(x);
            var yFloor = Math.floor(y);

            var x0y0 = this._getColor(this, xFloor, yFloor, __cornerWork[0]);
            var x1y0 = this._getColor(this, xFloor + 1, yFloor, __cornerWork[1]);
            var x0y1 = this._getColor(this, xFloor, yFloor + 1, __cornerWork[2]);
            var x1y1 = this._getColor(this, xFloor + 1, yFloor + 1, __cornerWork[3]);

            dst[0] = x0y0[0] * x0D * y0D + x0y1[0] * x0D * y1D + x1y0[0] * x1D * y0D + x1y1[0] * x1D * y1D;
            dst[1] = x0y0[1] * x0D * y0D + x0y1[1] * x0D * y1D + x1y0[1] * x1D * y0D + x1y1[1] * x1D * y1D;
            dst[2] = x0y0[2] * x0D * y0D + x0y1[2] * x0D * y1D + x1y0[2] * x1D * y0D + x1y1[2] * x1D * y1D;
            dst[3] = x0y0[3] * x0D * y0D + x0y1[3] * x0D * y1D + x1y0[3] * x1D * y0D + x1y1[3] * x1D * y1D;

            return dst;
        }

        /**
         * Test if texture coordinate touches the silhouette using nearest neighbor.
         * @param {twgl.v3} vec A texture coordinate.
         * @return {boolean} If the nearest pixel has an alpha value.
         */

    }, {
        key: 'isTouchingNearest',
        value: function isTouchingNearest(vec) {
            if (!this._colorData) return;
            return getPoint(this, Math.floor(vec[0] * (this._width - 1)), Math.floor(vec[1] * (this._height - 1))) > 0;
        }

        /**
         * Test to see if any of the 4 pixels used in the linear interpolate touch
         * the silhouette.
         * @param {twgl.v3} vec A texture coordinate.
         * @return {boolean} Any of the pixels have some alpha.
         */

    }, {
        key: 'isTouchingLinear',
        value: function isTouchingLinear(vec) {
            if (!this._colorData) return;
            var x = Math.floor(vec[0] * (this._width - 1));
            var y = Math.floor(vec[1] * (this._height - 1));
            return getPoint(this, x, y) > 0 || getPoint(this, x + 1, y) > 0 || getPoint(this, x, y + 1) > 0 || getPoint(this, x + 1, y + 1) > 0;
        }

        /**
         * Get the canvas element reused by Silhouettes to update their data with.
         * @private
         * @return {CanvasElement} A canvas to draw bitmap data to.
         */

    }], [{
        key: '_updateCanvas',
        value: function _updateCanvas() {
            if (typeof __SilhouetteUpdateCanvas === 'undefined') {
                __SilhouetteUpdateCanvas = document.createElement('canvas');
            }
            return __SilhouetteUpdateCanvas;
        }
    }]);

    return Silhouette;
}();

module.exports = Silhouette;

/***/ }),

/***/ "./src/Skin.js":
/*!*********************!*\
  !*** ./src/Skin.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var twgl = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.js");

var RenderConstants = __webpack_require__(/*! ./RenderConstants */ "./src/RenderConstants.js");
var Silhouette = __webpack_require__(/*! ./Silhouette */ "./src/Silhouette.js");

var Skin = function () {
  /**
   * Create a Skin, which stores and/or generates textures for use in rendering.
   * @param {int} id - The unique ID for this Skin.
   * @param {RenderWebGL} renderer - The renderer which will use this skin.
   * @constructor
   */
  function Skin(id, renderer) {
    _classCallCheck(this, Skin);

    /** @type {RenderWebGL} */
    this._renderer = renderer;

    /** @type {int} */
    this._id = id;

    /** @type {Vec3} */
    this._rotationCenter = twgl.v3.create(0, 0);

    /** @type {WebGLTexture} */
    this._texture = null;

    /**
     * The uniforms to be used by the vertex and pixel shaders.
     * Some of these are used by other parts of the renderer as well.
     * @type {Object.<string,*>}
     * @private
     */
    this._uniforms = {
      /**
       * The nominal (not necessarily current) size of the current skin.
       * @type {Array<number>}
       */
      u_skinSize: [0, 0],

      /**
       * The actual WebGL texture object for the skin.
       * @type {WebGLTexture}
       */
      u_skin: null
    };

    /**
     * A silhouette to store touching data, skins are responsible for keeping it up to date.
     * @protected
     */
    this._silhouette = new Silhouette();

    /**
     * Whether this skin might include private information about the user.
     */
    this.private = false;
  }

  /**
   * Dispose of this object. Do not use it after calling this method.
   */


  _createClass(Skin, [{
    key: 'dispose',
    value: function dispose() {
      this._id = RenderConstants.ID_NONE;
    }

    /**
     * @return {int} the unique ID for this Skin.
     */

  }, {
    key: 'useNearest',


    /**
     * Should this skin's texture be filtered with nearest-neighbor or linear interpolation at the given scale?
     * @param {?Array<Number>} scale The screen-space X and Y scaling factors at which this skin's texture will be
     * displayed, as percentages (100 means 1 "native size" unit is 1 screen pixel; 200 means 2 screen pixels, etc).
     * @param {Drawable} drawable The drawable that this skin's texture will be applied to.
     * @return {boolean} True if this skin's texture, as returned by {@link getTexture}, should be filtered with
     * nearest-neighbor interpolation.
     */
    // eslint-disable-next-line no-unused-vars
    value: function useNearest(scale, drawable) {
      return true;
    }

    /**
     * Get the center of the current bounding box
     * @return {Array<number>} the center of the current bounding box
     */

  }, {
    key: 'calculateRotationCenter',
    value: function calculateRotationCenter() {
      return [this.size[0] / 2, this.size[1] / 2];
    }

    /**
     * @abstract
     * @param {Array<number>} scale - The scaling factors to be used.
     * @param {Array<number>} transform - The transform for this image.
     * @return {WebGLTexture} The GL texture representation of this skin when drawing at the given size.
     */
    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'getTexture',
    value: function getTexture(scale, transform) {
      return this._emptyImageTexture;
    }

    /**
     * Get the bounds of the drawable for determining its fenced position.
     * @param {Array<number>} drawable - The Drawable instance this skin is using.
     * @param {?Rectangle} result - Optional destination for bounds calculation.
     * @return {!Rectangle} The drawable's bounds. For compatibility with Scratch 2, we always use getAABB.
     */

  }, {
    key: 'getFenceBounds',
    value: function getFenceBounds(drawable, result) {
      return drawable.getAABB(result);
    }

    /**
     * Update and returns the uniforms for this skin.
     * @param {Array<number>} scale - The scaling factors to be used.
     * @returns {object.<string, *>} the shader uniforms to be used when rendering with this Skin.
     */

  }, {
    key: 'getUniforms',
    value: function getUniforms(scale) {
      this._uniforms.u_skin = this.getTexture(scale);
      this._uniforms.u_skinSize = this.size;
      return this._uniforms;
    }
  }, {
    key: 'emitWasAltered',
    value: function emitWasAltered() {
      this._renderer.skinWasAltered(this);
    }

    /**
     * If the skin defers silhouette operations until the last possible minute,
     * this will be called before isTouching uses the silhouette.
     */

  }, {
    key: 'updateSilhouette',
    value: function updateSilhouette() {
      this._silhouette.unlazy();
    }

    /**
     * Set this skin's texture to the given image.
     * @param {ImageData|HTMLCanvasElement} textureData - The canvas or image data to set the texture to.
     */

  }, {
    key: '_setTexture',
    value: function _setTexture(textureData) {
      var gl = this._renderer.gl;

      gl.bindTexture(gl.TEXTURE_2D, this._texture);
      // Premultiplied alpha is necessary for proper blending.
      // See http://www.realtimerendering.com/blog/gpus-prefer-premultiplication/
      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureData);
      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);

      this._silhouette.update(textureData);
    }

    /**
     * Set the contents of this skin to an empty skin.
     * @fires Skin.event:WasAltered
     */

  }, {
    key: 'setEmptyImageData',
    value: function setEmptyImageData() {
      // Free up the current reference to the _texture
      this._texture = null;

      if (!this._emptyImageData) {
        // Create a transparent pixel
        this._emptyImageData = new ImageData(1, 1);

        // Create a new texture and update the silhouette
        var gl = this._renderer.gl;

        var textureOptions = {
          auto: true,
          wrap: gl.CLAMP_TO_EDGE,
          src: this._emptyImageData
        };

        // Note: we're using _emptyImageTexture here instead of _texture
        // so that we can cache this empty texture for later use as needed.
        // this._texture can get modified by other skins (e.g. BitmapSkin
        // and SVGSkin, so we can't use that same field for caching)
        this._emptyImageTexture = twgl.createTexture(gl, textureOptions);
      }

      this._rotationCenter[0] = 0;
      this._rotationCenter[1] = 0;

      this._silhouette.update(this._emptyImageData);
      this.emitWasAltered();
    }

    /**
     * Does this point touch an opaque or translucent point on this skin?
     * Nearest Neighbor version
     * The caller is responsible for ensuring this skin's silhouette is up-to-date.
     * @see updateSilhouette
     * @see Drawable.updateCPURenderAttributes
     * @param {twgl.v3} vec A texture coordinate.
     * @return {boolean} Did it touch?
     */

  }, {
    key: 'isTouchingNearest',
    value: function isTouchingNearest(vec) {
      return this._silhouette.isTouchingNearest(vec);
    }

    /**
     * Does this point touch an opaque or translucent point on this skin?
     * Linear Interpolation version
     * The caller is responsible for ensuring this skin's silhouette is up-to-date.
     * @see updateSilhouette
     * @see Drawable.updateCPURenderAttributes
     * @param {twgl.v3} vec A texture coordinate.
     * @return {boolean} Did it touch?
     */

  }, {
    key: 'isTouchingLinear',
    value: function isTouchingLinear(vec) {
      return this._silhouette.isTouchingLinear(vec);
    }
  }, {
    key: 'id',
    get: function get() {
      return this._id;
    }

    /**
     * @returns {Vec3} the origin, in object space, about which this Skin should rotate.
     */

  }, {
    key: 'rotationCenter',
    get: function get() {
      return this._rotationCenter;
    }

    /**
     * @abstract
     * @return {Array<number>} the "native" size, in texels, of this skin.
     */

  }, {
    key: 'size',
    get: function get() {
      return [0, 0];
    }
  }]);

  return Skin;
}();

module.exports = Skin;

/***/ }),

/***/ "./src/TextBubbleSkin.js":
/*!*******************************!*\
  !*** ./src/TextBubbleSkin.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var twgl = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.js");

var CanvasMeasurementProvider = __webpack_require__(/*! ./util/canvas-measurement-provider */ "./src/util/canvas-measurement-provider.js");
var Skin = __webpack_require__(/*! ./Skin */ "./src/Skin.js");

var BubbleStyle = {
    MAX_LINE_WIDTH: 170, // Maximum width, in Scratch pixels, of a single line of text

    MIN_WIDTH: 50, // Minimum width, in Scratch pixels, of a text bubble
    STROKE_WIDTH: 4, // Thickness of the stroke around the bubble. Only half's visible because it's drawn under the fill
    PADDING: 10, // Padding around the text area
    CORNER_RADIUS: 16, // Radius of the rounded corners
    TAIL_HEIGHT: 12, // Height of the speech bubble's "tail". Probably should be a constant.

    FONT: 'Helvetica', // Font to render the text with
    FONT_SIZE: 14, // Font size, in Scratch pixels
    FONT_HEIGHT_RATIO: 0.9, // Height, in Scratch pixels, of the text, as a proportion of the font's size
    LINE_HEIGHT: 16, // Spacing between each line of text

    COLORS: {
        BUBBLE_FILL: 'white',
        BUBBLE_STROKE: 'rgba(0, 0, 0, 0.15)',
        TEXT_FILL: '#575E75'
    }
};

var MAX_SCALE = 10;

var TextBubbleSkin = function (_Skin) {
    _inherits(TextBubbleSkin, _Skin);

    /**
     * Create a new text bubble skin.
     * @param {!int} id - The ID for this Skin.
     * @param {!RenderWebGL} renderer - The renderer which will use this skin.
     * @constructor
     * @extends Skin
     */
    function TextBubbleSkin(id, renderer) {
        _classCallCheck(this, TextBubbleSkin);

        /** @type {HTMLCanvasElement} */
        var _this = _possibleConstructorReturn(this, (TextBubbleSkin.__proto__ || Object.getPrototypeOf(TextBubbleSkin)).call(this, id, renderer));

        _this._canvas = document.createElement('canvas');

        /** @type {Array<number>} */
        _this._size = [0, 0];

        /** @type {number} */
        _this._renderedScale = 0;

        /** @type {Array<string>} */
        _this._lines = [];

        /** @type {object} */
        _this._textAreaSize = { width: 0, height: 0 };

        /** @type {string} */
        _this._bubbleType = '';

        /** @type {boolean} */
        _this._pointsLeft = false;

        /** @type {boolean} */
        _this._textDirty = true;

        /** @type {boolean} */
        _this._textureDirty = true;

        _this.measurementProvider = new CanvasMeasurementProvider(_this._canvas.getContext('2d'));
        _this.textWrapper = renderer.createTextWrapper(_this.measurementProvider);
        _this._props = BubbleStyle;

        _this._restyleCanvas();
        return _this;
    }

    /**
     * Dispose of this object. Do not use it after calling this method.
     */


    _createClass(TextBubbleSkin, [{
        key: 'dispose',
        value: function dispose() {
            if (this._texture) {
                this._renderer.gl.deleteTexture(this._texture);
                this._texture = null;
            }
            this._canvas = null;
            _get(TextBubbleSkin.prototype.__proto__ || Object.getPrototypeOf(TextBubbleSkin.prototype), 'dispose', this).call(this);
        }

        /**
         * @return {Array<number>} the dimensions, in Scratch units, of this skin.
         */

    }, {
        key: 'setTextBubble',


        /**
         * Set parameters for this text bubble.
         * @param {!string} type - either "say" or "think".
         * @param {!string} text - the text for the bubble.
         * @param {!boolean} pointsLeft - which side the bubble is pointing.
         */
        value: function setTextBubble(type, text, pointsLeft, props) {
            this._text = text;
            this._bubbleType = type;
            this._pointsLeft = pointsLeft;
            if ((typeof props === 'undefined' ? 'undefined' : _typeof(props)) === 'object') this._props = props;

            this._textDirty = true;
            this._textureDirty = true;
            this.emitWasAltered();
        }

        /**
         * Re-style the canvas after resizing it. This is necessary to ensure proper text measurement.
         */

    }, {
        key: '_restyleCanvas',
        value: function _restyleCanvas() {
            this._canvas.getContext('2d').font = this._props.FONT_SIZE + 'px ' + this._props.FONT + ', sans-serif';
        }

        /**
         * Update the array of wrapped lines and the text dimensions.
         */

    }, {
        key: '_reflowLines',
        value: function _reflowLines() {
            var ctx = this._canvas.getContext('2d');
            this._lines = this.textWrapper.wrapText(this._props.MAX_LINE_WIDTH, this._text);

            // Measure width of longest line to avoid extra-wide bubbles
            var longestLineWidth = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this._lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var line = _step.value;

                    longestLineWidth = Math.max(longestLineWidth, this.measurementProvider.measureText(line));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this._props.LINE_HEIGHT = 1.23 * this._props.FONT_SIZE;

            // Calculate the canvas-space sizes of the padded text area and full text bubble
            var paddedWidth = Math.max(longestLineWidth, this._props.MIN_WIDTH) + this._props.PADDING * 2;
            var paddedHeight = this._props.LINE_HEIGHT * this._lines.length + this._props.PADDING * 2;

            this._textAreaSize.width = paddedWidth;
            this._textAreaSize.height = paddedHeight;

            this._size[0] = paddedWidth + this._props.STROKE_WIDTH;
            this._size[1] = paddedHeight + this._props.STROKE_WIDTH + this._props.TAIL_HEIGHT;

            this._textDirty = false;
        }

        /**
         * Render this text bubble at a certain scale, using the current parameters, to the canvas.
         * @param {number} scale The scale to render the bubble at
         */

    }, {
        key: '_renderTextBubble',
        value: function _renderTextBubble(scale) {
            var ctx = this._canvas.getContext('2d');

            if (this._textDirty) {
                this._reflowLines();
            }

            // Calculate the canvas-space sizes of the padded text area and full text bubble
            var paddedWidth = this._textAreaSize.width;
            var paddedHeight = this._textAreaSize.height;

            // Resize the canvas to the correct screen-space size
            this._canvas.width = Math.ceil(this._size[0] * scale);
            this._canvas.height = Math.ceil(this._size[1] * scale);
            this._restyleCanvas();

            // Reset the transform before clearing to ensure 100% clearage
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);

            ctx.scale(scale, scale);
            ctx.translate(this._props.STROKE_WIDTH * 0.5, this._props.STROKE_WIDTH * 0.5);

            // If the text bubble points leftward, flip the canvas
            ctx.save();
            if (this._pointsLeft) {
                ctx.scale(-1, 1);
                ctx.translate(-paddedWidth, 0);
            }

            // Draw the bubble's rounded borders
            ctx.beginPath();
            ctx.moveTo(this._props.CORNER_RADIUS, paddedHeight);
            ctx.arcTo(0, paddedHeight, 0, paddedHeight - this._props.CORNER_RADIUS, this._props.CORNER_RADIUS);
            ctx.arcTo(0, 0, paddedWidth, 0, this._props.CORNER_RADIUS);
            ctx.arcTo(paddedWidth, 0, paddedWidth, paddedHeight, this._props.CORNER_RADIUS);
            ctx.arcTo(paddedWidth, paddedHeight, paddedWidth - this._props.CORNER_RADIUS, paddedHeight, this._props.CORNER_RADIUS);

            // Translate the canvas so we don't have to do a bunch of width/height arithmetic
            ctx.save();
            ctx.translate(paddedWidth - this._props.CORNER_RADIUS, paddedHeight);

            // Draw the bubble's "tail"
            if (this._bubbleType === 'say') {
                // For a speech bubble, draw one swoopy thing
                ctx.bezierCurveTo(0, 4, 4, 8, 4, 10);
                ctx.arcTo(4, 12, 2, 12, 2);
                ctx.bezierCurveTo(-1, 12, -11, 8, -16, 0);

                ctx.closePath();
            } else {
                // For a thinking bubble, draw a partial circle attached to the bubble...
                ctx.arc(-16, 0, 4, 0, Math.PI);

                ctx.closePath();

                // and two circles detached from it
                ctx.moveTo(-7, 7.25);
                ctx.arc(-9.25, 7.25, 2.25, 0, Math.PI * 2);

                ctx.moveTo(0, 9.5);
                ctx.arc(-1.5, 9.5, 1.5, 0, Math.PI * 2);
            }

            // Un-translate the canvas and fill + stroke the text bubble
            ctx.restore();

            ctx.fillStyle = this._props.COLORS.BUBBLE_FILL;
            ctx.strokeStyle = this._props.COLORS.BUBBLE_STROKE;
            ctx.lineWidth = this._props.STROKE_WIDTH;

            ctx.stroke();
            ctx.fill();

            // Un-flip the canvas if it was flipped
            ctx.restore();

            // Draw each line of text
            ctx.fillStyle = this._props.COLORS.TEXT_FILL;
            ctx.font = this._props.FONT_SIZE + 'px ' + this._props.FONT + ', sans-serif';
            var lines = this._lines;
            for (var lineNumber = 0; lineNumber < lines.length; lineNumber++) {
                var line = lines[lineNumber];
                ctx.fillText(line, this._props.PADDING, this._props.PADDING + this._props.LINE_HEIGHT * lineNumber + this._props.FONT_HEIGHT_RATIO * this._props.FONT_SIZE);
            }

            this._renderedScale = scale;
        }
    }, {
        key: 'updateSilhouette',
        value: function updateSilhouette() {
            var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [100, 100];

            // Ensure a silhouette exists.
            this.getTexture(scale);
        }

        /**
         * @param {Array<number>} scale - The scaling factors to be used, each in the [0,100] range.
         * @return {WebGLTexture} The GL texture representation of this skin when drawing at the given scale.
         */

    }, {
        key: 'getTexture',
        value: function getTexture(scale) {
            // The texture only ever gets uniform scale. Take the larger of the two axes.
            var scaleMax = scale ? Math.max(Math.abs(scale[0]), Math.abs(scale[1])) : 100;
            var requestedScale = Math.min(MAX_SCALE, scaleMax / 100);

            // If we already rendered the text bubble at this scale, we can skip re-rendering it.
            if (this._textureDirty || this._renderedScale !== requestedScale) {
                this._renderTextBubble(requestedScale);
                this._textureDirty = false;

                var context = this._canvas.getContext('2d');
                var textureData = context.getImageData(0, 0, this._canvas.width, this._canvas.height);

                var gl = this._renderer.gl;

                if (this._texture === null) {
                    var textureOptions = {
                        auto: false,
                        wrap: gl.CLAMP_TO_EDGE
                    };

                    this._texture = twgl.createTexture(gl, textureOptions);
                }

                this._setTexture(textureData);
            }

            return this._texture;
        }
    }, {
        key: 'getAllProps',
        value: function getAllProps() {
            return BubbleStyle;
        }
    }, {
        key: 'size',
        get: function get() {
            if (this._textDirty) {
                this._reflowLines();
            }
            return this._size;
        }
    }]);

    return TextBubbleSkin;
}(Skin);

module.exports = TextBubbleSkin;

/***/ }),

/***/ "./src/TextCostumeSkin.js":
/*!********************************!*\
  !*** ./src/TextCostumeSkin.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var twgl = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.js");

var TextWrapper = __webpack_require__(/*! ./util/text-wrapper */ "./src/util/text-wrapper.js");
var CanvasMeasurementProvider = __webpack_require__(/*! ./util/canvas-measurement-provider */ "./src/util/canvas-measurement-provider.js");
var Skin = __webpack_require__(/*! ./Skin */ "./src/Skin.js");

var FontHeightRatio = 0.9; // Height, in Scratch pixels, of the text, as a proportion of the font's size

var TextCostumeSkin = function (_Skin) {
    _inherits(TextCostumeSkin, _Skin);

    /**
    * Create a new text costume skin.
    * @param {!int} id - The ID for this Skin.
    * @param {!RenderWebGL} renderer - The renderer which will use this skin.
    * @constructor
    * @extends Skin
    */
    function TextCostumeSkin(id, renderer) {
        _classCallCheck(this, TextCostumeSkin);

        /** @type {RenderWebGL} */
        var _this = _possibleConstructorReturn(this, (TextCostumeSkin.__proto__ || Object.getPrototypeOf(TextCostumeSkin)).call(this, id));

        _this._renderer = renderer;

        /** @type {HTMLCanvasElement} */
        _this._canvas = document.createElement('canvas');

        /** @type {WebGLTexture} */
        _this._texture = null;

        /** @type {Array<number>} */
        _this._size = [0, 0];

        /** @type {number} */
        _this._renderedScale = 0;

        /** @type {Array<string>} */
        _this._lines = [];

        /** @type {object} */
        _this._textAreaSize = {
            width: 0,
            height: 0
        };

        /** @type {boolean} */
        _this._textDirty = true;

        /** @type {boolean} */
        _this._textureDirty = true;
        _this.measurementProvider = new CanvasMeasurementProvider(_this._canvas.getContext('2d'));
        _this.textWrapper = new TextWrapper(_this.measurementProvider);
        _this.style = {};
        return _this;
    }

    /**
     * Dispose of this object. Do not use it after calling this method.
     */


    _createClass(TextCostumeSkin, [{
        key: 'dispose',
        value: function dispose() {
            if (this._texture) {
                this._renderer.gl.deleteTexture(this._texture);

                this._texture = null;
            }

            this._canvas = null;
            this.textWrapper = null;
            this.measurementProvider = null;
        }

        /**
         * @return {Array<number>} the dimensions, in Scratch units, of this skin.
         */

    }, {
        key: 'setTextAndStyle',
        value: function setTextAndStyle(textState) {
            this._text = textState.text;
            this.style.FONT = textState.font;
            this.style.COLOR = textState.color;
            this.style.MAX_LINE_WIDTH = textState.maxWidth;
            this.style.FONT_SIZE = textState.size;
            this.style.LINE_HEIGHT = textState.size + textState.size / 7;
            this.style.ALIGN = textState.align;
            this.style.STROKE_WIDTH = textState.strokeWidth;
            this.style.STROKE_COLOR = textState.strokeColor;
            this.style.VERTICAL_PADDING = textState.size / 7;
            this.style.RAINBOW = textState.rainbow;
            this.measurementProvider.setFontAndSize(this.style.FONT, this.style.FONT_SIZE);
            this._textDirty = true;
            this._textureDirty = true;
            this.emitWasAltered();
        }

        /**
         * Re-style the canvas after resizing it. This is necessary to ensure proper text measurement.
         */

    }, {
        key: '_restyleCanvas',
        value: function _restyleCanvas() {
            this._canvas.getContext('2d').font = this.style.FONT_SIZE + 'px ' + this.style.FONT + ', sans-serif';
        }

        /**
         * Update the array of wrapped lines and the text dimensions.
         */

    }, {
        key: '_reflowLines',
        value: function _reflowLines(scale) {
            var maxWidth = this.style.MAX_LINE_WIDTH; // Max width is in "native scratch units", convert to raw pixels

            // pm: these 2 lines seem to cause problems when scaling the sprite or entering fullscreen, they are now in timeout
            // maxWidth *= this._renderer.gl.canvas.width / this._renderer.getNativeSize()[0]; // Shrink the max width if the drawable is scaled up

            // maxWidth /= scale || 1;

            this._lines = this.textWrapper.wrapText(maxWidth, this._text, this.style.FONT_SIZE, this.style.FONT); // Calculate the canvas-space size of the text

            this._size[0] = maxWidth;
            this._size[1] = this.style.LINE_HEIGHT * this._lines.length + this.style.VERTICAL_PADDING * 2;

            if (this.style.STROKE_WIDTH > 0) {
                this._size[0] += this.style.STROKE_WIDTH * 2;
                this._size[1] += this.style.STROKE_WIDTH * 2;
            }

            this._textDirty = false;
        }
    }, {
        key: '_renderText',

        /**
         * Render this text text at a certain scale, using the current parameters, to the canvas.
         * @param {number} scale The scale to render the text at
         */
        value: function _renderText(scale) {
            var ctx = this._canvas.getContext('2d');

            if (this._textDirty) {
                this._reflowLines(scale);
            } // Resize the canvas to the correct screen-space size

            // console.log(this._size);
            this._canvas.width = Math.ceil(this._size[0] * scale);
            this._canvas.height = Math.ceil(this._size[1] * scale);

            this._restyleCanvas(); // Reset the transform before clearing to ensure 100% clearage

            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);
            ctx.scale(scale, scale);
            ctx.stroke();
            ctx.fill(); // Draw each line of text

            ctx.fillStyle = this.style.COLOR;
            ctx.font = ''.concat(this.style.FONT_SIZE, 'px ').concat(this.style.FONT, ', sans-serif');
            var lines = this._lines;

            for (var lineNumber = 0; lineNumber < lines.length; lineNumber++) {
                var line = lines[lineNumber];
                var lineWidth = this.measurementProvider.measureText(line);
                var xOffset = 0;
                if (this.style.ALIGN === 'center') xOffset = this._size[0] / 2 - lineWidth / 2;
                if (this.style.ALIGN === 'right') xOffset = this._size[0] - lineWidth;
                var yOffset = this.style.LINE_HEIGHT * lineNumber + FontHeightRatio * this.style.FONT_SIZE + this.style.VERTICAL_PADDING;

                if (this.style.STROKE_WIDTH > 0) {
                    yOffset += this.style.STROKE_WIDTH;
                    ctx.lineWidth = this.style.STROKE_WIDTH * 2;
                    ctx.strokeStyle = this.style.STROKE_COLOR;
                    ctx.strokeText(line, xOffset, yOffset);
                }

                if (this.style.RAINBOW) {
                    var gradient = ctx.createLinearGradient(xOffset, 0, xOffset + lineWidth, 0);
                    var stops = 12;

                    for (var i = 0; i < stops; i++) {
                        gradient.addColorStop(i / stops, 'hsl('.concat(360 * i / stops, ', 100%, 50%)'));
                    }

                    ctx.fillStyle = gradient;
                }

                ctx.fillText(line, xOffset, yOffset);
            }

            var center = [this._size[0] / 2, FontHeightRatio * this.style.FONT_SIZE]; // // Uncommenting these lines moves the text when alignment is changed
            // if (this.style.ALIGN === 'left') {
            //     center[0] = 0;
            // }
            // if (this.style.ALIGN === 'right') {
            //     center[0] = this._size[0];
            // }

            this._rotationCenter = center;
            this._renderedScale = scale;
        }

        /**
         * @param {Array<number>} scale - The scaling factors to be used, each in the [0,100] range.
         * @return {WebGLTexture} The GL texture representation of this skin when drawing at the given scale.
         */

    }, {
        key: 'getTexture',
        value: function getTexture(scale) {
            // The texture only ever gets uniform scale. Take the larger of the two axes.
            var scaleMax = scale ? Math.max(Math.abs(scale[0]), Math.abs(scale[1])) : 100;
            var requestedScale = scaleMax / 100; // If we already rendered the text at this scale, we can skip re-rendering it.

            var customConfig = this._renderer.customRenderConfig.textCostumeResolution;
            if (customConfig.fixed) {
                requestedScale = customConfig.value;
            } else if (customConfig.capped) {
                if (requestedScale > customConfig.value) {
                    requestedScale = customConfig.value;
                }
            }

            if (this._textureDirty || this._renderedScale !== requestedScale) {
                if (this._renderedScale !== requestedScale) this._textDirty = true;

                this._renderText(requestedScale);

                if (this._canvas.width === 0 || this._canvas.height === 0) return _get(TextCostumeSkin.prototype.__proto__ || Object.getPrototypeOf(TextCostumeSkin.prototype), 'getTexture', this).call(this);
                this._textureDirty = false;

                var context = this._canvas.getContext('2d');

                var textureData = context.getImageData(0, 0, this._canvas.width, this._canvas.height);
                var gl = this._renderer.gl;

                if (this._texture === null) {
                    var textureOptions = {
                        auto: false,
                        wrap: gl.CLAMP_TO_EDGE
                    };
                    this._texture = twgl.createTexture(gl, textureOptions);
                }

                this._setTexture(textureData);
            }

            return this._texture;
        }
    }, {
        key: 'width',
        get: function get() {
            var longestLineWidth = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this._lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var line = _step.value;

                    longestLineWidth = Math.max(longestLineWidth, this.measurementProvider.measureText(line));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return longestLineWidth;
        }
    }, {
        key: 'height',
        get: function get() {
            return this._size[1];
        }
    }, {
        key: 'size',
        get: function get() {
            if (this._textDirty) {
                this._reflowLines(this._renderedScale);
            }

            return this._size;
        }
    }, {
        key: 'maxScale',
        get: function get() {
            return 10; // = 1000% size maximum. Needed to override default clamping behavior when setting size
        }
    }]);

    return TextCostumeSkin;
}(Skin);

module.exports = TextCostumeSkin;

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var RenderWebGL = __webpack_require__(/*! ./RenderWebGL */ "./src/RenderWebGL.js");

/**
 * Export for NPM & Node.js
 * @type {RenderWebGL}
 */
module.exports = RenderWebGL;

/***/ }),

/***/ "./src/util/canvas-measurement-provider.js":
/*!*************************************************!*\
  !*** ./src/util/canvas-measurement-provider.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CanvasMeasurementProvider = function () {
    /**
     * @param {CanvasRenderingContext2D} ctx - provides a canvas rendering context
     * with 'font' set to the text style of the text to be wrapped.
     */
    function CanvasMeasurementProvider(ctx) {
        _classCallCheck(this, CanvasMeasurementProvider);

        this._ctx = ctx;
        this._cache = {};
    }

    // We don't need to set up or tear down anything here. Should these be removed altogether?

    /**
     * Called by the TextWrapper before a batch of zero or more calls to measureText().
     */


    _createClass(CanvasMeasurementProvider, [{
        key: "beginMeasurementSession",
        value: function beginMeasurementSession() {}

        /**
         * Called by the TextWrapper after a batch of zero or more calls to measureText().
         */

    }, {
        key: "endMeasurementSession",
        value: function endMeasurementSession() {}
    }, {
        key: "setFontAndSize",
        value: function setFontAndSize(font, size) {
            this._ctx.font = size + "px " + font + ", sans-serif";
            this._cache = {};
        }

        /**
         * Measure a whole string as one unit.
         * @param {string} text - the text to measure.
         * @returns {number} - the length of the string.
         */

    }, {
        key: "measureText",
        value: function measureText(text) {
            var cacheName = this._ctx.font + text;
            if (!this._cache[cacheName]) {
                this._cache[cacheName] = this._ctx.measureText(text).actualBoundingBoxRight;
            }
            return this._cache[cacheName];
        }
    }]);

    return CanvasMeasurementProvider;
}();

module.exports = CanvasMeasurementProvider;

/***/ }),

/***/ "./src/util/color-conversions.js":
/*!***************************************!*\
  !*** ./src/util/color-conversions.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
 * Converts an RGB color value to HSV. Conversion formula
 * adapted from http://lolengine.net/blog/2013/01/13/fast-rgb-to-hsv.
 * Assumes r, g, and b are in the range [0, 255] and
 * returns h, s, and v in the range [0, 1].
 *
 * @param   {Array<number>} rgb   The RGB color value
 * @param   {number}        rgb.r The red color value
 * @param   {number}        rgb.g The green color value
 * @param   {number}        rgb.b The blue color value
 * @param   {Array<number>} dst   The array to store the HSV values in
 * @return  {Array<number>}       The `dst` array passed in
 */
var rgbToHsv = function rgbToHsv(_ref, dst) {
    var _ref2 = _slicedToArray(_ref, 3),
        r = _ref2[0],
        g = _ref2[1],
        b = _ref2[2];

    var K = 0.0;

    r /= 255;
    g /= 255;
    b /= 255;
    var tmp = 0;

    if (g < b) {
        tmp = g;
        g = b;
        b = tmp;

        K = -1;
    }

    if (r < g) {
        tmp = r;
        r = g;
        g = tmp;

        K = -2 / 6 - K;
    }

    var chroma = r - Math.min(g, b);
    var h = Math.abs(K + (g - b) / (6 * chroma + Number.EPSILON));
    var s = chroma / (r + Number.EPSILON);
    var v = r;

    dst[0] = h;
    dst[1] = s;
    dst[2] = v;

    return dst;
};

/**
 * Converts an HSV color value to RGB. Conversion formula
 * adapted from https://gist.github.com/mjackson/5311256.
 * Assumes h, s, and v are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   {Array<number>}                hsv The HSV color value
 * @param   {number}                       hsv.h     The hue
 * @param   {number}                       hsv.s     The saturation
 * @param   {number}                       hsv.v     The value
 * @param   {Uint8Array|Uint8ClampedArray} dst The array to store the RGB values in
 * @return  {Uint8Array|Uint8ClampedArray}     The `dst` array passed in
 */
var hsvToRgb = function hsvToRgb(_ref3, dst) {
    var _ref4 = _slicedToArray(_ref3, 3),
        h = _ref4[0],
        s = _ref4[1],
        v = _ref4[2];

    if (s === 0) {
        dst[0] = dst[1] = dst[2] = v * 255 + 0.5;
        return dst;
    }

    // keep hue in [0,1) so the `switch(i)` below only needs 6 cases (0-5)
    h %= 1;
    var i = h * 6 | 0;
    var f = h * 6 - i;
    var p = v * (1 - s);
    var q = v * (1 - s * f);
    var t = v * (1 - s * (1 - f));

    var r = 0;
    var g = 0;
    var b = 0;

    switch (i) {
        case 0:
            r = v;g = t;b = p;break;
        case 1:
            r = q;g = v;b = p;break;
        case 2:
            r = p;g = v;b = t;break;
        case 3:
            r = p;g = q;b = v;break;
        case 4:
            r = t;g = p;b = v;break;
        case 5:
            r = v;g = p;b = q;break;
    }

    // Add 0.5 in order to round. Setting integer TypedArray elements implicitly floors.
    dst[0] = r * 255 + 0.5;
    dst[1] = g * 255 + 0.5;
    dst[2] = b * 255 + 0.5;
    return dst;
};

module.exports = { rgbToHsv: rgbToHsv, hsvToRgb: hsvToRgb };

/***/ }),

/***/ "./src/util/log.js":
/*!*************************!*\
  !*** ./src/util/log.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var minilog = __webpack_require__(/*! minilog */ "./node_modules/minilog/lib/web/index.js");
minilog.enable();

module.exports = minilog('scratch-render');

/***/ }),

/***/ "./src/util/text-wrapper.js":
/*!**********************************!*\
  !*** ./src/util/text-wrapper.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LineBreaker = __webpack_require__(/*! ify-loader!linebreak */ "./node_modules/ify-loader/index.js!./node_modules/linebreak/src/linebreaker.js");
var GraphemeBreaker = __webpack_require__(/*! ify-loader!grapheme-breaker */ "./node_modules/ify-loader/index.js!./node_modules/grapheme-breaker/src/GraphemeBreaker.js");

/**
 * Tell this text wrapper to use a specific measurement provider.
 * @typedef {object} MeasurementProvider - the new measurement provider.
 * @property {Function} beginMeasurementSession - this will be called before a batch of measurements are made.
 *      Optionally, this function may return an object to be provided to the endMeasurementSession function.
 * @property {Function} measureText - this will be called each time a piece of text must be measured.
 * @property {Function} endMeasurementSession - this will be called after a batch of measurements is finished.
 *      It will be passed whatever value beginMeasurementSession returned, if any.
 */

/**
 * Utility to wrap text across several lines, respecting Unicode grapheme clusters and, when possible, Unicode line
 * break opportunities.
 * Reference material:
 * - Unicode Standard Annex #14: http://unicode.org/reports/tr14/
 * - Unicode Standard Annex #29: http://unicode.org/reports/tr29/
 * - "JavaScript has a Unicode problem" by Mathias Bynens: https://mathiasbynens.be/notes/javascript-unicode
 */

var TextWrapper = function () {
    /**
     * Construct a text wrapper which will measure text using the specified measurement provider.
     * @param {MeasurementProvider} measurementProvider - a helper object to provide text measurement services.
     */
    function TextWrapper(measurementProvider) {
        _classCallCheck(this, TextWrapper);

        this._measurementProvider = measurementProvider;
        this._cache = {};
    }

    /**
     * Wrap the provided text into lines restricted to a maximum width. See Unicode Standard Annex (UAX) #14.
     * @param {number} maxWidth - the maximum allowed width of a line.
     * @param {string} text - the text to be wrapped. Will be split on whitespace.
     * @returns {Array.<string>} an array containing the wrapped lines of text.
     */


    _createClass(TextWrapper, [{
        key: 'wrapText',
        value: function wrapText(maxWidth, text) {
            // Normalize to canonical composition (see Unicode Standard Annex (UAX) #15)
            text = text.normalize();

            var cacheKey = maxWidth + '-' + text;
            if (this._cache[cacheKey]) {
                return this._cache[cacheKey];
            }

            var measurementSession = this._measurementProvider.beginMeasurementSession();

            var breaker = new LineBreaker(text);
            var lastPosition = 0;
            var nextBreak = void 0;
            var currentLine = null;
            var lines = [];

            while (nextBreak = breaker.nextBreak()) {
                var word = text.slice(lastPosition, nextBreak.position).replace(/\n+$/, '');

                var proposedLine = (currentLine || '').concat(word);
                var proposedLineWidth = this._measurementProvider.measureText(proposedLine);

                if (proposedLineWidth > maxWidth) {
                    // The next word won't fit on this line. Will it fit on a line by itself?
                    var wordWidth = this._measurementProvider.measureText(word);
                    if (wordWidth > maxWidth) {
                        // The next word can't even fit on a line by itself. Consume it one grapheme cluster at a time.
                        var lastCluster = 0;
                        var nextCluster = void 0;
                        while (lastCluster !== (nextCluster = GraphemeBreaker.nextBreak(word, lastCluster))) {
                            var cluster = word.substring(lastCluster, nextCluster);
                            proposedLine = (currentLine || '').concat(cluster);
                            proposedLineWidth = this._measurementProvider.measureText(proposedLine);
                            if (currentLine === null || proposedLineWidth <= maxWidth) {
                                // first cluster of a new line or the cluster fits
                                currentLine = proposedLine;
                            } else {
                                // no more can fit
                                lines.push(currentLine);
                                currentLine = cluster;
                            }
                            lastCluster = nextCluster;
                        }
                    } else {
                        // The next word can fit on the next line. Finish the current line and move on.
                        if (currentLine !== null) lines.push(currentLine);
                        currentLine = word;
                    }
                } else {
                    // The next word fits on this line. Just keep going.
                    currentLine = proposedLine;
                }

                // Did we find a \n or similar?
                if (nextBreak.required) {
                    if (currentLine !== null) lines.push(currentLine);
                    currentLine = null;
                }

                lastPosition = nextBreak.position;
            }

            currentLine = currentLine || '';
            if (currentLine.length > 0 || lines.length === 0) {
                lines.push(currentLine);
            }

            this._cache[cacheKey] = lines;
            this._measurementProvider.endMeasurementSession(measurementSession);
            return lines;
        }
    }]);

    return TextWrapper;
}();

module.exports = TextWrapper;

/***/ })

/******/ });
});
//# sourceMappingURL=scratch-render.min.js.map